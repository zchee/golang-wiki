{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the Go wiki, a collection of information about the Go Programming Language. Awesome Go is another great resource for Go programmers, curated by the Go community.</p> <p>If you can't find what you need on this page, see the list of all pages.</p>"},{"location":"#questions-about-go","title":"Questions about Go","text":"<p>See Questions.</p>"},{"location":"#contributing","title":"Contributing","text":"<ul> <li>If you would like to add a new page, please first open an issue in the Go issue tracker with the prefix <code>wiki:</code> to propose the addition. Clearly state why the content does not fit into any of the existing pages.</li> <li>Because renaming of pages in the wiki can break external links, please open an issue before renaming or removing any wiki page.</li> </ul> <p>See Contributing for more information on contributing.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Getting started with Go</li> <li>Working with Go</li> <li>Learning more about Go</li> <li>The Go Community</li> <li>Using the go toolchain</li> <li>Additional Go Programming Wikis</li> <li>Online Services that work with Go</li> <li>Troubleshooting Go Programs in Production</li> <li>Contributing to the Go Project</li> <li>Platform Specific Information</li> <li>Release Specific Information</li> <li>Questions</li> </ul>"},{"location":"#getting-started-with-go","title":"Getting started with Go","text":"<ul> <li>The Go Tour is the best place to start.</li> <li>Effective Go will help you learn how to write idiomatic Go code.</li> <li>Go standard library documentation to familiarize yourself with the standard library.</li> <li>Use the Go Playground to test out Go programs in your browser.</li> <li>Still not convinced? Check out this list of Go Users and a few of their Success stories. We've also assembled a long list of reasons why you should give Go a try.</li> <li>Read about the companies which have switched from other languages to Go.</li> </ul>"},{"location":"#working-with-go","title":"Working with Go","text":"<p>Ready to write some Go code of your own? Here are a few links to help you get started.</p> <ul> <li>Install and Setup your Environment</li> <li>Start here: Official Installation Documentation</li> <li>If you prefer to install from source, read this first.</li> <li>InstallFromSource - Additional tips on source installs.</li> <li>Windows user? Install and configure Go, Git, and Visual Studio Code for Windows</li> <li>Mac user? How I start - Go - A step-by-step guide to installing Go and building your first web service.</li> <li>Having installation problems? InstallTroubleshooting</li> <li>Make sure you have your $GOPATH environment variable set correctly<ul> <li>If you need additional tips on using $GOPATH, go here.</li> </ul> </li> <li>Go IDEs and Editors - Information on how to use your favorite editor with Go.</li> <li>Tools for working with Go code - Formatting, linting, vetting, refactoring, navigation, and visualization.</li> <li>Finding Go Libraries and Packages</li> <li>Start here: Go open source projects.</li> <li>Search for Go packages: pkg.go.dev</li> <li>Visualization of the Go open-source package graph</li> <li>Modules - documentation on the dependency management system built into the Go command, added in 1.11.</li> <li>Publishing Go Packages as Open Source</li> <li>Getting ready to publish your package? Start here.</li> <li>The Go Checklist - A comprehensive guide for publishing a project.</li> <li>Go Package, Go - A few recommendations for making Go packages easy to use.</li> </ul>"},{"location":"#learning-more-about-go","title":"Learning more about Go","text":"<p>Once you have an overview of the language, here are resources you can use to learn more.</p> <ul> <li>Learning Go - A collection of resources for learning Go - beginner to advanced.</li> <li>Best Practices for a New Go Developer - Insights from Go community members.</li> <li>Server programming - Building web, mobile, and API servers.</li> <li>More on concurrency</li> <li>More on error handling</li> <li>More on testing</li> <li>More on mobile - Android and iOS</li> <li>Books - A list of Go books that have been published (ebook, paper).</li> <li>Blogs - Blogs about Go.</li> <li>Podcasts - Podcasts and episodes featuring Go.</li> <li>Videos, Talks, and Presentations</li> <li>GoTalks - A collection of talks from Go conferences and meetups.</li> <li>Livestreams - live interactive Go project streams with members of the community.</li> <li>Screencasts</li> <li>Articles - A collection of articles to help you learn more about Go.</li> <li>Training - Free and commercial, online, and classroom training for Go.</li> <li>University Courses - A list of CS programs and classes using Go.</li> <li>Resources for non-English speakers</li> </ul>"},{"location":"#the-go-community","title":"The Go Community","text":"<p>Here are some of the places where you can find Gophers online. To get a sense of what it means to be a member of the Go community, read Damian Gryski's keynote from the GolangUK 2015 conference or watch Andrew Gerrand's closing keynote from GopherCon 2015.</p> <ul> <li>Where Gophers hangout online:</li> <li>The Go Forum - An all-purpose discussion forum for the Go community.</li> <li>Gophers Slack Channel - For real-time chat (request membership).</li> <li>Golang News - For curated links about Go Programming.</li> <li>There is also a /r/golang sub-reddit.</li> <li>On Mastodon, follow the @golang account and keep tabs on the #golang hashtag.</li> <li>On Twitter, follow the @golang account and keep tabs on the #golang hashtag.</li> <li>We've also got a landing page on Stack Overflow for Go Q&amp;A.</li> <li>Matrix enthusiasts are invited to join #Go:matrix.org.</li> <li>Discord users are welcome at the Discord Gophers server.</li> <li>Hashnode users talk and write about Go in Hashnode Go community.</li> <li>Mailing Lists</li> <li>The mailing list for Go users is golang-nuts - very high traffic.<ul> <li>Before you post, check to see if it's already been answered, then read these tips on how to ask a good question</li> </ul> </li> <li>For discussions about the core Go open source project, join golang-dev.</li> <li>To get just our release announcements, join golang-announce</li> <li>User Groups &amp; Meetups - There are Go Meetups in many cities</li> <li>GoBridge - Volunteers helping underrepresented communities to teach technical skills and to foster diversity in Go.</li> <li>Women Who Go</li> <li>See here for additional information GoUserGroups</li> <li>GoDiscourse - Go Discourse is an open-source Go-based forum from <code>hello world</code>.</li> <li>Conferences - A list of upcoming and past Go conferences and major events.</li> <li>Companies using Go - A comprehensive list of companies using Go throughout the world.</li> <li>Learn more about the Go Gopher images by Renee French.</li> </ul>"},{"location":"#using-the-go-toolchain","title":"Using the Go Toolchain","text":"<ul> <li>Start with the standard documentation for the <code>go</code> command available here</li> <li>Start here to learn about vendoring.</li> <li>Cross Compilation</li> <li>Shared libraries and Go (buildmode)</li> <li>Go Shared Libraries - Examples for creating and using shared libraries from Go and Python.</li> <li>Sharing Go Packages with C - by Svetlin Ralchev</li> <li>Calling Go libraries from Python - by Filippo Valsorda</li> <li>Calling Go libraries from Ruby - by Peter Hellberg</li> <li>Calling Go libraries from Swift - by Jaana Burcu Dogan</li> <li>gohttplib - An experiment in using Go 1.5 buildmode=c-shared.</li> <li>See the wikis below for additional details:</li> <li>GoGetTools</li> <li>GoGetProxyConfig</li> <li>cgo</li> <li>CompilerOptimizations</li> <li>GccgoCrossCompilation</li> <li>GcToolchainTricks</li> <li>GoGenerateTools</li> <li>Go Tooling Essentials - by Jaana Burcu Dogan</li> </ul>"},{"location":"#additional-go-programming-wikis","title":"Additional Go Programming Wikis","text":"<ul> <li>AI</li> <li> <p>AI - Accessing AI (Artificial Intelligence) and LLM (Large     Language Model) services from Go</p> </li> <li> <p>Concurrency</p> </li> <li>Timeouts - Abandon async calls that take too long</li> <li>LockOSThread</li> <li>MutexOrChannel - When to use one vs the other</li> <li>RaceDetector - How to detect and fix race conditions</li> <li>Working with Databases</li> <li>database/sql - Online tutorial for working with the database/sql package.</li> <li>SQLDrivers</li> <li>SQLInterface</li> <li>From other languages</li> <li>Go for Java Programmers</li> <li>Go for C++ Programmers</li> <li>Strings</li> <li>GoStrings</li> <li>String Matching</li> <li>Comments</li> <li>Errors</li> <li>GcToolchainTricks</li> <li>InterfaceSlice</li> <li>Iota</li> <li>MethodSets</li> <li>PanicAndRecover</li> <li>Range</li> <li>RateLimiting</li> <li>SignalHandling</li> <li>SimultaneousAssignment</li> <li>SliceTricks</li> <li>Switch</li> <li>TableDrivenTests</li> </ul>"},{"location":"#online-services-that-work-with-go","title":"Online Services that work with Go","text":"<p>If you're looking for services that support Go, here's a list to get you started.</p> <ul> <li>Cloud Computing - Go is well supported by most cloud service providers.</li> <li>Amazon Web Services</li> <li>Azure</li> <li>DigitalOcean</li> <li>Google Cloud Platform for Go</li> <li>Heroku</li> <li>OpenStack</li> <li>Vscale</li> <li>Aliyun</li> <li>Tencent</li> <li>See here for information on additional providers</li> <li>Continuous Integration and Continuous Deployment - Go is well supported by most CI/CD frameworks</li> <li>Monitoring/Logging</li> <li>OpsDash - Go-based cluster monitoring platform.</li> <li>Package and Dependency Management</li> <li>Gopkg.in is a source for stable Go libraries, provided by Gustavo Niemeyer.</li> </ul>"},{"location":"#troubleshooting-go-programs-in-production","title":"Troubleshooting Go Programs in Production","text":"<ul> <li>Understand the performance of your Go apps using the pprof package</li> <li>Heap Dumps</li> <li>heapdump13</li> <li>heapdump14</li> <li>heapdump15-through-heapdump17</li> </ul>"},{"location":"#contributing-to-the-go-project","title":"Contributing to the Go Project","text":"<ul> <li>Start by reading the Go Contribution Guidelines</li> <li>If you'd like to propose a change to the Go project, start by reading the Go Change Proposal Process</li> <li>An archive of design documents is also available</li> <li>Go releases happen at ~6-month intervals. See here for more information</li> <li>Want to know more about how the Go source X-repositories are structured?</li> <li>The Go project requires that all code be reviewed before it is submitted.</li> <li>Read more about our code review practices</li> <li>If you're commenting on code under review, please read these guidelines</li> <li>Issues</li> <li>Bug reports and feature requests should be filed using the GitHub issue tracker</li> <li>Want to understand how we handle issues that are reported?</li> <li>Project Dashboards</li> <li>Go Builds Dashboard info</li> <li>Performance Monitoring info</li> <li>Download failed logs and debugging</li> </ul>"},{"location":"#platform-specific-information","title":"Platform Specific Information","text":"<p>See MinimumRequirements for minimum platform requirements of current Go ports. Considering porting Go to a new platform? Read our porting policy first.</p> <ul> <li>ChromeOS</li> <li>Darwin</li> <li>DragonFly BSD</li> <li>FreeBSD</li> <li>Go on ARM</li> <li>Linux</li> <li>Ubuntu</li> <li>Mobile</li> <li>NetBSD</li> <li>OpenBSD</li> <li>Plan 9</li> <li>Solaris</li> <li>Windows</li> <li>WindowsBuild</li> <li>WindowsCrossCompiling</li> <li>WindowsDLLs</li> </ul> <p>Notes:</p> <ul> <li>Please refrain from changing the title of the wiki pages, as some of them might be linked to from golang.org or other websites</li> </ul>"},{"location":"AI/","title":"AI","text":"<p>A list of resources for accessing AI (Artificial Intelligence) services using Go, notably Large Language Models (LLM) and Machine Learning (ML) systems.</p>"},{"location":"AI/#what-kind-of-ai-applications-can-you-build-with-go","title":"What kind of AI applications can you build with Go?","text":"<p>Go is an excellent language for writing programs that use AI services. This includes programs that use LLM services for summarizing or classifying data, answering questions based on a database, or avoiding repetitive tasks. The services can be accessed on the Internet (hosted services), or run locally (downloaded services).</p> <p>For example, the program golang.org/x/cmd/vulndb/vulnreport uses AI to summarize vulnerability reports. When a member of Go's security team runs the program with a new vulnerability report, vulnreport contacts a generative AI service (in this case Google's generative AI service). It passes a prompt along with the original description of the vulnerability. The AI service will respond with a concise summary. The Go security team member can then refine that into the final human-readable report.</p>"},{"location":"AI/#how-do-i-find-go-packages-to-access-ai-services","title":"How do I find Go packages to access AI services?","text":"<p>This is a fast moving area of development, and these answers may change.</p> <p>If you have a specific service or services in mind, many service providers have their own Go packages.</p> <p>If you want to be flexible about services, use a general framework like langchaingo or Ollama.</p>"},{"location":"AI/#some-specific-services","title":"Some specific services","text":"<ul> <li>Google Generative AI:   github.com/google/generative-ai-go/genai.</li> <li>Examples</li> <li>Google Cloud Vertex AI:   cloud.google.com/go/vertexai/genai.</li> <li>Examples</li> </ul>"},{"location":"AI/#how-do-i-call-a-hosted-service-from-go","title":"How do I call a hosted service from Go?","text":"<p>It varies from service to service, but the basic steps are - create a client - assemble a message to send to the model   - the message will include a prompt that asks a question or tells     the service what to do   - the message can have different parts - send the message to the client - receive a reply</p> <p>Here is a complete small example using the Google AI service.</p>"},{"location":"AI/#how-do-i-call-a-downloaded-service-from-go","title":"How do I call a downloaded service from Go?","text":"<p>Ollama provides a good framework for using downloaded services. Ollama runs on the local machine but opens a port on the localhost to provide a REST API. At that point Ollama can be treated as a hosted service, but the actual AI computation will be done on the local machine.</p> <p>Here is a complete small example of using Ollama from Go.</p>"},{"location":"AI/#how-do-i-build-llm-powered-applications-in-go","title":"How do I build LLM-powered applications in Go?","text":"<p>To learn how to build an application with different LLM frameworks, take a look at how to build a RAG server using various LLM frameworks.</p>"},{"location":"AI/#how-do-i-manage-prompts-in-go","title":"How do I manage prompts in Go?","text":"<p>The message sent to an LLM service is referred to as a prompt. In many cases a program will have a general prompt that contains variables that are filled in based on user input. In Go a natural way to do this is to use the text/template package.</p>"},{"location":"AVX512/","title":"AVX512","text":"<p>Go 1.11 release introduces AVX-512 support. This page describes how to use new features as well as some important encoder details.</p>"},{"location":"AVX512/#terminology","title":"Terminology","text":"<p>Most terminology comes from Intel Software Developer's manual. Suffixes originate from Go assembler syntax, which is close to AT&amp;T, which also uses size suffixes.</p> <p>Some terms are listed to avoid ambiguity (for example, opcode can have different meanings).</p> Term Description Operand        Same as \"instruction argument\".      Opcode        Name that refers to instruction group. For example, <code>VADDPD</code> is an opcode.       It refers to both VEX and EVEX encoded forms and all operand combinations.       Most Go assembler opcodes for AVX-512 match Intel manual entries, with exceptions for cases       where additional size suffix is used (e.g. <code>VCVTTPD2DQY</code> is <code>VCVTTPD2DQ</code>).      Opcode suffix        Suffix that overrides some opcode properties. Listed after \".\" (dot).       For example, <code>VADDPD.Z</code> has \"Z\" opcode suffix.       There can be multiple dot-separated opcode suffixes.      Size suffix        Suffix that specifies instruction operand size if it can't be inferred from operands alone.       For example, <code>VCVTSS2USIL</code> has \"L\" size suffix.      Opmask        Used for both <code>{k1}</code> notation and to describe instructions that have <code>K</code> registers operands.       Related to masking support in EVEX prefix.      Register block        Multi-source operand that encodes register range.       Intel manual uses <code>+n</code> notation for register blocks.       For example, <code>+3</code> is a register block of 4 registers.      FP Floating-point"},{"location":"AVX512/#new-registers","title":"New registers","text":"<p>EVEX-enabled instructions can access additional 16 <code>X</code> (128-bit xmm) and <code>Y</code> (256-bit ymm) registers, plus 32 new <code>Z</code> (512-bit zmm) registers in 64-bit mode. 32-bit mode only gets <code>Z0-Z7</code>.</p> <p>New opmask registers are named <code>K0-K7</code>. They can be used for both masking and for special opmask instructions (like <code>KADDB</code>).</p>"},{"location":"AVX512/#masking-support","title":"Masking support","text":"<p>Instructions that support masking can omit <code>K</code> register operand. In this case, <code>K0</code> register is implied (\"all ones\") and merging-masking is performed. This is effectively \"no masking\".</p> <p><code>K1-K7</code> registers can be used to override default opmask. <code>K</code> register should be placed right before destination operand.</p> <p>Zeroing-masking can be activated with <code>Z</code> opcode suffix. Zeroing-masking requires that a mask register other than K0 be specified.</p> <p>For example, <code>VADDPD.Z (AX), Z30, K3, Z10</code> uses zeroing-masking and explicit <code>K</code> register. - If <code>Z</code> opcode suffix is removed, it's merging-masking with <code>K3</code> mask. - If <code>K3</code> operand is removed, it generates an assembler error. - If both <code>Z</code> opcode suffix and <code>K3</code> operand are removed, it is merging-masking with <code>K0</code> mask.</p> <p>It's compile-time error to use <code>K0</code> register for <code>{k1}</code> operands (consult manuals for details).</p>"},{"location":"AVX512/#evex-broadcastroundingsae-support","title":"EVEX broadcast/rounding/SAE support","text":"<p>Embedded broadcast, rounding and SAE activated through opcode suffixes.</p> <p>For reg-reg FP instructions with <code>{er}</code> enabled, rounding opcode suffix can be specified:</p> <ul> <li><code>RU_SAE</code> to round towards +Inf</li> <li><code>RD_SAE</code> to round towards -Inf</li> <li><code>RZ_SAE</code> to round towards zero</li> <li><code>RN_SAE</code> to round towards nearest</li> </ul> <p>To read more about rounding modes, see MXCSR.RC info.</p> <p>For reg-reg FP instructions with <code>{sae}</code> enabled, exception suppression can be specified with <code>SAE</code> opcode suffix.</p> <p>For reg-mem instrictons with <code>m32bcst/m64bcst</code> operand, broadcasting can be turned on with <code>BCST</code> opcode suffix.</p> <p>Zeroing opcode suffix can be combined with any of these. For example, <code>VMAXPD.SAE.Z Z3, Z2, Z1</code> uses both <code>Z</code> and <code>SAE</code> opcode suffixes. It is important to put zeroing opcode suffix last, otherwise it is a compilation error.</p>"},{"location":"AVX512/#register-block-multi-source-operands","title":"Register block (multi-source) operands","text":"<p>Register blocks are specified using register range syntax.</p> <p>It would be enough to specify just first (low) register, but Go assembler requires explicit range with both ends for readability reasons.</p> <p>For example, instructions with <code>+3</code> range can be used like <code>VP4DPWSSD Z25, [Z0-Z3], (AX)</code>. Range <code>[Z0-Z3]</code> reads like \"register block of Z0, Z1, Z2, Z3\". Invalid ranges result in compilation error.</p>"},{"location":"AVX512/#avx1-and-avx2-instructions-with-evex-prefix","title":"AVX1 and AVX2 instructions with EVEX prefix","text":"<p>Previously existed opcodes that can be encoded using EVEX prefix now can access AVX-512 features like wider register file, zeroing/merging masking, etc. For example, <code>VADDPD</code> can now use 512-bit vector registers.</p> <p>See encoder details for more info.</p>"},{"location":"AVX512/#supported-extensions","title":"Supported extensions","text":"<p>Best way to get up-to-date list of supported extensions is to do <code>ls -1</code> inside test suite directory.</p> <p>Latest list includes: <pre><code>aes_avx512f\navx512_4fmaps\navx512_4vnniw\navx512_bitalg\navx512_ifma\navx512_vbmi\navx512_vbmi2\navx512_vnni\navx512_vpopcntdq\navx512bw\navx512cd\navx512dq\navx512er\navx512f\navx512pf\ngfni_avx512f\nvpclmulqdq_avx512f\n</code></pre></p> <p>128-bit and 256-bit instructions additionally require <code>avx512vl</code>. That is, if <code>VADDPD</code> is available in <code>avx512f</code>, you can't use <code>X</code> and <code>Y</code> arguments without <code>avx512vl</code>.</p> <p>Filenames follow <code>GNU as</code> (gas) conventions. avx512extmap.csv can make naming scheme more apparent.</p>"},{"location":"AVX512/#instructions-with-size-suffix","title":"Instructions with size suffix","text":"<p>Some opcodes do not match Intel manual entries. This section is provided for search convenience.</p> Intel opcode Go assembler opcodes <code>VCVTPD2DQ</code> <code>VCVTPD2DQX</code>, <code>VCVTPD2DQY</code> <code>VCVTPD2PS</code> <code>VCVTPD2PSX</code>, <code>VCVTPD2PSY</code> <code>VCVTTPD2DQ</code> <code>VCVTTPD2DQX</code>, <code>VCVTTPD2DQY</code> <code>VCVTQQ2PS</code> <code>VCVTQQ2PSX</code>, <code>VCVTQQ2PSY</code> <code>VCVTUQQ2PS</code> <code>VCVTUQQ2PSX</code>, <code>VCVTUQQ2PSY</code> <code>VCVTPD2UDQ</code> <code>VCVTPD2UDQX</code>, <code>VCVTPD2UDQY</code> <code>VCVTTPD2UDQ</code> <code>VCVTTPD2UDQX</code>, <code>VCVTTPD2UDQY</code> <code>VFPCLASSPD</code> <code>VFPCLASSPDX</code>, <code>VFPCLASSPDY</code>, <code>VFPCLASSPDZ</code> <code>VFPCLASSPS</code> <code>VFPCLASSPSX</code>, <code>VFPCLASSPSY</code>, <code>VFPCLASSPSZ</code> <code>VCVTSD2SI</code> <code>VCVTSD2SI</code>, <code>VCVTSD2SIQ</code> <code>VCVTTSD2SI</code> <code>VCVTSD2SI</code>, <code>VCVTSD2SIQ</code> <code>VCVTTSS2SI</code> <code>VCVTSD2SI</code>, <code>VCVTSD2SIQ</code> <code>VCVTSS2SI</code> <code>VCVTSD2SI</code>, <code>VCVTSD2SIQ</code> <code>VCVTSD2USI</code> <code>VCVTSD2USIL</code>, <code>VCVTSD2USIQ</code> <code>VCVTSS2USI</code> <code>VCVTSS2USIL</code>, <code>VCVTSS2USIQ</code> <code>VCVTTSD2USI</code> <code>VCVTTSD2USIL</code>, <code>VCVTTSD2USIQ</code> <code>VCVTTSS2USI</code> <code>VCVTTSS2USIL</code>, <code>VCVTTSS2USIQ</code> <code>VCVTUSI2SD</code> <code>VCVTUSI2SDL</code>, <code>VCVTUSI2SDQ</code> <code>VCVTUSI2SS</code> <code>VCVTUSI2SSL</code>, <code>VCVTUSI2SSQ</code> <code>VCVTSI2SD</code> <code>VCVTSI2SDL</code>, <code>VCVTSI2SDQ</code> <code>VCVTSI2SS</code> <code>VCVTSI2SSL</code>, <code>VCVTSI2SSQ</code> <code>ANDN</code> <code>ANDNL</code>, <code>ANDNQ</code> <code>BEXTR</code> <code>BEXTRL</code>, <code>BEXTRQ</code> <code>BLSI</code> <code>BLSIL</code>, <code>BLSIQ</code> <code>BLSMSK</code> <code>BLSMSKL</code>, <code>BLSMSKQ</code> <code>BLSR</code> <code>BLSRL</code>, <code>BLSRQ</code> <code>BZHI</code> <code>BZHIL</code>, <code>BZHIQ</code> <code>MULX</code> <code>MULXL</code>, <code>MULXQ</code> <code>PDEP</code> <code>PDEPL</code>, <code>PDEPQ</code> <code>PEXT</code> <code>PEXTL</code>, <code>PEXTQ</code> <code>RORX</code> <code>RORXL</code>, <code>RORXQ</code> <code>SARX</code> <code>SARXL</code>, <code>SARXQ</code> <code>SHLX</code> <code>SHLXL</code>, <code>SHLXQ</code> <code>SHRX</code> <code>SHRXL</code>, <code>SHRXQ</code>"},{"location":"AVX512/#encoder-details","title":"Encoder details","text":"<p>Bitwise comparison with older encoder may fail for VEX-encoded instructions due to slightly different encoder tables order.</p> <p>This difference may arise for instructions with both <code>{reg, reg/mem}</code> and <code>{reg/mem, reg}</code> forms for reg-reg case. One of such instructions is <code>VMOVUPS</code>. </p> <p>This does not affect code behavior, nor makes it bigger/less efficient. New encoding selection scheme is borrowed from Intel XED.</p> <p>EVEX encoding is used when any of the following is true:</p> <ul> <li>Instruction uses new registers (High 16 <code>X</code>/<code>Y</code>, <code>Z</code> or <code>K</code> registers)</li> <li>Instruction uses EVEX-related opcode suffixes like <code>BCST</code></li> <li>Instruction uses operands combination that is only available for AVX-512</li> </ul> <p>In all other cases VEX encoding is used. This means that VEX is used whenever possible, and EVEX whenever required.</p> <p>Compressed disp8 is applied whenever possible for EVEX-encoded instructions. This also covers broadcasting disp8 which sometimes has different N multiplier.</p> <p>Experienced readers can inspect avx_optabs.go to learn about N multipliers for any instruction.</p> <p>For example, <code>VADDPD</code> has these: * <code>N=64</code> for 512-bit form; <code>N=8</code> when broadcasting * <code>N=32</code> for 256-bit form; <code>N=8</code> when broadcasting * <code>N=16</code> for 128-bit form; <code>N=8</code> when broadcasting</p>"},{"location":"AVX512/#examples","title":"Examples","text":"<p>Exhaustive amount of examples can be found in Go assembler test suite.</p> <p>Each file provides several examples for every supported instruction form in particular AVX-512 extension. Every example also includes generated machine code.</p> <p>Here is adopted \"Vectorized Histogram Update Using AVX-512CD\" from  Intel\u00ae Optimization Manual:</p> <pre><code>for i := 0; i &lt; 512; i++ {\n  histo[key[i]] += 1\n}\n</code></pre> <pre><code>top:\n        VMOVUPS     0x40(SP)(DX*4), Z4  //; vmovups     zmm4, [rsp+rdx*4+0x40]\n        VPXORD      Z1, Z1, Z1          //; vpxord      zmm1, zmm1, zmm1\n        KMOVW       K1, K2              //; kmovw       k2, k1\n        VPCONFLICTD Z4, Z2              //; vpconflictd zmm2, zmm4\n        VPGATHERDD  (AX)(Z4*4), K2, Z1  //; vpgatherdd  zmm1{k2}, [rax+zmm4*4]\n        VPTESTMD    histo&lt;&gt;(SB), Z2, K0 //; vptestmd    k0, zmm2, [rip+0x185c]\n        KMOVW       K0, CX              //; kmovw       ecx, k0\n        VPADDD      Z0, Z1, Z3          //; vpaddd      zmm3, zmm1, zmm0\n        TESTL       CX, CX              //; test        ecx, ecx\n        JZ          noConflicts         //; jz          noConflicts\n        VMOVUPS     histo&lt;&gt;(SB), Z1     //; vmovups     zmm1, [rip+0x1884]\n        VPTESTMD    histo&lt;&gt;(SB), Z2, K0 //; vptestmd    k0, zmm2, [rip+0x18ba]\n        VPLZCNTD    Z2, Z5              //; vplzcntd    zmm5, zmm2\n        XORB        BX, BX              //; xor         bl, bl\n        KMOVW       K0, CX              //; kmovw       ecx, k0\n        VPSUBD      Z5, Z1, Z1          //; vpsubd      zmm1, zmm1, zmm5\n        VPSUBD      Z5, Z1, Z1          //; vpsubd      zmm1, zmm1, zmm5\n\nresolveConflicts:\n        VPBROADCASTD CX, Z5     //; vpbroadcastd zmm5, ecx\n        KMOVW CX, K2            //; kmovw        k2, ecx\n        VPERMD Z3, Z1, K2, Z3   //; vpermd       zmm3{k2}, zmm1, zmm3\n        VPADDD Z0, Z3, K2, Z3   //; vpaddd       zmm3{k2}, zmm3, zmm0\n        VPTESTMD Z2, Z5, K2, K0 //; vptestmd     k0{k2}, zmm5, zmm2\n        KMOVW K0, SI            //; kmovw        esi, k0\n        ANDL SI, CX             //; and          ecx, esi\n        JZ noConflicts          //; jz           noConflicts\n        ADDB $1, BX             //; add          bl, 0x1\n        CMPB BX, $16            //; cmp          bl, 0x10\n        JB resolveConflicts     //; jb           resolveConflicts\n\nnoConflicts:\n        KMOVW       K1, K2             //; kmovw       k2, k1\n        VPSCATTERDD Z3, K2, (AX)(Z4*4) //; vpscatterdd [rax+zmm4*4]{k2}, zmm3\n        ADDL        $16, DX            //; add         edx, 0x10\n        CMPL        DX, $1024          //; cmp         edx, 0x400\n        JB          top                //; jb          top\n</code></pre>"},{"location":"All/","title":"All Wiki Pages","text":"<p>(See the wiki home page for a less mechanical overview of the Go wiki.)</p> <ul> {{- range pages \"/wiki/*.md\" -}} {{- if and .title (ne .URL \"/wiki/\") -}} <li>{{$short := strings.TrimPrefix .URL \"/wiki/\"}}{{$short}}{{if ne $short .title}} (\u201c{{.title}}\u201d){{end}} {{end -}} {{- end -}}"},{"location":"Articles/","title":"Articles","text":"<p>Please keep all entries in reverse chronological order (most recent first)</p>"},{"location":"Articles/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Indexes</li> <li>General</li> <li>Concurrency / Channels</li> <li>Containers &amp; Docker</li> <li>Cross Platform Development</li> <li>Error Handling</li> <li>Interfaces / OOP</li> <li>Mobile Applications</li> <li>Modules</li> <li>Performance and Profiling</li> <li>Pointers/References/Memory</li> <li>Reflection</li> <li>Security</li> <li>Testing</li> <li>Web &amp; API Development</li> <li>Misc</li> <li>Chinese</li> <li>Czech</li> <li>German</li> <li>Japanese</li> <li>Korean</li> </ul>"},{"location":"Articles/#article-indexes","title":"Article Indexes","text":"<ul> <li>Collection of #golang posts on Medium latest</li> <li>Go articles from Dr. Dobbs latest</li> <li>Slideshare Collection of #golang presentations latest</li> <li>Short Go tutorials on SocketLoop latest</li> <li>An Introduction to Go latest</li> </ul>"},{"location":"Articles/#general","title":"General","text":"<ul> <li>Darker Corners of Go 2021-03-13</li> <li>Working with Golang Maps 2020-09-25</li> <li>Practical Go: Real world advice for writing maintainable Go programs 2019-05-01</li> <li>Here are some amazing advantages of Go that you don\u2019t hear much about 2018-02-01</li> <li>Go Defer Simplified with Practical Visuals 2017-11-23</li> <li>The Zoo of Go Funcs 2017-11-09</li> <li>Ultimate Guide to Go Variadic Functions 2017-11-02</li> <li>Go Funcs-Baby Gopher's Visual Guide 2017-10-27</li> <li>Ultimate Visual Guide to Go Enums 2017-10-19</li> <li>Learn Go Constants 2017-10-10</li> <li>Learn Go Variables 2017-10-04</li> <li>Introduction to Go Packages 2017-09-26</li> <li>About Go Language\u200a\u2014\u200aAn Overview 2017-09-20</li> <li>Debugging code generation in Go 2016-10-15</li> <li>Go tooling essentials 2016-09-25</li> <li>Go from PHP engineer's perspective 2016-02-25</li> <li>Go Proverbs, Illustrated 2015-12-04</li> <li>A whirlwind tour of Go\u2019s runtime environment variables 2015-11-29</li> <li>Idiomatic Doc Comments: Document your function, not your function signature 2015-10_14</li> <li>Best Practices for a new Go Developer 2015-09-01</li> <li>Golang Refactoring Tools 2015-08-30</li> <li>Working with Files in Go 2015-08-23</li> <li>Defer Fun 2015-07-25</li> <li>Things I learned teaching Go - Francesc Campoy 2014-11-24 </li> <li>Understanding Go Packages 2014-11-01</li> <li>Structuring Applications in Go 2014-06-06</li> <li>Functional Options for Friendly APIs 2014-10-17</li> <li>Go Programming for Beginners 2014-10-01</li> <li>Switching from Python to Go 2014-04-21</li> <li>Google Go: The Good, the Bad, and the Meh 2013-02-10</li> <li>What I Love About Go 2013-01-25</li> <li>Why I program in Go 2013-01-05</li> <li>Go: A New Language for a New Year 2012-01-06</li> <li>Why you PHP guys should learn Golang 2012-08-10</li> <li>Why I went from Python to Go (and not node.js) 2012-09-14</li> <li>How and Why to Write Enums in Go 2021-04-19</li> </ul>"},{"location":"Articles/#concurrency--channels","title":"Concurrency / Channels","text":"<ul> <li>Learning Go concurrency through illustrations 2018-06-21</li> <li>Using contexts to avoid leaking goroutines 2016-10-25</li> <li>Concurrency in Go 2015-12-06</li> <li>Very basic concurrency for beginners in Go 2015-11-18</li> <li>Exploiting Powerful Cloud Services with Go 2015-10-11</li> <li>Golang lock-free values with atomic.Value 2015-08-21</li> <li>Golang Pearl: Thread-safe writes and double checked locking in Go 2015-07-21</li> <li>Golang: Funny Play with Channel 2012-05-25</li> <li>Unlimited Buffering with Low Overhead 2010-02-10</li> <li>Concurrent Idioms #1: Broadcasting values in Go with linked channels 2009-12-01</li> </ul>"},{"location":"Articles/#containers--docker","title":"Containers &amp; Docker","text":"<ul> <li>Deploying a Go app to a minimal Docker container 2015-10-01</li> <li>Fetching a remote configuration using Docker and Consul 2015-09-30</li> <li>Joining the Docker Ship and Go 2015-07-01</li> <li>Building Minimal Docker Images for Go 2015-04-23</li> </ul>"},{"location":"Articles/#cross-platform-development","title":"Cross-Platform Development","text":"<ul> <li>Releasing cross-platform Go binaries using Goxc and BinTray in 5 minutes 2015-11-29</li> <li>Calling Go from Swift 2015-10-3</li> <li>On Go, portability, and system interfaces 2015-09-22</li> <li>Go cross compilation 2015-09-8</li> </ul>"},{"location":"Articles/#error-handling","title":"Error Handling","text":"<ul> <li>Returning Errors 2015-10-10</li> <li>Inspecting Errors 2014-12-24</li> </ul>"},{"location":"Articles/#interfaces--oop","title":"Interfaces / OOP","text":"<ul> <li>Generics in Golang with Code Generation 2015-10-18</li> <li>Composition with Go 2015-09-13</li> <li>Sorting Inventory Items in Go - the sort.Interface 2015-09-06</li> <li>Loose Coupling in Go Lang 2015-02-06</li> <li>How to use interfaces in Go 2012-10-01</li> <li>Go Object Oriented Design 2013-01-14</li> <li>It is ridiculously easy to refactor Go 2013-01-27</li> <li>Functional Iteration in Go 2013-12-13</li> <li>Interfaces in Go - Russ Cox 2009-12-01</li> </ul>"},{"location":"Articles/#mobile-applications","title":"Mobile Applications","text":"<p>Start by reading the overview of mobile development documentation first.</p> <ul> <li>Go Mobile: Next generation of mobile apps 2015-09-18</li> <li>iOS Apps with Go - Video by Josh Deprez 2015-09-17</li> <li>5 Part Series - Mobile Go 2015-01-08</li> </ul>"},{"location":"Articles/#modules","title":"Modules","text":"<ul> <li>Introduction to Go Modules 2018-08-18</li> </ul>"},{"location":"Articles/#performance-and-profiling","title":"Performance and Profiling","text":"<ul> <li>Mutex profile 2016-12-19</li> <li>How to Optimize Garbage Collection in Go 2015-11-23</li> <li>Golang Escape Analysis 2015-10-18</li> <li>A Pattern for Optimizing Go 2015-09-24</li> <li>Golang Performance Tips 2015-09-20</li> <li>Answering your own (performance) questions in Go 2015-09-15</li> <li>Concise Guide to profiling go programs 2014-08-09</li> <li>Go Performance Observations 2014-08-07</li> <li>Debugging performance issues in Go programs - Intel 2014-05-10</li> <li>How to write benchmarks in Go 2013-06-30</li> <li>Profiling Go Programs - Go blog 2011-06-24</li> </ul>"},{"location":"Articles/#pointers-references-and-memory-management","title":"Pointers, References and Memory Management","text":"<ul> <li>Equality and Type Aliases 2015-09-02</li> <li>Pointers vs References 2014-06-01</li> <li>Recycling Memory Buffers in Go 2013-08-24</li> <li>Learning Go Types 2012-01-27</li> <li>Saving a Third of Our Memory by Re-ordering Go Struct Fields 2020-08-07</li> </ul>"},{"location":"Articles/#reflection","title":"Reflection","text":"<ul> <li>Go Reflection Index by Jimmy Frasche 2014-01-26</li> </ul>"},{"location":"Articles/#security","title":"Security","text":"<ul> <li>Mutual TLS authentication in Go 2015-11-21</li> <li>Whispered Secrets - The case for building software with privacy as a primary concern 2015-09-19</li> </ul>"},{"location":"Articles/#testing","title":"Testing","text":"<ul> <li>Getting Started with BDD in Go Using Ginkgo 2016-07-12</li> <li>Integration testing in Go using Docker 2015-12-07</li> <li>Debugging Go Programs with Delve 2015-12-03</li> <li>Upgrade Your Appengine Tests with Testify 2015_11_21</li> </ul>"},{"location":"Articles/#web--api-development","title":"Web &amp; API Development","text":"<p>Start by reading the overview of server programming documentation first.   * Get started with Go and WebAssembly 2018-08-14   * HTTP/2 Server Push 2016-12-10   * Preventing Cross-Site Request Forgery in Go 2015-12-14   * goa: Untangling Microservices 2015-12-07   * A Weekend with Go, Beego and React 2015-11-03   * HTTP Session Handling on Heroku 2015-09-09   * Go Resiliency Patterns 2015-09-01   * http.Handler and Error Handling in Go 2015-07-02   * Deploy a golang photo archive tool to the cloud on IBM BlueMix 2015-06-05   * A Journey into Microservices - Part 1, Part 2, Part 3 2015-03_09   * Making a RESTful JSON API in Go 2015-01-01   * Building a Web Server in Go 2014-09-01   * The Ultimate Guide to JSON in Go 2021-04-28</p>"},{"location":"Articles/#misc","title":"Misc","text":"<ul> <li>Environment variables in Golang 2020-09-28</li> <li>Using MongoDB as Datasource in GoLang 2020-09-21</li> <li>Go-powered Open Source IoT Integration Framework \"Flogo\" 2016-11-07</li> <li>Build Slack Slash Commands with Go 2015-09-15</li> <li>String Matching by Damian Gryski 2014-12-05</li> <li>State machines in Go (#golang) 2013-02-10</li> <li>Go &amp; Assembly 2013-02-05</li> <li>Function Types in Go (golang) 2013-02-05</li> <li>Optimizing Real World Go 2013-01-05</li> <li>Methods as Objects in Go 2012-12-26</li> <li>Applying The Clean Architecture to Go applications 2012-09-08</li> <li>An introduction to cross compilation with Go 2012-09-08</li> <li>Function Call by Name in Golang 2012-07-05</li> <li>Using the Go Regexp Package 2012-07-05</li> <li>Zero Downtime upgrades of TCP servers in Go 2012-05-29</li> <li>Go Reflection Codex</li> <li>Go JSON Marshalling and Unmarshalling cheatsheet 2015-09-30</li> </ul>"},{"location":"Articles/#chinese","title":"Chinese","text":"<ul> <li>Test Go module</li> <li>Build web application with golang</li> <li>Go\u8bed\u8a00\u8bc4\u4f30\u62a5\u544a</li> <li>Why you PHP guys should learn Golang</li> <li>Function Call by Name in Golang</li> <li>Golang: Funny Play with Channel</li> <li>Using MyMySQL - A interface of database/sql</li> <li>Go did What on the Stack?</li> <li>Gobs on the wire (Translation)</li> <li>Go Environment Setup (Translation)</li> <li>Error Handling and Go (Translation)</li> <li>The Go Tool (Translation)</li> <li>Less is exponentially more (Translation)</li> <li>Zero Downtime upgrades of TCP servers in Go (Translation)</li> <li>Using Go Modules (Translation)</li> </ul>"},{"location":"Articles/#czech","title":"Czech","text":"<ul> <li>Google Go - 1<sup>st</sup> birthday</li> <li>Google Go - what we find in the kit</li> <li>Google Go - advanced topics</li> <li>Google Go by examples I.</li> <li>Google Go by examples II.</li> <li>Error handling in Go</li> <li>Google Go - The Laws of Reflection</li> <li>Google Go - 2<sup>nd</sup> birthday</li> </ul>"},{"location":"Articles/#german","title":"German","text":"<ul> <li>Programmiersprachen im Multicore Zeitalter - Google GO und Nebenl\u00e4u\ufb01gkeit <code>[PDF]</code> 2012-02-02</li> </ul>"},{"location":"Articles/#japanese","title":"Japanese","text":"<ul> <li>Windows\u3067Go\u8a00\u8a9e\u306e\u307e\u3068\u3081</li> <li>Go\u8a00\u8a9e\u3067 jQuery \u30e9\u30a4\u30af\u306a\u64cd\u4f5c\u304c\u51fa\u6765\u308b goquery \u3092\u8a66\u3057\u305f\u3002</li> <li>Go\u8a00\u8a9e\u5411\u3051\u306e ORM\u3001gorp \u304c\u306a\u304b\u306a\u304b\u826f\u3044</li> <li>GAE/G\u3067Google Cloud Storage\u3092\u5229\u7528\u3059\u308b\u306b\u306f\uff08\uff11\uff09</li> <li>Go\u8a00\u8a9e\u306eWeb\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\"goweb\"\u3092GAE/G\u3067\u52d5\u304b\u3059</li> <li>Ubuntu 12.04\u306bgolang\u3092\u201d\u30bd\u30fc\u30b9\u304b\u3089\u201d\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002</li> <li>GAE/G\u3067\u6642\u9593\u306e\u30c1\u30a7\u30c3\u30af\uff08Datastore\u7de8\uff09</li> </ul>"},{"location":"Articles/#korean","title":"Korean","text":"<ul> <li>The Go Programming Language</li> <li>You can read Go code</li> <li>Go channel tutorial</li> <li>Go character encoding</li> <li>Using Google API in Go</li> <li>Go\ub85c Git \ub4e4\uc5ec\ub2e4\ubcf4\uae30</li> <li>Go: 90% \uc644\ubcbd?!, 100% of the time \uc2ac\ub77c\uc774\ub4dc \ubc88\uc5ed </li> <li>Go \ub3d9\uc2dc\uc131 \ud328\ud134 advanced \uc601\uc0c1 \ubc88\uc5ed</li> <li>Go + Revel + Gorp \uac04\ub2e8 \uac8c\uc2dc\ud310 \ub9cc\ub4e4\uae30</li> <li>Go + Revel + Gorm \uc73c\ub85c \ub9cc\ub4dc\ub294 \ube14\ub85c\uadf8</li> </ul>"},{"location":"AssemblyPolicy/","title":"AssemblyPolicy","text":"<p>This document describes when and how to add assembly code to the Go cryptography packages.</p> <p>In general, the rules are:</p> <ul> <li>We prefer portable Go, not assembly. Code in assembly means (N packages * M architectures) to maintain, rather than just N packages.</li> <li>Minimize use of assembly. We'd rather have a small amount of assembly for a 50% speedup rather than twice as much assembly for a 55% speedup. Explain the decision to place the assembly/Go boundary where it is in the commit message, and support it with benchmarks.</li> <li>Use higher level programs to generate non-trivial amounts of assembly, either standalone Go programs or <code>go get</code>-able programs, like avo. Output of other reproducible processes (like formally verified code generators) will also be considered. Discuss the implementation strategy on the issue tracker in advance.</li> <li>Use small, testable units (25\u201375 lines) called from higher-level logic written in Go. If using small, testable functions called from logic written in Go is too slow, use small, testable assembly units with Go-compatible wrappers, so that Go tests can still test the individual units.</li> <li>Any assembly function needs a reference Go implementation, that\u2019s tested side-by-side with the assembly. Follow TargetSpecific for structure and testing practices.</li> <li>The interface of the assembly units and of the reference Go implementation must be the same across architectures, unless the platforms have fundamentally different capabilities (such as high-level cryptographic instructions).</li> <li>Unless the Go Security team explicitly commits to owning the specific implementation, an external contributor must commit to maintaining it. If changes are required (for example as part of a broader refactor) and the maintainer is not available, the assembly will be removed.</li> <li>The code must be tested in our CI. This means there need to be builders that support the instructions, and if there are multiple (or fallback) paths they must be tested separately. (Tip: use <code>GODEBUG=cpu.X=off</code> to disable detection of CPU features.)</li> <li>Document in the Go code why the implementation requires assembly (specific performance benefit, access to instructions, etc), so we can reevaluate as the compiler improves.</li> </ul> <p>Not all assembly currently in the standard library adheres to this policy. Changes to existing assembly will be discouraged until that implementation is updated to be compliant. New assembly must be compliant.</p>"},{"location":"Benchmarks/","title":"Benchmarks","text":"<p>These are benchmarks collected from the community used to measure the effects of changes to the Go core (compiler, runtime, garbage collector, and libraries). They should have the following properties:</p> <ul> <li>they matter; someone cares, perhaps in a dollars-and-cents way, that they run well</li> <li>they are go-gettable and don't require customized steps for building the benchmark</li> <li>they run under <code>go test -bench ...</code></li> <li>they run relatively quickly, ideally a single \"run\" takes less than a second (there should perhaps be a separate set of longer-running benchmarks)</li> <li>their timings are not gratuitously noisy</li> <li>they run cleanly in a restricted environment, such as a Docker or rkt container</li> <li>they're not gratuitously redundant with other benchmarks already in the list; we don't need ten microbenchmarks of Go transcendental functions</li> </ul> <p>These benchmarks change over time, and that is okay. Their intended use is for performance testing of proposed changes; is the geometric mean better, were any benchmarks made substantially worse?</p> <p>Information for each benchmark includes (or should include):</p> <ul> <li>a short name for the benchmark</li> <li>the path to <code>go get</code> the benchmark</li> <li>a regexp for the benchmark suite excluding individual benchmarks that might be noisy, long-running, or redundant</li> <li>(ideally) a contact person for questions about the benchmarks </li> </ul> short name notes go get path benchmark regexp contact ajstarks_deck_generate <code>github.com/ajstarks/deck/generate</code> <code>Benchmark(Polygon\\|Arc)</code> benhoyt_goawk <code>github.com/benhoyt/goawk/interp</code> <code>BenchmarkR</code> bindata <code>github.com/kevinburke/go-bindata</code> <code>Benchmark</code> capnproto2 <code>zombiezen.com/go/capnproto2/</code> <code>Benchmark(TextMovementBetweenSegments\\|Growth_MultiSegment)</code> cespare_mph <code>github.com/cespare/mph</code> <code>BenchmarkBuild</code> cespare_xxhash <code>github.com/cespare/xxhash</code> <code>BenchmarkHashes/xxhash-string,n=10_MB</code> ericlagergren_decimal <code>github.com/ericlagergren/decimal/benchmarks</code> <code>BenchmarkPi_decimal_Go_9</code> ethereum_bitutil <code>github.com/ethereum/go-ethereum/common/bitutil</code> <code>Benchmark(BaseTest2KB\\|FastTest2KB\\|Encoding4KBVerySparse)</code> ethereum_core <code>github.com/ethereum/go-ethereum/core</code> <code>BenchmarkChainRead_full_10k</code> ethereum_corevm <code>github.com/ethereum/go-ethereum/core/vm</code> <code>BenchmarkOpDiv128</code> ethereum_ecies <code>github.com/ethereum/go-ethereum/crypto/ecies</code> <code>BenchmarkGenSharedKeyP256</code> ethereum_ethash <code>github.com/ethereum/go-ethereum/consensus/ethash</code> <code>BenchmarkHashimotoLight</code> ethereum_sha3 <code>github.com/ethereum/go-ethereum/crypto/sha3</code> <code>BenchmarkSha3_224_MTU</code> ethereum_storage <code>github.com/ethereum/go-ethereum/swarm/storage</code> <code>BenchmarkJoin_8</code> ethereum_trie <code>github.com/ethereum/go-ethereum/trie</code> <code>Benchmark</code> gonum_blas_native <code>gonum.org/v1/gonum/blas/gonum</code> <code>Benchmark(DasumMediumUnitaryInc\\|Dnrm2MediumPosInc)</code> gonum_community <code>gonum.org/v1/gonum/graph/community/</code> <code>BenchmarkLouvainDirectedMultiplex</code> gonum_lapack_native <code>gonum.org/v1/gonum/lapack/gonum</code> <code>BenchmarkDgeev/Circulant10</code> gonum_mat <code>gonum.org/v1/gonum/mat</code> <code>Benchmark(MulWorkspaceDense1000Hundredth\\|ScaleVec10000Inc20)</code> gonum_path <code>gonum.org/v1/gonum/graph/path/</code> <code>Benchmark(AStarUndirectedmallWorld_10_2_2_2_Heur\\|Dominators/nested_if_n256)</code> gonum_topo <code>gonum.org/v1/gonum/graph/topo/</code> <code>Benchmark(TarjanSCCGnp_1000_half\\|TarjanSCCGnp_10_tenth)</code> gonum_traverse <code>gonum.org/v1/gonum/graph/traverse/</code> <code>BenchmarkWalkAllBreadthFirstGnp_(10\\|1000)_tenth</code> gtank_blake2s <code>github.com/gtank/blake2s</code> <code>BenchmarkHash8K</code> gtank_ed25519 <code>github.com/gtank/ed25519</code> <code>Benchmark(IsOnCurve\\|ScalarMult)</code> hugo_helpers <code>github.com/gohugoio/hugo/helpers</code> <code>Benchmark(StripHTML\\|ReaderContains)</code> hugo_hugolib <code>github.com/gohugoio/hugo/hugolib</code> <code>BenchmarkParsePage</code> hugo_hugolib_sitebuilding <code>github.com/gohugoio/hugo/hugolib</code> <code>BenchmarkSiteBuilding/YAML,num_pages=10,num_tags=10,tags_per_page=20,shortcodes,render-12</code> k8s_api <code>k8s.io/kubernetes/pkg/api/testing</code> <code>BenchmarkEncodeCodecFromInternalProtobuf</code> k8s_schedulercache <code>k8s.io/kubernetes/pkg/scheduler/cache</code> <code>BenchmarkList1kNodes30kPods</code> minio <code>github.com/minio/minio/cmd</code> <code>BenchmarkGetObject5MbFS</code> nelsam_gxui_interval <code>github.com/nelsam/gxui/interval</code> <code>Benchmark</code> pilosa_bitmaps benchmarks in <code>roaring/</code> subdirectory <code>github.com/pilosa/pilosa</code> <code>BenchmarkBitmap_IntersectionCount</code> jaffee@pilosa.com semver <code>github.com/Masterminds/semver</code> <code>BenchmarkValidateVersionTildeFail</code> spexs2 <code>github.com/egonelbre/spexs2/_benchmark/</code> <code>BenchmarkRun/10k/1</code> uber_zap <code>go.uber.org/zap/benchmarks</code> <code>BenchmarkAddingFields/(Zap.Sugar\\|^[ais])</code> uuid <code>github.com/satori/go.uuid/</code> <code>Benchmark(NewV5\\|MarshalToString)</code> <p>There is a benchmark runner that automates downloading, building, and running these benchmarks under various (user-defined) configurations.  Benchmarking noise on Linux can be somewhat reduced with perflock.</p> <p>A few have been proposed but have so far failed to make the cut (for fetch, build, or noise problems):</p> short name notes go get path benchmark regexp contact eolian_dsp <code>buddin.us/eolian/dsp</code> <code>Benchmark</code> ethereum_whisperv5 <code>github.com/ethereum/go-ethereum/whisper/whisperv5</code> <code>Benchmark</code> kanzi <code>github.com/flanglet/kanzi/go/src/kanzi/benchmark</code> <code>Benchmark</code>"},{"location":"Blogs/","title":"Blogs","text":"<p>A set of blogs dedicated to Go.</p> <p>NOTE: Please don't add individual blog entries to this page. Those belong in articles instead.</p>"},{"location":"Blogs/#arabic","title":"Arabic","text":"<ul> <li>\u0644\u063a\u0629 \u063a\u0648 \u0628\u0627\u0644\u0639\u0631\u0628\u064a - \u0645\u0648\u0642\u0639 \u0639\u0631\u0628\u064a \u0645\u062e\u0635\u0635 \u0644\u0644\u063a\u0629 \u0627\u0644\u0628\u0631\u0645\u062c\u0629 \u063a\u0648</li> </ul>"},{"location":"Blogs/#english","title":"English","text":"<ul> <li>The official Go Blog - For in depth posts by the Go team</li> <li>Gopher Academy Blog</li> <li>Dave Cheney's Blog</li> <li>Dave Cheney's Resources for Go Programmers</li> <li>spf13's Blog</li> <li>Mat Ryer's Medium Blog</li> <li>Matt Aimonetti's Blog</li> <li>Marcio.io</li> <li>Carlos Becker's Blog</li> <li>Ardan Labs</li> <li>The Golang Weekly</li> <li>Alex Edward's Go Posts</li> <li>GoLang Tutorials</li> <li>Mathias Lafeldt's Blog</li> <li>Marcelo Magallon's Blog</li> <li>Mina Andrawos's Go Posts</li> <li>Aliaksandr Pliutau's Blog</li> <li>Johan Brandhorst's Blog</li> <li>Christoph Berger's Applied Go Blog</li> <li>Jon Calhoun's Blog</li> <li>Inanc Gumus's Learn Go Programming Blog</li> <li>Elliot Forbes - TutorialEdge.net Go Tutorials</li> <li>Timo Savola's Go Posts</li> <li>Packt Hub</li> <li>GoCenter Community Blog - Blogs from GoCenter.io about Go modules and community.</li> <li>Golang on the Boot.dev Blog</li> <li>Golang Tutorials  - Golang Tutorials and Blog</li> <li>Go articles at golang.dk</li> <li>Bitfield Consulting</li> <li>Mahmud Ridwan's Go Posts</li> </ul>"},{"location":"Blogs/#bahasa-indonesia","title":"Bahasa Indonesia","text":"<ul> <li>Go blog dalam Bahasa Indonesia</li> </ul>"},{"location":"Blogs/#portuguese","title":"Portuguese","text":"<ul> <li>Eduardo Nunes Pereira</li> <li>Gopher Brasil</li> <li>Bruno Gomes's Blog</li> </ul>"},{"location":"Blogs/#chinese","title":"Chinese","text":"<ul> <li>\u65e0\u5fcc-Jincheng's Blog</li> <li>Howtoing\u8fd0\u7ef4\u6559\u7a0b</li> <li>\u865e\u53cc\u9f50\u7684\u535a\u5ba2-Golang</li> <li>Tony Bai \u2013 \u4e00\u4e2a\u7a0b\u5e8f\u5458\u7684\u5fc3\u8def\u5386\u7a0b</li> <li>Arthur \u7684\u535a\u5ba2</li> <li>\u9e1f\u7a9d</li> <li>\u98de\u96ea\u65e0\u60c5\u7684\u535a\u5ba2</li> <li>\u5348\u591c\u5496\u5561</li> <li>\u8748\u8748\u4fca\u7684\u6280\u672f\u5fc3\u5f97</li> <li>FuXiaohei.Me \u2013 \u5085\u5c0f\u9ed1\u7684\u81ea\u7559\u5730</li> <li>\u65e0\u95fb\u7684\u5c0f\u7ad9</li> <li>astaxie</li> <li>\u98ce\u7b11\u75f4</li> <li>ipfans's Blog</li> <li>Cyeam \u2013 \u4f60\u4e0d\u8981\u7528\u6218\u672f\u7684\u52e4\u594b\u63a9\u76d6\u6218\u7565\u7684\u61d2\u60f0\u3002</li> <li>\u6218\u9b42\u5c0f\u7b51</li> <li>My Candy</li> <li>fatedier blog</li> <li>siddontang \u7684\u4e13\u680f-my thought for program\u3002</li> <li>domac \u535a\u5ba2 life should be func</li> <li>\u4e03\u725b\u4e91 - \u4e03\u725b\u56e2\u961f\u535a\u5ba2</li> <li>\u535a\u5ba2 - PingCAP</li> <li>LittleFeng \u7684\u535a\u5ba2 \u2013 Python\u3001Golang\u3001Java\u3001\u540e\u7aef\u6280\u672f</li> <li>Legendtkl</li> <li>\u884c\u601d\u9304,Travel Coder - Arch, Coding, Life Learning</li> <li>jasper\u7684\u6280\u672f\u5c0f\u7a9d</li> <li>\u4e09\u6708\u6c99</li> <li>\u5927\u6865\u4e0b\u7684\u8717\u725b</li> <li>\u714e\u9c7c\u7684\u8ff7\u4e4b\u535a\u5ba2</li> <li>Stefno - \u535a\u5ba2\u56ed</li> <li>No Headback</li> <li>Go \u8bed\u8a00\u57fa\u7840</li> <li>chai2010 \u7684\u535a\u5ba2</li> </ul>"},{"location":"Books/","title":"Books","text":"<p>Other book lists:</p> <ul> <li>Awesome Go Books</li> <li>Go Language Resources</li> </ul> <p>Sorted by publication date, ascending.</p>"},{"location":"Books/#languages","title":"Languages","text":"<ul> <li>English</li> <li>Chinese</li> <li>Japanese</li> <li>French</li> <li>German</li> <li>Brazilian portuguese</li> <li>Russian</li> <li>Spanish</li> <li>Korean</li> <li>Indonesian</li> <li>Italian</li> <li>Polish</li> <li>Persian</li> </ul>"},{"location":"Books/#english","title":"English","text":"<ul> <li> <p>Go Programming</p> <ul> <li>Author: John P. Baugh</li> <li>Publication Date: June 16, 2010</li> <li>ISBN: 978-1453636671</li> </ul> </li> <li> <p>The Way to Go: A Thorough Introduction to the Go Programming Language</p> <ul> <li>Author: Ivo Balbaert</li> <li>Publication Date: March 7, 2012</li> <li>ISBN: 978-1469769165</li> </ul> </li> <li> <p>The Go Programming Language Phrasebook</p> <ul> <li>Author: David Chisnall</li> <li>Publication Date: April 30, 2012</li> <li>ISBN: 978-0321817143</li> <li>Reference: https://www.informit.com/store/go-programming-language-phrasebook-9780321817143</li> </ul> </li> <li> <p>Programming in Go: Creating Applications for the 21<sup>st</sup> Century</p> <ul> <li>Author: Mark Summerfield</li> <li>Publication Date: May 4, 2012</li> <li>ISBN: 978-0321774637</li> <li>Reference: https://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</li> </ul> </li> <li> <p>An Introduction to Programming in Go</p> <ul> <li>Author: Caleb Doxsey</li> <li>Publication Date: September 3, 2012</li> <li>ISBN: 978-1478355823</li> <li>Reference: https://www.golang-book.com/</li> </ul> </li> <li> <p>Mastering Concurrency in Go</p> <ul> <li>Author: Nathan Kozyra</li> <li>Publication Date: July 23, 2014</li> <li>ISBN: 978-1783983483</li> <li>Reference: https://www.packtpub.com/application-development/mastering-concurrency-go</li> </ul> </li> <li> <p>The Little Go Book</p> <ul> <li>Author: Karl Seguin</li> <li>Publication Date: October 2014</li> <li>ISBN: none: free ebook/PDF/online version</li> <li>Reference: https://openmymind.net/The-Little-Go-Book/</li> </ul> </li> <li> <p>Go Programming Blueprints</p> <ul> <li>Author: Mat Ryer</li> <li>Publication Date: January 23, 2015</li> <li>ISBN: 978-1783988020</li> <li>Reference: https://www.packtpub.com/application-development/go-programming-blueprints</li> </ul> </li> <li> <p>Level Up Your Web Apps With Go</p> <ul> <li>Author: Mal Curtis</li> <li>Publication Date: April, 2015</li> <li>ISBN: 978-0992461294</li> <li>Reference: https://learnable.com/books/level-up-your-web-apps-with-go</li> </ul> </li> <li> <p>Mastering Go Web Services</p> <ul> <li>Author: Nathan Kozyra</li> <li>Publication Date: April, 2015</li> <li>ISBN: 9781783981304</li> <li>Reference: https://www.packtpub.com/web-development/mastering-go-web-services</li> </ul> </li> <li> <p>Go In Action</p> <ul> <li>Authors: William Kennedy with Brian Ketelsen and Erik St. Martin</li> <li>Publication Date: November, 2015</li> <li>ISBN: 9781617291784</li> <li>Reference: https://www.manning.com/books/go-in-action</li> <li>Discount Code (44% off): goiaucf</li> </ul> </li> <li> <p>The Go Programming Language (Addison-Wesley Professional Computing Series)</p> <ul> <li>Author: Alan A.A. Donovan and Brian Kernighan</li> <li>Publication Date: November, 2015</li> <li>ISBN: 978-0134190440</li> <li>Reference: https://www.gopl.io/</li> </ul> </li> <li> <p>Web Development with Go: Building Scalable Web Apps and RESTful Services</p> <ul> <li>Author: Shiju Varghese</li> <li>Publication Date: December, 2015</li> <li>ISBN: 978-1484210536</li> <li>Reference: https://www.apress.com/9781484210536</li> </ul> </li> <li> <p>Go Programming by Example (e-book)</p> <ul> <li>Author: Agus Kurniawan</li> <li>Publication Date: February 21, 2015</li> <li>ISBN: \u2013</li> <li>Reference: https://www.amazon.com/dp/B00TWLZVQQ/</li> </ul> </li> <li> <p>Introducing Go</p> <ul> <li>Author: Caleb Doxsey</li> <li>Publication Date: January 2016</li> <li>ISBN: 978-1491941959</li> <li>Reference: https://shop.oreilly.com/product/0636920046516.do</li> </ul> </li> <li> <p>Write webapps in Go without using a framework (Free e-book)</p> <ul> <li>Author: Suraj Patil</li> <li>Publication Date: October 2016</li> <li>ISBN: NA since book is self published on http://leanpub.com</li> <li>References: thewhitetulip/web-dev-golang-anti-textbook, https://leanpub.com/antitextbookGo/</li> </ul> </li> <li> <p>Learning Go Web Development</p> <ul> <li>Author: Nathan Kozyra</li> <li>Publication Date: April, 2016</li> <li>ISBN: 978-1785282317</li> <li>Reference: https://www.packtpub.com/web-development/learning-go-web-development</li> </ul> </li> <li> <p>Go Web Programming</p> <ul> <li>Author: Sau Sheong Chang</li> <li>Publication Date: July 22, 2016</li> <li>ISBN: 9781617292569</li> <li>Reference: http://manning.com/chang/</li> </ul> </li> <li> <p>Go: Building Web Applications</p> <ul> <li>Author: Nathan Kozyra and Mat Ryer</li> <li>Publication Date: August 31, 2016</li> <li>ISBN: 9781787123496</li> <li>https://www.packtpub.com/product/go-building-web-applications/9781787123496</li> </ul> </li> <li> <p>Go in Practice</p> <ul> <li>Authors: Matt Butcher and Matt Farina</li> <li>Publication Date: October 1, 2016</li> <li>ISBN: 9781633430075</li> <li>Reference: http://manning.com/butcher/</li> </ul> </li> <li> <p>Go Programming Blueprints - Second Edition</p> <ul> <li>Author: Mat Ryer</li> <li>Publication Date: October 2016</li> <li>ISBN: 978-1786468949</li> <li>Reference: https://www.packtpub.com/application-development/go-programming-blueprints-second-edition</li> </ul> </li> <li> <p>Learning Go programming</p> <ul> <li>Author: Vladimir Vivien</li> <li>Publication Date: October 2016</li> <li>ISBN: 978-1784395438</li> <li>Reference: https://www.packtpub.com/application-development/learning-go-programming</li> </ul> </li> <li> <p>Go Recipes</p> <ul> <li>Author: Shiju Varghese</li> <li>Publication Date: November 2016</li> <li>ISBN: 978-1-4842-1188-5</li> <li>Reference: http://www.apress.com/us/book/9781484211892</li> </ul> </li> <li> <p>Cloud Native Go: Building Web Applications and Microservices for the Cloud with Go and React</p> <ul> <li>Author: Kevin Hoffman and Dan Nemeth</li> <li>Publication Date: December 23, 2016</li> <li>ISBN: 978-0-672-33779-6</li> <li>Reference: https://www.informit.com/store/cloud-native-go-building-web-applications-and-microservices-9780672337796</li> </ul> </li> <li> <p>Go Design Patterns</p> <ul> <li>Author: Mario Castro Contreras</li> <li>Publication Date: February 2017</li> <li>ISBN: 978-1786466204</li> <li>Reference: https://www.packtpub.com/application-development/go-design-patterns</li> </ul> </li> <li> <p>Go Cookbook</p> <ul> <li>Author: Aaron Torres</li> <li>Publication Date: June 2017</li> <li>ISBN: 978-1783286836</li> <li>Reference: https://www.packtpub.com/application-development/go-cookbook</li> </ul> </li> <li> <p>Go: Design Patterns for Real-World Projects</p> <ul> <li>Authors: Vladimir Vivien, Mario Castro Contreras, Mat Ryer</li> <li>Publication Date: June 2017</li> <li>ISBN: 978-1788390552</li> <li>Reference: https://www.packtpub.com/application-development/go-design-patterns-real-world-projects</li> </ul> </li> <li> <p>Web Development with Go: Learn to Create Real World Web Applications using Go</p> </li> <li>Author: Jonathan Calhoun</li> <li>Publication Date: June 2017</li> <li>ISBN: N/A (self published)</li> <li> <p>Reference: http://usegolang.com</p> </li> <li> <p>Building Microservices with Go</p> <ul> <li>Author: Nic Jackson</li> <li>Publication Date: July 2017</li> <li>ISBN: 978-1786468666</li> <li>Reference: https://www.packtpub.com/application-development/building-microservices-go</li> </ul> </li> <li> <p>Concurrency in Go</p> <ul> <li>Author: Katherine Cox-Buday</li> <li>Publication Date: August 2017</li> <li>ISBN: 978-1491941195</li> <li>Reference: http://shop.oreilly.com/product/0636920046189.do</li> </ul> </li> <li> <p>Machine Learning With Go</p> <ul> <li>Author: Daniel Whitenack</li> <li>Publication Date: September 2017</li> <li>ISBN: 978-1785882104</li> <li>Reference: https://www.packtpub.com/big-data-and-business-intelligence/machine-learning-go</li> </ul> </li> <li> <p>Go Systems Programming</p> <ul> <li>Author: Mihalis Tsoukalos</li> <li>Publication Date: September 2017</li> <li>ISBN: 978-1787125643</li> <li>Reference: https://www.packtpub.com/networking-and-servers/go-systems-programming</li> </ul> </li> <li> <p>Let's Go! Learn to Build Professional Web Applications With Go</p> <ul> <li>Author: Alex Edwards</li> <li>Publication Date: September 2017</li> <li>ISBN: N/A (self-published)</li> <li>Reference: https://lets-go.alexedwards.net</li> </ul> </li> <li> <p>Learning Functional Programming in Go</p> </li> <li>Author: Lex Sheehan</li> <li>Publication Date: November 2017</li> <li>ISBN: 978-1787281394</li> <li> <p>Reference: https://www.packtpub.com/application-development/learning-functional-programming-go</p> </li> <li> <p>Cloud Native programming with Golang</p> </li> <li>Author: Mina Andrawos, Martin Helmich</li> <li>Publication Date: December 2017</li> <li>ISBN: 978-1787125988</li> <li> <p>Reference: https://www.packtpub.com/application-development/cloud-native-programming-golang</p> </li> <li> <p>Isomorphic Go</p> </li> <li>Author: Kamesh Balasubramanian</li> <li>Publication Date: December 2017</li> <li>ISBN: 978-1788394185</li> <li> <p>Reference: </p> <ul> <li>https://www.packtpub.com/web-development/isomorphic-go</li> <li>https://www.amazon.com/dp/1788394186</li> </ul> </li> <li> <p>Security with Go</p> </li> <li>Author: John Daniel Leon</li> <li>Publication Date: January 2018</li> <li>ISBN: 978-1788627917</li> <li> <p>Reference: https://www.amazon.com/dp/1788627911</p> </li> <li> <p>Go Standard Library Cookbook</p> </li> <li>Author: Radomir Sohlich</li> <li>Publication Date: February 2018</li> <li>ISBN: 9781788475273</li> <li> <p>Reference: https://www.amazon.com/dp/1788475275</p> </li> <li> <p>Distributed Computing with Go</p> </li> <li>Author: V.N. Nikhil Anurag</li> <li>Publication Date: February 2018</li> <li>ISBN: 9781787125384</li> <li> <p>Reference: https://www.amazon.com/dp/1787125386</p> </li> <li> <p>Go Web Development Cookbook</p> <ul> <li>Author: Arpit Aggarwal</li> <li>Publication Date: April 2018</li> <li>ISBN: 9781787286740</li> <li>Reference: https://www.amazon.com/Web-Development-Cookbook-full-stack-applications/dp/1787286746</li> </ul> </li> <li> <p>Mastering Go</p> <ul> <li>Author: Mihalis Tsoukalos</li> <li>Publication Date: April 2018</li> <li>ISBN: 9781788626545</li> <li>Reference: https://www.amazon.com/Mastering-production-applications-concurrency-cloud-native/dp/1788626540</li> </ul> </li> <li> <p>Echo Quick Start Guide</p> <ul> <li>Author: J. Ben Huson </li> <li>Publication Date: May 2018</li> <li>ISBN: 9781789139433</li> <li>Reference: https://www.amazon.com/dp/1789139430</li> </ul> </li> <li> <p>Hands-On Serverless Applications with Go</p> <ul> <li>Author: Mohamed Labouardy</li> <li>Publication Date: August 2018</li> <li>ISBN: 9781789134612</li> <li>Reference: https://www.packtpub.com/application-development/hands-serverless-applications-go</li> </ul> </li> <li> <p>Hands-On Go Programming</p> <ul> <li>Author: Tarik Guney</li> <li>Publication Date: August 2018</li> <li>ISBN: 9781789531756</li> <li>Reference: https://www.packtpub.com/application-development/hands-go-programming</li> </ul> </li> <li> <p>Get Programming with Go</p> <ul> <li>Author: Nathan Youngman, Roger Peppe</li> <li>Publication Date: August 2018</li> <li>ISBN: 9781617293092</li> <li>Reference: https://www.manning.com/books/get-programming-with-go</li> </ul> </li> <li> <p>Go Machine Learning Projects</p> <ul> <li>Author: Xuanyi Chew</li> <li>Publication Date: November 2018</li> <li>ISBN: 9781788993401</li> <li>Reference: https://www.packtpub.com/big-data-and-business-intelligence/go-machine-learning-projects</li> </ul> </li> <li> <p>Hands-On Dependency Injection in Go</p> <ul> <li>Author: Corey Scott</li> <li>Publication Date: November 2018</li> <li>ISBN: 9781789132762</li> <li>Reference: https://www.packtpub.com/application-development/hands-dependency-injection-go</li> </ul> </li> <li> <p>Hands-On Software Architecture with Golang</p> <ul> <li>Author: Jyotiswarup Raiturkar</li> <li>Publication Date: December 2018</li> <li>ISBN: 9781788622592</li> <li>Reference: https://www.packtpub.com/application-development/hands-software-architecture-golang</li> </ul> </li> <li> <p>Hands-On Fundamentals of Data Science with Go (Video)</p> <ul> <li>Author: Sanket Gupta</li> <li>Publication Date: December 2018</li> <li>ISBN: 9781789539103</li> <li>Reference: https://www.packtpub.com/big-data-and-business-intelligence/hands-fundamentals-data-science-go-video</li> </ul> </li> <li> <p>Building RESTful APIs with Go (Video)</p> <ul> <li>Author: Bartlomiej Walczak</li> <li>Publication Date: December 2018</li> <li>ISBN: 978178961499</li> <li>Reference: https://www.packtpub.com/application-development/building-restful-apis-go-video</li> </ul> </li> <li> <p>Go Web Scraping Quick Start Guide</p> <ul> <li>Author: Vincent Smith</li> <li>Publication Date: January 2019</li> <li>ISBN: 9781789615708</li> <li>Reference: https://www.packtpub.com/big-data-and-business-intelligence/go-web-scraping-quick-start-guide</li> </ul> </li> <li> <p>Advanced Go Programming in 7 Days (Video)</p> <ul> <li>Author: Theofanis Despoudis</li> <li>Publication Date: January 2019</li> <li>ISBN: 9781788994880</li> <li>Reference: https://www.packtpub.com/application-development/advanced-go-programming-7-days-video</li> </ul> </li> <li> <p>Hands-On GUI Application Development in Go</p> <ul> <li>Author: Andrew Williams</li> <li>Publication Date: February 2019</li> <li>ISBN: 9781789138412</li> <li>Reference: https://www.packtpub.com/application-development/hands-gui-application-development-go</li> </ul> </li> <li> <p>Hands-On Full Stack Development with Go</p> <ul> <li>Author: Mina Andrawos</li> <li>Publication Date: March 2019</li> <li>ISBN: 9781789130751</li> <li>Reference: https://www.packtpub.com/web-development/hands-full-stack-development-go</li> </ul> </li> <li> <p>Learn Data Structures and Algorithms with Golang</p> <ul> <li>Author: Bhagvan Kommadi</li> <li>Publication Date: March 2019</li> <li>ISBN: 9781789618501</li> <li>Reference: https://www.packtpub.com/application-development/learn-data-structures-and-algorithms-golang</li> </ul> </li> <li> <p>Machine Learning With Go - Second Edition</p> <ul> <li>Author: Daniel Whitenack</li> <li>Publication Date: April 2019</li> <li>ISBN: 9781789619898</li> <li>Reference: https://www.packtpub.com/big-data-and-business-intelligence/machine-learning-go-second-edition?utm_source=Golang&amp;utm_medium=referral&amp;utm_campaign=Outreach</li> </ul> </li> <li> <p>Machine Learning with Go Quick Start Guide</p> <ul> <li>Author: Michael Bironneau and Toby Coleman</li> <li>Publication Date: May 2019</li> <li>ISBN: 9781838550356</li> <li>Reference: https://www.packtpub.com/big-data-and-business-intelligence/machine-learning-go-quick-start-guide?utm_source=Golang&amp;utm_medium=referral&amp;utm_campaign=Outreach</li> </ul> </li> <li> <p>Mastering Go - Second Edition</p> <ul> <li>Author: Mihalis Tsoukalos</li> <li>Publication Date: 10 Sept 2019</li> <li>ISBN: 9781838559335</li> <li>Reference: https://www.packtpub.com/programming/mastering-go-second-edition</li> <li>Reference: https://www.amazon.com/Mastering-production-applications-concurrency-structures/dp/1838559337/</li> </ul> </li> <li> <p>Hands-on Microservices with Go and MongoDB [Video] </p> <ul> <li>Author: Gautam Rege</li> <li>Publication Date: 22 Nov 2019</li> <li>ISBN: 9781838648558</li> <li>References: https://www.packtpub.com/web-development/hands-on-microservices-with-go-and-mongodb-video?utm_source=Golang&amp;utm_medium=&amp;utm_campaign=Outreach</li> </ul> </li> <li> <p>The Go Workshop (e-book)</p> <ul> <li>Author: Delio D'Anna</li> <li>Publication Date: December 30, 2019</li> <li>ISBN: 9781838647940</li> <li>References: https://www.packtpub.com/programming/the-go-workshop?utm_source=GoLang&amp;utm_medium=Github&amp;utm_campaign=OutreachB14177dollar5</li> </ul> </li> <li> <p>Concise Go</p> <ul> <li>Author: Yaniv Astamnep</li> <li>Publication Date: January 22, 2020</li> <li>ISBN: 9798602419887</li> <li>References: <ul> <li>https://www.amazon.com/Concise-Go-Yaniv-Astamnep-ebook/dp/B0844MWN92</li> <li>https://www.amazon.com/Concise-Go-Yaniv-Astamnep/dp/B083XVZ2BZ</li> </ul> </li> </ul> </li> <li> <p>Black Hat Go</p> </li> <li>Author: Tom Steele, Chris Patten, and Dan Kottmann</li> <li>Publication Date: January 24, 2020</li> <li>ISBN: 978-1-59327-865-6</li> <li> <p>Reference: https://www.nostarch.com/blackhatgo</p> </li> <li> <p>Hands-On Software Engineering with Golang</p> </li> <li>Author: Hands-On Software Engineering with Golang</li> <li>Publication Date: January 24, 2020</li> <li>ISBN: 978-1-83855-449-1</li> <li> <p>Reference: https://www.packtpub.com/product/hands-on-software-engineering-with-golang/9781838554491</p> </li> <li> <p>Nonsequential and Distributed Programming with Go</p> <ul> <li>Author: Christian Maurer</li> <li>Publication Date: January 21, 2021</li> <li>ISBN: 978-3-658-29781-7 (Softcover) and 978-3-658-20782-4 (eBook)</li> <li>References: <ul> <li>https://www.springer.com/gp/book/9783658297817</li> </ul> </li> </ul> </li> <li> <p>Building Cross-Platform GUI Applications with Fyne</p> </li> <li>Author: Andrew Williams</li> <li>Publication Date: January 2021</li> <li>ISBN: 9781800563162</li> <li> <p>Reference: https://www.packtpub.com/product/building-cross-platform-gui-applications-with-fyne/9781800563162</p> </li> <li> <p>Hands-on Go programming</p> </li> <li>Author: Sachchidanand Singh, Prithvipal Singh</li> <li>Publication Date: February 2021</li> <li>ISBN: 9789389898194</li> <li> <p>Reference: https://bpbonline.com/products/hands-on-go-programming</p> </li> <li> <p>Learning Go: An Idiomatic Approach to Real-World Go Programming</p> </li> <li>Author: Jon Bodner</li> <li>Publication Date: March 23, 2021</li> <li> <p>Reference: https://www.oreilly.com/library/view/learning-go/9781492077206/</p> </li> <li> <p>Network Programming with Go</p> </li> <li>Author: Adam Woodbeck</li> <li>Publication Date: March 25, 2021</li> <li> <p>Reference: https://nostarch.com/networkprogrammingwithgo</p> </li> <li> <p>Distributed Services with Go: Your Guide to Reliable, Scalable, and Maintainable Systems</p> <ul> <li>Author: Travis Jeffery</li> <li>Publication Date: March 2021</li> <li>ISBN: 9781680507607</li> <li>Reference: https://pragprog.com/titles/tjgo/distributed-services-with-go/</li> </ul> </li> <li> <p>Cloud Native Go</p> </li> <li>Author: Matthew A. Titmus</li> <li>Publication Date: May 11, 2021</li> <li>ISBN: 9781492076339</li> <li> <p>Reference: https://www.oreilly.com/library/view/cloud-native-go/9781492076322/</p> </li> <li> <p>Building Distributed Applications in Gin</p> </li> <li>Author: Mohamed Labouardy</li> <li>Publication Date: July 23, 2021</li> <li> <p>Reference: https://www.packtpub.com/product/building-distributed-applications-in-gin/9781801074858</p> </li> <li> <p>Ultimate Go Notebook</p> </li> <li>Author: William Kennedy and Hoanh An</li> <li>Publication Date: August 13, 2021</li> <li> <p>Reference: https://courses.ardanlabs.com/courses/ultimate-go-notebook</p> </li> <li> <p>Mastering Go - Third Edition</p> <ul> <li>Author: Mihalis Tsoukalos</li> <li>Publication Date: 31 August 2021</li> <li>ISBN-10: 1801079315</li> <li>ISBN-13: 978-1801079310</li> <li>Reference: https://www.packtpub.com/product/mastering-go-third-edition/9781801079310</li> <li>Reference: https://www.amazon.com/Mastering-Go-professional-utilities-concurrent-dp-1801079315/dp/1801079315</li> </ul> </li> <li> <p>Go Optimizations 101</p> <ul> <li>Author: Tapir Liu</li> <li>Publication Date: 22 December 2021</li> <li>Reference: https://go101.org/optimizations/101.html</li> </ul> </li> <li> <p>Go Details &amp; Tips 101</p> <ul> <li>Author: Tapir Liu</li> <li>Publication Date: 22 December 2021</li> <li>Reference: https://go101.org/details-and-tips/101.html</li> </ul> </li> <li> <p>Powerful Command-Line Applications in Go</p> </li> <li>Author: Ricardo Gerardi</li> <li>Publication Date: December 2021</li> <li>ISBN: 9781680506969</li> <li> <p>Reference: https://pragprog.com/titles/rggo/powerful-command-line-applications-in-go/</p> </li> <li> <p>Go Generics 101</p> <ul> <li>Author: Tapir Liu</li> <li>Publication Date: 07 April 2021</li> <li>Reference: https://go101.org/generics/101.html</li> </ul> </li> <li> <p>Know Go: Generics (e-book)</p> <ul> <li>Author: John Arundel</li> <li>Publication Date: April 2022</li> <li>Reference: https://bitfieldconsulting.com/books/generics</li> </ul> </li> <li> <p>The Power of Go: Tools (e-book)</p> <ul> <li>Author: John Arundel</li> <li>Publication Date: September 2022</li> <li>Reference: https://bitfieldconsulting.com/books/tools</li> </ul> </li> <li> <p>The Power of Go: Tests (e-book)</p> <ul> <li>Author: John Arundel</li> <li>Publication Date: September 2022</li> <li>Reference: https://bitfieldconsulting.com/books/tests</li> </ul> </li> <li> <p>For the Love of Go (e-book)</p> </li> <li>Author: John Arundel</li> <li>Publication Date: September 2022</li> <li> <p>Reference: https://bitfieldconsulting.com/books/love</p> </li> <li> <p>100 Go Mistakes and How to Avoid Them</p> <ul> <li>Author: Teiva Harsanyi</li> <li>Publication Date: October 2022</li> <li>ISBN: 9781617299599</li> <li>Reference: https://www.manning.com/books/100-go-mistakes-and-how-to-avoid-them</li> </ul> </li> </ul>"},{"location":"Books/#early-access","title":"Early Access","text":"<ul> <li> <p>A Comprehensive Guide to Go Programming</p> <ul> <li>Authors: Baiju Muthukadan</li> <li>Publication Date: June 10, 2015</li> <li>ISBN: \u2014</li> <li>Reference: http://golang.muthukadan.net/</li> </ul> </li> <li> <p>WebAssembly in Action</p> <ul> <li>Author:  Gerard Gallant </li> <li>Publication Date: Spring 2019 (estimated) </li> <li>ISBN: 9781617295744</li> <li>Reference: https://www.manning.com/books/webassembly-in-action</li> </ul> </li> <li> <p>Build an Orchestrator in Go</p> <ul> <li>Author: Tim Boring</li> <li>Publication Date: May 2022 (estimated)</li> <li>ISBN: 9781617299759</li> <li>Reference: https://www.manning.com/books/build-an-orchestrator-in-go</li> </ul> </li> <li> <p>Effective Go</p> <ul> <li>Author: Effective Go</li> <li>Publication Date: Fall 2022 (estimated)</li> <li>ISBN: 9781617299896</li> <li>Reference: https://www.manning.com/books/effective-go</li> </ul> </li> <li> <p>Efficient Go</p> <ul> <li>Author: Bartlomiej Plotka and Frederic Branczyk </li> <li>Publication Date: December 2022</li> <li>ISBN: 9781098105648</li> <li>Reference: https://www.oreilly.com/library/view/efficient-go/9781098105709/</li> </ul> </li> <li> <p>gRPC Microservices in Go</p> <ul> <li>Authors: Huseyin BABAL</li> <li>Publication Date: Spring 2023</li> <li>ISBN: \u2014</li> <li>Reference: https://shortener.manning.com/44lB</li> </ul> </li> </ul>"},{"location":"Books/#available-without-publication-date","title":"Available without Publication Date","text":"<ul> <li> <p>Learning Go (e-book)</p> <ul> <li>Author: Miek Gieben</li> <li>Publication Date: \u2014</li> <li>ISBN: \u2014</li> <li>Reference: http://archive.miek.nl/projects/learninggo/</li> </ul> </li> <li> <p>Network Programming with Go (e-book)</p> <ul> <li>Author: Jan Newmarch</li> <li>Publication Date: \u2014</li> <li>ISBN: \u2014</li> <li>References: http://jan.newmarch.name/go/</li> </ul> </li> <li> <p>Go Bootcamp (e-book)</p> <ul> <li>Author: Matt Aimonetti</li> <li>Publication Date: \u2014</li> <li>ISBN: \u2014</li> <li>References: http://www.golangbootcamp.com/</li> </ul> </li> <li> <p>A Go Developer's Notebook (e-book)</p> <ul> <li>Author: Eleanor McHugh</li> <li>Publication Date: \u2014</li> <li>ISBN: \u2014</li> <li>References: https://leanpub.com/GoNotebook</li> </ul> </li> <li> <p>Go, The Standard Library (e-book)</p> <ul> <li>Author: Daniel Huckstep</li> <li>Publication Date: \u2014</li> <li>ISBN: \u2014</li> <li>References: http://thestandardlibrary.com/go.html</li> </ul> </li> <li> <p>Practical Cryptography with Go (e-book)</p> <ul> <li>Author: Kyle Isom</li> <li>Publication Date: \u2014</li> <li>ISBN: \u2014</li> <li>References: https://leanpub.com/gocrypto</li> </ul> </li> <li> <p>The Ultimate Guide to Building Database-Driven Apps with Go (e-book)</p> <ul> <li>Author: Baron Schwartz</li> <li>Publication Date: \u2014</li> <li>ISBN: \u2014</li> <li>References: https://vividcortex.com/resources/building-database-driven-apps-with-go/</li> </ul> </li> <li> <p>Building Web Apps with Go (e-book)</p> <ul> <li>Author: Jeremy Saenz</li> <li>Publication Date: \u2014</li> <li>ISBN: \u2014</li> <li>References: https://www.gitbook.com/book/codegangsta/building-web-apps-with-go/details</li> </ul> </li> <li> <p>How do I Write and Deploy Simple Web Apps with Go? (e-book)</p> <ul> <li>Author: Satish Talim</li> <li>Publication Date: \u2014</li> <li>ISBN: \u2014</li> <li>References: https://leanpub.com/howdoibuildawebappwithgo</li> </ul> </li> <li> <p>Test-driven development with Go (e-book)</p> <ul> <li>Author: Yigal Duppen</li> <li>Publication Date: \u2014</li> <li>ISBN: \u2014</li> <li>References: https://leanpub.com/golang-tdd</li> </ul> </li> <li> <p>Learn Go (e-book)</p> <ul> <li>Author: Gyu-ho Lee</li> <li>Publication Date: \u2014</li> <li>ISBN: \u2014</li> <li>References: gyuho/learn#contents</li> </ul> </li> <li> <p>Learn Golang the Hard Way (e-book)</p> <ul> <li>Author: Laszlo Csontos</li> <li>Publication Date: \u2014</li> <li>ISBN: \u2014</li> <li>References: http://www.learngolangthehardway.org/</li> </ul> </li> <li> <p>Go 101 (e-book)</p> <ul> <li>Author: Tapir Liu</li> <li>Publication Date: \u2014</li> <li>ISBN: \u2014</li> <li>References: https://go101.org</li> </ul> </li> <li> <p>Creative DIY Microcontroller Projects with TinyGo and WebAssembly </p> <ul> <li>Author: Tobias Theel</li> <li>Publication Date: May 2021</li> <li>ISBN: 9781800560208</li> <li>References: https://www.packtpub.com/product/creative-diy-microcontroller-projects-with-tinygo-and-webassembly/9781800560208</li> </ul> </li> <li> <p>Go for Javascript Developers </p> <ul> <li>Author: Maor Zamski and Daniel Singer</li> <li>Publication Date: \u2014</li> <li>ISBN: \u2014</li> <li>References: pazams/go-for-javascript-developers</li> </ul> </li> <li> <p>Learn Go with Tests </p> <ul> <li>Author: Chris James</li> <li>Publication Date: \u2014</li> <li>ISBN: \u2014</li> <li>References: https://quii.gitbook.io/learn-go-with-tests/</li> </ul> </li> <li> <p>Practical Go Lessons </p> <ul> <li>Author: Maximilien Andile</li> <li>Publication Date: \u2014</li> <li>ISBN: \u2014</li> <li>References: https://www.practical-go-lessons.com/</li> </ul> </li> </ul>"},{"location":"Books/#cancelled-or-status-indeterminable","title":"Cancelled or Status Indeterminable","text":"<ul> <li>Microservices in Go<ul> <li>Authors: Matthew Campbell</li> <li>Publication Date: Fall 2015 (est.)</li> <li>ISBN: \u2014</li> <li>Reference: http://microservicesingo.com/</li> <li>Status: Cancelled per O'Reilly Employee</li> </ul> </li> </ul>"},{"location":"Books/#chinese","title":"Chinese","text":"<ul> <li> <p>Go\u8bed\u8a00\u00b7\u4e91\u52a8\u529b</p> <ul> <li>Author: \u6a0a\u8679\u5251\uff08fango\uff09</li> <li>Publication Date: 2012-06</li> <li>ISBN: 978-7-115-28307-8</li> <li>Reference: http://www.ituring.com.cn/book/1040</li> </ul> </li> <li> <p>Go\u8bed\u8a00\u7f16\u7a0b</p> <ul> <li>Author: \u8bb8\u5f0f\u4f1f</li> <li>Publication Date: 2012-08</li> <li>ISBN: 978-7-115-29036-6</li> <li>Reference: http://www.ituring.com.cn/book/967</li> </ul> </li> <li> <p>Go Web\u7f16\u7a0b</p> <ul> <li>Author: \u8c22\u5b5f\u519b</li> <li>Publication Date: 2013-05</li> <li>ISBN: 9787121200915</li> <li>Reference: astaxie/build-web-application-with-golang</li> </ul> </li> <li> <p>Go\u8bed\u8a00\u7a0b\u5e8f\u8bbe\u8ba1 (Programming in Go: Creating Applications for the 21<sup>st</sup> Century)</p> <ul> <li>Author: Mark Summerfield</li> <li>Translator: \u8bb8\u5f0f\u4f1f, \u5415\u6842\u534e, \u5f90\u7acb, \u4f55\u674e\u77f3</li> <li>Publication Date: 2013-08</li> <li>ISBN: 978-7-115-31790-2</li> <li>Reference: https://www.ptpress.com.cn/shopping/buy?bookId=27c4a9e0-e3df-4cb4-8992-b42c2e4368e8</li> </ul> </li> <li> <p>Go\u5e76\u53d1\u7f16\u7a0b\u5b9e\u6218</p> <ul> <li>Author: \u90dd\u6797</li> <li>Publication Date: 2015-01-01</li> <li>ISBN: 9787115373984</li> <li>Reference: http://www.ptpress.com.cn/Book.aspx?id=39783</li> </ul> </li> <li> <p>\u5b66\u4e60 Go \u8bed\u8a00 (e-book / Translation)</p> <ul> <li>Author: Xing Xing (mikespook)</li> <li>Publication Date: \u2014</li> <li>ISBN: \u2014</li> <li>Reference: http://www.mikespook.com/learning-go/</li> </ul> </li> <li> <p>Go \u5b66\u4e60\u7b14\u8bb0 - \u7b2c\u56db\u7248 (e-book)</p> <ul> <li>Author: \u96e8\u75d5\uff08qyuhen\uff09</li> <li>Publication Date: \u2014</li> <li>ISBN: \u2014</li> <li>Reference: qyuhen/book</li> </ul> </li> <li> <p>Go\u8bed\u8a00\u9ad8\u7ea7\u7f16\u7a0b (\u5b9e\u4f53\u4e66 &amp; e-book)</p> <ul> <li>Author: \u67f4\u6811\u6749\uff08chai2010\uff09</li> <li>Publication Date: 2019-07</li> <li>ISBN: 978-7-115-51036-5</li> <li>Reference: https://www.epubit.com/bookDetails?id=N40090</li> <li>Reference: chai2010/advanced-go-programming-book</li> </ul> </li> <li> <p>Go\u8bed\u8a00\u5b9a\u5236\u6307\u5357 (\u5b9e\u4f53\u4e66 &amp; e-book)</p> <ul> <li>Author: \u67f4\u6811\u6749\uff08chai2010\uff09</li> <li>Publication Date: 2022-03</li> <li>ISBN: 978-7-115-58441-0</li> <li>Reference: https://www.epubit.com/bookDetails?id=UBc86f749c1eb7</li> <li>Reference: chai2010/go-ast-book</li> </ul> </li> <li> <p>Go\u8bed\u8a00101 (e-book)</p> <ul> <li>Author: \u8001\u8c98</li> <li>Publication Date: \u2014</li> <li>ISBN: \u2014</li> <li>References: https://gfw.go101.org/</li> </ul> </li> <li> <p>\u00b5Go\u8bed\u8a00\u5b9e\u73b0\u2014\u2014\u5982\u4f55\u4ece\u5934\u5f00\u53d1\u4e00\u4e2a\u8ff7\u4f60Go\u8bed\u8a00\u7f16\u8bd1\u5668 (e-book)</p> <ul> <li>Author: \u67f4\u6811\u6749\uff08chai2010\uff09</li> <li>Publication Date: \u2014</li> <li>ISBN: \u2014</li> <li>Reference: chai2010/ugo-compiler-book</li> </ul> </li> </ul>"},{"location":"Books/#japanese","title":"Japanese","text":"<ul> <li> <p>\u306f\u3058\u3081\u3066\u306e\u300cGo\u8a00\u8a9e\u300d</p> <ul> <li>Author: \u8328\u6728 \u9686\u5f70</li> <li>Publication Date: 2010-11</li> <li>ISBN: 978-4777515592</li> <li>Reference:</li> </ul> </li> <li> <p>Go\u8a00\u8a9e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5165\u9580on Google App Engine</p> <ul> <li>Author: \u6a2a\u5c71 \u9686\u53f8</li> <li>Publication Date: 2011-12</li> <li>ISBN: 978-4798031804</li> <li>Reference:</li> </ul> </li> <li> <p>\u306f\u3058\u3081\u3066\u306eGoogle App Engine Go\u8a00\u8a9e\u7de8</p> <ul> <li>Author: \u8328\u6728 \u9686\u5f70</li> <li>Publication Date: 2012-2</li> <li>ISBN: 978-4777516605</li> <li>Reference:</li> </ul> </li> <li> <p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9eGo\u30d5\u30ec\u30fc\u30ba\u30d6\u30c3\u30af</p> <ul> <li>Author: David Chisnall (\u8457), \u30c7\u30a4\u30d3\u30c3\u30c9\u30fb\u30c1\u30ba\u30ca\u30fc\u30eb (\u8457), \u67f4\u7530 \u82b3\u6a39 (\u7ffb\u8a33)</li> <li>Publication Date: 2012-10</li> <li>ISBN: 978-4864010962</li> <li>Reference:</li> </ul> </li> <li> <p>\u57fa\u790e\u304b\u3089\u308f\u304b\u308b Go\u8a00\u8a9e</p> <ul> <li>Author: \u53e4\u5ddd \u6607</li> <li>Publication Date: 2012-11</li> <li>ISBN: 978-4863541177</li> <li>Reference:</li> </ul> </li> <li> <p>Go\u8a00\u8a9e\u306b\u3088\u308bWeb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u958b\u767a</p> <ul> <li>Author: Mat Ryer (\u8457)\u3001\u9d5c\u98fc \u6587\u654f (\u76e3\u8a33)\u3001\u7267\u91ce \u8061 (\u8a33)</li> <li>Publication Date: 2016-01</li> <li>ISBN: 978-4-87311-752-2</li> <li>Reference: http://www.oreilly.co.jp/books/9784873117522/</li> </ul> </li> <li> <p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9eGo</p> <ul> <li>Authors: Alan A. A. Donovan, Brian W. Kernighan; translated by Yoshiki Shibata</li> <li>Publication Date: 20 June 2016</li> <li>ISBN: 978-4-62130-025-1</li> <li>Reference: http://www.gopl.io/translations.html</li> </ul> </li> <li> <p>\u307f\u3093\u306a\u306eGo\u8a00\u8a9e</p> <ul> <li>Authors: \u677e\u6728\u96c5\u5e78, mattn, \u85e4\u539f\u4fca\u4e00\u90ce, \u4e2d\u5cf6\u5927\u4e00, \u7267 \u5927\u8f14, \u9234\u6728\u5065\u592a</li> <li>Publication Date: 9 Sep 2016</li> <li>ISBN: 978-4774183923</li> <li>Reference: http://www.amazon.co.jp/exec/obidos/ASIN/477418392X/</li> </ul> </li> <li> <p>Go\u8a00\u8a9e\u306b\u3088\u308b\u4e26\u884c\u51e6\u7406</p> <ul> <li>Authors: Katherine Cox-Buday\uff08\u8457\uff09\u3001\u5c71\u53e3 \u80fd\u8fea\uff08\u8a33\uff09</li> <li>Publication Date: 26 Oct 2018</li> <li>ISBN: 978-4-87311-846-8</li> <li>Reference: https://www.oreilly.co.jp/books/9784873118468/</li> </ul> </li> <li> <p>\u6539\u8a022\u7248 \u307f\u3093\u306a\u306eGo\u8a00\u8a9e</p> <ul> <li>Authors: \u677e\u6728\u96c5\u5e78, mattn, \u85e4\u539f\u4fca\u4e00\u90ce, \u4e2d\u5cf6\u5927\u4e00, \u4e0a\u7530 \u62d3\u4e5f, \u7267 \u5927\u8f14, \u9234\u6728\u5065\u592a</li> <li>Publication Date: August 1, 2019</li> <li>ISBN: 978-4297107277</li> <li>Reference: https://gihyo.jp/book/2019/978-4-297-10727-7</li> </ul> </li> <li> <p>Go\u8a00\u8a9e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30a8\u30c3\u30bb\u30f3\u30b9</p> <ul> <li>Authors: mattn</li> <li>Publication Date: Mar 9, 2023</li> <li>ISBN: 978-4297134198</li> <li>Reference: https://gihyo.jp/book/2023/978-4-297-13419-8</li> </ul> </li> </ul>"},{"location":"Books/#french","title":"French","text":"<ul> <li> <p>Programmer en Go - Pourquoi ? Comment ?</p> <ul> <li>Author: Rudy Rigot</li> <li>Publication Date: 24 Jan 2018</li> <li>ISBN: 978-2-8227-0660-5</li> <li>Reference: https://www.d-booker.fr/go-bases/499-programmer-en-go-pourquoi-comment.html</li> </ul> </li> <li> <p>Le langage Go - Les fondamentaux du langage</p> <ul> <li>Author: Fr\u00e9d\u00e9ric G. Marand</li> <li>Publication Date: 23 Jun 2020</li> <li>ISBN: 978-2100804108</li> <li>Reference (book site): https://osinet.fr/go/</li> <li>Reference (publisher): https://www.dunod.com/sciences-techniques/langage-go-fondamentaux-du-langage</li> </ul> </li> </ul>"},{"location":"Books/#german","title":"German","text":"<ul> <li> <p>Programmierung in Google Go (not available for buying any more)</p> <ul> <li>Authors: Rainer Feike and Steffen Blass</li> <li>Publication Date: 2010-11</li> <li>ISBN: 978-3-8632-4722-5</li> <li>Reference (Amazon): http://www.amazon.de/Programmierung-Google-Beispiele-professionelle-Anwendung/dp/3827330092</li> <li>Reference (Google Books): https://books.google.de/books?id=E4IL5dT1yLsC&amp;printsec=frontcover&amp;hl=de#v=onepage&amp;q&amp;f=false</li> </ul> </li> <li> <p>Systemprogrammierung in Google Go</p> <ul> <li>Author: Frank M\u00fcller</li> <li>Publication Date: 2011-01</li> <li>ISBN: 978-3-89864-712-0</li> <li>Reference: http://dpunkt.de/buecher/3762/-systemprogrammierung-in-google-go.html</li> </ul> </li> <li> <p>Nichtsequentielle und Verteilte Programmierung mit Go (4<sup>th</sup> edition) (available as print and e-book)</p> <ul> <li>Author: Christian Maurer</li> <li>Publication Date: 2019-07</li> <li>ISBN: 978-3-658-26289-1 (Softcover) and 978-3-658-26290-7 (eBook)</li> <li>Reference: https://www.springer.com/de/book/9783658262891</li> </ul> </li> <li> <p>Einstieg in Google Go (e-book)</p> <ul> <li>Author: Christian Himpel and Mario Deilmann</li> <li>Publication Date: 2012-04</li> <li>ISBN: 978-3-86802-415-9</li> <li>Reference: http://entwickler.de/press/Einstieg-in-Google-Go</li> </ul> </li> </ul>"},{"location":"Books/#brazilian-portuguese","title":"Brazilian Portuguese","text":"<ul> <li> <p>A Linguagem de Programa\u00e7\u00e3o Go</p> <ul> <li>Author:  Alan A. A. Donovan, Brian W. Kernighan </li> <li>Publication Date: 2017</li> <li>ISBN: 978-85-7522-546-2</li> <li>Reference: https://novatec.com.br/livros/linguagem-de-programacao-go/</li> </ul> </li> <li> <p>Programando em Go: crie aplica\u00e7\u00f5es com a linguagem do Google</p> <ul> <li>Author: Caio Filipini</li> <li>Publication Date: 2014-07-01</li> <li>ISBN: 978-85-66250-49-7</li> <li>Reference: http://www.casadocodigo.com.br/products/livro-google-go</li> </ul> </li> <li> <p>Introdu\u00e7\u00e3o \u00e0 Linguagem Go: Crie Programas Escal\u00e1veis e Confi\u00e1veis</p> <ul> <li>Author: Caleb Doxsey</li> <li>Publication Date: 2016-08-04</li> <li>ISBN: 978-85-75224-89-2</li> <li>Reference: http://shop.oreilly.com/product/0636920046516.do</li> </ul> </li> </ul>"},{"location":"Books/#russian","title":"Russian","text":"<ul> <li> <p>\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 Go</p> <ul> <li>Author: \u041c\u0430\u0440\u043a \u0421\u0430\u043c\u043c\u0435\u0440\u0444\u0438\u043b\u044c\u0434</li> <li>Publication Date: 2013-02-14</li> <li>ISBN: 978-5-94074-854-0</li> <li>Reference: http://dmkpress.com/catalog/computer/programming/978-5-94074-854-0/</li> </ul> </li> <li> <p>\u042f\u0437\u044b\u043a \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Go</p> <ul> <li>Author: \u0410\u043b\u0430\u043d \u0410. \u0410. \u0414\u043e\u043d\u043e\u0432\u0430\u043d, \u0411\u0440\u0430\u0439\u0430\u043d \u0423. \u041a\u0435\u0440\u043d\u0438\u0433\u0430\u043d</li> <li>Publication Date: 2016-04-21</li> <li>ISBN: 978-5-8459-2051-5</li> <li>Reference: http://www.williamspublishing.com/Books/978-5-8459-2051-5.html</li> </ul> </li> <li> <p>Go \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435</p> <ul> <li>Author: \u0411\u0430\u0442\u0447\u0435\u0440 \u041c., \u0424\u0430\u0440\u0438\u043d\u0430 \u041c.</li> <li>Publication Date: 2017-01</li> <li>ISBN: 978-5-97060-477-9</li> <li>Reference: http://dmkpress.com/catalog/computer/programming/978-5-97060-477-9/</li> </ul> </li> <li> <p>Golang \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0438: \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u0435\u0442\u044c\u044e, \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c, \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0441 Go</p> <ul> <li>Author: \u0426\u0443\u043a\u0430\u043b\u043e\u0441 \u041c.</li> <li>Publication Date: 2020</li> <li>ISBN: 978-5-4461-1617-1</li> <li>Reference: https://www.piter.com/product/golang-dlya-profi-rabota-s-setyu-mnogopotochnost-struktury-dannyh-i-mashinnoe-obuchenie-s-go</li> </ul> </li> </ul>"},{"location":"Books/#espa\u00f1ol","title":"Espa\u00f1ol","text":"<ul> <li> <p>Aprende Go en Y minutoshttps://go101.org</p> <ul> <li>Author: Nacho Pacheco</li> <li>Publication Date: 2015-02-24</li> <li>ISBN: \u2014</li> <li>Reference: https://www.gitbook.com/book/nachopacheco/aprende-go-en-y-minutos/</li> </ul> </li> <li> <p>Constr\u00aduyendo\u00ad aplic\u00adacione\u00ads Web \u00adcon Go</p> <ul> <li>Author: Nacho Pacheco</li> <li>Publication Date: 2015-02-18</li> <li>ISBN: \u2014</li> <li>Reference: https://www.gitbook.com/book/nachopacheco/cawg/</li> </ul> </li> <li> <p>\u00a1Go en Espa\u00f1ol!</p> <ul> <li>Author: Nacho Pacheco</li> <li>Publication Date: 2015-03-22</li> <li>ISBN: \u2014</li> <li>Reference: https://www.gitbook.com/book/nachopacheco/go-es/</li> </ul> </li> </ul>"},{"location":"Books/#korean","title":"Korean","text":"<ul> <li> <p>\uac00\uc7a5 \ube68\ub9ac \ub9cc\ub098\ub294 Go \uc5b8\uc5b4</p> <ul> <li>Author: \uc774\uc7ac\ud64d</li> <li>Publication Date: June 2015</li> <li>ISBN: 978-8-96618-990-8</li> <li>Reference: http://www.pyrasis.com/private/2015/06/01/publish-go-for-the-really-impatient-book</li> </ul> </li> <li> <p>\uac1c\ubc1c\uc790\ub97c \uc704\ud55c \ud558\ub8fb\ubc24\uc5d0 \uc77d\ub294 Go \uc5b8\uc5b4 \uc774\uc57c\uae30</p> <ul> <li>Author: \uc2e0\uc81c\uc6a9</li> <li>Publication Date: December 2015</li> <li>ISBN: 978-8-96848-806-1</li> <li>Reference: http://www.hanbit.co.kr/store/books/look.php?p_code=E8544486990</li> </ul> </li> <li> <p>\ub514\uc2a4\ucee4\ubc84\ub9ac Go \uc5b8\uc5b4</p> <ul> <li>Author: \uc5fc\uc7ac\ud604</li> <li>Publication Date: March 2016</li> <li>ISBN: 9788-96848-268-7</li> <li>Reference: http://www.hanbit.co.kr/store/books/look.php?p_code=B5279497767</li> </ul> </li> <li> <p>Go \uc5b8\uc5b4 \uc6f9 \ud504\ub85c\uadf8\ub798\ubc0d \ucca0\uc800 \uc785\ubb38</p> <ul> <li>Author: \uc7a5\uc7ac\ud734</li> <li>Publication Date: March 2016</li> <li>ISBN: 979-1-18697-881-8</li> <li>Reference: http://www.gilbut.co.kr/book/bookView.aspx?bookcode=BN001434</li> </ul> </li> <li> <p>Go \uc778 \uc561\uc158</p> <ul> <li>Authors: William Kennedy with Brian Ketelsen and Erik St. Martin; translated by Hyunhee Jang</li> <li>Publication Date: June 2016</li> <li>ISBN: 979-1-18589-053-1</li> <li>Reference: http://jpub.tistory.com/585</li> </ul> </li> <li> <p>The Go Programming Language</p> <ul> <li>Authors: Alan A. A. Donovan, Brian W. Kernighan; translated by Seung Lee</li> <li>Publication Date: June 2016</li> <li>ISBN: 978-0-13419-044-0</li> <li>Reference: http://www.acornpub.co.kr/book/go-programming</li> </ul> </li> <li> <p>Go \uc6f9 \ud504\ub85c\uadf8\ub798\ubc0d</p> <ul> <li>Author: Sau Sheong Chang; translated by Jinwook Jeong</li> <li>Publication Date: March 2017</li> <li>ISBN: 979-1-18669-731-3</li> <li>Reference: http://www.bjpublic.co.kr/skin12/productSearchView.php?board_data=aWR4PTIxMyZzdGFydFBhZ2U9MCZsaXN0Tm89MzM</li> </ul> </li> <li> <p>\ud504\ub85c\uc81d\ud2b8\ub85c \uc644\uc131\ud558\ub294 Go \ud504\ub85c\uadf8\ub798\ubc0d</p> <ul> <li>Author: Mat Ryer; translated by Soonbeom Kwon</li> <li>Publication Date: August 2017</li> <li>ISBN: 979-1-16175-032-3</li> <li>Reference: http://www.acornpub.co.kr/book/go-blueprints-2</li> </ul> </li> <li> <p>Go \uc5b8\uc5b4 \uc2e4\uc804 \ud14c\ud06c\ub2c9</p> <ul> <li>Authors: \u677e\u6728\u96c5\u5e78, mattn, \u85e4\u539f\u4fca\u4e00\u90ce, \u4e2d\u5cf6\u5927\u4e00, \u7267 \u5927\u8f14, \u9234\u6728\u5065\u592a; translated by Hyuntae Park</li> <li>Publication Date: August 2017</li> <li>ISBN: 979-1-16175-026-2</li> <li>Reference: http://www.acornpub.co.kr/book/go-language-minna</li> </ul> </li> <li> <p>Go Cookbook</p> <ul> <li>Author: Aaron Torres; translated by Sangsik Lee</li> <li>Publication Date: December 2017</li> <li>ISBN: 979-1-16175-088-0</li> <li>Reference: http://www.acornpub.co.kr/book/go-cookbook</li> </ul> </li> <li> <p>Go \uc5b8\uc5b4\ub97c \ud65c\uc6a9\ud55c \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \uac1c\ubc1c</p> <ul> <li>Author: Nic Jackson; translated by Sangsik Lee</li> <li>Publication Date: July 2018</li> <li>ISBN: 979-1-16175-190-0</li> <li>Reference: http://www.acornpub.co.kr/book/microservices-go</li> </ul> </li> <li> <p>Go \uc5b8\uc5b4 \uc2dc\uc791\ud558\uae30</p> <ul> <li>Author: \ubc15\ud61c\uc601, \uc11c\uc815\uc778</li> <li>Publication Date: September 2018</li> <li>ISBN: 979-1-15600-606-0</li> <li>Reference: http://www.hongpub.co.kr/sub.php?goPage=view_product&amp;flashpage=&amp;Code=20180911072243</li> </ul> </li> <li> <p>Go \ub9c8\uc2a4\ud130\ud558\uae30</p> <ul> <li>Author: Mihalis Tsoukalos; translated by Kihyuk Nam</li> <li>Publication Date: October 2018</li> <li>ISBN: 979-1-16175-208-2</li> <li>Reference: http://acornpub.co.kr/book/mastering-go</li> </ul> </li> </ul>"},{"location":"Books/#indonesian","title":"Indonesian","text":"<ul> <li> <p>Bahasa Pemrograman Go</p> <ul> <li>Author: Sajarwo Anggai</li> <li>Publication Date: October 21, 2013</li> <li>ISBN: \u2014</li> <li>Reference: https://sajarwo87.wordpress.com/2013/10/21/buku-bahasa-pemrograman-go/</li> </ul> </li> <li> <p>Dasar Pemrograman Golang</p> <ul> <li>Author: Noval Agung Prayogo</li> <li>Publication Date: Oktober 30, 2015</li> <li>ISBN: \u2014</li> <li>Reference: https://dasarpemrogramangolang.novalagung.com</li> </ul> </li> </ul>"},{"location":"Books/#italian","title":"Italian","text":"<ul> <li>Programmare in Linguaggio Go<ul> <li>Author: Renato Mite</li> <li>Publication Date: 9 Oct 2016</li> <li>ISBN: \u2014</li> <li>Reference (Amazon): https://www.amazon.it/dp/B01M2URIVX</li> <li>Reference (Google Books): https://play.google.com/store/books/details/Renato_Mite_Programmare_in_Linguaggio_Go?id=4Ag6DQAAQBAJ</li> <li>Reference (Kobo Books): https://store.kobobooks.com/it-it/ebook/programmare-in-linguaggio-go</li> <li>Repository: rmite/gobook</li> </ul> </li> </ul>"},{"location":"Books/#polish","title":"Polish","text":"<ul> <li>J\u0119zyk Go. Poznaj i programuj<ul> <li>Authors: Alan A. A. Donovan, Brian W. Kernighan; translated by Lech Lachowski</li> <li>Publication Date: July 2016</li> <li>ISBN: 978-83-283-2467-1</li> <li>Reference: https://helion.pl/ksiazki/jezyk-go-poznaj-i-programuj-alan-a-a-donovan-brian-w-kernighan,jgopop.htm</li> </ul> </li> </ul>"},{"location":"Books/#persian","title":"Persian","text":"<ul> <li> <p>GoFarsi book</p> <ul> <li>Author: Javad Rajabzadeh</li> <li>Publication Date: 23 oct 2022</li> <li>ISBN: \u2014</li> <li>Repository: GoFarsi/book</li> <li>LiveBook: https://book.gofarsi.ir</li> </ul> </li> <li> <p>Go Succinctly</p> <ul> <li>Author: Amir Irani</li> <li>Publication Date: 10 Jun 2018</li> <li>ISBN: \u2014</li> <li>Repository: thedevsir/gosuccinctly</li> </ul> </li> </ul>"},{"location":"Books/#looking-for-contributors","title":"Looking for contributors","text":"<p>[Add Go books here that are looking for writers, editors, Gopher illustrators, and translators.]</p> <ul> <li>Go Web Development Cookbook<ul> <li>Author: Arpit Aggarwal</li> <li>Publication Date: April 2018</li> <li>ISBN: 9781787286740</li> <li>Reference: https://www.amazon.in/Web-Development-Cookbook-full-stack-applications/dp/1787286746</li> </ul> </li> </ul>"},{"location":"BoundingResourceUse/","title":"Bounding resource use","text":"<p>To bound a program's use of a limited resource - like memory - have goroutines synchronize their use of that resource using a buffered channel (i.e., use the channel as a semaphore):</p> <pre><code>const (\n\tAvailableMemory         = 10 &lt;&lt; 20 // 10 MB\n\tAverageMemoryPerRequest = 10 &lt;&lt; 10 // 10 KB\n\tMaxOutstanding          = AvailableMemory / AverageMemoryPerRequest\n)\n\nvar sem = make(chan int, MaxOutstanding)\n\nfunc Serve(queue chan *Request) {\n\tfor {\n\t\tsem &lt;- 1 // Block until there's capacity to process a request.\n\t\treq := &lt;-queue\n\t\tgo handle(req) // Don't wait for handle to finish.\n\t}\n}\n\nfunc handle(r *Request) {\n\tprocess(r) // May take a long time &amp; use a lot of memory or CPU\n\t&lt;-sem      // Done; enable next request to run.\n}\n</code></pre>"},{"location":"BoundingResourceUse/#references","title":"References","text":"<p>Effective Go's discussion of channels: https://go.dev/doc/effective_go#channels</p>"},{"location":"CSSStyleGuide/","title":"Go CSS Coding Guidelines","text":"<p>Please discuss changes before editing this page, even minor ones. Many people have opinions and this is not the place for edit wars.</p> <p>Go's naming conventions are adapted from Medium's style guide and the work being done in the SUIT CSS framework. Which is to say, it relies on structured class names and meaningful hyphens (i.e., not using hyphens merely to separate words). This is to help work around the current limits of applying CSS to the DOM (i.e., the lack of style encapsulation) and to better communicate the relationships between classes.</p> <p>We require plain CSS over preprocessors like LESS, SASS, etc. This is to avoid additional tooling dependencies.</p>"},{"location":"CSSStyleGuide/#javascript","title":"JavaScript","text":"<p>syntax: <code>js-&lt;targetName&gt;</code></p> <p>JavaScript-specific classes reduce the risk that changing the structure or theme of components will inadvertently affect any required JavaScript behavior and complex functionality. You must use these classes if you interact with the DOM via JavaScript. In practice this looks like this:</p> <pre><code>&lt;a href=\"/login\" class=\"Button Button--primary js-login\"&gt;&lt;/a&gt;\n</code></pre> <p>Again, JavaScript-specific classes should not, under any circumstances, be styled.</p>"},{"location":"CSSStyleGuide/#components","title":"Components","text":"<p>Syntax: <code>[namespace-]&lt;ComponentName&gt;[-descendantName][--modifierName]</code></p> <p>Component driven development offers several benefits when reading and writing HTML and CSS:</p> <ul> <li>It helps to distinguish between the classes for the root of the component, descendant elements, and modifications.</li> <li>It keeps the specificity of selectors low.</li> <li>It helps to decouple presentation semantics from document semantics.</li> </ul> <p>You can think of components as custom elements that enclose specific semantics, styling, and behavior.</p>"},{"location":"CSSStyleGuide/#namespace-optional","title":"namespace (optional)","text":"<p>If necessary, components can be prefixed with a namespace. For example, you may wish to avoid the potential for collisions between libraries and your custom components by prefixing all your components with a namespace.</p> <pre><code>.godoc-Button { /* \u2026 */ }\n.godoc-Tabs { /* \u2026 */ }\n</code></pre> <p>This makes it clear, when reading the HTML, which components are part of your library.</p>"},{"location":"CSSStyleGuide/#componentname","title":"ComponentName","text":"<p>The component's name must be written in camel case.</p> <pre><code>.MyComponent { /* \u2026 */ }\n&lt;article class=\"MyComponent\"&gt;\n  \u2026\n&lt;/article&gt;\n</code></pre>"},{"location":"CSSStyleGuide/#componentnamemodifiername","title":"ComponentName\u2013modifierName","text":"<p>A component modifier is a class that modifies the presentation of the base component in some form. Modifier names must be written in camel case and be separated from the component name by two hyphens. The class should be included in the HTML in addition to the base component class.</p> <pre><code>/* Core button */\n.Button { /* \u2026 */ }\n/* Default button style */\n.Button--default { /* \u2026 */ }\n&lt;button class=\"Button Button--primary\"&gt;\u2026&lt;/button&gt;\n</code></pre>"},{"location":"CSSStyleGuide/#componentname-descendantname","title":"ComponentName-descendantName","text":"<p>A component descendant is a class that is attached to a descendant node of a component. It's responsible for applying presentation directly to the descendant on behalf of a particular component. Descendant names must be written in camel case.</p> <pre><code>&lt;article class=\"Tweet\"&gt;\n  &lt;header class=\"Tweet-header\"&gt;\n    &lt;img class=\"Tweet-avatar\" src=\"{$src}\" alt=\"{$alt}\"&gt;\n    \u2026\n  &lt;/header&gt;\n  &lt;div class=\"Tweet-body\"&gt;\n    \u2026\n  &lt;/div&gt;\n&lt;/article&gt;\n</code></pre>"},{"location":"CSSStyleGuide/#componentnamearia-","title":"ComponentName[aria-] <p>Almost always, component states can be represented using ARIA (aria-expanded, aria-disabled, etc.) so they are recommended for state-based modifications of components. In the very rare case that there is a state that cannot be represented using ARIA, a CSS class of the format <code>is-stateName</code> can be used. The CSS state name must be Camel case. Never style these attributes/classes directly; they should always be used as an adjoining class or attribute.</p> <p>JS can add/remove these attributes/classes. Every component must define its own styles for the state (as they are scoped to the component).</p> <pre><code>.Tweet { /* \u2026 */ }\n.Tweet[aria-expanded=true] { /* \u2026 */ }\n.Tweet.is-blorked { /* \u2026 */ }\n&lt;article class=\"Tweet is-blorked\" aria-expanded=\"true\"&gt;\n  \u2026\n&lt;/article&gt;\n</code></pre>","text":""},{"location":"CSSStyleGuide/#colors","title":"Colors <p>Prefer lower-case hex values, RGB, or RGBA over named, HSL, or HSLA values. Use short-form hex values where applicable.</p> <p>Right:</p> <pre><code>#fff;\n#f1f2f3;\nrgb(50, 50, 50);\nrgba(50, 50, 50, 0.2);\n</code></pre> <p>Wrong:</p> <pre><code>#FFFFFF;\n#F1F2F3;\nwhite;\nhsl(120, 100%, 50%);\nhsla(120, 100%, 50%, 1);\n</code></pre>","text":""},{"location":"CSSStyleGuide/#formatting","title":"Formatting","text":"<p>The following are some high level page formatting style rules.</p>"},{"location":"CSSStyleGuide/#spacing","title":"Spacing <p>CSS rules should be comma separated but live on new lines:</p> <p>Right:</p> <pre><code>.Content,\n.Content-edit {\n  \u2026\n}\n</code></pre> <p>Wrong:</p> <pre><code>.Content, .Content-edit {\n  \u2026\n}\n</code></pre> <p>CSS blocks should be separated by a single new line. not two. not 0.</p> <p>Right:</p> <pre><code>.Content {\n  \u2026\n}\n.Content-edit {\n  \u2026\n}\n</code></pre> <p>Wrong:</p> <pre><code>.Content {\n  \u2026\n}\n\n.Content-edit {\n  \u2026\n}\n</code></pre>","text":""},{"location":"CSSStyleGuide/#quotes","title":"Quotes <p>Quotes are optional in CSS. We use single quotes as it is visually clearer that the string is not a selector or a style property.</p> <p>Right:</p> <pre><code>background-image: url('/img/you.jpg');\nfont-family: 'Helvetica Neue Light', 'Helvetica Neue', Helvetica, Arial;\n</code></pre> <p>Wrong:</p> <pre><code>background-image: url(/img/you.jpg);\nfont-family: Helvetica Neue Light, Helvetica Neue, Helvetica, Arial;\n</code></pre>","text":""},{"location":"CSSStyleGuide/#write-simple-selectors","title":"Write Simple Selectors","text":"<p>Avoid sequences of simple selectors (\"compound selectors\").</p> <p>The only exceptions are state-based selectors that are dynamically added to indicate a state change (for example, a tweet that has \"[aria-expanded=true]\").</p> <p>Right:</p> <pre><code>/* State-based simple selector. */\ntweet[aria-expanded=true] {\n  ...\n}\n</code></pre> <p>Wrong:</p> <pre><code>/* Sequence of simple selectors. */\nbutton.foo.bar {\n  ...\n}\n</code></pre>"},{"location":"CSSStyleGuide/#images","title":"Images","text":"<p>Add height and width attributes to images in the html markup to help minimize layout shift during page load.</p> <pre><code>&lt;img src=\"url/to/image.png\" height=\"240\" width=\"160\"&gt;\n</code></pre>"},{"location":"ChromeOS/","title":"ChromeOS","text":""},{"location":"ChromeOS/#introduction","title":"Introduction","text":"<p>You don't need to compile from source in Developer mode, you can just use the Chromebrew-provided version.</p> <p>If your Chromebook is relatively new, you can enable the Linux VM now built into ChromeOS to install Go without developer mode. Follow the steps from the following Google Support article to enable this feature- https://support.google.com/chromebook/answer/9145439. This has been tested on a Samsung Chromebook Plus on version 71.0.3578.127. If this feature is not available for you, you will need to enable Developer Mode.</p> <p>This tutorial will show you how to install, build, and run Go on Chrome OS. Please note this has only been tested on a 64GB LTE Pixel, however it should work on other Chromebooks. Note that enabling developer mode reduces the security guarantees offered by Chrome OS.</p>"},{"location":"ChromeOS/#install-go","title":"Install Go","text":"<p>First download the latest version of Go for Linux from the Go Downloads page. After that, open a shell by hitting (CTRL+ALT+T) and typing in <code>shell</code> then hit enter. Then extract it using the following command (when replacing <code>&lt; Go Linux package &gt;</code> with the name of the file you downloaded):</p> <pre><code>sudo tar xpvf ~/Downloads/&lt; Go Linux package &gt; -C /usr/local\n</code></pre> <p>Go should now be installed you can test this by typing <code>/usr/local/go/bin/go</code>. If it installed correctly, you should see the Go help prompt. Go is now installed.</p>"},{"location":"ChromeOS/#create-a-workspace","title":"Create a Workspace","text":"<p>To keep this simple just create a folder called <code>/usr/local/go/work</code>. Also, create a folder called <code>src</code> inside <code>/usr/local/go/work/</code>.</p>"},{"location":"ChromeOS/#set-path","title":"Set PATH","text":"<p>Add the following to <code>~/.bashrc</code>: <pre><code>export GOPATH=\"/usr/local/go/work\"\nexport PATH=\"${PATH}:/usr/local/go/bin:${GOPATH}/bin\"\n</code></pre> This will allow you to run your Go programs in your shell.</p>"},{"location":"ChromeOS/#test-if-it-worked","title":"Test if it worked","text":"<p>First create a folder inside of your <code>/usr/local/go/src</code> folder. After that create a file in your folder called <code>hello.go</code> with the following in it: <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"Hello, Chrome OS!\")\n}\n</code></pre> Now, run <code>go install hello</code>. Then, run <code>${GOPATH}/bin/hello</code> (or just <code>hello</code> if you setup your GOPATH above) and you should see <code>Hello, Chrome OS!</code>.</p>"},{"location":"ChromeOS/#reporting-bugs","title":"Reporting bugs","text":"<p>Please go to Issues to report any issues you have.</p>"},{"location":"CodeReview/","title":"CodeReview","text":"<p>Be sure to familiarize yourself with the code review process from the official Contribution Guide first.</p>"},{"location":"CodeReview/#reviewer-parlance","title":"Reviewer Parlance","text":"<p>There are several terms code reviews may use that you should become familiar with.</p> <ul> <li><code>LGTM</code> \u2014 looks good to me</li> <li><code>SGTM</code> \u2014 sounds good to me</li> <li><code>PTAL</code> \u2014 please take a look</li> <li><code>s/foo/bar/</code> \u2014 please replace <code>foo</code> with <code>bar</code>; this is sed syntax</li> <li><code>s/foo/bar/g</code> \u2014 please replace <code>foo</code> with <code>bar</code> throughout your entire change</li> </ul>"},{"location":"CodeReview/#cl-directives","title":"CL Directives","text":"<ul> <li><code>R=foo</code> \u2014 assign a reviewer within the Go CL dashboard</li> <li><code>DO NOT SUBMIT</code> (in the commit message) \u2014 block submission; see the \"Work in progress\" section below</li> <li><code>Updates #1234</code> or <code>Fixes #1234</code> (in the commit message) \u2014 link the CL from the GitHub issue and optionally close the issue after the CL is merged</li> </ul>"},{"location":"CodeReview/#email","title":"Email","text":"<p>Messages from a code review are typically sent to three places:</p> <ul> <li>the reviewers, if any</li> <li>the golang-codereviews group</li> <li>the owner</li> </ul> <p>Please do NOT reply code review via email, as the message will not be relayed to Gerrit. Always click on the link and post reply in Gerrit.</p>"},{"location":"CodeReview/#work-in-progress","title":"Work in progress","text":"<p>If you have changes that aren't ready to be reviewed, you can put a giant <code>DO NOT REVIEW</code> as the second line of the CL description, so that people who see it know not to look any further. Don't make it the first line, since then it will become the subject for the entire review, even after you've changed the description.</p> <p>Similarly, if you would like to ensure that your changes are not merged by mistake, you can put <code>DO NOT SUBMIT</code> as the second line of the CL description.</p> <p>If you don't need Gerrit's features, but just want to backup your work, share work between multiple clients, or have a staging UI to examine your changes, you can use a regular git remote.</p> <p>To use GitHub as a git remote, you can either fork github.com/golang/go or create a new repo. There are trade-offs. Forked repos will have a faster first push. Non-forked repos can be private. Forked repos are associated in GitHub's system. As a result, they are easily discoverable and support cross-repo comparisons in the GitHub UI; however, this also means that references to issues in commit messages in forked repos will create references to your fork in the issue.</p> <p>To add your git remote, run something like:</p> <pre><code>$ git remote add fork git@github.com:yourusername/go.git\n</code></pre> <p>You can then push changes to the \"fork\" remote with <code>git push fork branchname</code>.</p> <p>Gerrit's code review model is to rewrite a single commit until it is correct. GitHub will try to prevent you from accidentally overwriting your existing branch. You can work around this by forcing the push: <code>git push --force fork branchname</code>. Alternatively, you can set up your forked remote as a mirror by cloning it initially with:</p> <pre><code>$ git remote add --mirror=push fork git@github.com:yourusername/go.git\n</code></pre> <p>Then running <code>git push fork</code> will update GitHub to perfectly mirror everything (all branches, all tags, etc.). This is handy, but take care when using this on multiple clients. You are bypassing the usual git safeguards, so it is easy to overwrite (and thus lose) work pushed by a different client.</p>"},{"location":"CodeReviewComments/","title":"Go Code Review Comments","text":"<p>This page collects common comments made during reviews of Go code, so that a single detailed explanation can be referred to by shorthands. This is a laundry list of common style issues, not a comprehensive style guide.</p> <p>You can view this as a supplement to Effective Go.</p> <p>Additional comments related to testing can be found at Go Test Comments</p> <p>Google has published a longer Go Style Guide.</p> <p>Please discuss changes before editing this page, even minor ones. Many people have opinions and this is not the place for edit wars.</p> <ul> <li>Gofmt</li> <li>Comment Sentences</li> <li>Contexts</li> <li>Copying</li> <li>Crypto Rand</li> <li>Declaring Empty Slices</li> <li>Doc Comments</li> <li>Don't Panic</li> <li>Error Strings</li> <li>Examples</li> <li>Goroutine Lifetimes</li> <li>Handle Errors</li> <li>Imports</li> <li>Import Blank</li> <li>Import Dot</li> <li>In-Band Errors</li> <li>Indent Error Flow</li> <li>Initialisms</li> <li>Interfaces</li> <li>Line Length</li> <li>Mixed Caps</li> <li>Named Result Parameters</li> <li>Naked Returns</li> <li>Package Comments</li> <li>Package Names</li> <li>Pass Values</li> <li>Receiver Names</li> <li>Receiver Type</li> <li>Synchronous Functions</li> <li>Useful Test Failures</li> <li>Variable Names</li> </ul>"},{"location":"CodeReviewComments/#gofmt","title":"Gofmt","text":"<p>Run gofmt on your code to automatically fix the majority of mechanical style issues. Almost all Go code in the wild uses <code>gofmt</code>. The rest of this document addresses non-mechanical style points.</p> <p>An alternative is to use goimports, a superset of <code>gofmt</code> which additionally adds (and removes) import lines as necessary.</p>"},{"location":"CodeReviewComments/#comment-sentences","title":"Comment Sentences","text":"<p>See https://go.dev/doc/effective_go#commentary.  Comments documenting declarations should be full sentences, even if that seems a little redundant.  This approach makes them format well when extracted into godoc documentation.  Comments should begin with the name of the thing being described and end in a period:</p> <pre><code>// Request represents a request to run a command.\ntype Request struct { ...\n\n// Encode writes the JSON encoding of req to w.\nfunc Encode(w io.Writer, req *Request) { ...\n</code></pre> <p>and so on.</p>"},{"location":"CodeReviewComments/#contexts","title":"Contexts","text":"<p>Values of the context.Context type carry security credentials, tracing information, deadlines, and cancellation signals across API and process boundaries. Go programs pass Contexts explicitly along the entire function call chain from incoming RPCs and HTTP requests to outgoing requests.</p> <p>Most functions that use a Context should accept it as their first parameter:</p> <pre><code>func F(ctx context.Context, /* other arguments */) {}\n</code></pre> <p>A function that is never request-specific may use context.Background(), but err on the side of passing a Context even if you think you don't need to. The default case is to pass a Context; only use context.Background() directly if you have a good reason why the alternative is a mistake.</p> <p>Don't add a Context member to a struct type; instead add a ctx parameter to each method on that type that needs to pass it along. The one exception is for methods whose signature must match an interface in the standard library or in a third party library.</p> <p>Don't create custom Context types or use interfaces other than Context in function signatures.</p> <p>If you have application data to pass around, put it in a parameter, in the receiver, in globals, or, if it truly belongs there, in a Context value.</p> <p>Contexts are immutable, so it's fine to pass the same ctx to multiple calls that share the same deadline, cancellation signal, credentials, parent trace, etc.</p>"},{"location":"CodeReviewComments/#copying","title":"Copying","text":"<p>To avoid unexpected aliasing, be careful when copying a struct from another package. For example, the bytes.Buffer type contains a <code>[]byte</code> slice. If you copy a <code>Buffer</code>, the slice in the copy may alias the array in the original, causing subsequent method calls to have surprising effects.</p> <p>In general, do not copy a value of type <code>T</code> if its methods are associated with the pointer type, <code>*T</code>.</p>"},{"location":"CodeReviewComments/#crypto-rand","title":"Crypto Rand","text":"<p>Do not use package <code>math/rand</code> or <code>math/rand/v2</code> to generate keys, even throwaway ones. Seeded with <code>Time.Nanoseconds()</code>, there are just a few bits of entropy. Instead, use <code>crypto/rand.Reader</code>. If you need text, use <code>crypto/rand.Text</code>, or alternatively, encode random bytes with <code>encoding/hex</code> or <code>encoding/base64</code>.</p> <pre><code>import (\n\t\"crypto/rand\"\n\t\"fmt\"\n)\n\nfunc Key() string {\n  return rand.Text()\n}\n</code></pre>"},{"location":"CodeReviewComments/#declaring-empty-slices","title":"Declaring Empty Slices","text":"<p>When declaring an empty slice, prefer</p> <pre><code>var t []string\n</code></pre> <p>over</p> <pre><code>t := []string{}\n</code></pre> <p>The former declares a nil slice value, while the latter is non-nil but zero-length. They are functionally equivalent\u2014their <code>len</code> and <code>cap</code> are both zero\u2014but the nil slice is the preferred style.</p> <p>Note that there are limited circumstances where a non-nil but zero-length slice is preferred, such as when encoding JSON objects (a <code>nil</code> slice encodes to <code>null</code>, while <code>[]string{}</code> encodes to the JSON array <code>[]</code>).</p> <p>When designing interfaces, avoid making a distinction between a nil slice and a non-nil, zero-length slice, as this can lead to subtle programming errors.</p> <p>For more discussion about nil in Go see Francesc Campoy's talk Understanding Nil.</p>"},{"location":"CodeReviewComments/#doc-comments","title":"Doc Comments","text":"<p>All top-level, exported names should have doc comments, as should non-trivial unexported type or function declarations. See https://go.dev/doc/effective_go#commentary for more information about commentary conventions.</p>"},{"location":"CodeReviewComments/#dont-panic","title":"Don't Panic","text":"<p>See https://go.dev/doc/effective_go#errors. Don't use panic for normal error handling. Use error and multiple return values.</p>"},{"location":"CodeReviewComments/#error-strings","title":"Error Strings","text":"<p>Error strings should not be capitalized (unless beginning with proper nouns or acronyms) or end with punctuation, since they are usually printed following other context. That is, use <code>fmt.Errorf(\"something bad\")</code> not <code>fmt.Errorf(\"Something bad\")</code>, so that <code>log.Printf(\"Reading %s: %v\", filename, err)</code> formats without a spurious capital letter mid-message. This does not apply to logging, which is implicitly line-oriented and not combined inside other messages.</p>"},{"location":"CodeReviewComments/#examples","title":"Examples","text":"<p>When adding a new package, include examples of intended usage: a runnable Example, or a simple test demonstrating a complete call sequence.</p> <p>Read more about testable Example() functions.</p>"},{"location":"CodeReviewComments/#goroutine-lifetimes","title":"Goroutine Lifetimes","text":"<p>When you spawn goroutines, make it clear when - or whether - they exit.</p> <p>Goroutines can leak by blocking on channel sends or receives: the garbage collector will not terminate a goroutine even if the channels it is blocked on are unreachable.</p> <p>Even when goroutines do not leak, leaving them in-flight when they are no longer needed can cause other subtle and hard-to-diagnose problems. Sends on closed channels panic. Modifying still-in-use inputs \"after the result isn't needed\" can still lead to data races. And leaving goroutines in-flight for arbitrarily long can lead to unpredictable memory usage.</p> <p>Try to keep concurrent code simple enough that goroutine lifetimes are obvious. If that just isn't feasible, document when and why the goroutines exit.</p>"},{"location":"CodeReviewComments/#handle-errors","title":"Handle Errors","text":"<p>See https://go.dev/doc/effective_go#errors. Do not discard errors using <code>_</code> variables. If a function returns an error, check it to make sure the function succeeded. Handle the error, return it, or, in truly exceptional situations, panic.</p>"},{"location":"CodeReviewComments/#imports","title":"Imports","text":"<p>Avoid renaming imports except to avoid a name collision; good package names should not require renaming. In the event of collision, prefer to rename the most local or project-specific import.</p> <p>Imports are organized in groups, with blank lines between them. The standard library packages are always in the first group.</p> <pre><code>package main\n\nimport (\n\t\"fmt\"\n\t\"hash/adler32\"\n\t\"os\"\n\n\t\"github.com/foo/bar\"\n\t\"rsc.io/goversion/version\"\n)\n</code></pre> <p>goimports will do this for you.</p>"},{"location":"CodeReviewComments/#import-blank","title":"Import Blank","text":"<p>Packages that are imported only for their side effects (using the syntax <code>import _ \"pkg\"</code>) should only be imported in the main package of a program, or in tests that require them.</p>"},{"location":"CodeReviewComments/#import-dot","title":"Import Dot","text":"<p>The import . form can be useful in tests that, due to circular dependencies, cannot be made part of the package being tested:</p> <pre><code>package foo_test\n\nimport (\n\t\"bar/testutil\" // also imports \"foo\"\n\t. \"foo\"\n)\n</code></pre> <p>In this case, the test file cannot be in package foo because it uses bar/testutil, which imports foo.  So we use the 'import .' form to let the file pretend to be part of package foo even though it is not.  Except for this one case, do not use import . in your programs.  It makes the programs much harder to read because it is unclear whether a name like Quux is a top-level identifier in the current package or in an imported package.</p>"},{"location":"CodeReviewComments/#in-band-errors","title":"In-Band Errors","text":"<p>In C and similar languages, it's common for functions to return values like -1 or null to signal errors or missing results:</p> <pre><code>// Lookup returns the value for key or \"\" if there is no mapping for key.\nfunc Lookup(key string) string\n\n// Failing to check for an in-band error value can lead to bugs:\nParse(Lookup(key))  // returns \"parse failure for value\" instead of \"no value for key\"\n</code></pre> <p>Go's support for multiple return values provides a better solution. Instead of requiring clients to check for an in-band error value, a function should return an additional value to indicate whether its other return values are valid. This return value may be an error, or a boolean when no explanation is needed. It should be the final return value.</p> <pre><code>// Lookup returns the value for key or ok=false if there is no mapping for key.\nfunc Lookup(key string) (value string, ok bool)\n</code></pre> <p>This prevents the caller from using the result incorrectly:</p> <pre><code>Parse(Lookup(key))  // compile-time error\n</code></pre> <p>And encourages more robust and readable code:</p> <pre><code>value, ok := Lookup(key)\nif !ok {\n\treturn fmt.Errorf(\"no value for %q\", key)\n}\nreturn Parse(value)\n</code></pre> <p>This rule applies to exported functions but is also useful for unexported functions.</p> <p>Return values like nil, \"\", 0, and -1 are fine when they are valid results for a function, that is, when the caller need not handle them differently from other values.</p> <p>Some standard library functions, like those in package \"strings\", return in-band error values. This greatly simplifies string-manipulation code at the cost of requiring more diligence from the programmer. In general, Go code should return additional values for errors.</p>"},{"location":"CodeReviewComments/#indent-error-flow","title":"Indent Error Flow","text":"<p>Try to keep the normal code path at a minimal indentation, and indent the error handling, dealing with it first. This improves the readability of the code by permitting visually scanning the normal path quickly. For instance, don't write:</p> <pre><code>if err != nil {\n\t// error handling\n} else {\n\t// normal code\n}\n</code></pre> <p>Instead, write:</p> <pre><code>if err != nil {\n\t// error handling\n\treturn // or continue, etc.\n}\n// normal code\n</code></pre> <p>If the <code>if</code> statement has an initialization statement, such as:</p> <pre><code>if x, err := f(); err != nil {\n\t// error handling\n\treturn\n} else {\n\t// use x\n}\n</code></pre> <p>then this may require moving the short variable declaration to its own line:</p> <pre><code>x, err := f()\nif err != nil {\n\t// error handling\n\treturn\n}\n// use x\n</code></pre>"},{"location":"CodeReviewComments/#initialisms","title":"Initialisms","text":"<p>Words in names that are initialisms or acronyms (e.g. \"URL\" or \"NATO\") have a consistent case. For example, \"URL\" should appear as \"URL\" or \"url\" (as in \"urlPony\", or \"URLPony\"), never as \"Url\". As an example: ServeHTTP not ServeHttp. For identifiers with multiple initialized \"words\", use for example \"xmlHTTPRequest\" or \"XMLHTTPRequest\".</p> <p>This rule also applies to \"ID\" when it is short for \"identifier\" (which is pretty much all cases when it's not the \"id\" as in \"ego\", \"superego\"), so write \"appID\" instead of \"appId\".</p> <p>Code generated by the protocol buffer compiler is exempt from this rule. Human-written code is held to a higher standard than machine-written code.</p>"},{"location":"CodeReviewComments/#interfaces","title":"Interfaces","text":"<p>Go interfaces generally belong in the package that uses values of the interface type, not the package that implements those values. The implementing package should return concrete (usually pointer or struct) types: that way, new methods can be added to implementations without requiring extensive refactoring.</p> <p>Do not define interfaces on the implementor side of an API \"for mocking\"; instead, design the API so that it can be tested using the public API of the real implementation.</p> <p>Do not define interfaces before they are used: without a realistic example of usage, it is too difficult to see whether an interface is even necessary, let alone what methods it ought to contain.</p> <pre><code>package consumer  // consumer.go\n\ntype Thinger interface { Thing() bool }\n\nfunc Foo(t Thinger) string { \u2026 }\n</code></pre> <pre><code>package consumer // consumer_test.go\n\ntype fakeThinger struct{ \u2026 }\nfunc (t fakeThinger) Thing() bool { \u2026 }\n\u2026\nif Foo(fakeThinger{\u2026}) == \"x\" { \u2026 }\n</code></pre> <pre><code>// DO NOT DO IT!!!\npackage producer\n\ntype Thinger interface { Thing() bool }\n\ntype defaultThinger struct{ \u2026 }\nfunc (t defaultThinger) Thing() bool { \u2026 }\n\nfunc NewThinger() Thinger { return defaultThinger{ \u2026 } }\n</code></pre> <p>Instead return a concrete type and let the consumer mock the producer implementation. <pre><code>package producer\n\ntype Thinger struct{ \u2026 }\nfunc (t Thinger) Thing() bool { \u2026 }\n\nfunc NewThinger() Thinger { return Thinger{ \u2026 } }\n</code></pre></p>"},{"location":"CodeReviewComments/#line-length","title":"Line Length","text":"<p>There is no rigid line length limit in Go code, but avoid uncomfortably long lines. Similarly, don't add line breaks to keep lines short when they are more readable long\u2013for example, if they are repetitive.</p> <p>Most of the time when people wrap lines \"unnaturally\" (in the middle of function calls or function declarations, more or less, say, though some exceptions are around), the wrapping would be unnecessary if they had a reasonable number of parameters and reasonably short variable names. Long lines seem to go with long names, and getting rid of the long names helps a lot.</p> <p>In other words, break lines because of the semantics of what you're writing (as a general rule) and not because of the length of the line. If you find that this produces lines that are too long, then change the names or the semantics and you'll probably get a good result.</p> <p>This is, actually, exactly the same advice about how long a function should be. There's no rule \"never have a function more than N lines long\", but there is definitely such a thing as too long of a function, and of too repetitive tiny functions, and the solution is to change where the function boundaries are, not to start counting lines.</p>"},{"location":"CodeReviewComments/#mixed-caps","title":"Mixed Caps","text":"<p>See https://go.dev/doc/effective_go#mixed-caps. This applies even when it breaks conventions in other languages. For example an unexported constant is <code>maxLength</code> not <code>MaxLength</code> or <code>MAX_LENGTH</code>.</p> <p>Also see Initialisms.</p>"},{"location":"CodeReviewComments/#named-result-parameters","title":"Named Result Parameters","text":"<p>Consider what it will look like in godoc.  Named result parameters like:</p> <pre><code>func (n *Node) Parent1() (node *Node) {}\nfunc (n *Node) Parent2() (node *Node, err error) {}\n</code></pre> <p>will be repetitive in godoc; better to use:</p> <pre><code>func (n *Node) Parent1() *Node {}\nfunc (n *Node) Parent2() (*Node, error) {}\n</code></pre> <p>On the other hand, if a function returns two or three parameters of the same type, or if the meaning of a result isn't clear from context, adding names may be useful in some contexts. Don't name result parameters just to avoid declaring a var inside the function; that trades off a minor implementation brevity at the cost of unnecessary API verbosity.</p> <pre><code>func (f *Foo) Location() (float64, float64, error)\n</code></pre> <p>is less clear than:</p> <pre><code>// Location returns f's latitude and longitude.\n// Negative values mean south and west, respectively.\nfunc (f *Foo) Location() (lat, long float64, err error)\n</code></pre> <p>Naked returns are okay if the function is a handful of lines. Once it's a medium sized function, be explicit with your return values. Corollary: it's not worth it to name result parameters just because it enables you to use naked returns. Clarity of docs is always more important than saving a line or two in your function.</p> <p>Finally, in some cases you need to name a result parameter in order to change it in a deferred closure. That is always OK.</p>"},{"location":"CodeReviewComments/#naked-returns","title":"Naked Returns","text":"<p>A <code>return</code> statement without arguments returns the named return values. This is known as a \"naked\" return.</p> <pre><code>func split(sum int) (x, y int) {\n\tx = sum * 4 / 9\n\ty = sum - x\n\treturn\n}\n</code></pre> <p>See Named Result Parameters.</p>"},{"location":"CodeReviewComments/#package-comments","title":"Package Comments","text":"<p>Package comments, like all comments to be presented by godoc, must appear adjacent to the package clause, with no blank line.</p> <pre><code>// Package math provides basic constants and mathematical functions.\npackage math\n</code></pre> <pre><code>/*\nPackage template implements data-driven templates for generating textual\noutput such as HTML.\n....\n*/\npackage template\n</code></pre> <p>For \"package main\" comments, other styles of comment are fine after the binary name (and it may be capitalized if it comes first), For example, for a <code>package main</code> in the directory <code>seedgen</code> you could write:</p> <p><pre><code>// Binary seedgen ...\npackage main\n</code></pre> or <pre><code>// Command seedgen ...\npackage main\n</code></pre> or <pre><code>// Program seedgen ...\npackage main\n</code></pre> or <pre><code>// The seedgen command ...\npackage main\n</code></pre> or <pre><code>// The seedgen program ...\npackage main\n</code></pre> or <pre><code>// Seedgen ..\npackage main\n</code></pre></p> <p>These are examples, and sensible variants of these are acceptable.</p> <p>Note that starting the sentence with a lower-case word is not among the acceptable options for package comments, as these are publicly-visible and should be written in proper English, including capitalizing the first word of the sentence. When the binary name is the first word, capitalizing it is required even though it does not strictly match the spelling of the command-line invocation.</p> <p>See https://go.dev/doc/effective_go#commentary for more information about commentary conventions.</p>"},{"location":"CodeReviewComments/#package-names","title":"Package Names","text":"<p>All references to names in your package will be done using the package name, so you can omit that name from the identifiers. For example, if you are in package chubby, you don't need type ChubbyFile, which clients will write as <code>chubby.ChubbyFile</code>. Instead, name the type <code>File</code>, which clients will write as <code>chubby.File</code>. Avoid meaningless package names like util, common, misc, api, types, and interfaces. See https://go.dev/doc/effective_go#package-names and https://go.dev/blog/package-names for more.</p>"},{"location":"CodeReviewComments/#pass-values","title":"Pass Values","text":"<p>Don't pass pointers as function arguments just to save a few bytes.  If a function refers to its argument <code>x</code> only as <code>*x</code> throughout, then the argument shouldn't be a pointer.  Common instances of this include passing a pointer to a string (<code>*string</code>) or a pointer to an interface value (<code>*io.Reader</code>).  In both cases the value itself is a fixed size and can be passed directly.  This advice does not apply to large structs, or even small structs that might grow.</p>"},{"location":"CodeReviewComments/#receiver-names","title":"Receiver Names","text":"<p>The name of a method's receiver should be a reflection of its identity; often a one or two letter abbreviation of its type suffices (such as \"c\" or \"cl\" for \"Client\"). Don't use generic names such as \"me\", \"this\" or \"self\", identifiers typical of object-oriented languages that gives the method a special meaning. In Go, the receiver of a method is just another parameter and therefore, should be named accordingly. The name need not be as descriptive as that of a method argument, as its role is obvious and serves no documentary purpose. It can be very short as it will appear on almost every line of every method of the type; familiarity admits brevity. Be consistent, too: if you call the receiver \"c\" in one method, don't call it \"cl\" in another.</p>"},{"location":"CodeReviewComments/#receiver-type","title":"Receiver Type","text":"<p>Choosing whether to use a value or pointer receiver on methods can be difficult, especially to new Go programmers.  If in doubt, use a pointer, but there are times when a value receiver makes sense, usually for reasons of efficiency, such as for small unchanging structs or values of basic type. Some useful guidelines:</p> <ul> <li>If the receiver is a map, func or chan, don't use a pointer to them. If the receiver is a slice and the method doesn't reslice or reallocate the slice, don't use a pointer to it.</li> <li>If the method needs to mutate the receiver, the receiver must be a pointer.</li> <li>If the receiver is a struct that contains a sync.Mutex or similar synchronizing field, the receiver must be a pointer to avoid copying.</li> <li>If the receiver is a large struct or array, a pointer receiver is more efficient.  How large is large?  Assume it's equivalent to passing all its elements as arguments to the method.  If that feels too large, it's also too large for the receiver.</li> <li>Can function or methods, either concurrently or when called from this method, be mutating the receiver? A value type creates a copy of the receiver when the method is invoked, so outside updates will not be applied to this receiver. If changes must be visible in the original receiver, the receiver must be a pointer.</li> <li>If the receiver is a struct, array or slice and any of its elements is a pointer to something that might be mutating, prefer a pointer receiver, as it will make the intention clearer to the reader.</li> <li>If the receiver is a small array or struct that is naturally a value type (for instance, something like the time.Time type), with no mutable fields and no pointers, or is just a simple basic type such as int or string, a value receiver makes sense.  A value receiver can reduce the amount of garbage that can be generated; if a value is passed to a value method, an on-stack copy can be used instead of allocating on the heap. (The compiler tries to be smart about avoiding this allocation, but it can't always succeed.) Don't choose a value receiver type for this reason without profiling first.</li> <li>Don't mix receiver types. Choose either pointers or struct types for all available methods.</li> <li>Finally, when in doubt, use a pointer receiver.</li> </ul>"},{"location":"CodeReviewComments/#synchronous-functions","title":"Synchronous Functions","text":"<p>Prefer synchronous functions - functions which return their results directly or finish any callbacks or channel ops before returning - over asynchronous ones.</p> <p>Synchronous functions keep goroutines localized within a call, making it easier to reason about their lifetimes and avoid leaks and data races. They're also easier to test: the caller can pass an input and check the output without the need for polling or synchronization.</p> <p>If callers need more concurrency, they can add it easily by calling the function from a separate goroutine. But it is quite difficult - sometimes impossible - to remove unnecessary concurrency at the caller side.</p>"},{"location":"CodeReviewComments/#useful-test-failures","title":"Useful Test Failures","text":"<p>Tests should fail with helpful messages saying what was wrong, with what inputs, what was actually got, and what was expected.  It may be tempting to write a bunch of assertFoo helpers, but be sure your helpers produce useful error messages.  Assume that the person debugging your failing test is not you, and is not your team.  A typical Go test fails like:</p> <pre><code>if got != tt.want {\n\tt.Errorf(\"Foo(%q) = %d; want %d\", tt.in, got, tt.want) // or Fatalf, if test can't test anything more past this point\n}\n</code></pre> <p>Note that the order here is actual != expected, and the message uses that order too. Some test frameworks encourage writing these backwards: 0 != x, \"expected 0, got x\", and so on. Go does not.</p> <p>If that seems like a lot of typing, you may want to write a table-driven test.</p> <p>Another common technique to disambiguate failing tests when using a test helper with different input is to wrap each caller with a different TestFoo function, so the test fails with that name:</p> <pre><code>func TestSingleValue(t *testing.T) { testHelper(t, []int{80}) }\nfunc TestNoValues(t *testing.T)    { testHelper(t, []int{}) }\n</code></pre> <p>In any case, the onus is on you to fail with a helpful message to whoever's debugging your code in the future.</p>"},{"location":"CodeReviewComments/#variable-names","title":"Variable Names","text":"<p>Variable names in Go should be short rather than long.  This is especially true for local variables with limited scope.  Prefer <code>c</code> to <code>lineCount</code>.  Prefer <code>i</code> to <code>sliceIndex</code>.</p> <p>The basic rule: the further from its declaration that a name is used, the more descriptive the name must be. For a method receiver, one or two letters is sufficient. Common variables such as loop indices and readers can be a single letter (<code>i</code>, <code>r</code>). More unusual things and global variables need more descriptive names.</p> <p>See also the longer discussion in the Google Go Style Guide.</p>"},{"location":"CodeReviewConcurrency/","title":"Code Review: Go Concurrency","text":"<p>This page is an addition to the Go Code Review Comments list. The goal of this list is to help to find concurrency-related bugs when reviewing Go code.</p> <p>You may also read through this list just once to refresh your memory and to make sure you are aware of all these concurrency gotchas.</p> <p>\u26a0\ufe0f This page is community authored and maintained. It includes information that is disputed and may be misleading or incorrect.</p> <p>Insufficient synchronisation and race conditions  - HTTP handler functions are thread-safe?  - Global functions and variables are protected by mutexes or otherwise thread-safe?  - Reads of fields and variables are protected?  - The loop variable is passed into the goroutine function as an argument?  - Methods on thread-safe types don't return pointers to protected structures?  - <code>Load()</code> or <code>Delete()</code> calls on a <code>sync.Map</code> after <code>Load()</code> is not a race condition?    </p> <p>Testing  - Running tests with <code>-race</code> flag in CI/CD?</p> <p>Scalability  - A channel is intentionally created with zero capacity?  - Not using <code>sync.RWMutex</code> to protect very short operations?</p> <p>Time  - <code>time.Ticker</code> is stopped using <code>defer tick.Stop()</code>?  - Comparing <code>time.Time</code> using <code>Equal()</code>, not <code>==</code>?  - Keeping the monotonic component in <code>time.Time</code> argument of <code>time.Since()</code>?  - When comparing system times via <code>t.Before(u)</code>, the monotonic component is stripped    from the argument?</p>"},{"location":"CodeReviewConcurrency/#insufficient-synchronisation-and-race-conditions","title":"Insufficient synchronisation and race conditions","text":"<p> # RC.1. The HTTP handler function is safe to call concurrently from multiple goroutines? It's easy to overlook HTTP handlers should be thread-safe because they are usually not called explicitly from anywhere in the project code, but only from the internals of the HTTP server.</p> <p> # RC.2. Is there some field or variable access not protected by a mutex where the field or the variable is a primitive or of a type that is not explicitly thread-safe (such as <code>atomic.Value</code>), while this field can be updated from a concurrent goroutine? It's not safe to skip synchronising reads even to primitive variables because of non-atomic hardware writes and potential memory visibility problems.</p> <p>See also a Typical Data Race: Primitive unprotected variable.</p> <p> # RC.3. A method on a thread-safe type doesn't return a pointer to a protected structure? This is a subtle bug which leads to the unprotected access problem described in the previous item. Example: <pre><code>type Counters struct {\n\tmu   sync.Mutex\n\tvals map[Key]*Counter\n}\n\nfunc (c *Counters) Add(k Key, amount int) {\n    c.mu.Lock()\n    defer c.mu.Unlock()\n    count, ok := c.vals[k]\n    if !ok {\n    \tcount = &amp;Counter{sum: 0, num: 0}\n    \tc.vals[k] = count\n    }\n    count.sum += amount\n    count.n += 1\n}\n\nfunc (c *Counters) GetCounter(k Key) *Counter {\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\treturn c.vals[k] // BUG! Returns a pointer to the structure which must be protected\n}\n</code></pre> One possible solution is to return a copy, not a pointer to the structure in <code>GetCounter()</code>: <pre><code>type Counters struct {\n    mu   sync.Mutex\n    vals map[Key]Counter // Note that now we are storing the Counters directly, not pointers.\n}\n\n...\n\nfunc (c *Counters) GetCounter(k Key) Counter {\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\treturn c.vals[k]\n}\n</code></pre></p> <p> # RC.4. If there is more than one goroutine that can update a <code>sync.Map</code>, you don't call <code>m.Store()</code> or <code>m.Delete()</code> depending on the success of a previous <code>m.Load()</code> call? In other words, the following code is racy: <pre><code>var m sync.Map\n\n// Can be called concurrently from multiple goroutines\nfunc DoSomething(k Key, v Value) {\n\texisting, ok := m.Load(k)\n\tif !ok {\n\t\tm.Store(k, v) // RACE CONDITION - two goroutines can execute this in parallel\n\t\t... some other logic, assuming the value in `k` is now `v` in the map\n    }\n    ...\n}\n</code></pre></p> <p>Such a race condition could be benign in some cases: for example, the logic between the <code>Load()</code> and <code>Store()</code> calls computes the value to be cached in the map, and this computation always returns the same result and doesn't have side effects.</p> <p>\u26a0\ufe0f Potentially misleading information. \"Race condition\" can refer to logic errors, like this example, which can be benign. But the phrase is also commonly used to refer to violations of the memory model, which are never benign.</p> <p>If the race condition is not benign, use methods <code>sync.Map.LoadOrStore()</code> and <code>LoadAndDelete()</code> to fix it.</p>"},{"location":"CodeReviewConcurrency/#scalability","title":"Scalability","text":"<p> # Sc.1. Is this intentional that a channel is created with zero capacity, like <code>make(chan *Foo)</code>? A goroutine which sends a message to a zero-capacity channel is blocked until another goroutine receives this message. Omitting the capacity in the <code>make()</code> call might be just a mistake which will limit the scalability of the code, and it's likely unit test won't find such a bug.</p> <p>\u26a0\ufe0f Misleading information. Buffered channels do not inherently increase \"scalability\" versus unbuffered channels. However, buffered channels can easily obscure deadlocks and other fundamental design errors that would be immediately apparent with unbuffered channels.</p> <p> # Sc.2. Locking with <code>RWMutex</code> incurs extra overhead compared to plain <code>sync.Mutex</code>, and, furthermore, there might be some scalability issue with the current implementation of <code>RWMutex</code> in Go. Unless the case is very clear (such as an <code>RWMutex</code> used to synchronize many read-only operations each lasting hundreds of milliseconds or more, and the writes which require an exclusive lock seldom happen), there should be some benchmarks proving that <code>RWMutex</code> indeed helps to improve the performance. A typical example where <code>RWMutex</code> certainly does more harm than good is a simple protection of a variable in a struct: <pre><code>type Box struct {\n\tmu sync.RWMutex // DON'T DO THIS -- use a simple Mutex instead.\n\tx  int\n}\n\nfunc (b *Box) Get() int {\n\tb.mu.RLock()\n\tdefer b.mu.RUnlock()\n\treturn b.x\n}\n\nfunc (b *Box) Set(x int) {\n\tb.mu.Lock()\n\tdefer b.mu.Unlock()\n\tb.x = x\n}\n</code></pre></p>"},{"location":"CodeReviewConcurrency/#time","title":"Time","text":"<p> # Tm.1. Is <code>time.Ticker</code> stopped using <code>defer tick.Stop()</code>? It's a memory leak not to stop the ticker when the function which uses the ticker in a loop returns.</p> <p> # Tm.2. Are <code>time.Time</code> structs compared using <code>Equal()</code> method, not just <code>==</code>? Quoting the documentation for <code>time.Time</code>:</p> <p>Note that the Go <code>==</code> operator compares not just the time instant but also the Location and the monotonic clock reading. Therefore, <code>Time</code> values should not be used as map or database keys without first guaranteeing that the identical Location has been set for all values, which can be achieved through use of the <code>UTC()</code> or <code>Local()</code> method, and that the monotonic clock reading has been stripped by setting <code>t = t.Round(0)</code>. In general, prefer <code>t.Equal(u)</code> to <code>t == u</code>, since <code>t.Equal()</code> uses the most accurate comparison available and correctly handles the case when only one of its arguments has a monotonic clock reading.</p> <p> # Tm.3. Before calling <code>time.Since(t)</code>, the monotonic component is not stripped from <code>t</code>? This is a consequence of the previous item. If the monotonic component is stripped from the <code>time.Time</code> structure before passing it into <code>time.Since()</code> function (via calling either <code>UTC()</code>, <code>Local()</code>, <code>In()</code>, <code>Round()</code>, <code>Truncate()</code>, or <code>AddDate()</code>) the result of <code>time.Since()</code> might be negative on very rare occasions, such as if the system time has been synced via NTP between the moment when the start time was originally obtained and the moment when <code>time.Since()</code> is called. If the monotonic component is not stripped, <code>time.Since()</code> will always return a positive duration.</p> <p> # Tm.4. If you want to compare system times via <code>t.Before(u)</code>, do you strip the monotonic component from the argument, e.g. via <code>u.Round(0)</code>? This is another point related to Tm.2. Sometimes, you need to compare two <code>time.Time</code> structs only by the system time stored in them, specifically. You may need this before storing one of these <code>Time</code> structs on disk or sending them over the network. Imagine, for example, some sort of telemetry agent which pushes a telemetry metric together with time periodically to some remote system: <pre><code>var latestSentTime time.Time\n\nfunc pushMetricPeriodically(ctx context.Context) {\n\tt := time.NewTicker(time.Second)\n\tdefer t.Stop()\n\tfor {\n\t\tselect {\n\t\tcase &lt;-ctx.Done: return\n\t\tcase &lt;-t.C:\n\t\t\tnewTime := time.Now().Round(0) // Strip monotonic component to compare system time only\n\t\t\t// Check that the new time is later to avoid messing up the telemetry if the system time\n\t\t\t// is set backwards on an NTP sync.\n\t\t\tif latestSentTime.Before(newTime) {\n\t\t\t\tsendOverNetwork(NewDataPoint(newTime, metric()))\n\t\t\t\tlatestSentTime = newTime\n\t\t\t}\n\t\t}\n\t}\n}\n</code></pre> This code would be wrong without calling <code>Round(0)</code>, i. e. stripping the monotonic component.</p>"},{"location":"CodeReviewConcurrency/#reading-list","title":"Reading List","text":"<p>Go Code Review Comments: a checklist for reviewing Go code, not concurrency-specific.</p> <p>Go concurrency:  - The Go Memory Model  - Section about concurrency in Effective Go  - Posts in The Go Blog:    - Share Memory By Communicating    - Go Concurrency Patterns: Timing out, moving on    - Go Concurrency Patterns: Context    - Go Concurrency Patterns: Pipelines and cancellation    - Advanced Go Concurrency Patterns (video)    - Rethinking Classical Concurrency Patterns (video)  - Understanding Real-World Concurrency Bugs in Go</p> <p>Concurrency, but not specific to Go:  - Mechanical Sympathy: Single Writer Principle</p>"},{"location":"CodeTools/","title":"CodeTools","text":"<p>An overview of tools that will help improve your Go code</p>"},{"location":"CodeTools/#all-in-one","title":"All-in-one","text":"<ul> <li>golangci-lint - Fast linters runners for Go. Bundle of <code>gofmt</code>, <code>govet</code>, <code>errcheck</code>, <code>staticcheck</code>, <code>revive</code> and many other linters. Recommended by the original author to replace gometalinter (Drop-in replacement).</li> <li>DEPRECATED: gometalinter - Automates the installation, configuration and application of <code>gofmt</code>, <code>golint</code>, <code>govet</code> and several other code validation tools.</li> </ul>"},{"location":"CodeTools/#code-formatting","title":"Code Formatting","text":""},{"location":"CodeTools/#articles","title":"Articles","text":"<ul> <li>Formatting Go Code with gofmt</li> </ul>"},{"location":"CodeTools/#tools","title":"Tools","text":"<ul> <li>air - Live reload for Go apps.</li> <li>gofmt - Start with the standard Go code formatter.</li> <li>DEPRECATED: golint - Detects style mistakes in Go code.</li> <li>staticcheck - Go programming language linter.</li> <li>goimports - Format code and fix your import statements.</li> <li>gofumpt - A stricter gofmt.</li> <li>revive - Fast, configurable, extensible, flexible, and beautiful linter for Go.</li> </ul>"},{"location":"CodeTools/#code-generation-templating-and-generics","title":"Code generation, Templating and Generics","text":"<ul> <li>json-to-go - Generate Go structs from JSON.</li> <li>Go gen - Type-driven code generation (generics).</li> <li>gojson - Another Go struct generator.</li> <li>gotemplate - Package-based templating system for Go.</li> <li>DEPRECATED: sqlgen - Generate Go code for SQL interactions.</li> <li>zek - Generate Go struct from XML.</li> <li>apidocgen - Generate web apis markdown docs and mocks.</li> <li>goaccessor - Getters and setters generator.</li> </ul>"},{"location":"CodeTools/#refactoring","title":"Refactoring","text":""},{"location":"CodeTools/#articles_1","title":"Articles","text":"<ul> <li>gorename - easy refactoring</li> <li>Refactoring Tools - An overview of refactoring tools for Go.</li> <li>Quick renaming with gofmt</li> </ul>"},{"location":"CodeTools/#tools_1","title":"Tools","text":"<ul> <li>eg - Example-based refactoring tool for Go.</li> <li>gofmt - Start with the standard Go code formatter.</li> <li>gorename - Renaming tool for Go.</li> </ul>"},{"location":"CodeTools/#error-detection","title":"Error Detection","text":""},{"location":"CodeTools/#articles_2","title":"Articles","text":"<ul> <li>Go Inspection Tools - An overview of tools for Go code inspection.</li> </ul>"},{"location":"CodeTools/#tools_2","title":"Tools","text":"<ul> <li>AlignCheck, StructCheck, VarCheck - A suite of tools for checking your code.</li> <li>errcheck - Ensure you check your error conditions.</li> <li>go vet - Read this first on how to use the <code>go vet</code> command.</li> <li>DEPRECATED: SafeSQL - Protect against unsafe SQL in your code (deprecated).</li> </ul>"},{"location":"CodeTools/#navigation","title":"Navigation","text":"<ul> <li>Go Guru - User Manual - A tool for understanding Go code.</li> <li>Pythia - A browser-based UI for Go Guru.</li> </ul>"},{"location":"CodeTools/#visualization","title":"Visualization","text":"<ul> <li>godepgraph - A tool for generating dependency graphs of Go code.</li> <li>go-size-analyzer - A tool that shows the size of each dependency of a Go binary.</li> </ul>"},{"location":"Comments/","title":"Comments","text":"<p>Go supports C-style <code>/* */</code> block comments and C++-style <code>//</code> line comments. Line comments are the norm.</p>"},{"location":"Comments/#doc-comments","title":"Doc comments","text":"<p>Packages and exported names should have doc comments. Doc comments follow certain conventions and support a simple formatting syntax. For more information see Go Doc Comments.</p>"},{"location":"Comments/#directives","title":"Directives","text":"<p>Certain tools, including the go tool and the compiler support directives that may appear in comments. With a couple of exceptions that exist for compatibility, this comment directives are line comments that start with <code>//go:</code>, with no space between the <code>//</code> and the <code>go:</code>.</p>"},{"location":"Comments/#go-tool-directives","title":"go tool directives","text":""},{"location":"Comments/#gobuild","title":"//go:build","text":"<p>The go tool supports build constraints. These are <code>//go:build</code> directives that describe conditions under which a file should be included in the package.</p> <p>Sample uses of constraints are: - <code>//go:build ignore</code> is a convention that will keep a file from being   part of the build. This is often used for programs that generate   source code. - <code>//go:build linux</code> will only build a file when building for   Linux. This may be used in general for any operating system or   architecture. - <code>//go:build cgo</code> will only build a file when cgo is supported. - <code>//go:build purego</code> is a convention that will only build a file when   using pure Go; that is, no cgo or assembler code.</p> <p>Constraints may also be expressions: - <code>//go:build amd64 || arm64</code> will build a file on either amd64 or   arm64.</p> <p>Constraints can set the language version to use when compiling a file. For example, the constraint <code>//go:build go1.23</code> will only build a file when using Go 1.23 or later, and will use Go 1.23 language semantics when building the file. This is convenient if go.mod is an earlier version. For example, this could permit defining functions that provide Go 1.23 function iterators, but only when building with Go 1.23 or later.</p> <p>In Go 1.16 and earlier build constraints were written using comments that started with <code>// +build</code>, and did not permit general expressions. The gofmt program will rewrite the older <code>// +build</code> syntax into the newer <code>//go:build</code> syntax.</p>"},{"location":"Comments/#gogenerate","title":"//go:generate","text":"<p>The go generate command looks for <code>//go:generate</code> directives to find commands to run.</p> <p>An example of this directive would be <code>//go:generate stringer -type=Enum</code> to run the stringer tool to define a <code>String</code> method for values of an integer type.</p>"},{"location":"Comments/#goembed","title":"//go:embed","text":"<p>The embed package uses <code>//go:embed</code> directives to embed source files into the generated binary. A single file may be embedded as a <code>string</code> or <code>[]byte</code>. A group of files may be embedded as a <code>embed.FS</code>, which implements the <code>fs.FS</code> interface.</p> <p>For example, the contents of a subdirectory named templates can be embedded into the program using a directive like:</p> <pre><code>//go:embed templates\nvar templatesSource embed.FS\n\n// tmpls holds the parsed embedded templates.\n// This does not read files at run time,\n// it parses the data embedded in the binary.\nvar tmpls = template.ParseFS(templatesSource)\n</code></pre>"},{"location":"Comments/#compiler-directives","title":"compiler directives","text":"<p>The Go compiler supports several directives.</p>"},{"location":"Comments/#line","title":"//line","text":"<p>The <code>//line</code> directive permits setting the file name and line and column number to use for the following code. For historical reasons this directive does not start with <code>//go:</code>. This is useful when the Go file is generated from some other source, and it's useful for error messages or stack tracebacks to refer to that other source file rather than the generated source file.</p> <p>Within a line, a <code>/*line</code> block comment may be used, which can be helpful to set a column position.</p> <pre><code>//line foo.src:10\nvar x = /*line foo.src:20:5*/ 3\n</code></pre>"},{"location":"Comments/#gonoescape","title":"//go:noescape","text":"<p>The <code>//go:noescape</code> directive must be followed by a function declaration with no function body, indicating a function that is not implemented in Go. The directive tells the compiler that pointers passed to the function do not escape to the heap and are not returned by the function.</p>"},{"location":"Comments/#other-compiler-directives","title":"Other compiler directives","text":"<p>There are a number of other compiler directives that serve special purposes. For details the compiler documentation.</p> <ul> <li><code>//go:linkname</code></li> <li><code>//go:noinline</code></li> <li><code>//go:norace</code></li> <li><code>//go:nosplit</code></li> <li><code>//go:uintptrescapes</code></li> <li><code>//go:wasmimport</code></li> </ul>"},{"location":"Comments/#undocumented-compiler-directives","title":"Undocumented compiler directives","text":"<p>The compiler also supports some undocumented directives. In general these should not be used in user code. Some of these are only available when compiling the runtime package.</p> <ul> <li><code>//go:nocheckptr</code></li> <li><code>//go:nointerface</code></li> <li><code>//go:nowritebarrier</code></li> <li><code>//go:nowritebarrierrec</code></li> <li><code>//go:registerparams</code></li> <li><code>//go:systemstack</code></li> <li><code>//go:uintptrkeepalive</code></li> <li><code>//go:yeswritebarrierrec</code></li> </ul>"},{"location":"Comments/#cgo-comments","title":"cgo comments","text":"<p>The cgo tool uses a sequence of one or more comments that appear immediately before a <code>import \"C\"</code> statement. This sequence of comments, known as the cgo preamble, define names that the Go code may refer to using the special <code>C</code> package.</p> <pre><code>package main\n\n// #include &lt;stdio.h&gt;\nimport \"C\"\n\nfunc main() {\n\tC.puts(C.CString(\"hello world\"))\n}\n</code></pre> <p>Within the preamble, cgo recognizes directives that start with <code>#cgo</code>. These may be used to set the C compiler and linker flags to use, or to describe the behavior of some C functions. For full details see the cgo documentation.</p>"},{"location":"Comments/#cgo-export","title":"cgo export","text":"<p>In a file that uses cgo, a <code>//export</code> directive may be used to make a Go function visible to C code. The syntax is <code>//export CName</code> in a comment that appears before the Go function <code>GoName</code>. This will arrange matters such that a C call to the function <code>CName</code> will actually call the Go function <code>GoName</code>. For more details see the cgo documentation.</p>"},{"location":"Comments/#cgo-compiler-directives","title":"cgo compiler directives","text":"<p>The cgo tool generates Go code, and that generated code uses some special directives that are mostly only available in cgo-generated code. These are largely undocumented except in the cgo source code.</p> <ul> <li><code>//go:cgo_dynamic_linker</code></li> <li><code>//go:cgo_export_dynamic</code></li> <li><code>//go:cgo_export_static</code></li> <li><code>//go:cgo_import_dynamic</code></li> <li><code>//go:cgo_import_static</code></li> <li><code>//go:cgo_ldflag</code></li> <li><code>//go:cgo_unsafe_args</code></li> </ul>"},{"location":"CommitMessage/","title":"Commit messages","text":"<p>Commit messages, also known as CL (changelist) descriptions, should be formatted per https://go.dev/doc/contribute#commit_messages. For example,</p> <pre><code>net/http: handle foo when bar\n\n[longer description here in the body]\n\nFixes #12345\n</code></pre> <p>Notably, for the subject (the first line of description):</p> <ul> <li>the name of the package affected by the change goes before the colon</li> <li>the part after the colon uses the verb tense + phrase that completes the blank in, \"this change modifies Go to ___________\"</li> <li>the verb after the colon is lowercase</li> <li>there is no trailing period</li> <li>it should be kept as short as possible (many git viewing tools prefer under ~76 characters, though Go isn't super strict about this).</li> </ul> <p>For the body (the rest of the description):</p> <ul> <li>the text should be wrapped to ~76 characters (to appease git viewing tools, mainly), unless you really need longer lines (e.g. for ASCII art, tables, or long links).</li> <li>the Fixes line goes after the body with a blank newline separating the two. (It is acceptable but not required to use a trailing period, such as <code>Fixes #12345.</code>).</li> <li>there is no Markdown in the commit message.</li> <li>we do not use <code>Signed-off-by</code> lines. Don't add them. Our Gerrit server &amp; GitHub bots enforce CLA compliance instead.</li> <li>when referencing CLs, prefer saying \"CL nnn\" or using a go.dev/cl/nnn shortlink over a direct Gerrit URL or git hash, since that's more future-proof.</li> <li>when moving code between repos, include the CL, repository name, and git hash that it was moved from/to, so it is easier to trace history/blame.</li> </ul> <p>Please don't use alternate GitHub-supported aliases like <code>Close</code> or <code>Resolves</code> instead of <code>Fixes</code>.</p> <p>To link a commit to an issue without marking it fixed\u2014for example, if the commit is working toward a fix but not yet a complete fix\u2014GitHub requires only that the issue is mentioned by number in the commit message. By convention, Go commits mention this at the bottom of the message using <code>For</code>, where <code>Fixes</code> might be expected, even if the number is also mentioned in the body of the commit message.</p> <p>For example:</p> <pre><code>Refactor func Foo.\nThis will make the handling of &lt;corner case&gt;\nshorter and easier to test.\n\nFor #12345\n</code></pre> <p>It is common in other Git projects to use <code>Updates</code> instead of <code>For</code>, and that is acceptable too, even though it makes little sense (the commit does not update the issue). More precise phrasings are fine too. Don't be too pedantic in code reviews: it's not worth asking people to change from <code>Updates</code> or something else to <code>For</code>, or vice versa.</p>"},{"location":"CommitMessage/#reverts","title":"Reverts","text":"<p>You can roll back a change using the Gerrit <code>Revert</code> button. Gerrit will generate a description for you. Edit the description to add the Gerrit CL number being rolled back next to or instead of the Git revision number.</p> <p>Do not use the Gerrit UI to create a revert of a revert, as that notifies people right away. Instead, mail it as a new change, and in the description explain that it is a roll forward of CL NNNNNN which was rolled back by CL NNNNNN.</p>"},{"location":"CommitMessage/#other-repos","title":"Other repos","text":"<p>For non-\"go\" repos (\"crypto\", \"tools\", \"net\", etc), the subject is still the name of the package, but you need to fully-qualify the issue number with the GitHub org/repo syntax:</p> <p>``` cipher/rot13: add new super secure cipher</p> <p>Fixes golang/go#1234 ````</p> <p>Notably, the first line subject should not contain the <code>x/crypto/</code> prefix. We only do that for the issue tracker.</p>"},{"location":"CommitMessage/#non-normative-references","title":"Non-normative references","text":"<ul> <li>Please heed my plea and write good CL descriptions for Go\u2014and for any other project you work on.</li> <li>The CL description is a public document that explains to the future what has been done and why.</li> </ul>"},{"location":"CommitMessage/#github-pull-requests","title":"GitHub Pull Requests","text":"<p>If you're using GitHub Pull Requests, your commit message is constructed by GerritBot based on your PR's title &amp; description. See How does GerritBot determine the final commit message?</p> <p>If somebody asks you to modify your commit message, you'll need to modify your PR.</p> <p></p>"},{"location":"CommonMistakes/","title":"Table of Contents","text":"<ul> <li>Introduction</li> <li>Using reference to loop iterator variable</li> <li>Using goroutines on loop iterator variables</li> </ul>"},{"location":"CommonMistakes/#introduction","title":"Introduction","text":"<p>When new programmers start using Go or when old Go programmers start using a new concept, there are some common mistakes that many of them make.  Here is a non-exhaustive list of some frequent mistakes that show up on the mailing lists and in IRC.</p>"},{"location":"CommonMistakes/#using-reference-to-loop-iterator-variable","title":"Using reference to loop iterator variable","text":"<p>NOTE: the following section applies to Go &lt; 1.22. Go versions &gt;= 1.22 uses variables scoped to the iteration, see Fixing For Loops in Go 1.22 for details.</p> <p>In Go, the loop iterator variable is a single variable that takes different values in each loop iteration. This is very efficient, but might lead to unintended behavior when used incorrectly. For example, see the following program:</p> <pre><code>func main() {\n\tvar out []*int\n\tfor i := 0; i &lt; 3; i++ {\n\t\tout = append(out, &amp;i)\n\t}\n\tfmt.Println(\"Values:\", *out[0], *out[1], *out[2])\n\tfmt.Println(\"Addresses:\", out[0], out[1], out[2])\n}\n</code></pre> <p>It will output unexpected results:</p> <pre><code>Values: 3 3 3\nAddresses: 0x40e020 0x40e020 0x40e020\n</code></pre> <p>Explanation: in each iteration we append the address of <code>i</code> to the <code>out</code> slice, but since it is the same variable, we append the same address which eventually contains the last value that was assigned to <code>i</code>. One of the solutions is to copy the loop variable into a new variable:</p> <pre><code> for i := 0; i &lt; 3; i++ {\n+\ti := i // Copy i into a new variable.\n \tout = append(out, &amp;i)\n }\n</code></pre> <p>The new output of the program is what was expected:</p> <pre><code>Values: 0 1 2\nAddresses: 0x40e024 0x40e028 0x40e032\n</code></pre> <p>Explanation: the line <code>i := i</code> copies the loop variable <code>i</code> into a new variable scoped to the for loop body block, also called <code>i</code>. The address of the new variable is the one that is appended to the array, which makes it outlive the for loop body block. In each loop iteration a new variable is created.</p> <p>While this example might look a bit obvious, the same unexpected behavior could be more hidden in some other cases. For example, the loop variable can be an array and the reference can be a slice:</p> <pre><code>func main() {\n\tvar out [][]int\n\tfor _, i := range [][1]int{{1}, {2}, {3}} {\n\t\tout = append(out, i[:])\n\t}\n\tfmt.Println(\"Values:\", out)\n}\n</code></pre> <p>Output: <pre><code>Values: [[3] [3] [3]]\n</code></pre></p> <p>The same issue can be demonstrated also when the loop variable is being used in a Goroutine (see the following section).</p>"},{"location":"CommonMistakes/#using-goroutines-on-loop-iterator-variables","title":"Using goroutines on loop iterator variables","text":"<p>NOTE: the following section applies to Go &lt; 1.22. Go versions &gt;= 1.22 uses variables scoped to the iteration, see Fixing For Loops in Go 1.22 for details.</p> <p>When iterating in Go, one might attempt to use goroutines to process data in parallel. For example, you might write something like this, using a closure:</p> <pre><code>for _, val := range values {\n\tgo func() {\n\t\tfmt.Println(val)\n\t}()\n}\n</code></pre> <p>The above for loops might not do what you expect because their <code>val</code> variable is actually a single variable that takes on the value of each slice element. Because the closures are all only bound to that one variable, there is a very good chance that when you run this code you will see the last element printed for every iteration instead of each value in sequence, because the goroutines will probably not begin executing until after the loop.</p> <p>The proper way to write that closure loop is: <pre><code>for _, val := range values {\n\tgo func(val interface{}) {\n\t\tfmt.Println(val)\n\t}(val)\n}\n</code></pre></p> <p>By adding val as a parameter to the closure, <code>val</code> is evaluated at each iteration and placed on the stack for the goroutine, so each slice element is available to the goroutine when it is eventually executed.</p> <p>It is also important to note that variables declared within the body of a loop are not shared between iterations, and thus can be used separately in a closure.  The following code uses a common index variable <code>i</code> to create separate <code>val</code>s, which results in the expected behavior:</p> <pre><code>for i := range valslice {\n\tval := valslice[i]\n\tgo func() {\n\t\tfmt.Println(val)\n\t}()\n}\n</code></pre> <p>Note that without executing this closure as a goroutine, the code runs as expected.  The following example prints out the integers between 1 and 10.</p> <pre><code>for i := 1; i &lt;= 10; i++ {\n\tfunc() {\n\t\tfmt.Println(i)\n\t}()\n}\n</code></pre> <p>Even though the closures all still close over the same variable (in this case, <code>i</code>), they are executed before the variable changes, resulting in the desired behavior. https://go.dev/doc/faq#closures_and_goroutines</p> <p>You may find another, similar situation like the following:</p> <p><pre><code>for _, val := range values {\n\tgo val.MyMethod()\n}\n\nfunc (v *val) MyMethod() {\n\tfmt.Println(v)\n}\n</code></pre> The above example also will print last element of values, the reason is same as closure. To fix the issue declare another variable inside the loop.</p> <pre><code>for _, val := range values {\n\tnewVal := val\n\tgo newVal.MyMethod()\n}\n\nfunc (v *val) MyMethod() {\n\tfmt.Println(v)\n}\n</code></pre>"},{"location":"CompilerOptimizations/","title":"Compiler And Runtime Optimizations","text":"<p>This page lists optimizations done by the compilers. Note that these are not guaranteed by the language specification.</p>"},{"location":"CompilerOptimizations/#interface-values","title":"Interface values","text":""},{"location":"CompilerOptimizations/#zero-width-types-in-interface-values","title":"Zero-width types in interface values","text":"<p>Putting a zero-width type in an interface value doesn't allocate.</p> <ul> <li>gc: 1.0+</li> <li>gccgo: ?</li> </ul>"},{"location":"CompilerOptimizations/#word-sized-value-in-an-interface-value","title":"Word-sized value in an interface value","text":"<p>Putting a word-sized-or-less non-pointer type in an interface value doesn't allocate.</p> <ul> <li>gc: 1.0-1.3, but not in 1.4+</li> <li>gccgo: never</li> </ul>"},{"location":"CompilerOptimizations/#string-and-byte","title":"<code>string</code> and <code>[]byte</code>","text":""},{"location":"CompilerOptimizations/#map-lookup-by-byte","title":"Map lookup by <code>[]byte</code>","text":"<p>For a map <code>m</code> of type <code>map[string]T</code> and <code>[]byte b</code>, <code>m[string(b)]</code> doesn't allocate. (the temporary string copy of the byte slice isn't made)</p> <ul> <li>gc: 1.4+</li> <li>gccgo: ?</li> </ul>"},{"location":"CompilerOptimizations/#range-over-bytes","title":"<code>range</code> over <code>[]byte</code>(s)","text":"<p>No allocation when converting a <code>string</code> into a <code>[]byte</code> for ranging over the bytes:</p> <pre><code>s := \"foo\"\nfor i, c := range []byte(s) {\n\t// ...\n}\n</code></pre>"},{"location":"CompilerOptimizations/#conversion-for-string-comparison","title":"conversion for string comparison","text":"<p>No allocation done when converting a <code>[]byte</code> into a <code>string</code> for comparison purposes</p> <pre><code>var b1 string\nvar b2 []byte\nvar x = string(b1) == string(b2) // memeq\nvar y = string(b1) &lt; string(b2)  // lexicographical comparison\n</code></pre> <ul> <li>gc: 1.5+ (CL 3790)</li> <li>gccgo: ?</li> </ul>"},{"location":"CompilerOptimizations/#escape-analysis-and-inlining","title":"Escape analysis and Inlining","text":"<p>Use <code>-gcflags -m</code> to observe the result of escape analysis and inlining decisions for the gc toolchain.</p> <p>(TODO: explain the output of <code>-gcflags -m</code>).</p>"},{"location":"CompilerOptimizations/#escape-analysis","title":"Escape analysis","text":"<p>Gc compiler does global escape analysis across function and package boundaries. However, there are lots of cases where it gives up. For example, anything assigned to any kind of indirection (<code>*p = ...</code>) is considered escaped. Other things that can inhibit analysis are: function calls, package boundaries, slice literals, subslicing and indexing, etc. Full rules are too complex to describe, so check the <code>-m</code> output.</p> <ul> <li>gc: 1.0+</li> <li>gccgo: 8.0+.</li> </ul>"},{"location":"CompilerOptimizations/#function-inlining","title":"Function Inlining","text":"<p>Only short and simple functions are inlined. To be inlined a function must conform to the rules:</p> <ul> <li>function should be simple enough, the number of AST nodes must less than the budget (80);</li> <li>function doesn't contain complex things like closures, defer, recover, select, etc;</li> <li>function isn't prefixed by go:noinline;</li> <li>function isn't prefixed by go:uintptrescapes, since the escape information will be lost during inlining;</li> <li>function has body;</li> <li> <p>etc.</p> </li> <li> <p>gc: 1.0+</p> </li> <li>gccgo: -O1 and above.</li> </ul>"},{"location":"CompilerOptimizations/#idioms","title":"Idioms","text":""},{"location":"CompilerOptimizations/#optimized-memclr","title":"Optimized memclr","text":"<p>For a slice or array s, loops of the form</p> <pre><code>for i := range s {\n\ts[i] = &lt;zero value for element of s&gt;\n}\n</code></pre> <p>are converted into efficient runtime memclr calls. Issue and commit.</p> <ul> <li>gc: 1.5+</li> <li>gccgo: ?</li> </ul>"},{"location":"CompilerOptimizations/#non-scannable-objects","title":"Non-scannable objects","text":"<p>Garbage collector does not scan underlying buffers of slices, channels and maps when element type does not contain pointers (both key and value for maps). This allows to hold large data sets in memory without paying high price during garbage collection. For example, the following map won't visibly affect GC time:</p> <pre><code>type Key [64]byte // SHA-512 hash\ntype Value struct {\n\tName      [32]byte\n\tBalance   uint64\n\tTimestamp int64\n}\nm := make(map[Key]Value, 1e8)\n</code></pre> <ul> <li>gc: 1.5+</li> <li>gccgo: ?</li> </ul>"},{"location":"Conferences/","title":"Go Conferences and Major Events","text":""},{"location":"Conferences/#upcoming","title":"Upcoming","text":"<p>Please keep all items in chronological order.</p> Name Date Location Website CFP GoWest 2025-10-24 Lehi, Utah, USA https://www.gowestconf.com/ Gophercon Africa 2025-10-24-25 Lagos, Nigeria https://www.gophers.africa/ https://www.gophers.africa/call-for-speakers GopherCon Korea 2025-11-09 Seoul, Korea https://gophercon.kr/ https://forms.gle/1GLAS481g2QRzCYs8 GopherCon Latam 2026-09-02-04 Florian\u00f3polis, SC, Brazil https://gopherconlatam.org/ https://www.papercall.io/gopherconlatam2026"},{"location":"Conferences/#archives","title":"Archives","text":"<p>Please keep all items in reverse chronological order (most recent first)</p> Name Date Location Talk, Video Archives Golab 2025-10-05-07 Florence, Italy https://golab.io GopherCon India 2025-09-14-15 Jaipur, India https://gopherconindia.org/ GopherCon 2025-08-26-28 New York City, NY USA https://www.gophercon.com/ GopherCon UK 2025-08-13-15 London, UK https://www.gophercon.co.uk/ Go South Africa 2025-08-06-07 Online https://gopherconf.co.za/ GopherCon Europe 2025-06-16-19 Berlin, Germany https://gophercon.eu/ FOSDEM 2025-02-01-02 Brussels, Belgium https://fosdem.org/2025/ GoKonf Istanbul 2024-11-23 Istanbul, T\u00fcrkiye https://gokonf.com/ Golab 2024-11-11-13 Florence, Italy https://golab.io GopherCon Israel 2024-09-09 Tel Aviv, Israel https://www.gophercon.org.il/ GopherCon UK 2024-08-14-16 London, UK https://www.gophercon.co.uk/ GopherCon 2024-07-07-10 Chicago, IL USA https://www.gophercon.com/ Golang Conf 2024-06-24-25 St. Petersburg, Russia https://golangconf.ru/ GopherCon EU, Berlin 2024-06-17-20 Berlin, Germany https://gophercon.eu/ Go Conference Japan 2024-06-08 Tokyo, Japan https://gocon.jp GopherDay Taiwan 2024-05-25 Taipei, Taiwan https://gopherday.golang.tw/2024/ GopherCon Brazil 2024-05-09-10 Florian\u00f3polis, SC, Brazil https://gopherconbr.org/en/ Conf42 Golang 2024-04-25 Online https://www.conf42.com/golang2024 GopherCon EU, Athens 2024-02-06-08 Athens, Greece https://gophercon.eu/ FOSDEM 2024-02-03-04 Brussels, Belgium https://fosdem.org/2024/ GoLab 2023-11-19-21 Florence, Italy https://golab.io GopherChina 2023-11-19 ShangHai, China http://gopherchina2023sh.bagevent.com GopherCon AU 2023 2023-11-08-10 Sydney, Australia https://gophercon.com.au/ Fyne Conf 2023 2023-11-03 Edinburgh, UK https://conf.fyne.io GopherCon Singapore 2023 2023-11-02-03 Singapore https://2023.gophercon.sg GoWest 2023-10-27 Lehi, Utah, USA https://www.gowestconf.com/ GopherCon 2023-09-26-29 San Diego https://www.gophercon.com/ GopherCon India 2023-09-09-10 Pune, India https://gopherconindia.org GopherCon UK 2023-08-16-18 London, UK https://www.gophercon.co.uk/ GopherCon Europe 2023 2023-06-26-29 Berlin, Germany https://gophercon.eu/, https://www.youtube.com/playlist?list=PLtoVuM73AmsJWvXYd_9rbYXcbv1UdzeLT GopherChina 2023-06-09-11 Beijing, China https://www.bagevent.com/event/8057917 GothamGo 2023-06-09 New York City https://gothamgo.com/ Go Conference 2023 2023-06-02 Online https://gocon.jp/2023/ (talks coming soon) Conf42: Golang 2023 2023-04-20 Online https://www.conf42.com/golang2023, https://www.youtube.com/playlist?list=PLIuxSyKxlQrBDOCy9ThDZ0kJX7skLE2ks GopherCon Israel 2023 2023-02-07 Tel Aviv, Israel https://www.gophercon.org.il Go Devroom FOSDEM 2023-02-04 Brussels, Belgium https://fosdem.org/2023/schedule/track/go/ GoWest Conference 2022 2022-10-21 Online/ Salt Lake City, Ut USA https://gowestconf.com GopherCon 2022-10-06-08 Chicago https://www.gophercon.com/ GopherCon India 2022 2022-08-28 Pune, India https://gopherconindia.org GopherCon Europe 2022 2022-07-28-31 Berlin, Germany https://gophercon.eu/ GopherCon 2021-12-05-08 San Diego &amp; Online https://www.gophercon.com/ GoWest Conference 2021 2021-10-22 Online/ Salt Lake City, Ut USA https://gowestconf.com GopherCon Europe 2021-05-26-28 Online https://gophercon.eu O'Reilly OSS Superstream: Go 2021-04-29 Online website GopherCon Russia 2021 Online 2021-04-23-25 Online https://www.gophercon-russia.ru/en 2020 GopherCon Singapore 2020 tbd due to COVID-19 Singapore https://2020.gophercon.sg/  CFP: https://www.papercall.io/gopherconsg-2020 GopherConIndia 2020 tbd due to COVID-19 Goa, India https://gopherconindia.com/  CFP: https://www.papercall.io/gci20 All Systems Go 2020-12-03 Online https://allsystemsgo.space GopherChina 2020 2020-11-21/22 ShangHai, China https://www.gopherchina.org GoLab 2020 2020-10-19-25 Online https://golab.io Go West Online 2020-10-02 Online https://www.gowestconf.com/ ~GopherCon UK~ <sub>2020-08-21-23</sub> ~London, UK~ https://www.gophercon.co.uk/  CANCELLED DUE TO COVID-19 GopherCon Russia 2020/2 Online 2020-08-08-09 Moscow, Russia https://www.gophercon-russia.ru/en GopherCon Turkey (Online) 2020-07-25 Istanbul, Turkey https://gophercon.ist/ GopherCon Europe 2020-07 Berlin, Germany https://gophercon.berlin/ GopherCon Africa 2020 2020-07-14-16 Lagos, Nigeria https://www.gophercon.africa/ GoWayFest 4.0 (online edition) 2020-07-11-12 Minsk, Belarus https://goway.io  CFP: https://www.papercall.io/gowayfest4 GoCon Sendai 2020-07-04 Sendai, Japan http://sendai.gocon.jp/ ~GoCon Canada~ <sub>2020-05-25-26</sub> ~Toronto, Canada~ https://gocon.ca  CANCELLED DUE TO COVID-19 GoWest 2020-05-08 Salt Lake City, UT USA https://gowestconf.com CFP: https://www.papercall.io/gowestconf GoRemoteFest 2020-04-26 Online https://www.goremotefest.com EU Go Contributor Summit 2020-04-23 Berlin, Germany CANCELLED DUE TO COVID-19 COVID-19 CORONAVIRUS dotGo 2020-03-30 Paris, France https://2020.dotgo.eu/  CANCELLED DUE TO COVID-19 COVID-19 CORONAVIRUS GopherCon Russia 2020 Online 2020-03-28 Moscow, Russia https://www.gophercon-russia.ru/en Capital Go 2020 2020-03-26-27 McLean, Virginia USA http://capitalgolang.com  CANCELLED DUE TO COVID-19 CORONAVIRUS GopherCon Israel 2020-02-03 Tel Aviv, Israel https://www.gophercon.org.il/ Go Devroom FOSDEM 2020-02-02 Brussels, Belgium https://fosdem.org/2020/schedule/track/go/ GoDays 2020-01-21-23 Berlin, Germany https://www.godays.io/ CFP: https://www.godays.io/cfp 2019 Gopherpalooza 2019-11-07-08 Mountain View, CA USA http://gopherpalooza.com/ GopherCon Vietnam 2019 2019-11-02 Ho Chi Minh City, Vietnam https://gophercon.vn Golang Piter 2019-11-01 St. Petersburg, Russia https://golangpiter.com Go Conference Tokyo 2019-10-28 Tokyo, Japan https://gocon.jp/ GoLab 2019 2019-10-20-22 Florence, Italy https://golab.io GolangConf 2019 2019-10-07 Moscow, Russia CfP: https://www.papercall.io/golangconf GopherConBR 2019 2019-09-27-28 Florian\u00f3polis, Brazil http://2019.gopherconbr.org OpenGo 2019 2019-09-23-25 Hollywood, FL USA https://opengo.io/ GopherCon UK 2019-08-21-23 London, UK https://www.gophercon.co.uk/ GopherCon 2019 2019-07-24-27 San Diego, CA USA https://www.gophercon.com/ GopherShip 2019-07-20 Moscow, Russia https://gophership.ru Go Conference '19 Summer in Fukuoka 2019-07-13 Fukuoka, Japan https://fukuoka.gocon.jp/ GoWayFest 3.0 2019-07-05 Minsk, Belarus https://goway.io  CFP: https://www.papercall.io/gowayfest3 Gophercon Poland 2019-06-27 Gdansk, Poland @GopherConPL  CFP: https://eventil.com/events/GopherConPL/cfp GoGoConf 2019-06-14 Krakow, Poland https://www.gogoconf.rocks  CFP: https://www.papercall.io/gogoconf GopherCon Europe 2019-06-01-05-30 Tenerife, Canary Islands, Spain https://www.gophercon.es  CFP: https://www.papercall.io/gophercon-eu-2019 GoCon Canada 2019-05-31 Toronto, Canada https://gocon.ca CFP: https://www.papercall.io/goconca Go Conference Tokyo 2019-05-18 Tokyo, Japan https://gocon.jp/ CFP: https://www.papercall.io/gocon-tokyo-2019 GopherCon Singapore 2019 2019-05-03 Singapore https://2019.gophercon.sg/CFP: https://www.papercall.io/gopherconsg2019 GopherChina 2019 2019-04-27 China BeiJing https://gopherchina.org/ GopherCon Russia 2019-04-13 Moscow, Russia https://www.gophercon-russia.ru/en GothamGo 2019-04-12 New York City, NY USA http://gothamgo.com/CFP https://www.papercall.io/gothamgo2019 CodeFest X 2019-03-30-31 Novosibirsk, Russia dotGo 2019 2019-03-25 Paris, France https://2019.dotgo.eu/ GopherCon Israel 2019-02-11 Tel Aviv, Israel https://www.gophercon.org.il/ Go Devroom FOSDEM 2019-02-02 Brussels, Belgium https://fosdem.org/2019/schedule/track/go/ GoDays 2019-01-30 Berlin, Germany https://www.godays.io/ GopherCon India 2019 2019-01-18-19 Goa, India https://gopherconindia.com/ 2018 GopherCon Vietnam 2018 2018-12-08 Ho Chi Minh City, Vietnam http://gophercon.vn Go Conference Tokyo 2018-11-25 Tokyo, Japan https://gocon.connpass.com/event/109368/ GoGoConf 2018-10-25 Krakow, Poland https://www.gogoconf.rocks GoLab 2018 2018-10-22-23 Florence, Italy https://golab.io Gopherpalooza 2018 2018-10-12 San Francisco, CA http://gopherpalooza.com/ Go Stockholm Conference 2018-10-06 Stockholm, Sweden https://www.eventbrite.com/e/go-stockholm-conference-tickets-49325007425 GoWayFest 2.0 2018-09-28 Minsk, Belarus https://goway.io GopherCon Brasil 2018 2018-09-27-29 Florian\u00f3polis, Brazil https://2018.gopherconbr.org/enCFP https://www.papercall.io/gopherconbrasil2018 GopherCon Denver 2018 2018-08-27-30 Denver, CO https://www.gophercon.com/Talks: https://www.youtube.com/playlist?list=PL2ntRZ1ySWBdatAqf-2_125H4sGzaWngMLightning Talks: https://www.youtube.com/playlist?list=PL2ntRZ1ySWBdMEZScpaoRX-vyt6pRUvfM GopherCon UK 2018 2018-08-01-03 London, UK https://www.gophercon.co.uk/ Go Northwest 2018 2018-07-30 Seattle, WA, USA http://gonorthwest.io/ GopherCon Europe - Iceland 2018-06-01-02 Reykjavik, Iceland TalksWebsite GopherCon SG 2018 2018-05-04 Singapore https://2018.gophercon.sg/ GothamGo 2018 2018-04-27 New York, USA http://gothamgo.com/ Go Conference Tokyo 2018-04-15 Tokyo, Japan https://gocon.connpass.com/event/82515/ GopherCon China 2018 2018-04-14-15 Shanghai, China http://www.gopherchina.org/ GopherCon Russia 2018 2018-03-17 Moscow, Russia http://gophercon-russia.ru/enGopherConRu/talks GopherCon India 2018 2018-03-09-10 Pune, India http://www.gophercon.in/ Go Devroom FOSDEM 2018 2018-02-03-04 Brussels, Belgium https://fosdem.org/2018/schedule/track/go/ 2017 GopherCon Brasil 2017 2017-11-17-19 Florian\u00f3polis, Brazil https://2017.gopherconbr.org/en dotGo 2017-11-06 Paris, France https://www.dotgo.eu Go Conference Tokyo 2017-11-05 Tokyo, Japan https://gocon.connpass.com/event/66615/ GothamGo 2017-10-05-06 New York, USA http://gothamgo.com/ Golang UK 2017-08-16-18 London, UK https://golanguk.com GopherCon Denver 2017-07-12-15 Denver, CO http://gophercon.com GopherCon Singapore 2017 2017-05-25-26 Singapore https://2017.gophercon.sg Capital Go Language Conference 2017-04-24-25 Washington, DC http://www.capitalgolang.com/ GopherChina 2017 2017-04-15-16 Shanghai http://www.bagevent.com/event/357764 Go Conference Tokyo 2017-03-25 Tokyo, Japan https://gocon.connpass.com/event/52441/ GopherCon India 2017 2017-02-24-25 Pune, India http://www.gophercon.in/ Go Devroom FOSDEM 2017-02-05 Brussels, Belgium https://fosdem.org/2017/schedule/track/go/ GoLab 2017-01-20-21 Florence, Italy http://golab.io 2016 GothamGo 2016-11-18 New York, USA http://gothamgo.com/ GopherCon Brasil 2016-11-04-05 Florian\u00f3polis, Brazil https://2016.gopherconbr.org/en/ dotGo 2016-10-10 Paris, France http://2016.dotgo.eu Golang UK 2016-08-18 London, UK http://golanguk.com GopherCon Denver 2016-07-11 Denver, CO http://gophercon.com Gopherfest 2016-05-16 San Francisco, USA http://www.gopherfest.org/ Go Conference Tokyo 2016-04-23 Tokyo, Japan http://gocon.connpass.com/event/27521/ Gopher China 2016-04-16 Beijing, China http://www.gopherchina.org GopherCon Dubai 2016-02-23 Dubai, UAE http://www.gophercon.ae GopherCon India 2016-02-19 Bengaluru, India videos FOSDEM 2016-01-30 Brussels, Belgium https://video.fosdem.org/2016/h1302/ Gopher Gala 2016-01-22 Earth 2015 GoLab 2015-12-15 Florence, Italy http://golab.io Go Conference Tokyo 2015-12-06 Tokyo, Japan https://gocon.connpass.com/event/22930/ GopherFest SV 2015-11-18 Facebook, Menlo Park, CA videos dotGo 2015-11-09 Paris, France videos GothamGo 2015-10-02 NY, NY videos GolangUK 2015-08-21 London, UK videos GopherCon Denver 2015-07-07 Denver, CO keynotes, lightning Go Conference Tokyo 2015-06-20 Tokyo, Japan https://gocon.connpass.com/event/14063/ GopherfestSF 2015-06-25 San Francisco, CA videos GopherCon India 2015-03-17 Bengaluru, India videos Go Devroom FOSDEM 2015-03-04 Brussels, Belgium videos Gopher China 2015-04-25 Shanghai, China London Go Gathering 2015-02-03 London, UK videos 2014 Go Conference Tokyo 2014-11-30 Tokyo, Japan https://gocon.connpass.com/event/9748/ GothamGo 2014-11-15 NYC, NY videos dotGo 2014-09-10 Paris, France videos Go Devroom FOSDEM 2014-06-30 Brussels, Belgium videos Go Conference Tokyo 2014-05-31 Tokyo, Japan https://gocon.connpass.com/event/6370/ GopherCon Denver 2014-04-24 Denver, CO videos 2013 Go Conference Tokyo 2013-10-14 Tokyo, Japan https://gocon.connpass.com/event/3510/ Go Conference Tokyo 2013-04-13 Tokyo, Japan https://gocon.connpass.com/event/1906/"},{"location":"Configuring-GoLand-for-WebAssembly/","title":"Configuring-GoLand-for-WebAssembly","text":""},{"location":"Configuring-GoLand-for-WebAssembly/#-back-to-the-main-webassembly-page","title":"\u2190 Back to the main WebAssembly page.","text":""},{"location":"Configuring-GoLand-for-WebAssembly/#configuring-goland-for-webassembly-wasm-projects","title":"Configuring GoLand for WebAssembly (Wasm) projects","text":""},{"location":"Configuring-GoLand-for-WebAssembly/#initial-project-configuration","title":"Initial project configuration","text":"<p>When you first open or start a WebAssembly project in GoLand, it won't understand the \"syscall/js\" package.</p> <p>That's easily fixable, by changing the GOOS and GOARCH values in the project settings, as per the screenshots below.</p> <p></p> <p>Note - The screenshot below shows how to access Settings on a Linux desktop.  If you're using macOS, you'll probably need to access them through the standard macOS Preferences option. </p> <p></p> <p></p>"},{"location":"Configuring-GoLand-for-WebAssembly/#configuring-rundebug-settings","title":"Configuring Run/Debug settings","text":"<p>With the initial project settings changed, you'll probably want to configure the Run/Debug settings next.</p> <p>That will let you recompile the .wasm file by just launching <code>Run</code> (Shift+F10 on Linux).</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>Finished, your GoLand setup should now be complete.</p>"},{"location":"Configuring-GoLand-for-WebAssembly/#-back-to-the-main-webassembly-page_1","title":"\u2190 Back to the main WebAssembly page.","text":""},{"location":"Contributing-to-gopls/","title":"Contributing-to-gopls","text":"<p>This page has been subsumed into the committed markdown of x/tools repository</p> <p>Please do not edit this page!</p>"},{"location":"Contributing/","title":"Contributing","text":"<p>The contents of https://go.dev/wiki are hosted in the go.googlesource.com/wiki repository, and is also mirrored on golang/wiki.</p> <p>These contents are served by the same server that hosts the official Go website https://go.dev/. The server's source is located in the go.googlesource.com/website repository.</p>"},{"location":"Contributing/#reporting-issues","title":"Reporting issues","text":"<p>For issues related to existing contents, the preferred method of resolution is to send a change.</p> <p>However, if you would like to add a new page, please first open an issue in the Go issue tracker with the prefix <code>wiki:</code> to propose the addition. Clearly state why the content does not fit into any of the existing pages.</p> <p>Because renaming of pages in the wiki can break external links, please open an issue before renaming or removing any wiki page.</p> <p>If the issue pertains to the serving of contents, please open a GitHub issue.</p>"},{"location":"Contributing/#triaging-issues","title":"Triaging issues","text":"<p>To address content-related issues, it is recommended to identify the person or team most familiar with the content in question. A good starting point is the project owners page.</p> <p>For issues related to content serving, follow the usual triaging process similar to x/website issues and label them with <code>website</code>.</p>"},{"location":"Contributing/#updating-contents","title":"Updating contents","text":"<p>Before making changes, ensure familiarity with the code review process outlined in the official Contribution Guide.</p>"},{"location":"Contributing/#sending-a-trivial-change","title":"Sending a trivial change","text":"<p>For minor updates such as fixing typos and adding missing links, you can use the GitHub flow. Make edits from the GitHub repo and open a GitHub pull request as you normally would.</p> <p>Additional information is available at Sending a change via GitHub.</p>"},{"location":"Contributing/#sending-a-non-trivial-change","title":"Sending a non-trivial change","text":"<p>For larger changes, consider sending your change through Gerrit following the instructions provided in Sending a change via Gerrit.</p> <p>The canonical repository for wiki content is located at <code>go.googlesource.com/wiki</code>.</p> <pre><code>$ git clone https://go.googlesource.com/wiki\n</code></pre>"},{"location":"Contributing/#reviewing-and-submitting-changes","title":"Reviewing and submitting changes","text":"<p>Unlike other Go repositories, the submission process for the wiki repository requires only one +2 from anyone in the wiki repository maintainers group. See Proposal 61940 for additional background.</p> <p>Note for reviewers: once you give your +2 and all comments are addressed, please merge the change soon to avoid merge conflicts.</p> <p>Anyone interested in receiving notifications about incoming wiki CLs can opt-in through their Gerrit notifications.</p>"},{"location":"Contributing/#changing-and-testing-the-contents-serving-behavior","title":"Changing and testing the contents serving behavior","text":"<p><code>golang.org/x/website/cmd/golangorg</code> is the program that serves the wiki pages.</p> <pre><code>$ git clone https://go.googlesource.com/website\n$ cd website/cmd/golangorg\n</code></pre> <p>Follow the instructions in README.md for running and testing the program locally.</p>"},{"location":"CoreDumpDebugging/","title":"CoreDumpDebugging","text":"<p>Originally published at https://rakyll.org/coredumps/.</p> <p>Debugging is highly useful to examine the execution flow and to understand the current state of a program.</p> <p>A core file is a file that contains the memory dump of a running process and its process status. It is primarily used for post-mortem debugging of a program, as well as to understand a program's state while it is still running. These two cases make debugging of core dumps a good diagnostics aid to postmortem and analyze production services.</p> <p>I will use a simple hello world web server in this article, but in real life our programs might get very complicated easily. The availability of core dump analysis gives you an opportunity to resurrect a program from specific snapshot and look into cases that might only reproducible in certain conditions/environments.</p> <p>Note: This flow only works on Linux at this point end-to-end, I am not quite sure about the other Unixes but it is not yet supported on macOS. Windows is not supported at this point.</p> <p>Before we begin, you need to make sure that your ulimit for core dumps are at a reasonable level. It is by default 0 which means the max core file size can only be zero. I usually set it to unlimited on my development machine by typing:</p> <pre><code>$ ulimit -c unlimited\n</code></pre> <p>Then, make sure you have delve installed on your machine.</p> <p>Here is a <code>main.go</code> that contains a simple handler and it starts an HTTP server.</p> <pre><code>$ cat main.go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprint(w, \"hello world\\n\")\n\t})\n\tlog.Fatal(http.ListenAndServe(\"localhost:7777\", nil))\n}\n</code></pre> <p>Let's build this and have a binary.</p> <pre><code>$ go build .\n</code></pre> <p>Let\u2019s assume, in the future, there is something messy going on with this server but you are not so sure about what it might be. You might have instrumented your program in various ways but it might not be enough for getting any clue from the existing instrumentation data.</p> <p>Basically, in a situation like this, it would be nice to have a snapshot of the current process, and then use that snapshot to dive into to the current state of your program with your existing debugging tools.</p> <p>There are several ways to obtain a core file. You might have been already familiar with crash dumps, these are basically core dumps written to disk when a program is crashing. Go doesn't enable crash dumps by default but gives you this option  on Ctrl+backslash when <code>GOTRACEBACK</code> env variable is set to \"crash\".</p> <pre><code>$ GOTRACEBACK=crash ./hello\n(Ctrl+\\)\n</code></pre> <p>It will crash the program with stack trace printed and core dump file will be written.</p> <p>Another option is to retrieve a core dump from a running process without  having to kill a process. With <code>gcore</code>, it is possible to get the core files without crashing. Let\u2019s start the server again:</p> <p><pre><code>$ ./hello &amp;\n$ gcore 546 # 546 is the PID of hello.\n</code></pre> We have a dump without crashing the process. The next step is to load the core file to delve and start analyzing.</p> <pre><code>$ dlv core ./hello core.546\n</code></pre> <p>Alright, this is it! This is no different than the typical delve interactive. You can backtrace, list, see variables, and  more. Some features will be disabled given a core dump is a snapshot and not a currently running process, but the execution flow and the program state will be entirely accessible.</p> <pre><code>(dlv) bt\n 0  0x0000000000457774 in runtime.raise\n    at /usr/lib/go/src/runtime/sys_linux_amd64.s:110\n 1  0x000000000043f7fb in runtime.dieFromSignal\n    at /usr/lib/go/src/runtime/signal_unix.go:323\n 2  0x000000000043f9a1 in runtime.crash\n    at /usr/lib/go/src/runtime/signal_unix.go:409\n 3  0x000000000043e982 in runtime.sighandler\n    at /usr/lib/go/src/runtime/signal_sighandler.go:129\n 4  0x000000000043f2d1 in runtime.sigtrampgo\n    at /usr/lib/go/src/runtime/signal_unix.go:257\n 5  0x00000000004579d3 in runtime.sigtramp\n    at /usr/lib/go/src/runtime/sys_linux_amd64.s:262\n 6  0x00007ff68afec330 in (nil)\n    at :0\n 7  0x000000000040f2d6 in runtime.notetsleep\n    at /usr/lib/go/src/runtime/lock_futex.go:209\n 8  0x0000000000435be5 in runtime.sysmon\n    at /usr/lib/go/src/runtime/proc.go:3866\n 9  0x000000000042ee2e in runtime.mstart1\n    at /usr/lib/go/src/runtime/proc.go:1182\n10  0x000000000042ed04 in runtime.mstart\n    at /usr/lib/go/src/runtime/proc.go:1152\n\n(dlv) ls\n&gt; runtime.raise() /usr/lib/go/src/runtime/sys_linux_amd64.s:110 (PC: 0x457774)\n   105:\t\tSYSCALL\n   106:\t\tMOVL\tAX, DI\t// arg 1 tid\n   107:\t\tMOVL\tsig+0(FP), SI\t// arg 2\n   108:\t\tMOVL\t$200, AX\t// syscall - tkill\n   109:\t\tSYSCALL\n=&gt; 110:\t\tRET\n   111:\n   112:\tTEXT runtime\u00b7raiseproc(SB),NOSPLIT,$0\n   113:\t\tMOVL\t$39, AX\t// syscall - getpid\n   114:\t\tSYSCALL\n   115:\t\tMOVL\tAX, DI\t// arg 1 pid\n</code></pre>"},{"location":"Courses/","title":"Courses","text":""},{"location":"Courses/#introduction","title":"Introduction","text":"<p>Go is a great language for CS majors. This page presents some university courses that use Go. For a list of free and commercial Go training classes, see the Learn wiki.</p>"},{"location":"Courses/#language","title":"Language","text":"<ul> <li>University of Helsinki, Department of Computer Science used to have a course named Introduction to Go, taught by K. B\u00e4ckman: http://www.cs.helsinki.fi/courses/582336 in Spring 2010.</li> <li>University of Sofia \"St. Kliment Ohridski\", Faculty of Mathematics and Informatics has elective course named \"Programming with Go\", taught by K. Vladimiroff: http://fmi.golang.bg (bulgarian) and their [public lectures] - (also in bulgarian)</li> <li>Free University of Berlin (Germany) had a course Introduction to Go Programming in Spring 2013.</li> <li>J.W. Goethe University (Frankfurt/Main, Germany) had a course Introduction to Go Programming in Spring 2015 (in german)</li> <li>University of Pennsylvania had a course on Go Programming in Spring 2017.</li> <li>SUNY Potsdam (Potsdam, NY) \"Selected languages course with Go\", taught by Dr. Brian C. Ladd (Associate Professor of Computer Science). First class in Spring 2017</li> <li>University of Milan has a course named \"Computer Programming\" taught by Paolo Boldi: http://boldi.di.unimi.it/Corsi/Inf2018/ </li> <li>University of Zagreb (Croatia), Faculty of Electrical Engineering and Computing, has an ongoing course Go programming language since 2020, held by Z. Bratkovi\u0107 and B. Banelli. Videos available from academic year 2019./2020. and 2020./2021. (Croatian)</li> <li>The Faculty of Informatics at Masaryk University has offered a Go course as part of the PB173: Domain Specific Development course since 2023. The current course materials are publicly accessible under the course-go organization.</li> </ul>"},{"location":"Courses/#programming-concepts","title":"Programming Concepts","text":"<ul> <li>President University (Cikarang, West Java, Indonesia) had a course Programming Concepts for every junior students (using C, Go and Javascript).</li> </ul>"},{"location":"Courses/#web","title":"Web","text":"<ul> <li>CS 4830: Science and Engineering of the WWW taught by Ryanne Dolan at University of Missouri: http://4830.ryannedolan.info/</li> <li>CSCI 130: Web Programming taught by Todd McLeod at California State University Fresno</li> <li>CSCI 194: Adv. Web Programming taught by Todd McLeod at California State University Fresno</li> <li>CIT 90: Data Drive Websites taught by Todd McLeod at Fresno City College</li> <li>CIT 94: Server Side Scripting taught by Todd McLeod at Fresno City College</li> </ul>"},{"location":"Courses/#concurrency","title":"Concurrency","text":"<ul> <li> <p>Go is being used at the end of a yearlong freshman computer science class at KTH: http://yourbasic.org/golang/concurrent-programming/</p> </li> <li> <p>Go, Concurrent and Systems Programming from Rochester Institute of Technology: http://www.cs.rit.edu/~ats/go-2011-2/index.xml</p> </li> <li> <p>Free University of Berlin (Germany) had a course on Concurrent Programming with Go as a reference language in 2013.</p> </li> <li> <p>University of Duisburg-Essen (Germany) had a lecture about Go and CSP within their course on Concurrent systems modelling in summer 2014. [Slides]</p> </li> <li> <p>University of Stavanger, Norway. We use Go to teach concurrency principles in DAT320 Operating Systems. http://www.uis.no/studies/study-courses/?code=DAT320_1&amp;parentcat=9835</p> </li> <li> <p>University of Troms\u00f8, Norway. Concurrent and Data-Intensive Programming (INF-2200). </p> </li> <li> <p>University of Victoria (Canada) used Go in the section on Concurrency as a part of Programming Languages (CSC 330)</p> </li> </ul>"},{"location":"Courses/#distributed-computing","title":"Distributed Computing","text":"<ul> <li> <p>Distributed Computer Systems (CS 138) at Brown: http://cs.brown.edu/courses/cs138/s16/syllabus.html</p> </li> <li> <p>Distributed Systems course (COS 418) at Princeton: https://www.cs.princeton.edu/courses/archive/fall16/cos418/</p> </li> <li> <p>Distributed Systems course (15-440) at CMU: http://www.cs.cmu.edu/~dga/15-440/F12/index.html (see also http://da-data.blogspot.se/2013/02/teaching-distributed-systems-in-go.html)</p> </li> <li> <p>6.824 Distributed Systems at MIT is using Go in its labs: http://pdos.csail.mit.edu/6.824/.</p> </li> <li> <p>CSE 223B, Spring 2014: Distributed Computing and Systems at UC San Diego http://cseweb.ucsd.edu/classes/sp14/cse223B-a/index.html</p> </li> <li> <p>Dixie State University teaches Go in an introductory course to programming languages and later on in distributed systems.</p> </li> <li> <p>CS 352, Computer Organization and Design, at the University of Wisconsin, Eau Claire: http://cs.uwec.edu/~buipj/teaching/cs.352.f13/lab_01_high_performance_computing.html</p> </li> <li> <p>KTH Stockholm uses Go to teach concurrency: DD1396 Parallel and Concurrent Programming. https://www.kth.se/student/kurser/kurs/DD1396</p> </li> <li> <p>Norwegian University of Science and Technology: TTK4145 Real-Time Programming http://www.itk.ntnu.no/fag/TTK4145/information/</p> </li> <li> <p>University of Stavanger, Norway. We use Go to build a replicated state machine based on Paxos in DAT520 Distributed Systems. http://www.uis.no/studies/study-courses/?code=DAT520_1&amp;parentcat=9835</p> </li> <li> <p>Moscow State University, Russia. Go is used in graduate course on \"Selected Topics in Distributed Systems Engineering\"</p> </li> <li> <p>D7024E - Mobile and Distributed Computing Systems at Lule\u00e5 University of Technology. Go is used to implement the DHT algorithm Chord and create a data replication system. http://www.ltu.se/edu/course/D70/D7024E/D7024E-Mobila-och-distribuerade-datorsystem-1.67844?l=en&amp;kursView=kursplan</p> </li> <li> <p>University of Troms\u00f8, Norway. Distributed Systems Fundamentals (INF-3200) and Advanced Distributed Systems (INF-3203). </p> </li> </ul>"},{"location":"Courses/#networking","title":"Networking","text":"<ul> <li>Computer Networking (COS 461) at Princeton: http://www.cs.princeton.edu/courses/archive/spring16/cos461/  (See Assignment 1 https://github.com/PrincetonUniversity/COS461-Spring2016/tree/master/notebook/assignment1 and Assignment 4 http://www.cs.princeton.edu/courses/archive/spring16/cos461/assignments/.</li> </ul>"},{"location":"Courses/#compiler-design","title":"Compiler Design","text":"<ul> <li> <p>Compiler Design (CS712/CS812) at the University of New Hampshire: http://www.cs.unh.edu/~cs712/. In Fall 2016 we are compiling a subset of Go to LLVM code.</p> </li> <li> <p>Introduction to Compilers (6197, Spanish) at Rey Juan Carlos University of Madrid: http://lsub.org/comp. Students write a compiler in Go that implements a language for drawing graphics.</p> </li> </ul>"},{"location":"Courses/#security","title":"Security","text":"<ul> <li>Learn Cryptography in Go on Boot.dev. A code-in-the-browser course where cryptography principles are taught in the Go language.</li> <li>Computer Systems Security (CS166) At Brown University. In particular, the final Dropbox Project.</li> </ul>"},{"location":"CreatingSubRepository/","title":"CreatingSubRepository","text":"<p>This page outlines the steps that need to be done to create a new golang.org/x repository, in order for it to have the same properties as all existing golang.org/x repositories: - a golang.org/x redirect - automatic git mirroring from Gerrit to GitHub - automatic importing of GitHub PRs into Gerrit CLs - automatic testing on appropriate Go builders</p>"},{"location":"CreatingSubRepository/#steps","title":"Steps","text":"<ol> <li>Create a new empty Gerrit repository at https://go.googlesource.com, complete with a description.<ul> <li>Create an initial commit with <code>LICENSE</code>, <code>PATENTS</code>, <code>CONTRIBUTING.md</code>, and <code>README.md</code> files and push it directly to the Gerrit repository. See example commit.</li> <li>See the internal team instructions at go/go-gerrit#new-repository for how to create a repository.</li> </ul> </li> <li>Create a new empty GitHub repository at @golang with the same name and description.<ul> <li>Turn off Wikis, Issues, Projects in repository settings.</li> <li>On \"Manage access\" tab:<ul> <li>Add \"golang org admins\" team with Admin access.</li> <li>Add \"google-go-team\" team with Write access.</li> <li>Add \"robots\" team with Write access (can only be done by a maintainer of golang organization; ask someone else if you're not).</li> </ul> </li> </ul> </li> <li>Modify the <code>x/build/repos</code> package.<ul> <li>Also modify the <code>x/build/devapp/owners</code> to include the owner(s) of the new repository. (Both can be updated in one CL.)</li> </ul> </li> <li>Modify the <code>PROJECTS</code> map on luci-config branch.</li> <li>Update x/website's version of x/build to include modified <code>x/build/repos</code> package.<ul> <li><code>x/website/cmd/golangorg</code> will deploy automatically on CL submission.</li> </ul> </li> <li>Redeploy all affected commands (or ask an x/build owner to deploy if you're not; the order shouldn't matter):<ol> <li><code>x/build/cmd/gitmirror</code></li> <li><code>x/build/maintner/maintnerd</code><ul> <li>Note that it's expected for the new repo not to appear in maintner until first issue or PR is created (see #25744).</li> </ul> </li> <li><code>x/build/cmd/gerritbot</code></li> <li><code>x/build/devapp</code></li> </ol> </li> <li>You're done.</li> </ol>"},{"location":"CustomPprofProfiles/","title":"CustomPprofProfiles","text":"<p>Originally published at https://rakyll.org/custom-profiles/.</p> <p>Go provides several pprof profiles out of the box to gather profiling data from Go programs.</p> <p>The builtin profiles provided by the runtime/pprof package:</p> <ul> <li>profile: CPU profile determines where a program spends its time while actively consuming CPU cycles (as opposed while sleeping or waiting for I/O).</li> <li>heap: Heap profile reports the currently live allocations; used to monitor current memory usage or check for memory leaks.</li> <li>threadcreate: Thread creation profile reports the sections of the program that lead the creation of new OS threads.</li> <li>goroutine: Goroutine profile report the stack traces of all current goroutines.</li> <li>block: Block profile show where goroutines block waiting on synchronization primitives (including timer channels). Block profile is not enabled by default; use runtime.SetBlockProfileRate to enable it.</li> <li>mutex: Mutex profile reports the lock contentions. When you think your CPU is not fully utilized due to a mutex contention, use this profile. Mutex profile is not enabled by default, see runtime.SetMutexProfileFraction to enable.</li> </ul> <p>Additional to the builtin profiles, runtime/pprof package allows you to export your custom profiles, and instrument your code to record execution stacks that contributes to this profile.</p> <p>Imagine we have a blob server, and we are writing a Go client for it. And our users want to be able to profile the opened blobs on the client. We can create a profile and record the events of blob opening and closing, so the user can tell how many open blobs they are at any time.</p> <p>Here is a blobstore package that allows you to open some blobs. We will create a new custom profile and start recording execution stacks that contributes to opening of blobs:</p> <pre><code>package blobstore\n\nimport \"runtime/pprof\"\n\nvar openBlobProfile = pprof.NewProfile(\"blobstore.Open\")\n\n// Open opens a blob, all opened blobs need\n// to be closed when no longer in use.\nfunc Open(name string) (*Blob, error) {\n\tblob := &amp;Blob{name: name}\n\t// TODO: Initialize the blob...\n\n\topenBlobProfile.Add(blob, 2) // add the current execution stack to the profile\n\treturn blob, nil\n}\n</code></pre> <p>And once users want to close the blob, we need to remove the execution stack associated with the current blob from the profile:</p> <pre><code>// Close closes the blob and frees the\n// underlying resources.\nfunc (b *Blob) Close() error {\n\t// TODO: Free other resources.\n\topenBlobProfile.Remove(b)\n\treturn nil\n}\n</code></pre> <p>And now, from the programs using this package, we should be able to retrieve <code>blobstore.Open</code> profile data  and use our daily pprof tools to examine and visualize them.</p> <p>Let's write a small main program than opens some blobs:</p> <pre><code>package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"net/http\"\n\t_ \"net/http/pprof\" // as a side effect, registers the pprof endpoints.\n\t\"time\"\n\n\t\"myproject.org/blobstore\"\n)\n\nfunc main() {\n\tfor i := 0; i &lt; 1000; i++ {\n\t\tname := fmt.Sprintf(\"task-blob-%d\", i)\n\t\tgo func() {\n\t\t\tb, err := blobstore.Open(name)\n\t\t\tif err != nil {\n\t\t\t\t// TODO: Handle error.\n\t\t\t}\n\t\t\tdefer b.Close()\n\n\t\t\t// TODO: Perform some work, write to the blob.\n\t\t}()\n\t}\n\thttp.ListenAndServe(\"localhost:8888\", nil)\n}\n</code></pre> <p>Start the server, then use go tool to read and visualize the profile data:</p> <pre><code>$ go tool pprof http://localhost:8888/debug/pprof/blobstore.Open\n(pprof) top\nShowing nodes accounting for 800, 100% of 800 total\n      flat  flat%   sum%        cum   cum%\n       800   100%   100%        800   100%  main.main.func1 /Users/jbd/src/hello/main.go\n</code></pre> <p>You will see that there are 800 open blobs and all openings are coming from main.main.func1. In this small example, there is nothing more to see, but in a complex server you can examine the hottest spots that works with an open blob and find out bottlenecks or leaks.</p>"},{"location":"Darwin/","title":"Go on Darwin","text":"Kernel version Distributions Architectures Initial support version Final support version 18 macOS Mojave 10.14, iOS 12 amd64, arm64, 386 Go 1.12 17 macOS High Sierra 10.13, iOS 11 amd64, arm64, 386 Go 1.7.1 * 16 macOS Sierra 10.12, iOS 10 amd64, arm, arm64, 386 Go 1.7.1 ** 15 OS X El Capitan 10.11 amd64, 386 Go 1 * 15 iOS 9 arm, arm64 Go 1.5 14 OS X Yosemite 10.10 amd64, 386 Go 1 * 14 iOS 7, iOS 8 arm, arm64 Go 1.5 13 OS X Mavericks 10.9 amd64, 386 Go 1 * Go 1.10.8 12 OS X Mountain Lion 10.8 amd64, 386 Go 1 * Go 1.10.8 11 OS X Lion 10.7 amd64, 386 Go 1 * Go 1.7.6 10 Mac OS X Snow Leopard 10.6 amd64, 386 Go 1 Go 1.4.3 <p>* Go 1.5 or above is recommended.</p> <p>** See golang/go#16570 and golang/go#19772.</p> <p>* See golang/go#22037.</p>"},{"location":"DashboardBuilders/","title":"DashboardBuilders","text":""},{"location":"DashboardBuilders/#luci-builders","title":"LUCI Builders","text":"<p>The Go team has migrated the testing pipeline from a custom solution, the coordinator, to LUCI. LUCI is an open source continuous integration system created by the Chrome open source team at Google. The Go team has adopted the use of LUCI in order to leverage a continuous integration solution which is used and supported by a larger group of developers. This should enable the team to provide a more featureful solution to the community.</p> <p>The LUCI system requires builders to run two applications which authenticate to LUCI and receive and process builds. LUCI token daemon generates a token needed to authenticate. The swarming bot uses the token to connect to LUCI and process builds.</p>"},{"location":"DashboardBuilders/#builder-requirements","title":"Builder Requirements","text":"<ul> <li>An internet connection with the ability to connect to:<ul> <li>https://proxy.golang.org (or an alternative proxy via GOPROXY).</li> <li>https://luci-token-server.appspot.com</li> <li>https://chromium-swarm.appspot.com</li> <li>https://cr-buildbucket.appspot.com</li> <li>https://7419-34ac013-dot-chromium-swarm.appspot.com (possible changed in the future?)</li> <li>https://remotebuildexecution.googleapis.com</li> <li>https://storage.googleapis.com (for gomote creation)</li> </ul> </li> <li>Resources<ul> <li>At least 512MB of memory. 1GB or more is highly recommended.</li> <li>20GB disk space is ideal.</li> <li>Preferably with 2 or more (V)CPUs.</li> </ul> </li> <li>Python 3 installed and available in <code>PATH</code> (or equivalent) under the name <code>python3</code> (or <code>python3.exe</code> on Windows).</li> <li>Permissions<ul> <li>The bot should be run as the <code>swarming</code> user (without root rights).</li> <li>The bot automatically updates itself. It should have permissions to do so.</li> <li>The bot periodically restarts the machine. It should have permissions to do so (via sudo).</li> <li>Under Docker, you can replace the shutdown command with a shell script that restarts the container (example).</li> <li>If the machine can't be restarted for some reason, set the environment variable <code>SWARMING_NEVER_REBOOT</code>.</li> </ul> </li> </ul>"},{"location":"DashboardBuilders/#how-to-set-up-a-builder","title":"How to set up a builder","text":"<ol> <li> <p>Create an issue on the Go Issue tracker requesting the addition of a new builder and assign it yourself.</p> <ol> <li>The title of the issue should be in the format: <code>x/build: add LUCI &lt;os-arch&gt; builder</code>.</li> <li>Choose a hostname and state its value in the issue body. The hostname should follow the following format: <code>&lt;GOOS&gt;-&lt;GOOARCH&gt;-&lt;GitHub handle of maintainer&gt;</code>. The Go team may ask that it be changed if there is any conflict with the name.</li> <li>Add the label \"new-builder\". (You can post a comment on the issue stating <code>@gopherbot, please add label new-builder.</code> in the issue to have gopherbot add it for you.)</li> </ol> </li> <li> <p>Use <code>golang.org/x/build/cmd/genbotcert</code> to generate both a certificate signing request (hostname.csr) and a TLS private key (hostname.key) using the hostname (chosen beforehand) as input. Add a .txt file extension to the certificate signing request (hostname.csr.txt) and attach it to the GitHub issue. A team member will attach the resulting certificate (hostname.cert) to the GitHub issue.</p> <ol> <li><code>genbotcert -bot-hostname &lt;hostname&gt;</code></li> </ol> </li> <li> <p>A Go team member will define your new builder in LUCI. A comment will be added to the issue when this is completed.</p> </li> <li> <p>The Machine Token Daemon communicates with the Token Server to generate and renew a LUCI machine token. Install <code>go.chromium.org/luci/tokenserver/cmd/luci_machine_tokend</code> and configure it to run every 10 minutes via cron. The private key shouldn't be readable by the <code>swarming</code> user, so the cron job should run as a separate user.</p> <ol> <li><code>luci_machine_tokend -backend luci-token-server.appspot.com -cert-pem &lt;path-to-the-certificate&gt; -pkey-pem &lt;path-to-the-private-key&gt; -token-file=/var/lib/luci_machine_tokend/token.json</code></li> <li>If /var/lib isn't a suitable place for the token, change it as you see fit and set the environment variable <code>LUCI_MACHINE_TOKEN</code> to the file path when calling <code>bootstrapswarm</code> below.</li> </ol> </li> <li> <p>Install <code>golang.org/x/build/cmd/bootstrapswarm</code> and configure it to run in a loop under your operating system's process supervisor (systemd, etc) as the <code>swarming</code> user. <code>Bootstrapswarm</code> downloads the initial version of the swarming bot and ensures that it is always running.</p> <ol> <li><code>bootstrapswarm -hostname &lt;hostname&gt;</code></li> </ol> </li> <li> <p>Verify the bot starts up without any errors in the logs.</p> </li> </ol>"},{"location":"DashboardBuilders/#security-notes","title":"Security notes","text":"<p>Generally, low-capacity builders only run code that's already been reviewed &amp; submitted (post-submit testing). We only enable pre-submit testing for builders run by the Go team that have a lot of hardware available. However, the Gomote tool is available for a number of people on the Go team and in the Go community that lets them have arbitrary access to the builders for development &amp; debugging.</p> <p>For paranoia reasons, you might want to run your builder in an isolated network that can't access any of your internal resources.</p>"},{"location":"DashboardBuilders/#coordinator-builders-legacy","title":"Coordinator Builders (legacy)","text":"<p>This section describes the custom testing solution used previously by the Go project, prior to the migration to LUCI.</p> <p>Build configs (at the top) and host configs (bottom) are listed here:</p> <p>https://farmer.golang.org/builders</p> <p>A builder runs on a certain host type. (e.g. <code>linux-386-387</code> is a build type. It runs on <code>host-linux-kubestd</code>, a Kubernetes-based linux/amd64 host)</p> <p>They come from the file https://cs.opensource.google/go/x/build/+/master:dashboard/builders.go</p> <p>For design details about the coordinator, see https://go.dev/s/builderplan</p> <p>Information about builder machines, how many are running and their status can be found at https://farmer.golang.org/</p>"},{"location":"Deprecated/","title":"Deprecated","text":"<p>Sometimes an API feature such as a struct field, function, type, or even a whole package becomes redundant or unnecessary. When we want to discourage new programs from using it, we mark that feature \"deprecated\".</p> <p>In contrast to some other systems, an API feature being deprecated does not mean it is going to be removed in the future. On the contrary, Go 1 compatibility means the feature will be preserved in its deprecated form to keep existing programs running.</p> <p>To signal that an identifier should not be used, add a paragraph to its doc comment that begins with <code>Deprecated:</code> followed by some information about the deprecation, and a recommendation on what to use instead, if applicable. The paragraph does not have to be the last paragraph in the doc comment.</p> <p>Some tools will warn on use of deprecated identifiers and their docs are hidden on pkg.go.dev.</p> <p>If function <code>F1</code> is being replaced by function <code>F2</code> and the first release in which <code>F2</code> is available is Go 1.N, then an official deprecation notice for <code>F1</code> should not be added until Go 1.N+1. This ensures that Go developers only see <code>F1</code> as deprecated when all supported Go versions include <code>F2</code> and they can easily switch.</p> <p>Marking an API feature deprecated can create work and decisions for millions of Go developers using the feature. Deprecating an API feature is an API change that must be discussed using the proposal process.</p>"},{"location":"Deprecated/#examples","title":"Examples","text":"<pre><code>type ResponseRecorder struct {\n\t// HeaderMap contains the headers explicitly set by the Handler.\n\t// It is an internal detail.\n\t//\n\t// Deprecated: HeaderMap exists for historical compatibility\n\t// and should not be used. To access the headers returned by a handler,\n\t// use the Response.Header map as returned by the Result method.\n\tHeaderMap http.Header\n</code></pre> <pre><code>// Package rc4 implements the RC4 stream cipher.\n//\n// Deprecated: RC4 is cryptographically broken and should not be used\n// except for compatibility with legacy systems.\n//\n// This package is frozen and no new functionality will be added.\npackage rc4\n</code></pre> <p>There are a few other examples in the standard library.</p>"},{"location":"DesignDocuments/","title":"DesignDocuments","text":""},{"location":"DesignDocuments/#go-11","title":"Go 1.1","text":"<ul> <li>Scalable Scheduler</li> <li>net/http/cookiejar</li> <li>Function Calls</li> </ul>"},{"location":"DesignDocuments/#go-12","title":"Go 1.2","text":"<ul> <li>xml.Marshaler and Unmarshaler</li> <li>encoding.TextMarshaler and Unmarshaler</li> <li>Runtime Symbol Table Format</li> <li>Field Selectors and Nil Checks</li> <li><code>x[i:j:k]</code> Slice Syntax</li> <li>Preemptive Scheduler</li> </ul>"},{"location":"DesignDocuments/#go-13","title":"Go 1.3","text":"<ul> <li>Contiguous Stacks</li> <li>Go 1.3 Linker Overhaul</li> <li>Go 1.3 Native Client Support</li> </ul>"},{"location":"DesignDocuments/#go-14","title":"Go 1.4","text":"<ul> <li>Go channels on steroids</li> <li>Go 1.4 \u201cInternal\u201d Packages</li> <li>Go 1.4 src/pkg \u2192 src</li> <li>Go 1.4 Custom Import Path Checking</li> <li>Go generate: A Proposal</li> <li>The syscall package</li> <li>Go 1.4 Subrepo Renaming</li> <li>Go 1.4 Native Client Support for ARM</li> <li>dev.cc branch plan</li> </ul>"},{"location":"DesignDocuments/#go-15","title":"Go 1.5","text":"<ul> <li>Go 1.5 Bootstrap Plan</li> <li>Go Compiler Overhaul</li> <li>Go Execution Tracer</li> </ul>"},{"location":"DesignDocuments/#future-proposals","title":"Future Proposals","text":"<ul> <li>New SSA Backend for the Go Compiler</li> <li>Go 1.4+ Garbage Collection (GC) Plan and Roadmap</li> <li>Better GC and Memory Allocator for Go <ul> <li>Groups Discussion</li> </ul> </li> <li>Precise GC Stack Roots</li> <li>Go 1.3 cmd/go and os/fsnotify</li> <li>Go 1.5 os/fsnotify API</li> <li>Simple Multi-Dimensional Slices (Tables)</li> <li>Go execution modes</li> <li>Building and distributing Go packages as shared libraries</li> <li>NUMA-aware scheduler for Go</li> <li>Go 1.5+ \"External\" Packages</li> </ul>"},{"location":"DesignDocuments/#other-tools","title":"Other Tools","text":"<ul> <li>Go Oracle</li> <li>Binding Go and Java</li> <li>Go Builder Plan</li> <li>gomobile \u2014 a tool for building apps</li> </ul>"},{"location":"DesignDocuments/#rejected-proposals","title":"Rejected Proposals","text":"<ul> <li>Read-only Slices, Evaluation of read-only slices (rejected)</li> <li>Go 1.4: unsafe.Pointer arithmetic</li> </ul>"},{"location":"Diagnostics/","title":"Diagnostics","text":"<p>Moved to /doc/diagnostics.</p>"},{"location":"Download-build-farm-failed-logs-and-debugging/","title":"Download-build-farm-failed-logs-and-debugging","text":"<p>The Go project has all build failed logs storage at GCE, which you can access by the dashboard.</p> <p>You can download all the failed logs by <code>fetchlogs</code>.</p> <p>Download <code>fetchlogs</code> by <code>go get golang.org/x/build/cmd/fetchlogs</code></p> <p><code>fetchlogs</code> only download 300 latest failed logs by default, which is not enough for \"mystery\"/\"flaky\" bugs. <code>fetchlogs -n &lt;the number you want&gt;</code></p> <p>You may also want to take a look at <code>github.com/aclements/go-misc/greplogs</code>. It's a useful tool by Austin to run grep over logs fetched by fetchlogs. </p> <p>Also <code>github.com/aclements/findflakes</code> can make some guesses as to when a flaky test started failing.</p>"},{"location":"DragonFly-BSD/","title":"Go on DragonFly BSD","text":"<p>From https://github.com/golang/go/issues/34958#issuecomment-543852995 :</p> <p>Go's DragonFly support policy is that we support the latest stable release primarily, but also try to keep DragonFly master passing, in prep for it to become the latest stable release.</p> <p>But that does mean we need one more builder at the moment.</p> Kernel version Architectures Initial support version Final support version 4.6 or above amd64 Go 1.8 4.4.4 (EOL) amd64 Go 1.8 4.4 through 4.4.3 (EOL) amd64 Go 1.3 * Go 1.7.6 3.8 through 4.2 (EOL) amd64 Go 1.3 * Go 1.7.6 3.6 (EOL) amd64, 386 Go 1.3 Go 1.4.3 <p>* Go 1.5 or above is recommended.</p>"},{"location":"ErrorValueFAQ/","title":"Error Values: Frequently Asked Questions","text":"<p>The Go 2 error values proposal adds functionality to the <code>errors</code> and <code>fmt</code> packages of the standard library for Go 1.13. There is also a compatibility package, <code>golang.org/x/xerrors</code>, for earlier Go versions.</p> <p>We suggest using the <code>xerrors</code> package for backwards compatibility. When you no longer wish to support Go versions before 1.13, use the corresponding standard library functions. This FAQ uses the <code>errors</code> and <code>fmt</code> packages from Go 1.13.</p>"},{"location":"ErrorValueFAQ/#how-should-i-change-my-error-handling-code-to-work-with-the-new-features","title":"How should I change my error-handling code to work with the new features?","text":"<p>You need to be prepared that errors you get may be wrapped.</p> <ul> <li> <p>If you currently compare errors using <code>==</code>, use <code>errors.Is</code> instead. Example:    <pre><code>if err == io.ErrUnexpectedEOF\n</code></pre>    becomes    <pre><code>if errors.Is(err, io.ErrUnexpectedEOF)\n</code></pre></p> </li> <li> <p>Checks of the form <code>if err != nil</code> need not be changed.</p> </li> <li> <p>Comparisons to <code>io.EOF</code> need not be changed, because <code>io.EOF</code> should never be wrapped.</p> </li> <li> <p>If you check for an error type using a type assertion or type switch, use <code>errors.As</code> instead. Example:   <pre><code>if e, ok := err.(*os.PathError); ok\n</code></pre>   becomes   <pre><code>var e *os.PathError\nif errors.As(err, &amp;e)\n</code></pre></p> </li> <li>Also use this pattern to check whether an error implements an interface. (This is one of those rare cases when a pointer to an interface is appropriate.)</li> <li>Rewrite a type switch as a sequence of if-elses.</li> </ul>"},{"location":"ErrorValueFAQ/#i-am-already-using-fmterrorf-with-v-or-s-to-provide-context-for-an-error-when-should-i-switch-to-w","title":"I am already using <code>fmt.Errorf</code> with <code>%v</code> or <code>%s</code> to provide context for an error. When should I switch to <code>%w</code>?","text":"<p>It's common to see code like <pre><code>if err := frob(thing); err != nil {\n    return fmt.Errorf(\"while frobbing: %v\", err)\n}\n</code></pre> With the new error features, that code continues to work exactly as before, constructing a string that includes the text of <code>err</code>. Changing from <code>%v</code> to <code>%w</code> doesn't change that string, but it does wrap <code>err</code>, allowing the caller to access it using <code>errors.Unwrap</code>, <code>errors.Is</code> or <code>errors.As</code>.</p> <p>So use <code>%w</code> if you want to expose the underlying error to your callers. Keep in mind that doing so may be exposing implementation detail that can constrain the evolution of your code. Callers can depend on the type and value of the error you're wrapping, so changing that error can now break them. For example, if the <code>AccessDatabase</code> function of your package <code>pkg</code> uses Go's <code>database/sql</code> package, then it may encounter a <code>sql.ErrTxDone</code> error. If you return that error with <code>fmt.Errorf(\"accessing DB: %v\", err)</code> then callers won't see that <code>sql.ErrTxtDone</code> is part of the error you return. But if you instead return <code>fmt.Errorf(\"accessing DB: %w\", err)</code>, then a caller could reasonably write <pre><code>err := pkg.AccessDatabase(...)\nif errors.Is(err, sql.ErrTxDone) ...\n</code></pre> At that point, you must always return <code>sql.ErrTxDone</code> if you don't want to break your clients, even if you switch to a different database package.</p>"},{"location":"ErrorValueFAQ/#how-can-i-add-context-to-an-error-im-already-returning-without-breaking-clients","title":"How can I add context to an error I'm already returning without breaking clients?","text":"<p>Say your code now looks like <pre><code>return err\n</code></pre> and you decide that you want to add more information to <code>err</code> before you return it. If you write</p> <p><pre><code>return fmt.Errorf(\"more info: %v\", err)\n</code></pre> then you might break your clients, because the identity of <code>err</code> is lost; only its message remains.</p> <p>You could instead wrap the error by using <code>%w</code>, writing <pre><code>return fmt.Errorf(\"more info: %w\", err)\n</code></pre> This will still break clients who use <code>==</code> or type assertion to test errors. But as we discussed in the first question of this FAQ, consumers of errors should migrate to the <code>errors.Is</code> and <code>errors.As</code> functions. If you can be sure that your clients have done so, then it is not a breaking change to switch from <pre><code>return err\n</code></pre> to <pre><code>return fmt.Errorf(\"more info: %w\", err)\n</code></pre></p>"},{"location":"ErrorValueFAQ/#im-writing-new-code-with-no-clients-should-i-wrap-returned-errors-or-not","title":"I'm writing new code, with no clients. Should I wrap returned errors or not?","text":"<p>Since you have no clients, you aren't constrained by backwards compatibility. But you still need to balance two opposing considerations: - Giving client code access to underlying errors can help it make decisions, which can lead to better software. - Every error you expose becomes part of your API: your clients may come to rely on it, so you can't change it.</p> <p>For each error you return, you have to weigh the choice between helping your clients and locking yourself in. Of course, this choice is not unique to errors; as a package author, you make many decisions about whether a feature of your code is important for clients to know or an implementation detail.</p> <p>With errors, though, there is an intermediate choice: you can expose error details to people reading your code's error messages without exposing the errors themselves to client code. One way to do that is to  put the details in a string using <code>fmt.Errorf</code> with <code>%s</code> or <code>%v</code>. Another is to write a custom error type, add the details to the string returned by its <code>Error</code> method, and avoid defining an <code>Unwrap</code> method.</p>"},{"location":"ErrorValueFAQ/#i-maintain-a-package-that-exports-an-error-checking-predicate-function-how-should-i-adapt-to-the-new-features","title":"I maintain a package that exports an error-checking predicate function. How should I adapt to the new features?","text":"<p>Your package has a function or method <code>IsX(error) bool</code> that reports whether an error has some property. A natural thought would be to modify <code>IsX</code> to unwrap the error it is passed, checking the property for each error in the chain of wrapped errors. We advise against doing this: the change in behavior could break your users.</p> <p>Your situation is like that of the standard <code>os</code> package, which has several such functions. We recommend the approach we took there. The <code>os</code> package has several predicates, but we treated most of them the same. For concreteness, we'll look at <code>os.IsExist</code>.</p> <p>Instead of changing <code>os.IsExist</code>, we made <code>errors.Is(err, os.ErrExist)</code> behave like it, except that <code>Is</code> unwraps. (We did this by having <code>syscall.Errno</code> implement an <code>Is</code> method, as described in the documentation for <code>errors.Is</code>.) Using <code>errors.Is</code> will always work correctly, because it will exist only in Go versions 1.13 and higher. For older versions of Go, you should recursively unwrap the error yourself, calling <code>os.IsExist</code> on each underlying error.</p> <p>This technique only works if you have control of the errors being wrapped, so you can add <code>Is</code> methods to them. In that case, we recommend: - Don't change your <code>IsX(error) bool</code> function; do change its documentation to clarify that it does not unwrap. - If you don't already have one, add a global variable whose type implements <code>error</code> that represents the   condition that your function tests:   <pre><code>var ErrX = errors.New(\"has property X\")\n</code></pre> - Add an <code>Is</code> method to the types for which <code>IsX</code> returns true. The <code>Is</code> method should return true if its argument   equals <code>ErrX</code>.</p> <p>If you don't have control of all the errors that can have property X, you should instead consider adding another function that tests for the property while unwrapping, perhaps <pre><code>func IsXUnwrap(err error) bool {\n    for e := err; e != nil; e = errors.Unwrap(e) {\n        if IsX(e) {\n            return true\n        }\n    }\n    return false\n}\n</code></pre></p> <p>Or you could leave things as they are, and let your users do the unwrapping themselves. Either way, you should still change the documentation of <code>IsX</code> to clarify that it does not unwrap.</p>"},{"location":"ErrorValueFAQ/#i-have-a-type-that-implements-error-and-holds-a-nested-error-how-should-i-adapt-it-to-the-new-features","title":"I have a type that implements <code>error</code> and holds a nested error. How should I adapt it to the new features?","text":"<p>If your type already exposes the error, write an <code>Unwrap</code> method.</p> <p>For example, perhaps your type looks like <pre><code>type MyError struct {\n    Err error\n    // other fields\n}\n\nfunc (e *MyError) Error() string { return ... }\n</code></pre></p> <p>Then you should add <pre><code>func (e *MyError) Unwrap() error { return e.Err }\n</code></pre></p> <p>Your type will then work correctly with the <code>Is</code> and <code>As</code> functions of <code>errors</code> and <code>xerrors</code>.</p> <p>We've done that for <code>os.PathError</code> and other, similar types in the standard library.</p> <p>It's clear that writing an <code>Unwrap</code> method is the right choice if the nested error is exported, or otherwise visible to code outside your package, such as via a method like <code>Unwrap</code>.  But if the nested error is not exposed to outside code, you probably should keep it that way. Making the error visible by returning it from <code>Unwrap</code> will enable your clients to depend on the type of the nested error, which can expose implementation details and constrain the evolution of your package. See the discussion of <code>%w</code> above for more.</p>"},{"location":"Errors/","title":"Errors","text":"<p>Errors are indicated by returning an <code>error</code> as an additional return value from a function. A <code>nil</code> value means that there was no error.</p> <p><code>error</code>s can be turned into strings by calling <code>Error</code>, their only method. You can create an error from a string by calling <code>errors.New</code>:</p> <pre><code>if failure {\n\treturn errors.New(\"inverse tachyon pulse failed\")\n}\n</code></pre> <p>or by using <code>fmt.Errorf</code>:</p> <pre><code>if failure {\n\treturn fmt.Errorf(\"inverse tachyon pulse failed\")\n}\n</code></pre> <p>Error strings should not start with a capital letter because they'll often be prefixed before printing:</p> <pre><code>err := TryInverseTachyonPulse()\nif err != nil {\n\tfmt.Printf(\"failed to solve problem: %s\\n\", err)\n}\n</code></pre> <p>If you expect calling code to be able to handle an error, you can distinguish classes of errors either by returning special values, or new types. You only need to distinguish differences that the calling code could be expected to handle in this way as the string allows one to communicate the details of the error.</p> <p><code>io.EOF</code> is a special value that signals the end of a stream. You can compare error values directly against io.EOF.</p> <p>If you want to carry extra data with the error, you can use a new type:</p> <pre><code>type ParseError struct {\n\tLine, Col int\n}\n\nfunc (p ParseError) Error() string {\n\treturn fmt.Sprintf(\"parse error on line %d, column %d\", p.Line, p.Col)\n}\n</code></pre> <p>If you want to create a constant string error, you can use a named type string:</p> <pre><code>type errorConst string\n\nconst ErrTooManyErrors errorConst = \"too many errors found.\"\n\nfunc (e errorConst) Error() string {\n\treturn string(e)\n}\n</code></pre> <p>Calling code would test for a special type of <code>error</code> by using a type switch:</p> <pre><code>switch err := err.(type) {\ncase ParseError:\n\tPrintParseError(err)\n}\n</code></pre>"},{"location":"Errors/#naming","title":"Naming","text":"<p>Error types end in <code>\"Error\"</code> and error variables start with <code>\"Err\"</code> or <code>\"err\"</code>:</p> <pre><code>package somepkg\n\n// ParseError is type of error returned when there's a parsing problem.\ntype ParseError struct {\n  Line, Col int\n}\n\nvar ErrBadAction = errors.New(\"somepkg: a bad action was performed\")\n\n// -----\n\npackage foo\n\nfunc foo() {\n    res, err := somepkgAction()\n    if err != nil {\n        if err == somepkg.ErrBadAction {\n        }\n        if pe, ok := err.(*somepkg.ParseError); ok {\n             line, col := pe.Line, pe.Col\n             // ....\n        }\n    }\n}\n</code></pre>"},{"location":"Errors/#references","title":"References","text":"<ul> <li>Errors (specification): https://go.dev/ref/spec#Errors</li> <li>Package <code>errors</code>: https://pkg.go.dev/errors/</li> <li>Type switches: https://go.dev/ref/spec#TypeSwitchStmt</li> </ul>"},{"location":"ExperienceReports/","title":"ExperienceReports","text":"<p>This page collects experience reports about problems with Go that might inform our design of solutions to those problems. These reports should focus on the problems: they should not focus on and need not propose solutions. To propose solutions, see the proposal process.</p> <p>We hope to use these experience reports to understand where people are having trouble writing Go, to help us prioritize future changes to the Go ecosystem.  (We do not promise to reply to these. If you need immediate help answering questions about Go, see https://go.dev/help/ for resources.)</p> <p>The best experience reports tell: (1) what you wanted to do, (2) what you actually did, and (3) why that wasn\u2019t great, illustrating those by real concrete examples, ideally from production use. Please write these reports about the problems most significant to you, post them on your own blog, or on Medium, or as a GitHub Gist (use a <code>.md</code> extension for Markdown), or as a publicly-readable Google doc, and then link them here. (Talk videos or slides are also welcome, although they are not as convenient for us to digest.)</p> <p>If you do not have permission to edit the wiki to add an article to this list, please file an issue.</p> <p>Please keep the overall page sorted alphabetically by section (Error Handling before Logging, and so on). Within a section, please keep articles sorted chronologically. It's helpful to include a one-phrase summary of the point of each article.</p> <p>Add new sections as appropriate.</p> <p>Table of Contents</p> <ul> <li>App and Game Development</li> <li>Concurrency</li> <li>Casting</li> <li>Context</li> <li>Declarations</li> <li>Dependencies</li> <li>Documentation</li> <li>Diagnostics and Debugging</li> <li>Education and Teaching</li> <li>Error Handling</li> <li>Error Values</li> <li>File System</li> <li>Generics</li> <li>GoMobile</li> <li>Immutability</li> <li>Inter Process Communication</li> <li>Large-Scale Software Development</li> <li>Literals</li> <li>Logging</li> <li>Misc/Multiple</li> <li>Modules</li> <li>Performance</li> <li>Porting</li> <li>Slices</li> <li>Syntax</li> <li>Time</li> <li>Tooling</li> <li>Type System</li> <li>Typed nils</li> <li>Vendoring</li> </ul>"},{"location":"ExperienceReports/#app-and-game-development","title":"App and Game Development","text":"<ul> <li>Paul Ruest, \"Go Library Support for Apps and Games\", November 2017</li> <li>Tad Vizbaras, \"Building Optical Character Recognition (OCR) in Go\", December 2017</li> </ul>"},{"location":"ExperienceReports/#casting","title":"Casting","text":"<ul> <li>Richard Warburton, \"Should Go Casting be permitted when underlying data structures are the same?\", December 2017</li> </ul>"},{"location":"ExperienceReports/#concurrency","title":"Concurrency","text":"<ul> <li>Sergey Kamardin, \u201cA Million WebSockets and Go,\u201d August 2017, about the memory overhead of blocked read/write goroutines.</li> <li>Nathaniel J. Smith, \u201cNotes on structured concurrency, or: Go statement considered harmful\u201d, April 2018.</li> </ul>"},{"location":"ExperienceReports/#context","title":"Context","text":"<ul> <li>Sam Vilain, \u201cUsing Go's context library for making your logs make sense,\u201d December 2016, about extracting structured log values from context.</li> <li>Jon Calhoun, \u201cPitfalls of context values and how to avoid or mitigate them in Go,\u201d February 2017.</li> <li>Michal \u0160trba, \"Context should go away for Go 2,\" August 2017</li> <li>Axel Wagner, \"Why context.Value matters and how to improve it,\" August 2017.</li> <li>Dave Cheney, \"Context isn't for cancellation,\" August 2017.</li> <li>Ross Light, \"Canceling I/O in Go Cap'n Proto,\" January 2018.</li> <li>Iman Tumorang, \"Avoiding Memory Leak in Golang API,\" January 2018.</li> </ul>"},{"location":"ExperienceReports/#declarations","title":"Declarations","text":"<ul> <li>Christophe Meessen, \"Problems with Go's shorthand declaration :=\", July 2017, about the shadowing var trap and apparent inconsistency of <code>:=</code>.</li> <li>Brian Will, \"Go's := syntax is error-prone with multiple target variables\", August 2017.</li> </ul>"},{"location":"ExperienceReports/#dependencies","title":"Dependencies","text":"<ul> <li>Patrick Bohan, \"Docker =&gt; Moby: Go Dependencies,\" Jun 28, 2017. A new Go team's struggles with dependency management and an approach to deal with them.</li> <li>Judson Lester, \"[untitled gist] (https://gist.github.com/nyarly/edb6b7a5e3a762da6a5e2da8f59acf07)\", August 2017.</li> <li>David Collier-Brown, \"Avoiding an NP-Complete Problem by Recycling Multics\u2019 Answer\", September 2018.</li> <li>Adrian Hesketh \"Security vulnerability tracking\", January 2018. Proving to a security auditor that code doesn't contain known vulnerabilities.</li> </ul>"},{"location":"ExperienceReports/#diagnostics-and-debugging","title":"Diagnostics and Debugging","text":"<ul> <li> <p>Kevin Burke, \"How I'm running benchmarks and printing their results\", it would be nice if I didn't need so much Unix glue to run and print these. July 2017.</p> </li> <li> <p>John Clarke, Tracking down an intermittent fault (not a race) by running a very slow {hit test failure, increase logging} cycle by running \"do { go test -race } while ( $LASTEXITCODE -eq 0 )\" overnight. Over many nights. Execution trace functionality like https://rr-project.org/ would be transformative.  November 2018.</p> </li> <li> <p><code>guanw</code>, <code>cmd/trace</code> and PySnooper. Comparison of <code>cmd/trace</code> with a (more succinct) Python tracing API. May 2019.</p> </li> </ul>"},{"location":"ExperienceReports/#documentation","title":"Documentation","text":"<ul> <li>Kevin Burke, \"Need to add documentation for a binary in three different places\", May 2017.</li> </ul>"},{"location":"ExperienceReports/#education-and-teaching","title":"Education and Teaching","text":"<ul> <li>Carl Kingsford and Phillip Compeau, \"Go 2.0 for Teaching\". Experience using Go in an introductory programming course.</li> </ul>"},{"location":"ExperienceReports/#error-handling","title":"Error Handling","text":"<p>(This section is about writing <code>if err != nil</code>.)</p> <ul> <li>Andrew Gerrand, \u201cError Handling and Go,\u201d July 2011,     showing Go error handling patterns.</li> <li>Martin S\u00fastrik, \u201cWhy should I have written ZeroMQ in C, not C++ (part I),\u201d May 2012,     discussing production problems with C++ exception handling due to error-handling code being far from code that causes the error.</li> <li>Thomi Richards, \u201cThe Problems with Errors,\u201d March 2014,     arguing that it's essential for code to document exactly which errors it returns / exceptions it might throw.</li> <li>Roger Peppe, \u201cLovin' your errors,\u201d March 2015, discussing idioms for error handling.</li> <li>Bleve, \u201cDeferred Cleanup, Checking Errors, and Potential Problems,\u201d September 2015,     showing a bug related to error handling and defer in Bleve search.</li> <li>Andrew Morgan, \u201cWhat I Don't Like About Error Handling in Go, and How to Work Around It,\u201d January 2017,     about it being difficult to force good error handling, errors not having stack traces, and error handling being too verbose.</li> <li>Andr\u00e9 H\u00e4nsel, \"If \u2160 were to make my own Go\u2026\", August 2017</li> <li>Peter Goetz, \"Thinking About New Ways of Error Handling in Go 2,\" September 2017, shows how error-prone error handling in Go is and lays out requirements to improve the experience.</li> </ul>"},{"location":"ExperienceReports/#error-values","title":"Error Values","text":"<p>(This section is about additional error semantics beyond the <code>Error() string</code> method.)</p> <ul> <li>Andrew Morgan, \u201cWhat I Don't Like About Error Handling in Go, and How to Work Around It,\u201d January 2017,     about it being difficult to force good error handling, errors not having stack traces, and error handling being too verbose.</li> <li>Chris Siebenmann, \u201cGo's net package doesn't have opaque errors, just undocumented ones,\u201d August 2018</li> <li>Bryan C. Mills, \u201cError Wrapping and Redundancy in Go,\u201d September 2019</li> </ul>"},{"location":"ExperienceReports/#file-system","title":"File System","text":"<ul> <li>Chris Lewis, \u201cNon-Local File Systems Should Be Supported,\u201d July 2017. Proposes replacing file system read calls to something more abstracted like the <code>sql</code> package does.</li> </ul>"},{"location":"ExperienceReports/#generics","title":"Generics","text":"<ul> <li>\u201cSummary of Go Generics Discussions (living document).\u201d</li> <li>Bouke van der Bijl, \u201cIdiomatic Generics in Go,\u201d September 2014.</li> <li>Craig Weber, \u201cLiving without generics in Go,\u201d December 2014.</li> <li>Shashank Sharma, \u201cPoor man's generics in Golang (Go),\u201d May 2016.</li> <li>Niek Sanders, \u201cOverhead of Go's generic sort,\u201d September 2016,     documenting the overhead of sorting using sort.Interface instead of specialized code.</li> <li>Jon Calhoun, \u201cUsing code generation to survive without generics in Go,\u201d May 2017.</li> <li>Jon Bodner, \u201cClosures are the Generics for Go,\u201d June 2017.</li> <li>Andrew Stock, \"Why I miss generics in Go,\" June 2017</li> <li>Kevin Burke, \"Code example with lots of interface casts,\" requires a lot of boilerplate/casts.</li> <li>Ian Lance Taylor, \"The append function,\" July 2017.</li> <li>DeedleFake, \"The Problem with Interfaces\", July 2017.</li> <li>Kurtis Nusbaum \"Why I'm So Frustrated With Go,\" June 2017</li> <li>Juan \u00c1lvarez, \"Generics on Go's stdlib\", July 2017.</li> <li>David Chase, \"A use case for Go Generics in a Go Compiler\", August 2017</li> <li>Varun Kumar, \"Generics - I Wish You Were Here\u2026\", August 2017</li> <li>Sameer Ajmani, \"Go Experience Report for Generics: Google metrics API\", August 2017</li> <li>Chewxy, \"Tensor Refactor: A Go Experience Report\", September 2017, discusses the lack of generics and how it affects building high performance multidimensional arrays for different data types (having to resort to a lot of pointer ugliness, and manually keeping track of type and runtime type checking)</li> <li>qwerty2501,\"A problem runtime error due to lack of Generics\", October 2017</li> <li>posener, \"Why I recommend to avoid using the go-kit library\", clear separation of concern need lots of boilerplate code. gokit try code generation to avoid this #70 #308 protoc-gen-gokit , but it looks like a complex solution for the problem.</li> <li>Xavier Leroy, \"A modular module system\", paper about module description for generics.</li> <li>Tobias Gustafsson, \"Experiences implementing PEDS\", PEDS is a set of statically type safe, immutable/persistent, collections. November 2017</li> <li>A Googler \"govisor/generics.go\". April 27, 2018</li> </ul>"},{"location":"ExperienceReports/#gomobile","title":"GoMobile","text":"<ul> <li>Vijay, \"[Nested structs and slices not supported in gomobile]\"</li> </ul>"},{"location":"ExperienceReports/#immutability","title":"Immutability","text":"<ul> <li>Kurtis Nusbaum \"Why I'm So Frustrated With Go,\" June 2017</li> <li>Sindre Myren \"Go 2.0: Retain simplicity by trading features\" July 2017</li> <li>Tobias Gustafsson, \"Experiences implementing PEDS\", PEDS is a set of statically type safe, immutable/persistent, collections. November 2017</li> </ul>"},{"location":"ExperienceReports/#inter-process-communication","title":"Inter Process Communication","text":"<ul> <li>Pablo R. Larraondo \"A Go interprocess communication model,\" August 2017</li> </ul>"},{"location":"ExperienceReports/#large-scale-software-development","title":"Large-Scale Software Development","text":"<ul> <li>Russ Cox, \u201cCodebase Refactoring (with help from Go),\u201d November 2016, laying out the gradual code repair problem addressed in part by type aliases (#18130).</li> <li>Travis Jeffery, \"I'll take pkg over internal,\" November 2019; talking about Go project layouts, problems with internal, and why people use pkg.</li> </ul>"},{"location":"ExperienceReports/#literals","title":"Literals","text":"<ul> <li>Mike Schinkel, \"Managing string literals is a PITA, not just in GoLang but in (all?) other languages,\" June 2022, proposing \"Literal String\" and \"Literal Template\" types.</li> </ul>"},{"location":"ExperienceReports/#logging","title":"Logging","text":"<ul> <li>Evan Miller, \u201cLogging can be tricky,\u201d September 2014,     showing how logging can add to application tail latency.</li> <li>Dave Cheney, \u201cLet's talk about logging,\u201d November 2015,     arguing that there are only two log levels.</li> <li>TJ Holowaychuk, \u201cApex log,\u201d January 2016, describing a structured log package and how it would be used in production.</li> <li>Paddy Foran, \u201cLogging in Go,\u201d February 2016, showing how  sends Go program logs to Sentry.</li> <li>Martin Angers, \u201cAbout Go logging for reusable packages,\u201d March 2016, making suggestions for how to write code that doesn't assume a particular log package.</li> <li>BugReplay.com, \u201cHow to use Google Cloud's Free Structured Logging Service With Golang,\u201d September 2016.</li> <li>Sam Vilain, \u201cUsing Go's context library for making your logs make sense,\u201d December 2016, about extracting structured log values from context.</li> <li>Logmatic, \u201cOur Guide to a Golang Logs World,\u201d March 2017.</li> <li>Chris Hines, Peter Bourgon, \u201cProposal: standard Logger interface,\u201c February 2017, problems related to stdlib logger, especially in the context of libraries, and one proposed solution.</li> <li>Sindre Myren, \"There is nothing Goish about log.Fatal\" August 2017, how poorly log.Fatal plays with defer, and a simple pattern for delaing with it in Go 1.x and Go 2.x.</li> <li>Joonas Loppi, \"An idea to fix Go\u00b4s logging mess\" December 2017, just use *log.Logger as an interface everywhere and compose solutions around it.</li> </ul>"},{"location":"ExperienceReports/#misc--multiple","title":"Misc / Multiple","text":"<ul> <li>Iman Tumorang, \"Trying Clean Architecture on Golang\" July 2017</li> <li>Laurent Demailly, \"My Go lang experience, part 1\" December 2017, a laundry list of pros and cons with current Go from an experienced C/C++/Java/Scripting languages developer perspective.</li> <li>Gokcehan Kara, \"Installation with Go Language can be Simpler\" May 2018, some complications about the installation and distribution of static stripped binaries with version information.</li> <li>Bob Nystrom, \"The Language I Wish Go Was\" October 2010, I wish Go had tuples, unions, constructors, no Nil, exceptions, generics, some syntax sugar, and ponies that shoot Cheez Whiz out of their noses.</li> </ul>"},{"location":"ExperienceReports/#modules","title":"Modules","text":"<ul> <li>Paul Jolly - \"Creating a submodule within an existing module\" - covers multi-module repos, cyclic module dependencies and the steps required to move between various \"states\"</li> <li>Chi authors - GitHub comment - comment on why the Chi authors held out on implementing Go Modules support (which has been added in the meantime). TL;DR \u00ad\u2014 due to the import compatibility rule.</li> <li>Sam Whited -\"Supporting Go Modules\" - Things learned from upgrading 20 so modules. TL;DR \u2014 upgrading large modules past v1 is a huge pain and needs tooling, failure modes for modules are very complex and it's easy to screw up adding modules support to existing projects.</li> <li>Stripe GitHub thread (linked comment down) - reverting support for Go Modules. TL;DR \u2014 Stripe is reverting Go Modules support because there is no clear upgrade path from dep for modules above v1.</li> <li>Referencing bash scripts in <code>GOPATH</code></li> <li>Go Modules on Badger and Dgraph. TL;DR - Dgraph is dropping support for v2 because it forces non-Go modules users to change their code.</li> <li>A survey on Golang's dependency management modes (GOPATH and Go Modules): status quo, problems and challenges. - The purpose of this report is to help developers better understand the issues in the transition from GOPATH to Go Modules.</li> </ul>"},{"location":"ExperienceReports/#performance","title":"Performance","text":"<ul> <li>Kevin Burke, \"Real Life Go Benchmarking,\" trying to explain to the average developer how to use tools like pprof, maybe this could be easier. July 2016.</li> <li>Nathan Kerr, \"Concurrency Slower?\", shows how to use Go's testing, benchmarking, and profiling tools to improve the performance of a concurrent implementation of a function. April 2017.</li> </ul>"},{"location":"ExperienceReports/#porting","title":"Porting","text":"<ul> <li>Shannon Pekary, \"Why GOPP,\" an attempt to create a 'class' keyword that simply makes a struct to also be an interface to make porting code from object-oriented languages much easier.</li> </ul>"},{"location":"ExperienceReports/#slices","title":"Slices","text":"<ul> <li>Richard Warburton, \"Should Go 2.0 support slice comparison?,\" an argument to treat slices as structs for equality comparison, ignoring backing arrays.</li> <li>\"Deduplicating a slice is too cumbersome,\" a 10-line function in your source code vs. e.g. Ruby's <code>uniq</code> function.</li> <li>\"Counter-intuitive behaviour of Go variadic functions,\", January 2018, stumbling blocks encountered when expanding slices into argument lists.</li> </ul>"},{"location":"ExperienceReports/#syntax","title":"Syntax","text":"<ul> <li>Andr\u00e9 H\u00e4nsel, \"If \u2160 were to make my own Go\u2026\", August 2017</li> <li>Bojan Zivanovic, \"Optional function parameters\", May 2020</li> <li>Raanan Hadar, \"A data scientist's take on\u00a0Go\", September 2020</li> </ul>"},{"location":"ExperienceReports/#time","title":"Time","text":"<ul> <li>John Graham-Cumming, \u201cHow and Why the Leap Second Affected Cloudflare DNS,\u201d January 2017, about timing across leap seconds (#12914).</li> </ul>"},{"location":"ExperienceReports/#tooling","title":"Tooling","text":"<ul> <li>Jonathan Ingram, \u201cgofmt is not opinionated enough\u201d, August 2017, about ongoing debates between developers regarding code style because <code>gofmt</code> is not opinionated enough.</li> <li>Jean-Laurent de Morlhon, \"Pourquoi Maurice ne doit surtout pas coder en GO, talk about Go from a java developer perspective (\"go dep\" is not enough,\u2026), slides are in english.</li> </ul>"},{"location":"ExperienceReports/#type-system","title":"Type System","text":"<ul> <li>Sam Whited, \u201cFaking Enumeration Types with Consts and Unexported Types\u201d, July 2017, about attempting to ensure compile time correctness of values provided to an API using the type system.</li> <li>Andreas Matuschek, \"Operator Methods\", July 2017, just to remember that there are problems with types without corresponding operators (#19770).</li> <li>Leigh McCulloch, \"Go: Experience Report: Pointers\", July 2017, about pointers being used for both transferring ownership and indicating a lack of value.</li> <li>Jack Lindamood, \"Interface wrapping method erasure\", July 2017, about the loss of information due to type wrappers</li> <li>Sam Whited, \u201cThe Case for interface{}\u201d, Aug 2017, two examples of using interface and why one is bad (but necessary) and one is good.</li> <li>James Frasch\u00e9, \"Sum types experience report\", Aug 2017, issues caused by inability to restrict to a closed set of types</li> <li>Robin Eklind, \"Specific use cases. In response to James Frasch\u00e9's 'Sum types experience report'\", Aug 2017, issues caused by inability to restrict to a closed set of types</li> <li>Rick Branson, \"Implicit Pointers = Explicitly Bad\", Sep 2017, issues encountered with parameters/variables with interface types as implicit references</li> <li>Chewxy, \"Tensor Refactor: A Go Experience Report\", September 2017, issues regarding discussion of a type system in Go</li> <li>Walter Schulze, \"Generic functions cannot be passed as values\", September 2017</li> <li>Walter, Schulze, \"For Sum Types: Multiple return parameters are overrated\", September 2017</li> <li>Nicolas, Boulay \"Sum type not always the best choice (Typed tagless-final interpretations), October 2017</li> <li>Eduard Urbach, \"Type-casting interface{} to chan interface{}\", October 2017</li> <li>David Vennik, \"Unjumbling Golang OOP primitives\", April 20, 2018 - The problem of the lack of structuring in OOP primitives - dummy functions and redundant boilerplate type bindings.</li> <li>Jelte Fennema, \"Fixing the billion dollar mistake in Go by borrowing from Rust\", June 14, 2018 - Nil pointer dereferences cause panics in production - it would be great if the type system would catch some of those.</li> </ul>"},{"location":"ExperienceReports/#typed-nils","title":"Typed nils","text":"<ul> <li>David Cheney, \"Typed nils in Go 2\", August 2017.</li> </ul>"},{"location":"ExperienceReports/#vendoring","title":"Vendoring","text":"<ul> <li>Jeremy Loy, \"Go Modules and Vendoring\", September 2018.</li> <li>Ian Davis, \"Vendoring for self-contained builds\", January 2019</li> </ul>"},{"location":"FileTreeDocumentation/","title":"FileTreeDocumentation","text":"<p>This page documents the file tree for a source installation of go1.13.1.</p> <pre><code>$ tree -d -L 2 /usr/lib/go1.13.1 | head\n/usr/lib/go1.13.1\n`-- go\n    |-- api\n    |-- bin\n    |-- doc\n    |-- lib\n    |-- misc\n    |-- pkg\n    |-- src\n    `-- test\n$\n</code></pre> <p>api contains data for Go's API checker</p> <pre><code>$ ls $GOROOT/api\nREADME\t    go1.10.txt\tgo1.13.txt  go1.4.txt  go1.7.txt  go1.txt\nexcept.txt  go1.11.txt\tgo1.2.txt   go1.5.txt  go1.8.txt  next.txt\ngo1.1.txt   go1.12.txt\tgo1.3.txt   go1.6.txt  go1.9.txt\n$\n</code></pre> <p>bin contains the go and gofmt executables</p> <pre><code>$ ls -l $GOROOT/bin\ntotal 11576\n-rwxr-xr-x 1 root root 9652760 Oct  2 03:02 go\n-rwxr-xr-x 1 root root 2197756 Oct  2 03:02 gofmt\n$\n</code></pre> <p>doc contains .css, .go, .html, .js, and .png files</p> <p>lib contains the compressed time zone database</p> <pre><code>$ tree $GOROOT/lib | head -n 5\n/usr/lib/go1.13.1/go/lib\n`-- time\n    |-- README\n    |-- update.bash\n    `-- zoneinfo.zip\n$\n</code></pre> <p>misc contains files pertaining to specific build modes and platforms</p> <pre><code>$ tree -d -L 1 $GOROOT/misc | head -n 12\n/usr/lib/go1.13.1/go/misc\n|-- android\n|-- arm\n|-- cgo\n|-- chrome\n|-- ios\n|-- linkcheck\n|-- nacl\n|-- reboot\n|-- swig\n|-- trace\n`-- wasm\n$\n</code></pre> <p>pkg contains libs, header files, compiled object files, and executables</p> <p><pre><code>$ tree -d -L 1 $GOROOT/pkg | head -n 6\n/usr/lib/go1.13.1/go/pkg\n|-- include\n|-- linux_386\n|-- linux_386_dynlink\n|-- obj\n`-- tool\n$\n</code></pre> src contains the go1.13.1 source code</p> <p>test contains tests of the Go toolchain and runtime</p>"},{"location":"FreeBSD/","title":"Go on FreeBSD","text":"Kernel version Architectures Initial support version Final support version 14-CURRENT amd64, 386, arm, arm64, riscv64 _ _* 13-STABLE amd64, 386, arm, arm64, riscv64 _ _* 12-STABLE amd64, 386, arm, arm64 Go 1.12 ** 11-STABLE (EOL) amd64, 386, arm, 386 Go 1.7 Go 1.19.x 10-STABLE (EOL) amd64, 386, arm, 386 Go 1.3 * Go 1.12.4 9-STABLE (EOL) amd64, 386 Go 1 * Go 1.9.7 8-STABLE (EOL) amd64, 386 Go 1 * Go 1.9.7 7-STABLE (EOL) amd64, 386 Go 1 Go 1.1.2 <p>* Go 1.5 or above is recommended.</p> <p>** Go versions prior to 1.20 require a kernel with <code>options COMPAT_FREEBSD11</code> config (this is the default). 64-bit inode aware system calls are available since https://go.dev/cl/143637. See https://go.dev/issues/22447.</p> <p>* Go 1.20 is the first version to support freebsd/riscv64.</p>"},{"location":"FromXToGo/","title":"FromXToGo","text":"<p>This page links to blog posts, videos, and slide decks discussing moving a code base to Go from some other language.</p>"},{"location":"FromXToGo/#python","title":"Python","text":"<ul> <li>Disqus: Trying out this Go thing</li> <li>Rackspace: Making OpenStack-Powered Rackspace Cloud Files Buzz With Hummingbird</li> <li>Repustate: From Python to Go: migrating our entire API</li> <li>Spacemonkey: Python to Go</li> <li>Why I went from Python to Go (and not node.js)</li> <li>How to Convince Your Company to Go With Golang</li> <li>5 Reasons Why We switched from Python To Go</li> <li>Stream: Why we switched from Python to Go</li> <li>Code Migration in Production: Rewriting the Sharding Layer of Uber\u2019s Schemaless Datastore</li> <li>Learning Go by porting a medium-sized web backend from Python</li> </ul>"},{"location":"FromXToGo/#node","title":"Node","text":"<ul> <li>Digg</li> <li>Uber (audio)</li> <li>Apex/TJ Holowaychuk</li> <li>ScaleDrone migrated all websocket servers from Node.js to Go</li> <li>From Node.js To Go, Why One Startup Made The Switch</li> <li>Why did Koding switch from Node.js to Go?</li> <li>Letting Go of Node.js</li> <li>Our Experience with Golang</li> <li>Interview with Steve Kaliski, CTO of Bowery - The tech stack that powers Bowery, Moving from Node.js to Go lang and more</li> </ul>"},{"location":"FromXToGo/#typescript","title":"TypeScript","text":"<ul> <li>A 10x Faster TypeScript</li> </ul>"},{"location":"FromXToGo/#c","title":"C++","text":"<ul> <li>dl.google.com by Brad Fitzpatrick</li> <li>Flywheel: Google's mobile image compression proxy</li> <li>Fulfilling a Pikedream: the ups of downs of porting 50k lines of C++ to Go</li> </ul>"},{"location":"FromXToGo/#ruby","title":"Ruby","text":"<ul> <li>Book: From Ruby to Golang</li> <li>Toggl: Moving to Go</li> <li>Iron.io: How We Went from 30 Servers to 2: Go</li> <li>Parse: How We Moved Our API From Ruby to Go and Saved Our Sanity</li> <li>Timehop: Why Timehop Chose Go to Replace Our Rails App</li> <li>Scout App: FROM RUBY TO GO: A REWRITE FOR THE FUTURE</li> <li>Steven Yue: From Ruby's Grape to Martini in Go for Building Web API Server</li> <li>Soundcloud: Go at Soundcloud</li> <li>My impressions of Go</li> <li>Our Experience with Golang</li> <li>Rewriting our web analytics tracking infrastructure in Go</li> </ul>"},{"location":"FromXToGo/#java","title":"Java","text":"<ul> <li>From Java to Go</li> <li>Why one developer switched from Java to Google Go</li> </ul>"},{"location":"FromXToGo/#common-lisp","title":"Common Lisp","text":"<ul> <li>A comparison of three programming languages for a full-fledged next-generation sequencing tool</li> <li>Comparing Ease of Programming in C++, Go, and Java for Implementing a Next-Generation Sequencing Tool</li> </ul>"},{"location":"FromXToGo/#net","title":".NET","text":"<ul> <li>Why I Left the .NET Framework</li> </ul>"},{"location":"FromXToGo/#scala","title":"Scala","text":"<ul> <li>CrowdStrike: Moving a Team from Scala to Go</li> <li>Making the move from Scala to Go, and why we\u2019re not going back</li> </ul>"},{"location":"FromXToGo/#php","title":"PHP","text":"<ul> <li>Switching from PHP to Go (read comments section)</li> <li>A Journey into Microservices</li> <li>ARDUINO WEB ARCHITECTURE, BACK TO THE FUTURE</li> <li>Marco switched to GoLang from PHP and Saved Money, why not you ?!</li> <li>Moving from PHP (Laravel) to Go</li> <li>When All You Have is an ElePHPant (Slides from ConFoo 2016)</li> </ul>"},{"location":"FromXToGo/#perl","title":"Perl","text":"<ul> <li>How We Migrate From Perl to Golang</li> </ul>"},{"location":"FromXToGo/#haskell","title":"Haskell","text":"<ul> <li>Golang\u2019s Real-time GC in Theory and Practice</li> </ul>"},{"location":"FromXToGo/#clojure","title":"Clojure","text":"<ul> <li>Rewriting an API Gateway Service from Clojure to Golang: AppsFlyer Experience Report</li> </ul>"},{"location":"Frozen/","title":"Frozen","text":"<p>Sometimes a package reaches the end of its development cycle and is considered complete. It continues to be maintained, meaning regressions or breakages are fixed, but the scope becomes frozen and no new features are meant to be accepted.</p> <p>Freezing a package is a message primarily for developers and contributors to the package, not users. It does not imply that the package should not be used. For that, see the \"Deprecated\" convention.</p> <p>To signal that a package is frozen and is not accepting new features, add a paragraph to its doc comment stating that, and a recommendation on where to look for and where to contribute new features, if applicable.</p>"},{"location":"Frozen/#examples","title":"Examples","text":"<pre><code>// The syslog package is frozen and is not accepting new features.\n// Some external packages provide more functionality. See:\n//\n// \thttps://pkg.go.dev/search?q=syslog\n</code></pre> <pre><code>// The smtp package is frozen and is not accepting new features.\n// Some external packages provide more functionality. See:\n//\n//  https://pkg.go.dev/search?q=smtp\n</code></pre> <pre><code>// The net/rpc package is frozen and is not accepting new features.\n</code></pre> <pre><code>// The testing/quick package is frozen and is not accepting new features.\n</code></pre> <pre><code>// The text/tabwriter package is frozen and is not accepting new features.\n</code></pre>"},{"location":"Fuzzing-trophy-case/","title":"Fuzzing trophy case","text":"<p>This page collects issues that have been discovered using Go's native fuzzing.</p>"},{"location":"Fuzzing-trophy-case/#contributing","title":"Contributing","text":"<p>If native fuzzing uncovered a bug in your project, please consider adding it to this list by editing this Wiki page directly, or by reaching out to katie@golang.org with the bug you'd like to share.</p> <p>Note: If you think the bug is a security issue, please report it responsibly to the respective team, and do not include it in this list until public disclosure.</p>"},{"location":"Fuzzing-trophy-case/#trophies","title":"Trophies","text":""},{"location":"Fuzzing-trophy-case/#standard-library","title":"Standard Library","text":"<ul> <li>go/scanner: inconsistent handling of NUL bytes in 1.17</li> <li>time: ParseDuration can panic on invalid input</li> </ul>"},{"location":"Fuzzing-trophy-case/#other-projects","title":"Other projects","text":"<ul> <li>go-yaml/yaml/v3: yaml.Unmarshal() crashes on \"#n - - QIxd7\"</li> <li>josephburnett/jd: crashes when validating JSON Patch test/replace operation</li> <li>josephburnett/jd: JSON Patch to void failing round-trip</li> <li>kokes/smda: nil pointer error</li> <li>kokes/smda: out of bounds error</li> <li>mvdan.cc/sh: syntax.Quote failed to quote the empty string</li> <li>mvdan.cc/sh: syntax.Quote misused <code>\\x</code> escape sequences in mksh</li> <li>mvdan.cc/sh: syntax.Quote can't quote the <code>0xFFFE</code> and <code>0xFFFF</code> runes in mksh</li> <li>pelletier/go-toml: index out of range error in expect function</li> <li>swaggest/form: panic on invalid keys in request</li> <li>yuin/goldmark: corner case errors</li> <li>DataDog/datadog-agent: fix edge case in tags normalization</li> </ul>"},{"location":"GOPATH/","title":"GOPATH","text":""},{"location":"GOPATH/#gopath-variable","title":"GOPATH variable","text":"<p>Go development using dependencies beyond the standard library is done using Go modules. When using Go modules, the GOPATH variable (which defaults to <code>$HOME/go</code> on Unix and <code>%USERPROFILE%\\go</code> on Windows) is used for the following purposes:</p> <ul> <li>The <code>go install</code> command installs binaries to <code>$GOBIN</code>, which defaults to <code>$GOPATH/bin</code>.</li> <li>The <code>go get</code> command caches downloaded modules in <code>$GOMODCACHE</code>, which defaults to <code>$GOPATH/pkg/mod</code>.</li> <li>The <code>go get</code> command caches downloaded checksum database state in <code>$GOPATH/pkg/sumdb</code>.</li> </ul> <p>See the go command documentation for full details about the GOPATH variable. The rest of this page concerns the GOPATH development mode, which is now deprecated.</p>"},{"location":"GOPATH/#gopath-development-mode","title":"GOPATH development mode","text":"<p>Before Go modules, Go development using dependencies used \u201cGOPATH development mode,\u201d or \u201cGOPATH mode\u201d for short. In GOPATH mode, the <code>go</code> command used the GOPATH variable for the following purposes:</p> <ul> <li>The <code>go install</code> command installed binaries to <code>$GOBIN</code>, which defaults to <code>$GOPATH/bin</code>.</li> <li>The <code>go install</code> command installed the compiled package file for <code>import \"example.com/y/z\"</code> to <code>$GOPATH/pkg/example.com/y/z.a</code>.</li> <li>The <code>go get</code> command downloaded source code satisfying <code>import \"example.com/y/z\"</code> to <code>$GOPATH/src/example.com/y/z</code>.</li> </ul>"},{"location":"GOPATH/#deprecating-and-removing-gopath-development-mode","title":"Deprecating and removing GOPATH development mode","text":"<p>Go modules are the replacement for GOPATH development mode to add the concept of a package version throughout the Go ecosystem.</p> <p>The transition from GOPATH development mode to Go modules has been gradual, spread across many Go releases:</p> <ul> <li> <p>Go 1.11 (August 2018) introduced the <code>GO111MODULE</code> variable, which defaulted to <code>auto</code>.   With <code>GO111MODULE=off</code>, the <code>go</code> command used GOPATH mode always.   With <code>GO111MODULE=on</code>, the <code>go</code> command used module mode always.   With <code>GO111MODULE=auto</code> (or leaving <code>GO111MODULE</code> unset), the <code>go</code> command decided the mode based on the current directory. If the current directory was outside <code>$GOPATH/src</code> and was within a source tree with a <code>go.mod</code> file in its root, then the <code>go</code> command used Go module mode. Otherwise the <code>go</code> command used GOPATH mode. This rule ensured that all commands run in <code>$GOPATH/src</code> were unaffected in <code>auto</code> mode but let users experiment with modules in other directories.</p> </li> <li> <p>Go 1.13 (August 2019) adjusted <code>GO111MODULE=auto</code> mode to remove the <code>$GOPATH/src</code> restriction: if a directory inside <code>$GOPATH/src</code> has a <code>go.mod</code> file, commands run in or below that directory now use module mode. This allows users to continue to organize their checked-out code in an import-based hierarchy but use modules for individual checkouts.</p> </li> <li> <p>Go 1.16 (February 2021) will change the default to <code>GO111MODULE=on</code>, using module mode always. That is, GOPATH mode will be disabled entirely by default. Users who need one to use GOPATH mode for one more release can set <code>GO111MODULE=auto</code> or <code>GO111MODULE=off</code> explicitly.</p> </li> <li> <p>Go 1.NN (???) will remove the <code>GO111MODULE</code> setting and GOPATH mode entirely, using module mode always.</p> </li> </ul> <p>Note that removing GOPATH development mode does not mean removing the GOPATH variable. It will still be used for the purposes listed at the top of this page.</p>"},{"location":"GOPATH/#faq","title":"FAQ","text":""},{"location":"GOPATH/#is-the-gopath-variable-being-removed","title":"Is the GOPATH variable being removed?","text":"<p>No. The GOPATH variable (set in the environment or by <code>go env -w</code>) is not being removed. It will still be used to determine the default binary install location, module cache location, and checksum database cache location, as mentioned at the top of this page.</p>"},{"location":"GOPATH/#can-i-still-write-code-in-gopathsrcimportpath","title":"Can I still write code in GOPATH/src/import/path?","text":"<p>Yes. Many Go developers appreciate the structure that this convention provides and check out their module repositories into it. All your code needs to get started with modules is a <code>go.mod</code> file. See <code>go mod init</code>.</p>"},{"location":"GOPATH/#how-can-i-compile-one-repo-in-gopathsrc-against-changes-made-in-another","title":"How can I compile one repo in GOPATH/src against changes made in another?","text":"<p>If you want to use unpublished changes in one module when building another, you can add a <code>replace</code> line to the other module\u2019s <code>go.mod</code>.</p> <p>For example, if you have checked out <code>golang.org/x/website</code> and <code>golang.org/x/tools</code> to <code>$GOPATH/src/golang.org/x/website</code> and <code>$GOPATH/src/golang.org/x/tools</code>, then to make your local builds of <code>website</code> automatically use changes in <code>tools</code>, you would add this to <code>$GOPATH/src/golang.org/x/website/go.mod</code>:</p> <pre><code>replace golang.org/x/tools =&gt; ../tools\n</code></pre> <p>Of course, <code>replace</code> directives know nothing about <code>$GOPATH</code>. The same line would work fine if you had checked the two out into <code>$HOME/mycode/website</code> and <code>$HOME/mycode/tools</code>.</p>"},{"location":"GOPATH/#why-is-gopath-development-mode-being-removed","title":"Why is GOPATH development mode being removed?","text":"<p>At its core, GOPATH development mode essentially supplies all those kinds of <code>replace</code> lines automatically, so that the code you build for dependencies is the code you happen to have checked out on your computer. That means your build is affected by old checkouts you happen to have lying around that you might have forgotten about. It means that the build you get on one machine can be different from another, even starting with the same version of the same top-level repo. And it means that the builds you get can be different from the ones another developer in the same project gets. Go modules address all these reproducibility concerns. The root cause of all these problems is that GOPATH mode does not have any concept of a package version.</p> <p>In addition to reproducibility, Go modules provide a clear way to handle proxying and secure downloads. When you <code>git clone</code> a project and then grab its dependencies, those dependencies are being cryptographically checked (using the <code>go.sum</code> file) to make sure they're the same bits the original developer used. The only trusted part is the top-level <code>git clone</code>. Here again, this is only possible because Go modules, in contrast to GOPATH mode, have a concept of a package version.</p> <p>And for future evolution of Go itself, modules clearly mark which version of the Go language a particular tree of files is written in. This makes it possible to disable problematic features\u2014for example, <code>string(1)</code>, which many people think produces <code>\"1\"</code> but actually produces <code>\"\\x01\"</code> (Ctrl-A)\u2014in later versions of Go while keeping older programs building (because they are explicitly marked as having been written for the older version of Go).</p> <p>There are more examples like these.</p> <p>None of this is possible with GOPATH development mode as it exists today. We can't move the ecosystem forward and start really depending on these important properties of Go modules without retiring GOPATH mode.</p> <p>(You might also ask: why not just add those things to GOPATH mode? The answer is: we did, and the result is Go modules.)</p>"},{"location":"GOPATH/#when-was-it-decided-to-deprecate-gopath-development-mode","title":"When was it decided to deprecate GOPATH development mode?","text":"<p>The original plan was to deprecate GOPATH mode in Go 1.13, but we wanted to take extra time to make modules even more robust for as many Go users as possible, so the deprecation was pushed back from that release. Discussion on issue #41330 and in the golang-tools group did not identify any remaining blockers for deprecating GOPATH, so it is now scheduled for Go 1.16, with removal in a future release, as stated in the timeline above.</p>"},{"location":"GOPATH/#what-if-i-have-more-questions-about-moving-from-gopath-development-mode-to-go-modules","title":"What if I have more questions about moving from GOPATH development mode to Go modules?","text":"<p>See golang.org/help for a list of resources. If none of those are appropriate, feel free to file an issue here. We want everyone to be successful adopting Go modules.</p>"},{"location":"Gardening/","title":"Gardening","text":""},{"location":"Gardening/#what-is-gardening","title":"What is gardening?","text":"<p>\"Gardening\" in open source projects refers to the background maintenance tasks done to keep the project healthy &amp; growing &amp; nice looking.</p> <p>This page lists common Go gardening tasks.</p>"},{"location":"Gardening/#access","title":"Access","text":"<p>If you've been regularly active in the Go community for some time, feel free to ask for Gerrit and/or GitHub access to modify things.</p> <p>See GerritAccess and GitHubAccess.</p>"},{"location":"Gardening/#gardening-tasks","title":"Gardening Tasks","text":"<p>Before doing any gardening work, especially on the issue tracker, remember to familiarize yourself with the issues life-cycle, described here: Handling Issues - Issue States.</p>"},{"location":"Gardening/#fix-red","title":"Fix red","text":"<p>Look at https://build.golang.org/ \u2014 is anything red? Fix or file bugs or nag people. The build dashboard should never be red, even occasionally. If the tree is red, people can't work effectively because TryBots and such will just report failures, masking other problems.</p>"},{"location":"Gardening/#triage-new-bugs","title":"Triage new bugs","text":"<p>Look at the untriaged issues. For Go, we use the presence of certain labels (<code>Needs*</code> or <code>WaitingForInfo</code>) to indicate that an issue has been triaged. Issues labeled <code>Go2</code>, <code>Proposal</code>, <code>Telemetry-Proposal</code>, <code>CherryPickCandidate</code>, <code>gopls</code>, <code>pkgsite</code> have their own, separate triage queues and can be skipped.</p> <p>While triaging the bug:</p> <ul> <li>is it a duplicate? Close it, referencing the dup.</li> <li>is it a Question rather than a bug? Reply with something like \"For questions about Go, see https://go.dev/wiki/Questions\".</li> <li>is the subject the correct format? It should start with the package path and a colon: \"net/http: fix crash in Server during foo operation\".</li> <li>is it in a subrepo? Leave the milestone as <code>Unreleased</code> unless it's a subrepo that goes into a release, like <code>http2</code>.</li> <li>if it is a regression and you can reproduce it, use <code>git bisect</code> to find the bad commit (optional but very helpful).</li> <li>does the relevant package have a primary owner? Mention them in a comment. If not, add the <code>help wanted</code> label.</li> <li>if the relevant package has no owner, but appears to be complex and deeply technical in nature, add the <code>ExpertNeeded</code> label.</li> </ul> <p>When the issue has been triaged, add an appropriate label (per HandlingIssues) to mark it as such.</p>"},{"location":"Gardening/#waitingforinfo","title":"WaitingForInfo","text":"<p>Find bugs that are in state WaitingForInfo (https://github.com/golang/go/labels/WaitingForInfo) and ping them, remove the label when replies arrive, or close the bugs if a reply never arrived.</p>"},{"location":"Gardening/#unplanned-bugs","title":"\"Unplanned\" bugs","text":"<p>\"Unplanned\" issues have a habit of being neglected. Check out old ones and see if they're easily fixable (and can be moved to a Go1.n or Go 1.nMaybe milestone), or should be closed.</p>"},{"location":"Gardening/#pending-cls","title":"Pending CLs","text":"<p>Review the format of commit messages and presence of tests and formatting of code and typos/grammar in incoming pending CLs. All of that can be done without determining the correctness of the change itself. See  https://dev.golang.org/release for the list of pending CLs.</p> <p>Once it has a +1, the owner of that area can give it a +2.</p> <p>Read a +1 as meaning \"triaged\", or \"not obviously wrong\". If it has tests, is formatted properly (references a bug number, probably), and is ready for more review, give it a +1.</p>"},{"location":"Gardening/#pending-cls-ask-about-tests","title":"Pending CLs: ask about tests","text":"<p>If a new CL arrives without a test, but could/should have a test, ask if they could add a test. Or suggest how.</p>"},{"location":"Gardening/#pending-cls-run-trybots","title":"Pending CLs: run TryBots","text":"<p>If you have access (see GerritAccess) to run the TryBots and you see a CL with plausible (and non-malicious) code, kick off the TryBots. (We've never seen malicious code trying to escape our TryBot sandboxes, but that's why it's not automatic yet. Please alert us if you see something.)</p>"},{"location":"GcToolchainTricks/","title":"GcToolchainTricks","text":"<p>This page documents some less well-known (perhaps advanced) tricks for the <code>gc</code> toolchain (and the Go tool).</p>"},{"location":"GcToolchainTricks/#c-code-without-cgo","title":"C code without <code>cgo</code>","text":""},{"location":"GcToolchainTricks/#use-syso-file-to-embed-arbitrary-self-contained-c-code","title":"Use <code>syso</code> file to embed arbitrary self-contained C code","text":"<p>Basically, you write your assembly language in GNU as(1) format, but make sure all the interface functions are using Go's ABI (everything on stack, etc., please read Go 1.2 Assembler Introduction for more details).</p> <p>The most important step is compiling that file to file.syso (<code>gcc -c -O3 -o file.syso file.S</code>), and put the resulting syso in the package source directory. And then, suppose your assembly function is named Func, you need one stub cmd/asm assembly file to call it: <pre><code>TEXT \u00b7Func(SB),$0-8 // please set the correct parameter size (8) here\n\tJMP Func(SB)\n</code></pre> then you just declare Func in your package and use it, go build will be able to pick up the syso and link it into the package.</p> <p>Notes:   * The binary produced won't use cgo, and the overhead is just an unconditional JMP that could be perfectly branch predicted. But, please be aware that because it doesn't use cgo, your assembly function is running on Go stack, and it shouldn't use too much stack (a safe value is less than ~100 bytes) or terrible things will happen. For compute kernels, this requirement isn't too restricting.   * Please make sure you\u2018ve included all library dependencies in your C code. <code>libc</code> is not available, and most notably, <code>libgcc</code> is also not available (esp. when you're using gcc <code>__builtin_funcs</code>, please use <code>nm(1)</code> to double-check that your file doesn't contain any undefined symbols).   * It's also possible to call back Go functions from C code, but this is left as an exercise for the reader.   * this trick is supported on all Go 1.x releases.   * the Go linker is pretty capable in that you just need to prepare .syso file for each architecture, not for each OS/Arch combination (assuming you don't use OS-specific constructs, obviously), and the Go linker is perfectly capable to link, for example, Mach-O object files into ELF binaries. So be sure to name your syso file with names like <code>file_amd64.syso</code>, <code>file_386.syso</code>.</p>"},{"location":"GcToolchainTricks/#bundle-data-into-go-binary","title":"Bundle data into Go binary","text":"<p>There are a lot of ways to bundle data in Go binary, for example:   * <code>zip</code> the data files, and append the zip file to end of Go binary, then use <code>zip -A prog</code> to adjust the bundled zip header. You can use <code>archive/zip</code> to open the program as a zip file, and access its contents easily. There are existing packages that helps with this, for example, https://pkg.go.dev/bitbucket.org/tebeka/nrsc; This requires post-processing the program binary, which is not suitable for non-main packages that require static data. Also, you must collect all data files into one zip file, which means that it's impossible to use multiple packages that utilize this method.   * Embed the binary file as a <code>string</code> or <code>[]byte</code> in Go program. This method is not recommended, not only because the generated Go source file is much larger than the binary files themselves, also because static large <code>[]byte</code> slows down the compilation of the package and the <code>gc</code> compiler uses a lot of memory to compile it (this is a known bug of <code>gc</code>). For example, see the tools/godoc/static package.   * use similar <code>syso</code> technique to bundle the data. Precompile the data file as syso file using GNU <code>as(1)</code>'s <code>.incbin</code> pseudo-instruction.</p> <p>The key trick for the 3<sup>rd</sup> alternative is that the linker for the <code>gc</code> toolchain has the ability to link COFF object files of a different architecture into the binary without problem, so you don't need to provide syso files for all supported architectures. As long as the syso file doesn't contain instructions, you can just use one to embed the data.</p> <p>The assembly template to generate the COFF .syso file: <pre><code>/* data.S, as -o data.syso */\n.section .rdata,\"dr\" /* put in COFF section .rdata */\n.globl _bindataA /* no longer need to prepend package name here */\n.globl _ebindataA\n_bindataA:\n.incbin \"dataA\"\n_ebindataA:\n\n.globl _bindataB /* no longer need to prepend package name here */\n.globl _ebindataB\n_bindataB:\n.incbin \"dataB\"\n_ebindataB:\n</code></pre></p> <p>And two other files, first a Plan 9 C source file that assembles the slice for Go: <pre><code>/* slice.c */\n#include \"runtime.h\"\nextern byte _bindataA[], _bindataB[], _ebindataA, _ebindataB;\n\nvoid \u00b7getDataSlices(Slice a, Slice b) {\n  a.array = _bindataA;\n  a.len = a.cap = &amp;_ebindataA - _bindataA;\n  b.array = _bindataB;\n  b.len = b.cap = &amp;_ebindataB - _bindataB;\n  FLUSH(&amp;a);\n  FLUSH(&amp;b);\n}\n</code></pre></p> <p>And finally, the Go file that uses the embedded slide: <pre><code>/* data.go */\npackage bindata\n\nfunc getDataSlices() ([]byte, []byte) // defined in slice.c\n\nvar A, B = getDataSlices()\n</code></pre></p> <p>Note: you will need an <code>as(1)</code> capable of generating the COFF syso file, you can build one easily on Unix: <pre><code>wget http://ftp.gnu.org/gnu/binutils/binutils-2.22.tar.bz2   # any newer version also works\ntar xf binutils-2.22.tar.bz2\ncd binutils-2.22\nmkdir build; cd build\n../configure --target=i386-foo-pe --enable-ld=no --enable-gold=no\nmake\n# use gas/as-new to assemble your data.S\n# all the other file could be discarded.\n</code></pre></p> <p>Drawback of this issue is that it seems incompatible to cgo, so only use it when you don't use cgo, at least for now. I (minux) is working on figuring out why they're incompatible.</p>"},{"location":"GcToolchainTricks/#including-build-information-in-the-executable","title":"Including build information in the executable","text":"<p>The gc toolchain linker, cmd/link, provides a <code>-X</code> option that may be used to record arbitrary information in a Go string variable at link time. The format is <code>-X importpath.name=val</code>.  Here <code>importpath</code> is the name used in an import statement for the package (or <code>main</code> for the main package), <code>name</code> is the name of the string variable defined in the package, and <code>val</code> is the string you want to set that variable to. When using the go tool, use its <code>-ldflags</code> option to pass the <code>-X</code> option to the linker.</p> <p>Let's suppose this file is part of the package <code>company/buildinfo</code>:</p> <pre><code>package buildinfo\n\nvar BuildTime string\n</code></pre> <p>You can build the program using this package using <code>go build -ldflags=\"-X 'company/buildinfo.BuildTime=$(date)'\"</code> to record the build time in the string.  (The use of <code>$(date)</code> assumes you are using a Unix-style shell.)</p> <p>The string variable must exist, it must be a variable, not a constant, and its value must not be initialized by a function call.  There is no warning for using the wrong name in the <code>-X</code> option.  You can often find the name to use by running <code>go tool nm</code> on the program, but that will fail if the package name has any non-ASCII characters, or a <code>\"</code> or <code>%</code> character.</p>"},{"location":"GccgoCrossCompilation/","title":"GccgoCrossCompilation","text":""},{"location":"GccgoCrossCompilation/#introduction","title":"Introduction","text":"<p>If you want to run your Go programs on a platform that is not supported by the standard Go compiler gc you can build a version of the GCC compiler that targets your desired target platform, since GCC supports many more platforms. This is possible because there is a Go frontend to GCC named gccgo.</p>"},{"location":"GccgoCrossCompilation/#details","title":"Details","text":""},{"location":"GccgoCrossCompilation/#definitions","title":"Definitions","text":"<ul> <li>Build This is the computer where you are building the cross-compiler.</li> <li>Host The computer that will run the cross-compiler once it's built. This is usually the same as Build.</li> <li>Target This is the destination system, where you want the cross-compiled program to run.</li> </ul> <p>More definitions and complex cross situations can be found at the Wikipedia article.</p>"},{"location":"GccgoCrossCompilation/#go-tools-and-gccgo","title":"Go tools and gccgo","text":"<p>You will later need to source code to the Go tool, so you might as well uninstall the version you have installed from your package manager to avoid confusion  (fully optional tho). Also build &amp; install gccgo targeting host(!, that's right, you need a gcco compiling for not only target but one for host).</p> <ul> <li>Installing Go from source</li> <li>Official Go documentation</li> </ul>"},{"location":"GccgoCrossCompilation/#build-the-cross-compiler","title":"Build the cross-compiler","text":""},{"location":"GccgoCrossCompilation/#build","title":"Build","text":"<p>First you have to build your cross-compiling version of GCC. This is complex process as it requires several stages with bootstrapping since there are mutual dependency relations between GCC and libc implementations. A very fine tutorial on how to build a GCC cross-toolchain with eglic (works with glibc too) was written by Jim Blandy and posted at eglibc's mailinglist patches Cross-building instructions. In the final stage where the full GCC is built, simply configure script with \u2013enable-languages=c,c++,go (see official Go documentation).</p> <p>You can use the ewxb_gcc_cross-compiler_builder script as a starting point. Don't expect that script to work out of the box, but rather as a hint to which steps you're likely to take when building your x-toolchain.</p> <p>If you're lucky enough and want a version of GCC that is not bleeding edge (which you might want to have the latest Go features) you can use a cross-compiler builder to ease the configuration e.g. crosstool-NG that lets you configure GCC with a simple TUI menu.</p> <p>Newer versions of crosstool-NG can build the go language by enabling <code>CT_EXPERIMENTAL</code> and <code>CT_CC_SUPPORT_GOLANG</code>. This will automatically add <code>go</code> to <code>--enable-languages</code>.</p>"},{"location":"GccgoCrossCompilation/#symlink","title":"Symlink","text":"<p>You should now have a bin directory with files with names like \"<code>&lt;target</code>&gt;-gcc\", \"<code>&lt;target</code>&gt;-gnu-gccgo\" etc. Because the go build tool does not allow you to specify file-names of the compilers to use (only statically supports the strings 'gc' and 'gccgo') it will look in your $PATH envvar for the first file named 'gccgo' and 'gcc'. You will therefore have to add this directory as an overlay by setting it to be the first one in $PATH when you want to use the cross-compiler and not your normal gcc binary on your system. Since the go tool looks for a binary named gccgo you'll have to make some symlinks for the tools you want it to find.</p> <pre><code>\t$ cd path/to/cross-comp-gcc/bin\n\t$ ln -s &lt;arch&gt;-&lt;os&gt;-gnu-gcc gcc\t\n\t$ ln -s &lt;arch&gt;-&lt;os&gt;-gnu-gccgo gccgo\n\t$ ln -s &lt;arch&gt;-&lt;os&gt;-gnu-ar ar\n\t$ export PATH=\"path/to/crosscomp-gcc/bin:$PATH\" # Do this whenever you want to use the cross-compilers targeting your target instead of the system default targeting host.\n</code></pre> <p>etc.</p> <p>With $TARGET set to the target architecture and $PREFIX set to the destination path of the built files, you can make the symlinks with:</p> <pre><code>##!/usr/bin/env bash \t\t\n\ncd $PREFIX/bin\nfor file in $(find . -type f); do \t\t\n\ttool_name=$(echo $file | sed -e \"s/${TARGET}-\\(.*\\)$/\\1/\") \t\t\n\tln -sf \"$file\" \"$tool_name\" \t\t\ndone\n</code></pre>"},{"location":"GccgoCrossCompilation/#test","title":"Test","text":"<p>When the cross-compiler is build you should test that it works, both for a simple C program and a simple Go program.</p> <pre><code>\t$ gccgo -Wall -o helloworld helloworld.go\n\t$ file helloworld # verify that the architecture of the binary is the desired target and not a binary that can run on your host machine.\n\t$ &lt;upload-command-to-target&gt; helloworld\n\t$ &lt;ssh/telnet etc. to target and test run&gt;\n</code></pre>"},{"location":"GccgoCrossCompilation/#gotchas","title":"Gotchas","text":"<p>If you haven't compiled a shared object of the go library, libgo, for your target you might want to compile your Go programs statically, just like gc does, to include all what is needed to run your program. Do this by adding the -static switch to gccgo. If you're unsure how your produced ELF file is linked, inspect it with readelf -d <code>&lt;elf&gt;</code> or objdump -T <code>&lt;elf&gt;</code>.</p>"},{"location":"GccgoCrossCompilation/#build-a-cross-gccgo-aware-version-of-the-go-tool","title":"Build a cross-gccgo aware version of the Go tool","text":""},{"location":"GccgoCrossCompilation/#assumptions","title":"Assumptions","text":"<ul> <li>Assuming that you've followed the instructions on Installing Go from source you should have a checked out version of the go source at $GOROOT.</li> <li>Envvar $GOROOT is set.</li> <li>The envvars \\(GOARCH_ and _\\)GOOS represent the target architecture and operating system. Figure these out and set them to these values when you want to cross-compile.</li> </ul>"},{"location":"GccgoCrossCompilation/#build_1","title":"Build","text":"<p>You can specify the compiler to use when building with the go tool with go build -compiler gccgo <code>&lt;go-package,files&gt;</code>. This is however not enough. If you have set \\(GOARCH_ and _\\)GOOS to something that is not supported by gc but with gccgo you have to build a special version of the go tool that understands these extra architectures. If you compile another version of the go tool with the go tool but specify to use gccgo targeting your host, the resulting go tool will be able to compile programs with all the architectures supported by gccgo.</p> <p><pre><code>\t$ cd ~/tmp\n\t$ hg clone ~/src/go # [0]\n\t$ cd go/src/cmd/go\n\t$ go build -o xgo -compiler gccgo . # [1] [2] [3]\n\t$ cp xgo ~/bin/ # Or any directory that is in your $PATH\n</code></pre>   * <code>[0</code>] Clone Go source to directory outside \\(GOROOT. Needed since the cmd/go we're about to compile is handles specially.   * <code>[1</code>] Here the _gccgo_ that targets **host** must be used, and not the cross-compiling gccgo. Make sure to have you _\\)PATH_ set correctly for this.   * <code>[2</code>] Will produce binary named xgo to distinguish from the existing go-binary. Name it to something suitable, e.g. mgo if your target is MIPS.   * <code>[3</code>] The compilation step (go build) can fail with some compilation errors since gccgo is lagging behind the go project (at least at go mercurial tip 7f2863716967). Fix those errors by commenting out or something more clever and re-compile.</p>"},{"location":"GccgoCrossCompilation/#cross-compile-go-programs","title":"Cross-compile Go programs.","text":"<p>With your \\(PATH_ set to find _xgo\\_and the cross-compiling version of_gccgo and _\\)GOARCH set properly you can now cross-compile using the go tool (named xgo).</p> <pre><code>\t$ export PATH=\"path/to/xgo/:path/to/crosscomp-gccgo/:$PATH\"\n\t$ export GOARCH=\"&lt;you-target's-arch&gt;\"\n\t$ export GOOS=\"&lt;you-target's-OS&gt;\"\n\t$ xgo build -compiler gccgo &lt;go-package/files&gt;\n</code></pre>"},{"location":"GccgoCrossCompilation/#todo","title":"TODO","text":"<p>Go-programs importing \"C\" does not seems to work using xgo. Currently blocked by Go issue#7398</p> <p>This Wiki page was inspired by the lessons learned from \"[golang-nuts] Simplification of MIPS cross-compilation?\" @ https://groups.google.com/forum/#!topic/golang-nuts/PgyS2yoO2jM</p>"},{"location":"GerritAccess/","title":"Gerrit Access","text":"<p>There are two types of Gerrit access described here, with different powers &amp; responsibilities. Only ask for access if you're an active member of the community. New contributors should participate in the Gerrit code review process for some time before requesting access.</p> <p>(For GitHub access, see GitHubAccess)</p>"},{"location":"GerritAccess/#running-trybots-may-start-trybots","title":"Running TryBots (\"may-start-trybots\")","text":"<p>TryBot access lets you kick off a test run of a CL in Gerrit prior to submission (pre-submit testing). TryBots run in a somewhat-secure and somewhat-isolated environment, but they're not perfectly security hardened. You must skim the CL for anything malicious before starting TryBots.</p> <p>See LUCI for details on triggering TryBots.</p> <p>All approvers (see next section) have TryBot access automatically. Others can request TryBot access. See Requesting Access below.</p>"},{"location":"GerritAccess/#approving-cls-approvers","title":"Approving CLs (\"approvers\")","text":"<p>Approvers can review and submit code changes (CLs), subject to the review rules described below. Being an approver comes with an expectation of responsibility: approvers are people who care about Go and want to help it succeed. An approver is not just someone who can make changes, but someone who has demonstrated their ability to collaborate with the team, get the most knowledgeable people to review code, contribute high-quality code, and follow through to fix issues (in code or tests).</p>"},{"location":"GerritAccess/#code-review-requirements","title":"Code Review Requirements","text":"<p>Every CL requires both a code review (Code-Review+2) from an approver and the involvement of two Google employees using Google-secured computers, either as code uploader or as a reviewer voting at least Code-Review+1. Requiring multiple people ensures that code cannot be submitted unilaterally from a single compromised account. The Google employee and hardware requirements further raise the bar: since CLs in many repos are essentially published by Google for download by users at commit time, the Google involvement is to approve this publication. Once a review has a Code-Review+2 and the necessary Google involvement, it can be submitted, by any approver. All these rules are enforced by the Gerrit server.</p> <p>A Code-Review+2 vote means that you have read the change and are confident that it is correct and appropriate to submit. Typically, you should only Code-Review+2 code in directories or packages that you \"own\"; the exception is trivial and obviously correct changes. Note that all user-visible new features or changes\u2014new API, new command-line flags, and so on\u2014need to go through the proposal process. The CLs should reference the specific accepted proposal in the commit message (\u201cFor #NNN.\u201d).</p> <p>When adding a Code-Review+2 vote, it is encouraged to also add Commit-Queue+1 and Auto-Submit+1: see the auto-submit section below for details.</p> <p>A Code-Review+1 vote means that you have read the change and believe it seems reasonable but aren\u2019t making the definitive judgement that Code-Review+2 indicates. It also means you are confident the change does not introduce any sort of security vulnerability or other clearly inappropriate code change.</p> <p>When a change has the appropriate reviews to be submitted, a Submit button appears in Gerrit (for approvers). You should only submit changes with a Code-Review+2 from the owner of that area (maybe you!).</p> <p>Approvers can also vote Hold+1 on a CL to mark it as unsubmittable (until that vote is removed). A typical reason might be that we need to wait on the CL for a proposal review, or because the CL needs to be submitted at a certain time: voting Hold+1 ensures that it can still be reviewed, but it won't accidentally be submitted early.</p> <p>To request approver access, see Requesting Access below.</p>"},{"location":"GerritAccess/#auto-submit","title":"Auto-Submit","text":"<p>If you are reviewing a CL and believe it can be approved and submitted as is, with no further changes, you can use the auto-submit functionality to run tests and submit the CL if the tests pass. To do this, vote Code-Review+2 as well as Auto-Submit+1 and Commit-Queue+1. When the tests pass, Gopherbot will submit it.</p> <p>More precisely, Gopherbot watches for and automatically submits CLs that</p> <ul> <li>have an Auto-Submit+1 vote,</li> <li>have a satisfied TryBots-Pass submit requirement,</li> <li>have the necessary code reviews,</li> <li>have no unresolved comments,</li> <li>aren't marked #wait-release,</li> <li>and merge cleanly into the current branch head.</li> </ul> <p>All approvers can add Auto-Submit+1 votes. An Auto-Submit+1 vote is not carried forward when a patch is reuploaded.</p>"},{"location":"GerritAccess/#approving-wiki-cls-wiki-approvers","title":"Approving Wiki CLs (\"wiki-approvers\")","text":"<p>People who work mainly in the wiki (https://go.googlesource.com/wiki) can request wiki-approvers permission. This lets them +2 and submit wiki CLs, even their own CLs. Wiki CLs do not require the involvement of two (or any) Google employees, they have no TryBots, and they can be self-reviewed.</p>"},{"location":"GerritAccess/#requesting-access","title":"Requesting Access","text":"<p>To request any of the access types above, file a new issue (https://go.dev/issue/new?title=access:+&amp;body=See+https://go.dev/wiki/GerritAccess.) and state which access you want, and state the Google account you use to log in to Gerrit.</p> <p>Decisions about granting access are made by the Go release team at Google. If your request is declined, it is almost always because you haven't been active enough for them to get a clear enough signal about your work, understanding of project conventions, and so on. Don't lose heart: it can take time to reach that level of familiarity.</p>"},{"location":"GerritAccess/#once-you-have-access","title":"Once you have access","text":"<p>Go help garden! See Gardening.</p>"},{"location":"GerritBot/","title":"GerritBot","text":"<p>GerritBot is a tool used for importing GitHub Pull Requests (PRs) into Gerrit for code review. It was created because the Go team does all its reviews in Gerrit, but we'd like to allow a more common workflow for contributing code via GitHub PRs.</p>"},{"location":"GerritBot/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Workflow</li> <li>Frequently Asked Questions</li> <li>Feedback and Bug Reports</li> <li>I'd like to add a feature/fix a bug</li> </ul>"},{"location":"GerritBot/#workflow","title":"Workflow","text":"<ul> <li>A user can upload a GitHub PR against any of our GitHub repos just as they would with any other GitHub project that accepts PRs</li> <li>The PR changes will then be imported by GerritBot and a message will be posted to the GitHub PR containing a link to the Gerrit review</li> <li>All comments are handled within Gerrit. Any comments on the GitHub PR will be ignored</li> <li>The PR author can continue to upload commits to the branch used by the PR in order to address feedback from Gerrit</li> <li>Any changes to the commit message must be done by editing the title and description of the GitHub PR, and not via Gerrit or git. (See FAQ below for details).</li> <li>Draft PRs are imported as WIP</li> <li>Once the code is ready to be merged, a maintainer will submit the change on Gerrit and GerritBot will close the issue</li> <li>Similarly, if a change is closed or abandoned on Gerrit, the corresponding PR will be closed</li> </ul>"},{"location":"GerritBot/#frequently-asked-questions","title":"Frequently Asked Questions","text":""},{"location":"GerritBot/#i-need-a-google-account-to-sign-up-for-gerrit-why-cant-i-sign-in-using-my-github-account","title":"I need a Google account to sign up for Gerrit? Why can't I sign in using my GitHub account?","text":"<p>You need a Gmail or other Google account to register for Gerrit. This is a limitation of the infrastructure that runs our Gerrit instances and is out of our control, plus you already need a Google account to sign our CLA, a requirement for us to accept your contribution in the first place.</p>"},{"location":"GerritBot/#i-left-a-reply-to-a-comment-in-gerrit-but-no-one-but-me-can-see-it","title":"I left a reply to a comment in Gerrit but no one but me can see it","text":"<p>Replies to comments on code in Gerrit are first saved as drafts and need to be published via the \u201cReply\u201d button. This is to prevent multiple emails per review \u201csession\u201d and is similar to the pending review workflow in GitHub. If you see a number next to the \u201cReply\u201d text in the button, this means you have pending drafts to publish.</p> <p>If you do not see a large blue \u201cReply\u201d button near the top of the Gerrit web interface, make sure you are logged in to Gerrit, which requires a Gmail or other Google account.</p>"},{"location":"GerritBot/#how-does-gerritbot-determine-the-final-commit-message","title":"How does GerritBot determine the final commit message?","text":"<p>The key points to remember: * The GitHub PR title and PR description (the first PR comment) are periodically imported into Gerrit   in their plaintext form as the Gerrit commit message. * To update the Gerrit commit message, you must therefore edit the PR title and PR description   using the GitHub web interface. * You cannot update the Gerrit commit message just by pushing another commit to the PR with   an updated commit message. (Pushing another commit does not automatically update the GitHub PR title   or PR description, and hence the updated text won't be imported into Gerrit).</p> <p>Updating the Gerrit commit messsage via the GitHub PR:</p> <p></p> <p>In more detail, GerritBot uses the latest PR title and PR description from the GitHub PR to construct the commit message for the Gerrit change. This text is editable via the GitHub web interface (not Gerrit or git): * The PR title is editable via the \"Edit\" button in the top-right of the PR page.   This is used for the first line of the commit message in Gerrit. * The PR description is in the first text area under the \"Conversation\" tab of the GitHub PR.   It is editable via \"Edit\" option on the \"\u2026\" menu. This text is used for the remainder of the commit   message body in Gerrit.</p> <p>Once the PR is edited in GitHub, it can take 10 minutes or so before the Gerrit change is updated.</p> <p>Note: Gerrit imports the plain text that is viewable as you edit the message in GitHub, and it does not import the rendered text you see in GitHub prior to editing.</p> <p>One common area of related confusion is around issue references. For example, GerritBot or a human reviewer might ask you to avoid URLs for issue references. In Gerrit, you might see the full URL for an issue, but in the GitHub web interface, you might only see an issue reference like <code>#12345</code> and it might be unclear where the URL is coming from. This can be due to confusion between the rendered view in GitHub vs. the underlying raw/plain text. If the GitHub web interface shows something like <code>Fixes https://github.com/golang/go/issues/12345</code> while you are editing the text in GitHub, change it to something like <code>Fixes #12345</code> or <code>Fixes golang/go#12345</code> instead. See the Contribution Guide for more on issue references.</p>"},{"location":"GerritBot/#what-is-a-cl-what-is-a-gerrit-change","title":"What is a CL? What is a Gerrit change?","text":"<p>CL is short for \"change list\", which is essentially a patch proposed to be introduced into a repository. The Go project uses Gerrit to carefully review each CL. An example CL is https://go.dev/cl/508475.</p> <p>Gerrit change is another term for CL.</p>"},{"location":"GerritBot/#can-i-help-review-other-peoples-cls","title":"Can I help review other people's CLs?","text":"<p>Yes, this is highly encouraged, and a great way to familiarize yourself with Gerrit, the Go project's code review process, and the internals of the Go standard library, runtime, compiler, and so on.</p> <p>You can browse the currently open CLs here and subscribe for updates to interesting CLs by clicking the star icon.</p> <p>You don't need to be an expert in the code to help with initial review triage. See the section on helping to review CLs in the Gardening wiki page for more details.</p>"},{"location":"GerritBot/#i-heard-gerrit-requires-one-commit-per-change-can-i-upload-multiple-commits-to-my-pr","title":"I heard Gerrit requires one commit per change. Can I upload multiple commits to my PR?","text":"<p>You can upload as many commits as you like. GerritBot will handle squashing your commits into one change that Gerrit can handle.</p>"},{"location":"GerritBot/#why-is-gerritbot-the-owner-of-my-change","title":"Why is GerritBot the owner of my change?","text":"<p>This is due to an open bug with the way Gerrit handles acting as another user. Once that is fixed, the original author will also be the owner of the change.</p>"},{"location":"GerritBot/#can-i-ask-gerritbot-to-stop-posting-comments-on-my-pr","title":"Can I ask GerritBot to stop posting comments on my PR?","text":"<p>You can toggle comments from GerritBot by using the <code>comments</code> slash command (e.g., <code>/comments off</code>).</p>"},{"location":"GerritBot/#feedback-and-bug-reports","title":"Feedback and Bug Reports","text":"<p>Please file an issue and use the <code>x/build/cmd/gerritbot:</code> prefix in the title.</p>"},{"location":"GerritBot/#id-like-to-add-a-featurefix-a-bug","title":"I'd like to add a feature/fix a bug","text":"<ul> <li>If the feature/bug is non-trivial, please file an issue first</li> <li>The code is located at x/build/cmd/gerritbot   (GitHub,   Gerrit)</li> </ul>"},{"location":"GitHubAccess/","title":"GitHubAccess","text":"<p>There are two types of GitHub access described here, with different powers &amp; responsibilities. Only ask for access if you're an active member of the community. New contributors should participate in the GitHub &amp; Gerrit review process for some time before requesting access.</p> <p>(For Gerrit access, see GerritAccess)</p>"},{"location":"GitHubAccess/#assignees","title":"Assignees","text":"<p>The \"go-assignees\" group is a read-only group granting no special access, other than it allows the users in the group to be assigned issues.</p> <p>In general, Go doesn't use the \"Assigned to\" field of bugs much. Instead, we just leave a comment saying we'll work on it. But if you want this access, reference https://github.com/orgs/golang/teams/go-assignees and your GitHub username in your issue requesting access.</p>"},{"location":"GitHubAccess/#editors","title":"Editors","text":"<p>The \"go-editors\" group is the set of people who can edit metadata on issues.</p> <p>To request this type of access, reference https://github.com/orgs/golang/teams/go-editors and your GitHub username in your issue requesting access.</p> <p>Please do not edit any field you're not confident about. Feel free to ask for second opinions.</p>"},{"location":"GitHubAccess/#requesting-access","title":"Requesting Access","text":"<p>To request any of the access types above, file a new issue (https://go.dev/issue/new?title=access:+&amp;body=See+https://go.dev/wiki/GitHubAccess.) and state which access you want (its name and group URL).</p>"},{"location":"GitHubAccess/#once-you-have-access","title":"Once you have access","text":"<p>Go help garden! See Gardening.</p>"},{"location":"Go-1.10-Release-Party/","title":"Go-1.10-Release-Party","text":""},{"location":"Go-1.10-Release-Party/#whats-happening","title":"What's happening?","text":"<p>To celebrate the release of Go 1.10 we're to organising a world wide release party during the month of February 2018 \ud83c\udf89 </p>"},{"location":"Go-1.10-Release-Party/#so-what-is-the-release-date","title":"So what is the release date?","text":"<p>Go 1.10 was released on February 16.</p>"},{"location":"Go-1.10-Release-Party/#sounds-awesome-how-can-you-get-involved","title":"Sounds awesome, how can you get involved?","text":"<ul> <li>If you host a Go user group or meetup, schedule a meetup during February, and celebrate with Gophers around the world.</li> <li>If you're a member of a Go user group or meetup, pester your organiser and let them know you'd like to participate.</li> </ul> <p>After the event post a photo, make a video, write a blog post, scribble on your Facebook wall, or tweet something pithy. Let's see how big we can make the celebration.</p> <p>Spread the word using hashtag #GoReleaseParty</p> <p>Don't forget to add your meetup's details  right here.</p>"},{"location":"Go-1.10-Release-Party/#whos-involved","title":"Who's involved?","text":"<p>Here is a list of the groups who are participating. - Madrid, Spain: Feb 8 7:30 pm at source{d}. View the event - Copenhagen, Denmark: Feb 15 7:00 pm at Maersk. View the meetup - Minsk, Belarus: Feb 15 7:00 pm at SPACE. View the event - London, UK: Feb 15 6:30 pm at Shazam. View the meetup - Paris, France: Feb 15 7:15 pm at Mobiskill. View the meetup - Orlando, FL, United States: Feb 19 7:00 PM at Familab. View the meetup - Shizuoka, Japan: Feb 20 6:30 pm at Ageya Take. View the event - Jakarta, Indonesia: Feb 20 7:00pm at Hacktiv8. View the event - Tokyo, Japan: Feb 20 7:00 pm at Google Tokyo. View the event - Okayama, Japan: Feb 20 7:00 pm at Kurashiki Coffee Okayama Aoe. View the event - Reston, VA, USA: Feb 21 6:45 pm at Comcast. View the meetup - San Francisco, CA: Feb 21 6:00 pm at Cloudflare View the event - Phoenix, AZ, United States: Feb 22 6:30 PM at Galvanize. View the meetup - Warsaw, Poland: Feb 22 7:00 pm at Kawiarnia Crux View the meetup - Santiago, Chile: Feb 22 7:00 pm at Mercado Libre Chile. View the meetup - Aachen, Germany: Feb 22 7:00pm at hosting.de. View the meetup - Waterloo, Canada: Feb 22 7:00pm at the Lion Brewery in the Heuther Hotel. View the meetup - Lodz, Poland: Feb 22 6:00 pm at Co/Walk HUB View the meetup - \u0130zmir, Turkey: Feb 23 7:30 pm at Drunken Duck View the event - Milan, Italy: Feb 23 8:00 pm at Venini42 View the event - Bengaluru, India: Feb 24 10:00 am at OpenEBS Office Space. View the meetup - Moscow, Russia: Feb 24 11:30 am at Badoo. View the meetup - Yoshkar-Ola, Russia: Feb 24 2:00 pm at iSpring. View the meetup - Zagreb, Croatia: Feb 26 6:00 pm at MaMa. View the meetup - Edmonton, Canada: Feb 26 6:30 pm at Startup Edmonton View the meetup - Berlin, Germany: Feb 26 7:00 pm at n26. View the meetup - Stockholm, Sweden: Feb 27 17:30 at Betalo. View the meetup - Baltimore, MD: Feb 27 06:30pm at ZeroFOX. View the meetup - Joinville, Brazil: Feb 27 7:00 pm at ContaAzul. View the meetup - Brisbane, Australia: Feb 28 6:00 pm at Jumbo Interactive. View the meetup - Frankfurt, Germany: Feb 28 6:30 pm at SANID GmbH, View the meetup - Chicago, IL: Feb 28 6:00pm at Enova. View the meetup &amp; View the meetup - Fort Lauderdale, FL: Mar 1 6:30 pm at Microsoft, View the meetup - Zurich, Switzerland: Mar 1 7:00 pm at Job Cloud. View the meetup - Florian\u00f3polis, Brazil: Mar 17 3:00 pm at Involves. View the meetup - Portland, Oregon: April 24<sup>th</sup> 6:00 pm at New Relic. View the meetup </p> <p>If your group is not listed here yet, edit the page and add yourself in a chronological order. Organisers, once you've added your group, consider tweeting out a link to the page to raise awareness.</p>"},{"location":"Go-1.10-Release-Party/#stay-in-touch","title":"Stay in touch","text":"<p>Trying to co-ordinate dozens of meetup groups around the globe will be challenging. Here are some ways you can plan your event, and keep up to date. </p> <p>As always, if you get stuck, or need help, please contact the organisers directly, we're here to help. .</p>"},{"location":"Go-1.10-Release-Party/#slack-channel","title":"Slack Channel","text":"<p>We have a channel for the release party on the Gophers Slack. If you need an invite to Slack, you can request an automatic invite with this link.</p>"},{"location":"Go-1.10-Release-Party/#mailing-list","title":"Mailing list","text":"<p>We have set up a mailing list for meetup organisers to ask questions.</p>"},{"location":"Go-1.10-Release-Party/#what-happens-in-a-release-party","title":"What happens in a release party?","text":"<p>As with the previous Go 1.6 and Go 1.8 release parties, this is a great opportunity to spread the word about the improvements landing 1.10, and the plans for what is coming next!</p>"},{"location":"Go-1.10-Release-Party/#resources","title":"Resources","text":"<p>You can use the slide deck that the Go London User Group in London will use. It's available here (source)</p> <p>Please send PR's with corrections/additions</p> <p>Here's a link to the draft Go 1.10 release notes.</p> <p>Here's a link to the talk by Francesc Campoy: The State of Go (February 2018).</p>"},{"location":"Go-1.10-Release-Party/#whatll-happen-if-go-110-isnt-out-during-february","title":"What'll happen if Go 1.10 isn't out during February?","text":"<p>If all else fails\u2026 at least we'll have each other. </p>"},{"location":"Go-1.10-Release-Party/#whos-organising-this","title":"Who's organising this?","text":"<p>Well, if you run a Go meetup, you are. It can't be a worldwide release party without meetups around the globe.</p>"},{"location":"Go-1.10-Release-Party/#no-seriously-whos-organising-this","title":"No, seriously, who's organising this?","text":"<p>Here are the organisers so far: - Natalie Pistunovich - @NataliePis - Dave Cheney - @davecheney - Jo\u00e3o Henrique Machado Silva - @joaoh82 - Florin P\u0103\u021ban - @dlsniper</p> <p>Want to help? Edit this page and add yourself</p> <p>If you have questions, please reach out to one of the organisers.</p>"},{"location":"Go-1.6-release-party/","title":"Go-1.6-release-party","text":""},{"location":"Go-1.6-release-party/#party-recap-on-tweets","title":"Party recap on tweets","text":"<p>Missed or missing the party? Here is a flashback for you: https://storify.com/gobridge/go-16v-world-release-party</p>"},{"location":"Go-1.6-release-party/#whats-happening","title":"What's happening?","text":"<p>To celebrate the release of Go 1.6 we're organising a world wide release party on February the 17<sup>th</sup>, 2016. </p>"},{"location":"Go-1.6-release-party/#hang-on-did-you-say-go-16-ships-on-the-17th-of-february","title":"Hang on, did you say Go 1.6 ships on the 17<sup>th</sup> of February?","text":"<p>Nope! Go 1.6 ships when it's ready. With that said, things are looking pretty good for a mid Feb release. Using the power of software estimation, a date was plucked from the aether that happened to coincide with several meetups that were already in the works.</p>"},{"location":"Go-1.6-release-party/#sounds-awesome-how-can-you-get-involved","title":"Sounds awesome, how can you get involved?","text":"<ul> <li>If you host a Go user group or meetup, schedule a meetup on the 17<sup>th</sup> of Feb and celebrate with Gophers around the world.</li> <li>If you're a member of a Go user group or meetup, pester your organiser and let them know you'd like to participate.</li> </ul> <p>After the event post a photo, make a video, write a blog post, scribble on your Facebook wall, or tweet something pithy. Let's see how big we can make the celebration.</p> <p>Don't forget to add your details  right here.</p>"},{"location":"Go-1.6-release-party/#whos-involved","title":"Who's involved?","text":"<p>Here is a list of the groups who are participating. - Sydney Go users' group - Go-Miami - San Diego Gophers - PDX Go - GopherConIndia - Belarus Golang User Group - Ukrainian Golang User Groups - Lviv Golang Group - Edmonton Go (Feb 22) - Software Craftsmanship Toulouse - Golang Paris - Polish GLUG Meetup - Google Developer Group Gigcity - Golang Montr\u00e9al (Feb 22<sup>nd</sup>) - Golang Vietnam (Feb 23) - Gophers Katowice - GoSF - Boston Golang - Go-Tampa - Atlanta - GoAKL - Golang Barcelona - Golang Singapore (February 18) - Go Maryland (February 18) - Orange County Gophers - Central Jersey Tech Meetup - Kansas City Golang Meetup - Mexico City Gophers - Women Who Go London - Go Israel - Go User Group Hamburg - Golang Brasil - S\u00e3o Paulo (Saturday, February 20) - Z\u00fcrich Gophers - Switzerland - Golang Reston - GoMAD - GoCon - GDG Golang Berlin (Feb 17) - ATX Golang (Austin) - GoCon Tokyo - Golang Italian Hackers, at Develer - Go London User Group - Seattle Go Programmers - Vilnius Golang - Go DC - GDG Korea Golang (Feb 22) - [Golang ZG, Zagreb Croatia] (http://www.meetup.com/Golang-ZG/events/228863217/) - [Gophers-ir Iran/Tehran] (https://evand.ir/events/gophers-16) (February 18) - Golang Brazil - Porto Alegre (February 17) - [Seattle Go Programmers] (http://www.meetup.com/golang/events/228465356/) (Wed February 17) - [Go Cape Town] (http://www.meetup.com/gocapetown/events/228874257/) - [Golang Hong Kong] (http://www.meetup.com/GolangHK/events/228551636/) - [Golang Lima] (http://www.meetup.com/es-ES/Golang-Peru/events/228643682/) - [Gophers Barranquilla] (http://www.meetup.com/es-ES/Gophers-Barranquilla/events/228899893/)</p> <p>If your group is not listed here yet, edit the page and add yourself. Organisers, once you've added your group, consider tweeting out a link to the page to raise awareness.</p>"},{"location":"Go-1.6-release-party/#stay-in-touch","title":"Stay in touch","text":"<p>Trying to co-ordinate dozens of meetup groups around the globe will be challenging. Here are some ways you can plan your event, discuss it online, and keep up to date. </p> <p>As always, if you get stuck, or need help, please contact the organisers directly, we're here to help.</p>"},{"location":"Go-1.6-release-party/#slack-channel","title":"Slack Channel","text":"<p>We have a channel for the release party on the Gophers Slack. If you need an invite to Slack, you can request an automatic invite with this link.</p>"},{"location":"Go-1.6-release-party/#mailing-list","title":"Mailing list","text":"<p>We have set up a google groups mailing list for meetup organisers to ask questions. At the moment the list is focused on the event on the 17<sup>th</sup>, hopefully if that goes well the mailing list will become a useful resource in the future.</p>"},{"location":"Go-1.6-release-party/#what-happens-in-a-release-party","title":"What happens in a release party?","text":"<p>Go 1.6 is the 7<sup>th</sup> release of the language which has been open source since November 10<sup>th</sup>, 2009 \u2013 that's 6.5 years since the project was open sourced and nearly 4 years since the 1.0 release. A lot has changed in the language since 1.0, so this is a great opportunity to discuss the improvements landing 1.6.</p>"},{"location":"Go-1.6-release-party/#resources","title":"Resources","text":"<p>Francesc Campoy presented his State of Go talk at FOSDEM, which includes details of the upcoming Go 1.6 release. His slide are available online.</p> <p>Here a Go 1.6 presentation slide deck from the Go Sydney users' group. Feel free to use this for your meetup.</p> <p>talks.godoc.org/github.com/davecheney/gosyd/go1.6.slide</p> <p>Source: https://github.com/davecheney/gosyd/blob/master/go1.6.slide</p> <p>Please send PR's with corrections/additions</p>"},{"location":"Go-1.6-release-party/#go-16-new-and-noteworthy","title":"Go 1.6 new and noteworthy","text":"<p>Please help by expanding this section so meetup organisers can share these details with their groups.</p> <ul> <li>Go 1.6 release notes (draft)</li> <li>HTTP/2.</li> </ul> <p>Go 1.6's <code>net/http</code> package supports HTTP/2 for both the client and server out of the box.   Here is a video of @bradfitz giving an overview of Go 1.6's HTTP/2 support. - Garbage Collector improvements.</p> <p>Go 1.6 focused heavily on improvements to the low latency collector shipped in Go 1.5.   Rick Hudson gave a presentation at GopherCon 2015 describing the low latency collector delivered in Go 1.5, and gave hints to the improvements being worked on for 1.6.   Rick recently recorded an interview with InfoQ which focused on 1.6 in more detail. - GOVENDOREXPERIMENT becomes the default.</p> <p>Go 1.5 added experimental support for a mechanism of including the source of your package's dependencies in the package itself, colloquially known as vendoring. This feature was opt-in during Go 1.5.   Go 1.6 makes the vendor support the default, and it's likely that packages will start to use it soon.</p> <ul> <li><code>text/template</code> changes.   A long requested ability to trim whitespace in templates has arrived. This template </li> </ul> <p><code>\"{{23 -}} &lt; {{- 45}}\"</code></p> <p>will produce this output</p> <p><code>\"23&lt;45\"</code> </p> <ul> <li>cgo changes</li> </ul> <p>cgo continues to get stricter about sharing data between Go and C. http://tip.golang.org/cmd/cgo/#hdr-Passing_pointers</p> <p>Ian Lance Taylor has put a lot of work into making signal handling more sane. </p> <ul> <li>More supported platforms.   Go 1.6 adds experimental ports to Linux on 64-bit MIPS (linux/mips64 and linux/mips64le). Note that this is 64 bit MIPS, not the older 32 bit MIPS commonly found in routers.</li> </ul> <p>64-bit PowerPC (linux/ppc64le), Go 1.6 now supports cgo with external linking and is roughly feature complete.</p> <p>Go 1.6 also adds an experimental port to Android on 32-bit x86 (android/386). </p> <p>Did you contribute to Go 1.6 and your contribution is not listed here? Edit this page and add some details about what you did.</p>"},{"location":"Go-1.6-release-party/#whatll-happen-if-go-16-comes-out-early","title":"What'll happen if Go 1.6 comes out early?","text":"<p>It'll ruin the surprise, but only a little. Being realistic, even without the difficulty of timezones it's impossible to run every meetup at exactly the same time. As mentioned above, Feb 17 is an arbitrary date.</p> <p>If you're a meetup organiser, Feb 17<sup>th</sup> would be great, but your participation is more important than being able to organise your group for exactly the 17<sup>th</sup>.</p>"},{"location":"Go-1.6-release-party/#whatll-happen-if-go-16-isnt-out-by-the-17th","title":"What'll happen if Go 1.6 isn't out by the 17<sup>th</sup>?","text":"<p>Well \u2026 at least we'll have each other. </p> <p>The feature set of Go 1.6 isn't going to change in the next few weeks. If Go 1.6 ships after the 17<sup>th</sup>, it will be a little anticlimactic that we jumped the gun, but it's not a big deal.</p>"},{"location":"Go-1.6-release-party/#whos-organising-this","title":"Who's organising this?","text":"<p>Well, if you run a Go meetup, you are. It can't be a worldwide release party without meetups around the globe.</p>"},{"location":"Go-1.6-release-party/#no-seriously-whos-organising-this","title":"No, seriously, who's organising this?","text":"<p>Here are the organisers so far: - Dave Cheney - @davecheney - Carlisia Campos - @carlisia</p> <p>Want to help? Edit this page and add yourself</p> <p>If you have questions, please reach out to one of the organisers.</p>"},{"location":"Go-1.8-Release-Party/","title":"Go-1.8-Release-Party","text":""},{"location":"Go-1.8-Release-Party/#whats-happening","title":"What's happening?","text":"<p>To celebrate the release of Go 1.8 we're to organising a world wide release party on February the 16<sup>th</sup>, 2017. </p>"},{"location":"Go-1.8-Release-Party/#hang-on-did-you-say-go-18-ships-on-the-16th-of-february","title":"Hang on, did you say Go 1.8 ships on the 16<sup>th</sup> of February?","text":"<p>Nope! Go 1.8 is in good shape to ship in early February, but no firm release date has been published; it might be as early as the 1<sup>st</sup> of Feb, or it might not.</p>"},{"location":"Go-1.8-Release-Party/#sounds-awesome-how-can-you-get-involved","title":"Sounds awesome, how can you get involved?","text":"<ul> <li>If you host a Go user group or meetup, schedule a meetup on the 16<sup>th</sup> of Feb, or as close to it as convenient, and celebrate with Gophers around the world.</li> <li>If you're a member of a Go user group or meetup, pester your organiser and let them know you'd like to participate.</li> </ul> <p>After the event post a photo, make a video, write a blog post, scribble on your Facebook wall, or tweet something pithy. Let's see how big we can make the celebration.</p> <p>Spread the word using hashtag #GoReleaseParty</p> <p>Don't forget to add your meetup's details  right here.</p>"},{"location":"Go-1.8-Release-Party/#whos-involved","title":"Who's involved?","text":"<p>Here is a list of the groups who are participating. - Buenos Aires, Argentina: Feb 16 7:00 pm. Location: Mercado Libre's Headquarters. (https://www.meetup.com/es-ES/Golang-Argentina/) - Orlando, FL: Feb 16 7:00PM, Location TBD, Orlando Gophers - Mexico City, Mexico: Feb 16 7:00pm at Palo-IT, view the meetup for details. - Helsinki, Finland: Feb 16 5:30pm, view the meetup - Tehran, Iran: Feb 16 5pm , at [Clickyab] (https://clickyab.com) office. Visit event page for more info or contact @fzerorubigd. - Florence area, Italy: Feb 16 6pm CET, at Develer SRL. Visit event page for more detail or contact @golab_conf. - Aachen, Germany: Feb 16 7pm, view the meetup - Bengaluru, India - Feb 16<sup>th</sup> 7.00pm at [Gojek] (@GojekTech) office. Contact [@rbharshetty] (@rBharshetty) or view the [meetup] (https://www.meetup.com/Golang-Bangalore/events/237156123/) for details - Munich, Germany: Feb 15 7pm at Stylight. Contact @lc0d3r, @munich_gophers or view the meetup for details. - Washington DC: Feb 16 7pm at MakeOffices Dupont. View the Golang meetup and [GDG-DC] (https://www.meetup.com/gdg-dc) [Meetup] (https://www.meetup.com/gdg-dc/events/237677174/) for details. - Columbia, MD: Feb 16 5:30pm at Tier 1 Consulting Group. See event page - Halifax, Nova Scotia, Canada Postponed due to weather, will be rescheduled Contact @danp for more info. - Belo Horizonte, MG, Brazil: Feb 16 7pm at The Plant. Contact @joaoh82 for more info or go to Go Belo Horizonte - Florian\u00f3lis, SC, Brazil: Feb 16 7pm at Neoway Business Solutions. Contact @ricardolonga for more info or go to Floripa Gophers - S\u00e3o Paulo, Brazil: Feb 16 7pm at TBD. Contact @vdemario for more info or check the meetup page - @GolangParis, France, Feb 16 7pm at Deezer, see meetup page. Ping: gaufres [at] golangparis.org. - Sydney, Australia: Feb 16 6pm at TBD. Contact @chewxy for more info. The event page - Moscow, Russia: Feb 16 7pm. Meetup group. - Novosibirsk, Russia: Feb 19 11am NOVT. Contact @lkalneus for more info.  Live stream - @DenverGophers Feb 16 6:00pm at Comcast Viper. View the meetup or contact @apriendeau for more info. - @MinneapolisGo Feb 16 6:00pm at Agosto. View the meetup or contact @corylanou for more info. - Amsterdam, the Netherlands: Feb 16 6pm at Wercker. View the meetup for more details and RSVP. - Wroclaw, Poland: Feb 16 7pm at Kuznicza 10. View the meetup or contact @viru for more details. - Stockholm, Sweden: Feb 21 6pm at TV4. View the meetup or contact @marcusolsson for more details. - New York, NY: Feb 16 at 6:30PM at Stack Overflow.  RSVP for meetup Contact @wikiwalk for more details.  - Madrid, Spain: Feb 16 at 7:30PM at source{d}, The event will be announced on meetup. Contact @mcuadros_ for more details.  - Murcia, Spain: Feb 16 at 7:00PM at CEEIM. Will announce the event on meetup. Contact @ANPez for more details.  - Taipei, Taiwan: Feb 16 at 7:30PM at Dcard. RSVP on the kktix page. Contact @kkdai for more details.  - Budapest, Hungary: Feb 16 at 7:00PM at Prezi House of Ideas. RSVP on the meetup page. For details please contact the organizer: @gulyasm - Reston, VA: Feb 16 at 6:45PM at Comcast. See more details and RSVP on the meetup page. - Lille, France: Feb 16 at 6:45PM at Epitech Lille. Meetup page. - Hamburg, Germany: Feb 16 at 7PM place at loodse. Meetup page. - Okayama, Japan: Feb 16 7pm at Kurashiki Coffee Shop. See an event page or contact @qt_luigi for more info. - Phoenix, AZ: Feb 16 at 6:30PM, at Brightcove, Scottsdale. See event page or contact @golangPhoenix - Toronto, Canada: Firkin on King, See event page - Seattle, WA: Feb 16 at 6PM at Uber, See event page - Vancouver, BC, Canada: Feb 16 at 6PM at Hootsuite, See event page - San Francisco, CA: Feb 16 at 6:30PM, venue TBD. See event page - Copenhagen, Denmark: Feb 16<sup>th</sup> at 6PM, at Vivino. See event page or contact @phr0e or @CphGophers - Leeds, England, UK: Feb 16<sup>th</sup> at 6PM, at White Cloth Gallery in Leeds (LS1 4HT). See event page - Zurich, CH, Feb 23<sup>rd</sup> at 6:30PM at Unic AG offices in Altstetten. See event page - Framingham, Ma - Feb 16<sup>th</sup> 7pm - See event page - Cambridge, Ma - Feb 16<sup>th</sup> 6:30pm, at the Google Office in Cambridge - See event page, contact @bostongolang - Tokyo, Japan - Feb 16<sup>th</sup> 7pm - See https://gocon.connpass.com/event/48281/ - San Diego, CA @ ScouRED - Feb 16<sup>th</sup> 6pm - See event page, contact @carlisia - Philadelphia, PA - Feb 16<sup>th</sup> 6PM, at Sidecar. See Meetup page or contact @golangphilly - Milan, Italy - Feb 16<sup>th</sup> 6.30pm, at Ibuildings' offices. For info tweet to @kmox83 or @mavimo - See the event page - Singapore - Feb 16<sup>th</sup> 7.30pm, at Singapore Power office. See the Meetup page or tweet to @golangSG - Cardiff (Wales UK) - Feb 15<sup>th</sup> 18:00 at Tramshed Cardiff. See the Meetup page or tweet to @cdfgolang - Minsk, Belarus - Feb 16<sup>th</sup> 7.00pm at Juno. [Meetup Page -&gt;] (https://www.meetup.com/JunoCrew-meetups/events/237671824/) Registration here -&gt; - Bangor (Wales UK) - Feb 16<sup>th</sup> 7:00 PM hosted by NorthWalesTech. See the Meetup page or tweet to @northwalestech - Odessa, Ukraine - Feb 25<sup>th</sup> 10:00am at VertaMedia. See the meetup page. - Valencia, Spain - Feb 18<sup>th</sup> 17:00pm at Oh my Game Bar. Visit the Telegram group or visit our twitter. - Austin, TX (USA) - Feb 16<sup>th</sup> 6:30 PM (GMT-6) visit the Austin Go Language User Group Meetup page for details - Hyderabad, India - Feb 16<sup>th</sup> 6:30 PM visit the Hyderabad Gophers Meetup page for details or contact @itsbalamurali, @gouthamve for more details. - Edmonton, AB (Canada) - Feb 27<sup>th</sup> 6:30 PM visit Edmonton Go and RSVP via the meetup page. - Dallas, TX - Feb 16<sup>th</sup> 7:00 PM visit GoDFW and RSVP via the meetup page - Tr\u00f3jmiasto (Gda\u0144sk-Sopot-Gdynia), Poland - Feb 13<sup>th</sup> 6:00 PM visit GUGT and RSVP via the meetup page - Istanbul, Turkey - Feb 16<sup>th</sup> 7:00 PM at Insider. RSVP via the eventbrite page. - Strasbourg, France - Feb 16<sup>th</sup> 6:30 PM at La Plage Digitale. RSVP via the meetup page. - Waterloo, Canada - Feb 16 7:00 PM at the Lion's Brewery at the Heuther Hotel.  RSVP via the meetup page. - Republic of Korea - Feb 16  8:00 Pm at GangNam 2<sup>nd</sup> TOZ. See the [meetup page] (https://www.facebook.com/groups/golangko/). - Dublin, Ireland - Feb 16 6:30 PM at Arista Networks. Meetup details. - Berlin, Germany - Feb 28 7:00 PM at Amazon. RSVP at Meetup. - Portland, OR (pdxgo) - Feb 16 6:30 PM at Esri R&amp;D Center. RSVP at Meetup. - Lyon, France - Fev 16 7 PM at OVH. RSVP at Meetup - New York - Fev 16 7:00 PM at Nulab. RSVP at Meetup - Dresden, Germany - Feb 16<sup>th</sup> 6:30PM at LOVOO. RVSP at http://doodle.com/poll/s2bw6eu4ywhqg9ut - London, UK - Feb 15<sup>th</sup> 6:30PM at Skills Matter Code Node RSVP at Meetup - Auckland, NZ - Feb 15<sup>th</sup> 6:00PM at Vend, RSVP at Meetup - \ud83c\uddfb\ud83c\uddf3 Saigon, Vietnam - Feb 21 7:00 PM, RSVP at our Facebook Event page - Brno, CZ - Feb 28<sup>th</sup> 7:00PM. RSVP via the meetup event page. - Atlanta, GA (USA) - Feb 16<sup>th</sup> at 6:30PM EST. RSVP at the Meetup Page or contact @rlmcpherson - Edinburgh, Scotland - Feb 16<sup>th</sup> 6:30 PM GMT. RSVP at Meetup or contact @macqueenism or @hackebrot. - Boise, ID (USA) - Feb 16<sup>th</sup> 6:00PM (MST). RSVP via the meetup event page. - Cape Town, South Africa - Feb 16<sup>th</sup> 6:30PM (SAST). RSVP via the meetup event page or get in touch with @clvnb - Lviv, Ukraine - Feb 24<sup>th</sup> 6:30PM (EET). RSVP via the meetup event page - Brest, France - Feb 21th 6:30PM. See the Meetup page</p> <p>If your group is not listed here yet, edit the page and add yourself. Organisers, once you've added your group, consider tweeting out a link to the page to raise awareness.</p>"},{"location":"Go-1.8-Release-Party/#stay-in-touch","title":"Stay in touch","text":"<p>Trying to co-ordinate dozens of meetup groups around the globe will be challenging. Here are some ways you can plan your event, and keep up to date. </p> <p>As always, if you get stuck, or need help, please contact the organisers directly, we're here to help. .</p>"},{"location":"Go-1.8-Release-Party/#slack-channel","title":"Slack Channel","text":"<p>We have a channel for the release party on the Gophers Slack. If you need an invite to Slack, you can request an automatic invite with this link.</p>"},{"location":"Go-1.8-Release-Party/#mailing-list","title":"Mailing list","text":"<p>We have set up a mailing list for meetup organisers to ask questions.</p>"},{"location":"Go-1.8-Release-Party/#what-happens-in-a-release-party","title":"What happens in a release party?","text":"<p>As with the previous Go 1.6 and Go 1.7 release parties, this is a great opportunity to spread the word about the improvements landing 1.8, and the plans for the 1.9 development cycle.</p>"},{"location":"Go-1.8-Release-Party/#resources","title":"Resources","text":"<p>A sample slide deck that you can use is available here (source)</p> <p>Please send PR's with corrections/additions</p> <p>Here's a link to the draft Go 1.8 release notes.</p> <p>Here's a link to the talk by Francesc Campoy: The State of Go (February 2017).</p>"},{"location":"Go-1.8-Release-Party/#whatll-happen-if-go-18-comes-out-before-the-16th","title":"What'll happen if Go 1.8 comes out before the 16<sup>th</sup>?","text":"<p>This is likely to happen, but many meetups have a January date scheduled and don't want to hold two meetups so close together. The 16<sup>th</sup> is an arbitrary date that a quorum of meetups could find that didn't conflict with their existing schedules. </p> <p>If you're a meetup organiser and can hit the Feb 16<sup>th</sup>, awesome, but your participation is more important than being able to organise your group for an exact date.</p>"},{"location":"Go-1.8-Release-Party/#whatll-happen-if-go-18-isnt-out-by-the-16th","title":"What'll happen if Go 1.8 isn't out by the 16<sup>th</sup>?","text":"<p>Well \u2026 at least we'll have each other. </p> <p>The feature set of Go 1.8 isn't going to change in over the next month. If Go 1.8 ships after the 16<sup>th</sup>, it will be a little anticlimactic that we jumped the gun, but it's not a big deal.</p>"},{"location":"Go-1.8-Release-Party/#whos-organising-this","title":"Who's organising this?","text":"<p>Well, if you run a Go meetup, you are. It can't be a worldwide release party without meetups around the globe.</p>"},{"location":"Go-1.8-Release-Party/#no-seriously-whos-organising-this","title":"No, seriously, who's organising this?","text":"<p>Here are the organisers so far: - Dave Cheney - @davecheney - Jo\u00e3o Henrique Machado Silva - @joaoh82</p> <p>Want to help? Edit this page and add yourself</p> <p>If you have questions, please reach out to one of the organisers.</p>"},{"location":"Go-Community-Slides/","title":"Go-Community-Slides","text":"<p>Did you speak at a conference or meetup lately? Please share links to your slide decks here for better distribution to our global community. </p>"},{"location":"Go-Community-Slides/#peer-to-peer-groups","title":"Peer To Peer Groups","text":""},{"location":"Go-Community-Slides/#kitchener-waterloo-canada","title":"Kitchener-Waterloo, Canada","text":""},{"location":"Go-Community-Slides/#concurrent-optimization-methods-using-go","title":"Concurrent Optimization Methods Using Go","text":"<p>Brodie Roberts, June 12, 2018 [repo]</p> <p>Concurrency is a powerful tool for doing huge amounts of computation on today's multi-core computers. But that power is limited by the design of paralleling the problem and its implementation using threads and locks. We'll start with a sub-optimal concurrent Go program and walk through improving it - iterating on finding the program's bottleneck, improving it, and seeing the program get faster. We'll also cover general tips and tricks of concurrent optimization to apply to your own computationally intensive programs. </p>"},{"location":"Go-Community-Slides/#conferences","title":"Conferences","text":""},{"location":"Go-Community-Slides/#gophercon-2018-denver-colorado","title":"GopherCon 2018, Denver, Colorado","text":""},{"location":"Go-Community-Slides/#the-importance-of-beginners","title":"The Importance of Beginners","text":"<p>Natalie Pistunovich, August 29 </p> <ul> <li>Session details</li> <li>Slides</li> </ul>"},{"location":"Go-Community-Slides/#rethinking-classical-concurrency-patterns","title":"Rethinking Classical Concurrency Patterns","text":"<p>Bryan C. Mills, August 28</p> <ul> <li>Slides with speaker notes</li> </ul>"},{"location":"Go-Release-Cycle/","title":"Go-Release-Cycle","text":"<p>This wiki page is maintained by the Go team. Please send comments to golang-dev or file issues instead of making changes directly.</p> <p>Short link: https://go.dev/s/release.</p>"},{"location":"Go-Release-Cycle/#overview","title":"Overview","text":"<p>Go is released every six months. Each release cycle is broken down into a development phase lasting about 4 months, followed by a 3-month period of testing and polishing called the release freeze. If everything goes well, work on the next release begins before the previous release has shipped, resulting in an overlap of about a month.</p> <p>After the initial release of a version, it is supported with minor releases that fix severe bugs and security issues.</p>"},{"location":"Go-Release-Cycle/#timeline","title":"Timeline","text":"<p>The current release cycle is aligned to start in mid-January and mid-July of each year. The target milestones for a release cycle are as described below. We try to hit the targets as closely as possible, while still delivering a quality release.</p> <p>To give the team time to prepare, and to address unexpected problems, we prefer to do release work early or mid-week. That means that exact dates will vary year to year, so milestones are specified as weeks in a particular month. Week 1 is the week starting on the first Monday of the month. All dates are subject to change based on the year's holiday timings.</p> <p></p>"},{"location":"Go-Release-Cycle/#january--july-week-1-planning-for-release-begins","title":"January / July week 1: Planning for release begins.","text":"<p>Planning of major work for upcoming release cycle is announced on golang-dev.</p> <p>Example: Go 1.20</p>"},{"location":"Go-Release-Cycle/#january--july-week-3-release-work-begins","title":"January / July week 3: Release work begins.","text":"<p>Once the prior release has entered its final stabilization period, the tree opens for general development. All kinds of development are welcome during this period. It's preferable for large or particularly risky changes to land well before the end of the development window, so that there's time to fix any problems that arise with them.</p>"},{"location":"Go-Release-Cycle/#may--november-week-4-release-freeze-begins","title":"May / November week 4: Release freeze begins.","text":"<p>This milestone begins the second part of the release cycle, the release freeze. The release freeze applies to the entire main repository as well as to the code in subrepositories that is needed to build the binaries included in the release, particularly vet and all its dependencies in the tools subrepository.</p> <p>During the freeze, only bug fixes, test-only changes, and doc updates are accepted. On occasion new work may be done during the freeze, but only in exceptional circumstances and typically only if the work was proposed and approved before the cutoff. Such changes must be low risk. See freeze exceptions below.</p> <p>This part of the release cycle is focused on improving the quality of the release, by testing it and fixing bugs that are found. However, every fix must be evaluated to balance the benefit of a possible fix against the cost of now having not as well tested code (the fix) in the release. Early in the release cycle, the balance tends toward accepting a fix. Late in the release cycle, the balance tends toward rejecting a fix, unless a case can be made that the fix is both low risk and high reward.</p> <p>Examples of low risk changes appropriate late in the cycle include changes to documentation and fixes to new features being introduced in the current release (since there is no chance of introducing a regression compared to an earlier release).</p> <p>Shortly after the freeze begins, nearly all known bugs should have been fixed or explicitly postponed (either to the next release or indefinitely). The remainder should usually be tracked as release blockers and worked on urgently.</p>"},{"location":"Go-Release-Cycle/#june--december-week-2-release-candidate-1-issued","title":"June / December week 2: Release candidate 1 issued.","text":"<p>A release candidate is meant to be as close as possible to the actual release bits. Issuing a release candidate is an indication that the Go team has high confidence that the tree is free of critical bugs. In particular, because Google continuously tracks the development version of Go, by the time a release candidate is issued, a close approximation of it will have been running in production at Google for at least a week or two.</p> <p>Once a release candidate is issued, only documentation changes and changes to address critical bugs should be made. In general the bar for bug fixes at this point is even slightly higher than the bar for bug fixes in a minor release. We may prefer to issue a release with a known but very rare crash than to issue a release with a new but not production-tested fix.</p> <p>If critical bugs are reported and fixed, additional release candidates may be issued, but typically not more than one every two weeks.</p> <p>Again, a release candidate is meant to be bug-free, as much as possible. Organizations are encouraged to deploy it in production settings after appropriate organization-specific testing.</p> <p>The calm period between a release candidate and the final release is a good time for additional testing or for discussing the next release (see the planning milestone above).</p>"},{"location":"Go-Release-Cycle/#july--january-week-3-work-on-the-next-release-begins","title":"July / January week 3: Work on the next release begins","text":"<p>While the current release is being stabilized, the tree reopens for work on the next. During this period, fixes intended for the current release need to be cherry-picked onto the release branch. Unlike cherry-picks for minor releases, these changes don't need a backport issue and don't need to be approved by the release team. As long as they're permitted by the freeze policy, they can be reviewed and submitted like any other CL.</p>"},{"location":"Go-Release-Cycle/#august--february-week-2-release-issued","title":"August / February week 2: Release issued.","text":"<p>Finally, the release itself!</p> <p>A release should not contain significant changes since the last release candidate: it is important that all code in the release has been well tested. Issuing a release is an indication that release testing has confirmed the release candidate's high confidence that the tree is free of critical bugs.</p> <p>Even if a release goes smoothly and there's spare time, we prefer to stay on schedule. Extra testing can only improve the stability of a release, and it also gives developers working on the Go release more time to think about and plan the next release before code changes start pouring in again.</p> <p>By the time of the final release, Google will have been using this version of Go for nearly two months. While Google's successful use does not guarantee the absence of problems, our experience has been that it certainly helps improve the quality of the release. We strongly encourage other organizations to test release candidates as aggressively as they are able and to report problems that they find.</p> <p>Once a release is stabilized, work on the next release, including code reviews and submission of new code, can begin, and the cycle repeats. Note that if a release is delayed, work on the next release may be delayed as well.</p>"},{"location":"Go-Release-Cycle/#release-maintenance","title":"Release Maintenance","text":"<p>A minor release is issued to address one or more critical problems for which there is no workaround (typically related to stability or security). The only code changes included in the release are the fixes for the specific critical problems. Important documentation-only changes and safe test updates (such as disabling tests), may also be included as well, but nothing more. Minor releases preserve backwards compatibility as much as possible, and don't introduce new APIs.</p> <p>Minor releases to address problems (including security issues) for Go 1.x stop once Go 1.x+2 is released. For more about security updates, see the security policy.</p> <p>See also the MinorReleases wiki page.</p>"},{"location":"Go-Release-Cycle/#freeze-exceptions","title":"Freeze Exceptions","text":"<p>Fix CLs that are permitted by the freeze policy do not need a freeze exception.</p> <p>Any exceptions to the freeze must be communicated to and explicitly approved by the Go Release Team before the freeze. If you\u2019d like to request an exception, please file an issue in the issue tracker with \"[freeze exception]\" as a suffix and include \"CC golang/release\" (example). We will address any requests on a case-by-case basis with a strong preference for not permitting changes after the freeze.</p>"},{"location":"Go-Release-Cycle/#historical-note","title":"Historical note","text":"<p>A version of this schedule, with a shorter development window, was originally adopted for the Go 1.7 release in 2016. After years of difficult releases, testing and process improvements in 2022 and 2023 led to a timely 1.19 release. For 1.20, the development window was expanded with a late freeze and early thaw. These changes were formalized for the 1.21 release. We anticipate continuing to ship on time.</p>"},{"location":"Go123Timer/","title":"Go 1.23 Timer Channel Changes","text":"<p>Go 1.23 includes a new implementation of the channel-based timers created by time.NewTimer, time.After, time.NewTicker, and time.Tick.</p> <p>The new implementation makes two important changes:</p> <ol> <li> <p>Unstopped timers and tickers that are no longer referenced can be garbage collected.     Before Go 1.23, unstopped timers could not be garbage collected until the timer went off,     and unstopped tickers could never be garbage collected.     The Go 1.23 implementation avoids resource leaks in programs that don't use <code>t.Stop</code>.</p> </li> <li> <p>Timer channels are now synchronous (unbuffered), giving the <code>t.Reset</code> and <code>t.Stop</code>     methods a stronger guarantee: after one of those methods returns, no future receive from the     timer channel will observe a stale time value corresponding to the old timer     configuration. Before Go 1.23, it was impossible to avoid stale values with <code>t.Reset</code>,     and avoiding stale values with <code>t.Stop</code> required careful use of the return value from <code>t.Stop</code>.     The Go 1.23 implementation removes this concern entirely.</p> </li> </ol> <p>The implementation changes have two observable side effects that may affect production behavior or tests, described in the following sections.</p> <p>The new implementation is only used in programs where package main is in a module with a <code>go.mod</code> declaring <code>go 1.23</code> or later. Other programs continue to use the old semantics. The GODEBUG setting <code>asynctimerchan=1</code> forces the old semantics; conversely, <code>asynctimerchan=0</code> forces the new semantics.</p>"},{"location":"Go123Timer/#cap-and-len","title":"Cap and Len","text":"<p>Before Go 1.23, the <code>cap</code> of a timer channel was 1, and the <code>len</code> of a timer channel indicated whether a value was waiting to be received (1 if so, 0 if not). The Go 1.23 implementation creates timer channels with <code>cap</code> and <code>len</code> always 0.</p> <p>In general, using <code>len</code> to poll any channel is usually not helpful, since another goroutine may receive from the channel concurrently, invalidating the result of <code>len</code> at any time. Code that polls a timer channel using <code>len</code> should instead use a non-blocking select.</p> <p>That is, code that does:</p> <pre><code>if len(t.C) == 1 {\n    &lt;-t.C\n    more code\n}\n</code></pre> <p>should instead do:</p> <pre><code>select {\ndefault:\ncase &lt;-t.C:\n    more code\n}\n</code></pre>"},{"location":"Go123Timer/#select-races","title":"Select Races","text":"<p>Before Go 1.23, a timer created with a very short interval, like 0ns or 1ns, would take significantly longer than that interval to make its channel ready for receiving, due to scheduling delays. That delay can be observed in code that selects between a channel that is ready before the select and a newly created timer with a very short timeout:</p> <pre><code>c := make(chan bool)\nclose(c)\n\nselect {\ncase &lt;-c:\n    println(\"done\")\ncase &lt;-time.After(1*time.Nanosecond):\n    println(\"timeout\")\n}\n</code></pre> <p>By the time the select arguments are evaluated and select looks at the channels involved, the timer should have expired, meaning that both cases are ready to proceed. Select chooses between multiple ready cases by choosing one randomly, so this program should select each case about half the time.</p> <p>Due to the scheduling delays in the timer implementation before Go 1.23, programs like this incorrectly executed the \u201cdone\u201d case 100% of the time.</p> <p>The Go 1.23 timer implementation is not affected by the same scheduling delays, so in Go 1.23, that program executes each case about half the time.</p> <p>During testing of Go 1.23 in Google's code base, we found a handful of tests that used select to race channels ready to proceed (often context <code>Done</code> channels) against timers with very low timeouts. Usually, the production code would use a real timeout, in which case the race is uninteresting, but for testing the timeout would be set to something very small. And then the test would insist on the non-timeout case executing, failing if the timeout was reached. A reduced example might look like:</p> <pre><code>select {\ncase &lt;-ctx.Done():\n    return nil\ncase &lt;-time.After(timeout):\n    return errors.New(\"timeout\")\n}\n</code></pre> <p>Then the test would call this code with <code>timeout</code> set to 1ns and fail if the code returned an error.</p> <p>To fix a test like this, either the caller can be changed to understand that timeouts are possible, or the code can be changed to prefer the done channel even in the timeout case, like this:</p> <pre><code>select {\ncase &lt;-ctx.Done():\n    return nil\ncase &lt;-time.After(timeout):\n    // Double-check that Done is not ready,\n    // in case of short timeout during test.\n    select {\n    default:\n    case &lt;-ctx.Done():\n        return nil\n    }\n    return errors.New(\"timeout\")\n}\n</code></pre>"},{"location":"Go123Timer/#debugging","title":"Debugging","text":"<p>If a program or test fails using Go 1.23 but worked using Go 1.22, the <code>asynctimerchan</code> GODEBUG setting can be used to check whether the new timer implementation triggers the failure:</p> <pre><code>GODEBUG=asynctimerchan=0 mytest  # force Go 1.23 timers\nGODEBUG=asynctimerchan=1 mytest  # force Go 1.22 timers\n</code></pre> <p>If the program or test consistently passes using Go 1.22 but consistently fails using Go 1.23, that is a strong sign that the problem is related to timers.</p> <p>In all the test failures we have observed, the problem has been in the test itself, not the timer implementation, so the next step is to identify exactly which code in <code>mytest</code> depends on the old implementation. To do that, you can use the <code>bisect</code> tool:</p> <pre><code>go install golang.org/x/tools/cmd/bisect@latest\nbisect -godebug asynctimerchan=1 mytest\n</code></pre> <p>Invoked this way, <code>bisect</code> runs mytest repeatedly, toggling the new timer implementation on and off depending on the stack trace leading to the timer call. Using binary search, it narrows down an induced failure to enabling the new timers during specific stack traces, which it reports. While <code>bisect</code> runs, it prints status messages about its trials, mainly so that when the test is slow you know it is still running.</p> <p>An example <code>bisect</code> run looks like:</p> <pre><code>$ bisect -godebug asynctimerchan=1 ./view.test\nbisect: checking target with all changes disabled\nbisect: run: GODEBUG=asynctimerchan=1#n ./view.test... FAIL (7 matches)\nbisect: run: GODEBUG=asynctimerchan=1#n ./view.test... FAIL (7 matches)\nbisect: checking target with all changes enabled\nbisect: run: GODEBUG=asynctimerchan=1#y ./view.test... ok (7 matches)\nbisect: run: GODEBUG=asynctimerchan=1#y ./view.test... ok (7 matches)\nbisect: target fails with no changes, succeeds with all changes\nbisect: searching for minimal set of disabled changes causing failure\nbisect: run: GODEBUG=asynctimerchan=1#!+0 ./view.test... FAIL (3 matches)\nbisect: run: GODEBUG=asynctimerchan=1#!+0 ./view.test... FAIL (3 matches)\nbisect: run: GODEBUG=asynctimerchan=1#!+00 ./view.test... ok (1 matches)\nbisect: run: GODEBUG=asynctimerchan=1#!+00 ./view.test... ok (1 matches)\nbisect: run: GODEBUG=asynctimerchan=1#!+10 ./view.test... FAIL (2 matches)\nbisect: run: GODEBUG=asynctimerchan=1#!+10 ./view.test... FAIL (2 matches)\nbisect: run: GODEBUG=asynctimerchan=1#!+0010 ./view.test... ok (1 matches)\nbisect: run: GODEBUG=asynctimerchan=1#!+0010 ./view.test... ok (1 matches)\nbisect: run: GODEBUG=asynctimerchan=1#!+1010 ./view.test... FAIL (1 matches)\nbisect: run: GODEBUG=asynctimerchan=1#!+1010 ./view.test... FAIL (1 matches)\nbisect: confirming failing change set\nbisect: run: GODEBUG=asynctimerchan=1#v!+x65a ./view.test... FAIL (1 matches)\nbisect: run: GODEBUG=asynctimerchan=1#v!+x65a ./view.test... FAIL (1 matches)\nbisect: FOUND failing change set\n--- change set #1 (disabling changes causes failure)\ninternal/godebug.(*Setting).Value()\n    go/src/internal/godebug/godebug.go:165\ntime.syncTimer()\n    go/src/time/sleep.go:25\ntime.NewTimer()\n    go/src/time/sleep.go:144\ntime.After()\n    go/src/time/sleep.go:202\nregion_dash/regionlist.(*Cache).Top()\n    region_dash/regionlist/regionlist.go:89\nregion_dash/view.(*Page).ServeHTTP()\n    region_dash/view/view.go:45\nregion_dash/view.TestServeHTTPStatus.(*Router).Handler.func2()\n    httprouter/httprouter/params_go17.go:27\nhttprouter/httprouter.(*Router).ServeHTTP()\n    httprouter/httprouter/router.go:339\nregion_dash/view.TestServeHTTPStatus.func1()\n    region_dash/view/view.test.go:105\ntesting.tRunner()\n    go/src/testing/testing.go:1689\nruntime.goexit()\n    go/src/runtime/asm_amd64.s:1695\n\n---\nbisect: checking for more failures\nbisect: run: GODEBUG=asynctimerchan=1#!-x65a ./view.test... ok (6 matches)\nbisect: run: GODEBUG=asynctimerchan=1#!-x65a ./view.test... ok (6 matches)\nbisect: target succeeds with all remaining changes disabled\n</code></pre> <p>In this case, the stack trace makes clear exactly which call to <code>time.After</code> causes a failure when using the new timers.</p>"},{"location":"Go2/","title":"Go2 status","text":"<p>This page tracks the status of \"Go 2\".</p> <p>We are currently seeking feedback on potential designs for improved error handling, error values, and generics:</p> <ul> <li>Announcement of Go2 Draft Designs</li> <li>Go2 Error Handling, Generics, and Error Values</li> </ul>"},{"location":"Go2/#bugs","title":"Bugs","text":"<ul> <li>Open Go2 bugs</li> </ul>"},{"location":"Go2/#talks","title":"Talks","text":"<ul> <li>GopherCon 2017: Russ Cox - The Future of Go </li> <li>GopherCon Russia 2018: Brad Fitzpatrick - Go: Looking back and looking forward (Go2 stuff is at about 20 minutes in)</li> <li>Sydney Golang Meetup - Rob Pike - Go 2 Draft Specifications</li> </ul>"},{"location":"Go2/#scope","title":"Scope","text":"<p>From talk above:</p> <ul> <li>\"maybe three major changes\"</li> <li>plus minor housekeep tasks</li> <li>TBD</li> </ul> <p>Examples of major changes:</p> <ul> <li>versioning</li> <li>generics?</li> <li>simplified, improved error handling?</li> <li>\u2026</li> </ul> <p>Examples of housekeeping:</p> <ul> <li>Open Go2Cleanup bugs (please don't add this label to things without discussion)</li> </ul>"},{"location":"Go2/#compatibility","title":"Compatibility","text":"<p>We do not want to break the ecosystem. Go 1 and Go 2 code must be able to interoperate in programs with ease.</p>"},{"location":"Go2/#standard-library","title":"Standard library","text":"<p>The standard library would probably be versioned and permit out-of-cycle updates, but be included with Go releases. Maybe \"encoding/foo\" become shorthand for \"golang.org/x/std/encoding/foo\". TBD. Some package would probably get v2 major versions, but the v1 versions would be minimally maintained, at least for security.</p>"},{"location":"Go2/#roadmap","title":"Roadmap","text":"<p>TBD</p>"},{"location":"Go2ErrorHandlingFeedback/","title":"Go2ErrorHandlingFeedback","text":""},{"location":"Go2ErrorHandlingFeedback/#feedback-re-go-2-error-handling-draft-design","title":"Feedback re Go 2 Error Handling Draft Design","text":"<p>This page is meant to collect and organize feedback and discussion  started with the Go 2 error handling draft design.</p> <p>Please post feedback on your blog, Medium, GitHub Gists, mailing lists, Google Docs, etc. And then please link it here.</p> <p>Please help categorize the rest of the uncategorized proposals at the bottom.</p> <p>Update, June 19, 2019 \u2013 Based on this feedback we have posted a proposal for a try builtin, which produced significant feedback on #32437 (threaded view here). </p> <p>We've disabled comments on that issue until July 1 to give people time to experiment in their own code. We would very much like to see experience reports about using the general try approach in your own code, including trial conversions with tryhard. Thanks!</p>"},{"location":"Go2ErrorHandlingFeedback/#experience-with-the-try-proposal","title":"Experience with the \u201ctry proposal\u201d","text":"<p>Add to this list:</p> <ul> <li>TEMPLATE: Your Name, \u201cTitle\u201d, Month YYYY</li> </ul>"},{"location":"Go2ErrorHandlingFeedback/#requirements","title":"Requirements","text":"<p>Discussions of the requirements for a new error handling method.</p> <ul> <li> <p>Warren Stephens, \"Go 2 <code>handle</code> should provide line number, source filename, version\", December 2018</p> </li> <li> <p>Liam Breck, \u201cRequirements to Consider for Go 2 Error Handling\u201d, September 2018</p> </li> <li> <p>jimmyfrasche, \"Don't special case error or nil\", September 2018</p> </li> <li> <p>Matt Dee \"Error Handling Should Support Custom Error Types\", August 2018</p> </li> <li> <p>Ian Lance Taylor, \u201cIncomplete list of criteria\u201d from GitHub proposal discussion, May 2018</p> </li> <li> <p>Rob Pike (posted by @matjam) \u201cSimplicity is Complicated\u201d, December 2015</p> </li> </ul>"},{"location":"Go2ErrorHandlingFeedback/#in-support","title":"In support","text":"<p>This includes supporting the existing chaining/stacking of handlers without changes.</p> <ul> <li> <p>Tokyo Gophers, \"In support comments from Go 2 feedback event\", October 2018</p> </li> <li> <p>Adam Bouhenguel \"In support of more declarative error handling\", August 2018</p> </li> <li> <p>Daniel Theophanes, \"Go 2 Design: Error Handling Net Win\", August 2018</p> </li> <li> <p>Alexandru-Paul Copil, \"In Support, with slight modifications and considerations\", September 2021</p> </li> </ul>"},{"location":"Go2ErrorHandlingFeedback/#example-code","title":"Example code","text":"<p>Code changed to use the existing proposal.</p> <ul> <li> <p>Daniel Milde, \"Use check-handle draft syntax in gdu\", May 2021</p> </li> <li> <p>Mateusz Czapli\u0144ski, \"Converting a fragment of real code with error handling to Go 2 'design draft'\", August 2018</p> </li> <li> <p>Blake Mizerany, \u201cHow best to account for partial writes when using check/handle?\u201d, August 2018</p> </li> </ul>"},{"location":"Go2ErrorHandlingFeedback/#against","title":"Against","text":"<p>Critiques without counter-proposals</p> <ul> <li> <p>Pasha Osipyants, \u201cError handling mechanism using current go possibilities\u201d, February 2019</p> </li> <li> <p>Anonymous, \u201cGo 2 Error Handling Non-Proposal\u201d, October 2018</p> </li> <li> <p>Stripe developers, \u201cFeedback on Go 2 draft designs\u201d, October 2018</p> </li> <li> <p>Tokyo Gophers, \"Against comments from Go 2 feedback event\", Oct 2018</p> </li> <li> <p>Liam Breck, \u201cGolang, How dare you handle my checks!\u201d, September 2018</p> </li> <li> <p>Nate Finch, \"Handle and Check, Let's Not\", September 2018</p> </li> <li> <p>Jozef Slezak, \"Use semicolons instead of new keywords: check+handle\", September 2018</p> </li> <li> <p>Shannon Wynter \"Error Handling as it can already be done\", August 2018</p> </li> </ul>"},{"location":"Go2ErrorHandlingFeedback/#recurring-themes","title":"Recurring themes","text":"<p>Concepts that appear repeatedly among the suggestions below.</p> <ul> <li> <p>Invoke handler via assignment, e.g. <code>v, ? := f()</code>   references:   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,   11,   12,   13,   14</p> </li> <li> <p>Invoke one of several handlers by name, e.g. <code>v := check f() ? name</code>   references:   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,   11,   12,   13,   14,   15,   16,   17</p> </li> </ul>"},{"location":"Go2ErrorHandlingFeedback/#modest-revisions","title":"Modest revisions","text":"<ul> <li> <p>Leidong Liu, \"a, b, !checkError := Sub(\u2026)\", Nov 2019</p> </li> <li> <p>Jin Feng, \"[A simplified Go 2 error handling solution with no handler], (https://gist.github.com/jfeng45/416d4ecb42a4df50bebf86ce1c41c668)\", July 2019</p> </li> <li> <p>Dave Arnold, \"Move special check keyword to left-hand side of assignment\", April 2019</p> </li> <li> <p>Rockmen, \"Add handle and ? as syntax sugar maybe\", December 2018</p> </li> <li> <p>Steve Manuel, \"Go 2 <code>handle</code> statement to optionally use a type switch\", October 2018</p> </li> <li> <p>Zlatko Bratkovic, \"In support with tiny change\", October 2018</p> </li> <li> <p>DeedleFake, \"Possible Solution to <code>check</code> Awkwardness with Chained Method Calls\", September 2018</p> </li> <li> <p>Yesuu Zhang, \"Pass the check and handle parameters, custom handle\", September 2018</p> </li> <li> <p>Viktor Kojouharov, \"Reducing the special casing around the new error design draft\", September 2018</p> </li> <li> <p>Aleksei Pavliukov, \u201cUse a function as a handle parameter\u201d, September 2018</p> </li> <li> <p>Savino Pio Liguori, \"Feedback for Go2 error handling design\", August 2018</p> </li> <li> <p>Jeffrey Koehler, \"In support of Handle Chaining;  On Check\", August 2018</p> </li> <li> <p>Garrus, \"Another style of syntactic sugar on error handling\", August 2018</p> </li> <li> <p>Paul Borman, \"Arguments against the Go 2 error handling proposal\", August 2018</p> </li> <li> <p>krhubert, \"Error default handler for tests\", May 2019</p> </li> <li> <p>Franz, Implement error handling like an invariant check of a variable. when the value changes, a function is called. this can then be used in other situations too. </p> </li> <li> <p>Brandon Heenan, \"Concise, with more obvious control flow\", May 2021</p> </li> </ul>"},{"location":"Go2ErrorHandlingFeedback/#remove-handler-chaining","title":"Remove handler chaining","text":"<ul> <li> <p>Markus Heukelom, \"proposal: Improve error handing using <code>guard</code> and <code>must</code> keywords\", April 2019</p> </li> <li> <p>Alessandro Arzilli, \u201cAgainst check as an operator and handler chains\u201d, August 2018</p> </li> <li> <p>Simon Howard, \u201cGo 2 errors response: One Handler Per Function\u201d, August 2018</p> </li> <li> <p>Eli Bendersky, \"Thoughts on the Go 2 Error Handling proposal\", September 2018</p> </li> <li> <p>Yoshiki Shibukawa, \"Every handles should have return statement\", September 2018</p> </li> </ul>"},{"location":"Go2ErrorHandlingFeedback/#counter-proposals","title":"Counter-proposals","text":""},{"location":"Go2ErrorHandlingFeedback/#error-handling-with-normal-functions","title":"Error handling with normal functions","text":"<ul> <li> <p>Azamat Kalberdiev, \u201cHandling every error with intuitive code\u201d, March 2021</p> </li> <li> <p>Andrew Phillips, \u201cUse closures rather than handlers\u201d, October 2018</p> </li> <li> <p>Taihei Morikuni, \"Use functions as an error handler, Add syntactic sugar to remove duplicated if statement\", September 2018</p> </li> <li> <p>Scott Pakin, \"Go 2 error handling based on non-local returns\", September 2018</p> </li> <li> <p>Greg Weber \"Error handling with functions and an error return?\", September 2018. Originally linked gist.</p> </li> <li> <p>Gigi Sayfan, \u201cGo 2 error handling feedback + alternative solution\", September 2018</p> </li> <li> <p>Ruan Kunliang, \"Simple Error Handling for Go 2\", August 2018</p> </li> <li> <p>Martin Rode, \"The return of the return, Error Handling for Go 2\", November 2018</p> </li> </ul>"},{"location":"Go2ErrorHandlingFeedback/#labeled-error-handlers","title":"Labeled error handlers","text":"<ul> <li> <p>Joe Lapp, \"Local-only throw-catch error handling\", October 2021</p> </li> <li> <p>Danijel Premus, \"Use existing go labels\", December 2018</p> </li> <li> <p>Burak Serdar, \"Handler for err declares both err and errHandler, less intrusive labeled error handling\", October 2018</p> </li> <li> <p>John Forstmeier, \"Labeled error handling\", September 2018</p> </li> <li> <p>Mika\u00ebl Cluseau, \"Multiple handlers, unambiguous on which return value is used\", September 2018</p> </li> <li> <p>Kiura Magomadov, \u201cAddition to Go2 draft error handling\", September 2018</p> </li> <li> <p>Liam Breck, \u201cThe <code>#id/catch</code> Error Model\u201d, September 2018</p> </li> <li> <p>Marlon Che, \"How about separating check and handle?\", August 2018</p> </li> </ul>"},{"location":"Go2ErrorHandlingFeedback/#inlining","title":"Inlining","text":"<ul> <li> <p>Patrick Kelly, \"handling more than just errors in go\", August 2018</p> </li> <li> <p>Vlad Didenko, \u201cError Handling with <code>grab | name()</code>\u201d, November 2017</p> </li> <li> <p>Gooid, \u201cInline style error handle(simple unambiguous)\u201d, August 2018</p> </li> </ul>"},{"location":"Go2ErrorHandlingFeedback/#use-defer","title":"Use defer","text":"<ul> <li> <p>Victoria Raymond, \u201cForce 'check' to return error instead of allowing customized logic\u201d, August 2018</p> </li> <li> <p>Night-walker and daokoder, \"Extend and repurpose defer instead of introducing new syntax\", June 2014</p> </li> </ul>"},{"location":"Go2ErrorHandlingFeedback/#trycatchfinally-syntax","title":"try/catch/finally syntax","text":"<ul> <li> <p>Mathieu Devos, \"Go2 Error Handling Proposal: Scoped Check/Handle\", August 2018</p> </li> <li> <p>Rust RFC, \u201cTrait-Based Exception Handling (wherein <code>catch</code> is akin to <code>try</code>)\u201d, February 2016</p> </li> <li> <p>ZhiFeng Hu, \"[Go2ErrorHandling] Go should support Exception handler\", August 2018</p> </li> <li> <p>Jan Semmelink, \u201cif-else-undo-done\u201d, August 2018</p> </li> <li> <p>Vladimir Utoplov, \"Handling throws/throw idiom\", September 2018</p> </li> <li> <p>Gokan EKINCI, \"try-with-resources\", December 2018</p> </li> </ul>"},{"location":"Go2ErrorHandlingFeedback/#other-possibilities","title":"Other possibilities","text":"<ul> <li> <p>Alex Hornbake, \"refuse. conditional return keyword\", June 2019</p> </li> <li> <p>yaxinlx, \"Use ? as suffix to remove the last error value from multi-value tuples\", March 2019</p> </li> <li> <p>Plamen Stoev, \"Go 2 block-level checks\", November 2018</p> </li> <li> <p>Peter Goetz, \"Formalize and Enforce Error Handling\", September 2017</p> </li> <li> <p>Fedir RYKHTIK, \"Go 2 error handling with exclamation mark\", September 2018</p> </li> <li> <p>Einthusan Vigneswaran, \u201cError Aware Keywords - return, defer, if, != and forcing the error object to be the last argument\u201d, September 2018</p> </li> <li> <p>Andrew Phillips, \u201cImproving Go Error Handling\u201d, October 2017</p> </li> </ul>"},{"location":"Go2ErrorHandlingFeedback/#uncategorized","title":"Uncategorized","text":"<p>Please help categorize the rest of the proposals here.</p> <ul> <li> <p>Joe Lapp, \"<code>on...return</code> for error handling\", Oct 2021</p> </li> <li> <p>Andrew Gwozdziewycz, \"Check for Go Errors\", June 2019 </p> </li> <li> <p>DeedleFake, \"Feedback for Go 2 Design Drafts\", August 2018</p> </li> <li> <p>Loki Verloren, \u201cGo 2 error handling feedback and my thoughts on how to improve programmer's efficiency and experience\u201d, September 2018</p> </li> <li> <p>Gima, \"Procedural code, separate error handling\", June 2018</p> </li> <li> <p>Konstantin, \"error handling for error-tree\", Discussion May 2019</p> </li> </ul>"},{"location":"Go2ErrorHandlingFeedback/#adding-your-feedback","title":"Adding your feedback","text":"<p>Please format all entries as below.</p> <ul> <li>Your Name, \u201cTitle\u201d, month year</li> </ul> <p>To make it easier to see new feedback, please add your new proposal to the top of the section it is placed in.</p>"},{"location":"Go2ErrorValuesFeedback/","title":"Go 2 Error Values Feedback","text":"<p>This page is meant to collect and organize feedback about the Go 2 error values draft designs.</p> <p>Please post feedback on your blog, Medium, GitHub Gists, mailing lists, Google Docs, etc. And then please link it here.</p> <p>As the amount of feedback grows, please feel free to organize this page by specific kind of feedback.</p>"},{"location":"Go2ErrorValuesFeedback/#further-background","title":"Further Background","text":"<ul> <li>Ben Johnson, \"Failure is Your Domain\", June 2018</li> </ul>"},{"location":"Go2ErrorValuesFeedback/#draft-implementation","title":"Draft Implementation","text":"<ul> <li> <p>Go Team, \u201cx/exp/errors\u201d, November 2018</p> </li> <li> <p>Torben Schinke, \u201cImplementation of the draft design\u201d, December 2018</p> </li> </ul>"},{"location":"Go2ErrorValuesFeedback/#error-inspection","title":"Error Inspection","text":"<ul> <li>Ilya Sinelnikov, \"<code>Is</code> and <code>As</code> differ in behavior which is unexpected\", December 2018</li> <li>Roger Peppe, \"Some thoughts about the draft Go error inspection design\", November 2018</li> <li>Greg Weber, \u201cHorizontal composition: Error inspection for groups\u201d, September 2018<ul> <li>Eyal Posener, \"Reply\", September 2018 </li> </ul> </li> <li>K. Alex mills, \"Rename Wrapper to Unwrapper\", September 2018</li> <li>jimmy frasche, \"Why limit this inspection to errors?\", August 2018</li> <li>Dan Kortschak, Carrying contract expectations and values causing errors in ev3go, August 2018</li> <li>Daniel Theophanes, \"Go 2 Design: Error Inspection with Error Lists, August 2018</li> <li>Cosmos Nicolaou \"Inspection of errors in a different address space\", September 2018</li> <li>Chris Siebenmann, \"Error inspection improves current annoyances but may not go far enough\", September 2018</li> <li>Paul Meyer, \u201c[errors.New?]( - Your Name, \u201cTitle\u201d, August 2018</li> <li>Vojtech Vitek \"adopt Cause and Wrap from github.com/pkg/errors\", May 2018</li> <li>Andrew Wilkins \"Programmatic Frame inspection\", January 2019</li> <li>Carl Johnson, \"<code>As()</code> and <code>Is()</code> are useful for optional interfaces beyond error, Feb. 2019</li> <li>ques0942, \"xerrors has less feature about trace's detail\", Mar. 2019</li> <li>Your Name, \u201cTitle\u201d, month year</li> <li>etc.</li> </ul>"},{"location":"Go2ErrorValuesFeedback/#error-printing","title":"Error Printing","text":"<ul> <li>Calle Pettersson, Multi-line errors and log collection tools\u201d, August 2018</li> <li>jimmy frasche, \"Why limit these interfaces to errors?\" , August 2018</li> <li>Chris Hines, \u201cTypes cannot implement both the errors.Formatter and fmt.Formatter interfaces \u201d, August 2018</li> <li>Dean Bassett, \u201cMake errors.Detailer, not errors.Formatter\u201d, September 2018</li> <li>Bryan C. Mills, \u201cError Wrapping and Redundancy in Go\u201d, September 2019</li> <li>Your Name, \u201cTitle\u201d, month year</li> <li>etc.</li> </ul>"},{"location":"Go2ErrorValuesFeedback/#misc","title":"Misc","text":"<ul> <li>TJ Holowaychuk, Structured access for structured logging, April, 2019</li> <li>Andrew Chambers, My current error approach, August, 2018</li> <li>mikioh, A walkthrough on Error Values for issue 18183, October, 2018</li> </ul>"},{"location":"Go2ErrorValuesFeedback/#against-any-change-at-all","title":"Against Any Change At All","text":"<ul> <li>Rob Pike - Simplicity is Complicated, December 2015</li> </ul>"},{"location":"Go2GenericsFeedback/","title":"Go 2 Generics Feedback","text":"<p>This page is meant to collect and organize feedback about the Go 2 contracts (generics) draft design.</p> <p>A prototype implementation of the syntax can be found in https://go.dev/cl/149638 which may be patched on tip of the Go repo.</p> <p>Please post feedback on your blog, Medium, GitHub Gists, mailing lists, Google Docs, etc. And then please link it here.</p> <p>As the amount of feedback grows, please feel free to organize or reorganize this page by specific kind of feedback.</p>"},{"location":"Go2GenericsFeedback/#supporting","title":"Supporting","text":"<ul> <li> <p>Roger Peppe, \"Go contracts use case: generic mgo\", September 2018</p> </li> <li> <p>Richard Fliam, \"Go2 Generics Let You Construct the Natural Numbers\", August 2018</p> </li> <li> <p>Roger Peppe, \"Go generics at runtime\", Part 1, Part 2, September 2018</p> </li> </ul>"},{"location":"Go2GenericsFeedback/#supplemental-supporting-with-modifications","title":"Supplemental (supporting with modifications)","text":"<ul> <li> <p>Matt McCullough, \"Towards Clarity: Syntax Changes for Contracts in Go\" and \"Angle Brace Delimiters for Go Contracts\", May 2020</p> </li> <li> <p>Gert Cuykens, \"Complete separation of generic syntax form regular Go code\", Januari 2020</p> </li> <li> <p>Court Fowler, \"Thoughts from a lazy programmer on the updated design\", September 2019</p> </li> <li> <p>Andrew Phillips, \"Example Types as Contracts\", August 2019</p> </li> <li> <p>Alexey Nezhdanov, \"A syntax simplification proposal\", August 2019</p> </li> <li> <p>Bryan Ford, \"Are Only Type Parameters Generic Enough for Go 2 Generics?\", July 2019</p> </li> <li> <p>Tom Levy, \"Go 2 Generics Feedback\", June 2019</p> </li> <li> <p>Ole Bulbuk, \"Why Go Contracts Are A Bad Idea In The Light Of A Changing Go Community\", April 2019</p> </li> <li> <p>Tony Mottaz, \"Go generic types and import injection\", March 2019</p> </li> <li> <p>Gustavo Bittencourt, \"Contracts only for Generic Types\", March 2019</p> </li> <li> <p>David Heuschmann, \"Problems With Using Parentheses for Type Argument Lists\", February 2019</p> </li> <li> <p>Gustavo Bittencourt, \"Contract with methods\", February 2019</p> </li> <li> <p>Chris Siebenmann, \"Go 2 Generics: Contracts are too clever\", November 2018</p> </li> <li> <p>Chris Siebenmann, \"Go 2 Generics: A way to make contracts more readable for people\", November 2018</p> </li> <li> <p>Chris Siebenmann, \"Go 2 Generics: Interfaces are not the right model for type constraints\", November 2018</p> </li> <li> <p>alanfo, \"Proposed changes to the Go draft generics design in the light of feedback received\", October 2018</p> </li> <li> <p>Andy Balholm \"Enumerated and structural contracts\", October 2018</p> </li> <li> <p>Burak Serdar \"Types are contracts\", October 2018</p> </li> <li> <p>Patrick Smith, \"Go generics for built-in and user-defined type parameters\", September 2018</p> </li> <li> <p>Jacob Carlborg, \"Go 2 draft D corrections\", September 2018</p> </li> <li> <p>alanfo, \"A simplified generics constraint system\", September 2018</p> </li> <li> <p>Paul Borman, \"Simplifying syntax\", September 2018</p> </li> <li> <p>mrwhythat, \"Go 2 generics draft notes\", September 2018</p> </li> <li> <p>Roger Peppe, \"Operator overloading\", September 2018</p> </li> <li> <p>Peter McKenzie, \"Alternative generics syntax\", September 2018</p> </li> <li> <p>Ted Singer, \"The design goal for syntax is to help humans read\", September 2018</p> </li> <li> <p>alanfo, \"Suggested amendment to Go 2 generics draft design\", September 2018</p> </li> <li> <p>Dean Bassett, \"If we're going to use contracts, allow unary + on string, September 2018\"</p> </li> <li> <p>Kevin Gillette, \"Regarding the Go 2 Generics Draft\", September 2018</p> </li> <li> <p>jimmy frasche, \"Embedding of type parameters should not be allowed\", August 2018</p> </li> <li> <p>Javier Zunzunegui, \"Compiling Generics\", August 2018</p> </li> <li> <p>Liam Breck, \u201cPlease Don't Mangle the Function Signature\u201d, August 2018</p> </li> <li> <p>DeedleFake, \"Feedback for Go 2 Design Drafts\", August 2018</p> </li> <li> <p>Roberto (empijei) Clapis, \"Hard to read syntax\", August 2018</p> </li> <li> <p>Dominik Honnef, \"My thoughts on the Go Generics Draft\", August 2018</p> </li> </ul>"},{"location":"Go2GenericsFeedback/#counterproposals","title":"Counterproposals","text":"<ul> <li> <p>dotaheor, \"Declare generics as mini-packages with generic parameters\", August 2020</p> </li> <li> <p>Beoran, \"Hygienic Macros\", June 2019</p> </li> <li> <p>Randy O'Reilly, \"Generic Native Types\", June 2019</p> </li> <li> <p>Michal \u0160trba, \"Giving up restricting types\", May 2019</p> </li> <li> <p>Eric Miller, \"Simple generics using const struct fields\", March 2019</p> </li> <li> <p>dotaheor, \"A solution to unify Go builtin and custom generics\", February 2019</p> </li> <li> <p>Quentin Quaadgras, No syntax changes, 1 new type, 1 new builtin, December 2018</p> </li> <li> <p>Andy Balholm, \"Contracts and Adaptors\", November 2018</p> </li> <li> <p>Dean Bassett, \"Contract embedding\", October 2018</p> </li> <li> <p>Patrick Smith, \"Go Generics with Adaptors\", October 2018</p> </li> <li> <p>Ian Denhardt, \"Go Generics: A Concrete Proposal Re: Using Interfaces Instead Of Contracts.\", October 2018</p> </li> <li> <p>Arendtio \"Generics in Go inspired by Interfaces\", September 2018</p> </li> <li> <p>Scott Cotton, \"Draft Proposal Modification for Unifying Contracts and Interfaces\" (diff), September 2018</p> </li> <li> <p>ohir, \"CGG, Craftsman Go Generics\", September 2018</p> </li> <li> <p>Dean Bassett, \"Using interfaces instead of contracts\", September 2018 I have made a second proposal (\"contract embedding\") listed further down that solves the issues with this one</p> </li> <li> <p>dotaheor, \"Combine contract and code together and view generic as compile-time calls with multiple outputs\", September 2018. (Updated from time to time)</p> </li> <li> <p>Aleksei Pavliukov, \"Extend type and func keywords\", September 2018</p> </li> <li> <p>Han Tuo, \"Generic as a kind of types \u2013 type T generic {int, float64}\", September 2018</p> </li> <li> <p>Nate Finch, \"Go2 Contracts Go Too Far\", September 2018</p> </li> <li> <p>Roger Peppe, \"Go Contracts as type structs\", September 2018</p> </li> <li> <p>Axel Wagner, \"Scrapping contracts\", September 2018</p> </li> <li> <p>Matt Sherman \"Generics as built-in typeclasses\", September 2018</p> </li> <li> <p>Roger Peppe, \"Revised generics proposal\", September 2018</p> </li> <li> <p>Steven Blenkinsop, \u201cResponse to the Go2 Contracts Draft Design \u2013 Auxiliary Types\u201d, September 2018</p> </li> <li> <p>Dave Cheney, \"Maybe adding generics to Go IS about syntax after all\", September 2018</p> </li> <li> <p>Christian Surlykke, \"Constraints for Go Generics, September 2018\"</p> </li> <li> <p>Some Gophers on go-nuts, \u201cUnifying Interfaces and Contracts\u201d, August 2018</p> </li> <li> <p>Roger Peppe, \"Go generics feedback, August 2018</p> </li> <li> <p>Ruan Kunliang, \"Package level generics\", August 2018</p> </li> <li> <p>Emily Maier, \"Getting specific about generics\", August 2018</p> </li> </ul>"},{"location":"Go2GenericsFeedback/#against","title":"Against","text":"<ul> <li> <p>Tokyo Gophers, \"Comments from Go 2 draft design feedback event\", October 2018</p> </li> <li> <p>Jason Moiron, \"Notes on the Go2 Generics Draft\", September 2018</p> </li> <li> <p>Yoshiki Shibukawa, \"Feedback for generics/contract proposals, September 2018\"</p> </li> </ul>"},{"location":"Go2GenericsFeedback/#adding-your-feedback","title":"Adding Your Feedback","text":"<p>Please format all entries as below.</p> <ul> <li>Your Name, \u201cTitle\u201d, month year</li> </ul> <p>To make it easier to see new feedback. Please make a Gist. And also help to keep the list sorted in reverse-chronological order by including your new entry at the top of the category list.</p>"},{"location":"Go2GenericsFeedback/#quick-comments","title":"Quick comments","text":"<ul> <li> <p>Chester Gould: The only problem with this proposal is that explicit contracts seem to only make the code more verbose which is against the goal of simple readable code. Instead of writing explicit contracts, using the actual code we write as a kind of \"implicit contract\" would be much more simple and elegant. An example of this is shown here. I acknowledge that this is addressed here, but I disagree that explicit contracts are the solution to problem. It seems to me that contracts are very close to what interfaces provide and so the behaviour of interfaces should be extended to allow behaviour closer to contracts rather than adding an entire new type of statement to the language.</p> </li> <li> <p>Izaak Weiss: A lot of the discussion has focused specifically on how to implement contracts, or something like that. However, most of the \"useful examples\" don't require contracts; they only require parametric polymorphism. Writing a typesafe <code>Merge</code> or <code>SortSlice</code> is possible without contracts. And for the simpler contracts, we can implement them via higher order functions. A generic hashmap can be parametric over a type with a <code>Hash</code> method, or it can take a <code>func(K) int64</code> when it is constructed, and use that to hash its keys. If more functions are required, structs holding these functions can be declared as pseudo-contracts, and then those can be passed to the generic function. This makes Go's polymorphism simple, explicit, and leaves room for further innovation regarding contracts or other mechanisms in the future, while allowing most of the benefits of generic types to be realized right now.</p> </li> <li> <p>Christoph Hack: I just watched Alexandrescu's last talk The next big Thing. He states \"Concepts are a waste of time\" and proposes a completely different, far more powerful, direction (even in comparison to everything possible in C++ today). Go already has most required features, like reflection and testing if a type implements an optional interface. The only thing missing is code generation. For example, <code>json.Marshal</code> works fine by using reflection, but if it could also (optionally) generate code by implementing a Go function that gets called by the compiler automatically and runs regular Go code, we would have everything. It might sound crazy at first and toy examples might look verbose, but I think Alexandrescu has a point there. Just think about gqlgen vs. the other reflection based graphql-libs for example. Please watch his talk!</p> </li> <li> <p>Bodie Solomon: I find the generics design a bit confusing and opaque. Please consider integrating some concepts from Zig's beautiful comptime functions! The design of Go 2 generics is clever, but I feel it goes against Go's traditional tight coupling between simple runtime semantics and simple syntax. Additionally, one of the biggest problems of Go, which prevents it from being a viable competitor everywhere I might like to use it, is that I cannot be rid of the GC and runtime. It was my strong hope that Go 2 would introduce compile-time-only generics such that I could reliably avoid the use of dynamic interfaces where I don't want them, without relying on codegen. Unfortunately it looks like that will be decided by the compiler without my input. Please, at least, consider giving users the ability to constrain generics to compile-time-only resolution, perhaps as a property of a Contract, rejecting compilation of dynamic types to satisfy the contract.</p> </li> <li> <p>Dag Sverre Seljebotn: C++ has a huge problem with people abusing metaprogramming (\"generics\") to do compile-time metaprogramming. I really wished Go had gone down the path of Julia, which offers hygienic macros. Even if it is kept strictly at a compile-time barrier and no run-time code generation, this would at least avoid all the bad tendencies we see in the C++ world that comes from their templating system. Things you can do with generics you can usually pull off with macros too (e.g., <code>SortSliceOfInts = MakeSliceSorterFunctionMacro!(int)</code> could generate a new function to sort a slice of integers). Link: https://docs.julialang.org/en/v0.6.1/manual/metaprogramming/</p> </li> <li> <p>Maxwell Corbin: The issues raised in the Discussion and Open Questions section all could be avoided by defining generics at the package rather than the function or type level. The reason for this is simple: types can reference themselves, but packages can't import themselves, and while there are many ways to algorithmically generate more type signatures, you cannot do the same with import statements. A quick example of such syntax might be:</p> </li> </ul> <pre><code>\\\\ list\npackage list[T]\n\ntype T interface{}\n\ntype List struct {\n    Val T\n    Next *List\n}\n\n// main\npackage main\n\nimport (\n    il \"list\"[int]\n    sl \"list\"[string]\n)\n\nvar iList = il.List{3}\nvar sList = sl.List{\"hello\"}\n\n// etc...\n</code></pre> <p>The syntax in the example is probably needlessly verbose, but the point is that none of the unfortunate code examples from the blog post are even legal constructions. Package level generics avoids the most abusive problems of meta-programming while retaining the bulk of its usefulness.</p> <ul> <li> <p>Andrew Gwozdziewycz: The use of the word <code>contract</code> gives me pause due to it overloading \"contract\" as in Design by Contract. While the generics use case has some similarities with the \"contracts\" in DbC if you squint a bit, the concepts are quite different. Since \"contracts\" are an established concept in Computer Science, I think it would be far less confusing to use a different name like <code>behavior</code> or <code>trait</code>. The design document also suggests reasons why using <code>interface</code> is not ideal, though, Go's contract mechanism seems too obvious an extension of interfaces to disregard so quickly\u2026 If it can be done <code>interface setter(x T) { x.Set(string) error }</code> and <code>interface addable(x T, y U) { x + y }</code> seem quite natural to read and understand.</p> </li> <li> <p>Russell Johnston: Agreed that it would be great to merge contracts and interfaces. Another way around the operator-naming problem might be to provide some standard interfaces for the operators, with bodies inexpressible in normal Go code. For example, a standard <code>Multipliable</code> interface would allow the <code>*</code> and <code>*=</code> operators, while a standard <code>Comparable</code> interface would allow <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, and <code>&gt;</code>. To express operators with multiple types, these interfaces would presumably need type parameters themselves, for example: <code>type Multipliable(s Self /* this exists implicitly on all interfaces */, t Other) interface { /* provided by the language */ }</code>. Then user-written interfaces/contracts could use these standard identifier-based names, neatly sidestepping the issues mentioned in the design document around syntax and types.</p> </li> <li>Roberto (empijei) Clapis: I agree on this and on the fact that it should be clearer where to use interfaces and where to use contracts. Unifying the two would be great, as they try to address overlapping issues.</li> <li> <p>Kurnia D Win: I think <code>constraint</code> is better keyword than <code>contract</code>. Personally i like <code>type addable constraint(x T, y U) { x + y }</code> instead of merging with interface.</p> </li> <li> <p>Hajime Hoshi: I feel like the supposed proposal is too huge to the problems we want to solve listed at https://go.googlesource.com/proposal/+/master/design/go2draft-generics-overview.md . I'm worried this feature would be abused and degrade readability of code. Sorry if I am missing, but the proposal doesn't say anything about <code>go generate</code>. Wouldn't <code>go generate</code> be enough to the problems?</p> </li> <li> <p>Stephen Rowles: I find the method syntax hard to parse, as a human reading it, it might be clearer to use a different type of enclosing brackets for the type section, e.g. : Me too \ud83d\udc4d +1. Yet another \ud83d\udc4d +1(Pasha Osipyants).</p> </li> </ul> <pre><code>func Sum&lt;type T Addable&gt;(x []T) T {\n    var total T\n    for _, v := range x {\n        total += v\n    }\n    return total\n}\n</code></pre> <ul> <li>yesuu: In this example, think of <code>T</code> as the parameter name and <code>type</code> as the parameter type. Obviously it is more reasonable to put the <code>type</code> behind, and contract is followed by <code>type</code>, like <code>chan int</code>.</li> </ul> <pre><code>func Sum(T type Addable)(x []T) T\n</code></pre> <ul> <li> <p>Roberto Clapis: Please read this section</p> <ul> <li>Seems like a bit of a cop-out tbh. It says \"in general\" which means there must already be exceptions. Go has a nice clear syntax making code simple to read and easy for teams to collaborate. I think it would be worth making the parser more complicated for the sake of making the code readability better. For large scale and long running project readability of the code, and hence maintainability, is king</li> <li>What about this</li> </ul> </li> <li> <p>Seebs: Feedback a bit long to inline, August 2018. Summary basically \"I would like a way to specify one contract for each of two types rather than one contract for both types\", and \"I would prefer <code>map[T1]T2</code> to <code>t1var == t1var</code> as a canonical form of \"T1 must be an allowable map key\".</p> </li> <li> <p>Seebs: What if contracts were just the type-parametric functions?. (Sep 1, 2018)</p> </li> <li> <p>Sean Quinlan: I find the contract syntax quite confusing. For something that is supposed to defined exactly what is needed and will be part of the documentation of an api, it can contain all sorts of cruft that does not impact the contract. Moreover, to quote from the design: \"We don\u2019t need to explain the meaning of every statement that can appear in a contract body\". That seems like the opposite of what I would want from a contract. The fact one can copy the body of a function into a contract and have it work seems like a bug to me, not a feature. Personally, I would much prefer a model that unifies interfaces and contracts. Interfaces feel much closer to what I would like a contract to look like and there is a lot of overlap. It seems probable that many contracts will also be interfaces?</p> </li> <li> <p>Nodir Turakulov: Please elaborate</p> </li> </ul> <p>Packages like container/list and container/ring, and types like sync.Map, will be updated to be compile-time type-safe.</p> <p>and</p> <p>The math package will be extended to provide a set of simple standard algorithms for all numeric types, such as the ever popular Min and Max functions.</p> <p>or ideally add a section about transition/migration of existing types/funcs to use type polymorphism.   FWIU adding type parameter(s) to an existing type/func most likely breaks an existing program that uses the type/func.   How exactly will <code>math.Max</code> be changed?   Is the intention to make backward-incompatible changes and write tools to automatically convert code to Go2?   What is the general recommendation for authors of other libraries that provide funcs and types that currently operate with <code>interface{}</code>?   Were default values for type parameters considered? e.g. type parameter for <code>math.Max</code> would default to <code>float64</code> and type parameter for <code>\"container/list\".List</code> would default to <code>interface{}</code></p> <ul> <li> <p>Ward Harold: If only for the sake of completeness the Modula-3 generics design should be incorporated into the Designs in Other Languages section. Modula-3 was a beautiful language that sadly got introduced at the wrong time.</p> </li> <li> <p>Matt Holiday: Ditto mentioning the Alphard language, which was developed about the same time as CLU and also influenced the Ada design. See Alphard: Form and Content, Mary Shaw, ed., Springer 1991 for the various papers collected with some glue material. Alphard &amp; Ada were my introductions to generic programming. Could Go beat C++ for finally delivering contracts after 40 years of waiting?</p> </li> <li> <p>Ole Begemann: You write on the Generics Overview page: \"Swift added generics in Swift 4, released in 2017.\" This is not true. Swift has had generics since its first public release in 2014. Evidence (just one example of many): a transcript of an Apple developer talk on Swift from WWDC 2014 that talks at length about Swift's generics features.</p> </li> </ul> <p>This is also incorrect: \"<code>Equatable</code> appears to be a built-in in Swift, not possible to define otherwise.\" The <code>Equatable</code> protocol is defined in the Swift standard library, but there's nothing special about it. It's totally possible to define the same thing in \"normal\" code.</p> <ul> <li>Kevin Gillette: correction for \"Contracts\" Draft, as of 30 August 2018</li> </ul> <p>The one instance of <code>check.Convert(int, interface{})(0, 0)</code> should instead be <code>check.Convert(int, interface{})(0)</code> or provide an explanation as to why it the function should take two zeros instead of one.</p> <ul> <li>Adam Ierymenko: I have an idea for doing limited operator overloading in Go that might make this proposal more useful for numeric code. It's big so I stuck it in a Gist here.</li> <li>DeedleFake: I completely agree with the arguments against operator overloading, and I'm quite glad overall that Go doesn't have it, but I also think that the inability to resolve the difference between <code>a == b</code> and <code>a.Equals(b)</code> via a contract is the biggest problem with the draft design as it currently stands. It means that you'd still wind up writing multiple functions for a fair number of things. Try writing a binary tree, for example. Should you use a contract with <code>t &lt; t</code> or <code>t.Less(t)</code>? For a sum function, should you use <code>t + t</code> or <code>t.Plus(t)</code>? I definitely want a solution that doesn't involve operator overloading, though. Maybe there could be a way to specify an adapter that basically says <code>if a type T, which satisfies contract A but not B, is used for a parameter constrained by contract B, apply this to it in order to get it to satisfy contract B</code>. Contract B could require a <code>Plus()</code> method, for example, while contract A requires the use of <code>+</code>, so the adapter automatically attaches a user-specified <code>Plus()</code> method to <code>T</code> for the duration of its use under that contract.<ul> <li>Something that might work with this proposal is an <code>equal(a, b)</code> builtin that uses <code>a.Equals(b)</code> if it exists and <code>a == b</code> otherwise, failing to compile if the type is incomparable (and likewise for other operators). It's too weird to seriously consider but it would work with contracts and allow dodging the asymmetry between types that have operators and those that cannot without introducing operator overloading \u2014jimmyfrasche</li> <li>Another idea would be explicitly overloadable operators: <code>a + b</code> is not overloadable, but <code>a [+] b</code> can be overloaded. It will use normal + for primitive types, but will use <code>Operator+()</code> etc. for objects if those are present. I really do think that generics without some sane form of operator overloading or something like it are a lot less useful to the point that you might as well not even do it. -Adam Ierymenko (original poster)</li> </ul> </li> <li>Ian Denhardt: DeedleFake outlines the problems with not having operator overloading well I. I think proposals involving making the overloading \"loud\" are the wrong idea; instead, we should limit which operators can be overloaded to operators which satisfy these criteria:<ol> <li>The operator's semantics can be understood as a method call. Most of the operators on numbers pass this test; <code>big.Add</code> is still addition in the sense that we know it from int32, uint64 etc. Examples of operators that fail this test are <code>&amp;&amp;</code> and <code>||</code>; these are short circuting, which no function or method can replicate. They are fundamentally not methods, no matter how you look at them, and should not be overridable by methods. I think operator overloading gets a bad rap in part because C++ allows you to override everything, including crazy stuff like the comma operator.</li> <li>There should be clear use cases for overriding them. Again, arithmetic operators pass this test, along with <code>&lt;</code> and friends. Pointer dereferencing passes the first test, but I'm having a hard time coming up with uses for \"other types of pointers\" that actually seem like a good idea. They are a bit more justifiable in C++, but garbage-collected pointers have basically got you covered.</li> <li>The normal meaning of the operator should be something that is easy to reason about. For example, pointers are a gnarly source of bugs, and having the possibility that <code>*foo</code> is doing something other than reading from a memory address makes an already difficult debugging session that much harder. On the other hand, the possibility that <code>+</code> may be a call to <code>big.Add</code> is relatively self-contained, and unlikely to cause great confusion.</li> <li>Finally, the standard library has to set a good example; methods overriding <code>+</code> should be conceptually addition, for example. C++ gets off on an utterly wrong foot here by defining what is morally <code>os.Stdout.ShiftLeft(\"Hello, World!\")</code>.</li> </ol> </li> <li>Eltjon Metko: How about specifying the contract after the type identifier inside the function Parameters? This way it can be inferred what T is and we can eliminate the first group of parenthesis.</li> </ul> <pre><code>func Sum(x []T:Addable) T {\n    var total T\n    for _, v := range x {\n        total += v\n    }\n    return total\n}\n</code></pre> <ul> <li> <p>Tristan Colgate-McFarlane: After going back and forward for a while, I've come down in favour of the proposal largely as is. A limited syntax for contracts might be preferable, but I believe it should allow referencing specific fields (not just methods as some have proposed). If anything can be done to make compatible interface and contracts inter-use easier, that would also be nice (though I think maybe no additional specifications are needed. Lastly, I think it is worth considering deprecating interface types. Whilst drastic, contracts essentially also allow specifying behaviour. Any contract restrictions that limit that (such as referring to other types within the package), should probably be lifted. contracts appear to be a strict superset of interfaces, and I am generally against having two overlapping features. A tool to aide in writing interfaces should also be considered.</p> </li> <li> <p>Patrick Smith: We might consider requiring the type keyword when defining methods on generic types. This makes the code a little more verbose, but clearer and more consistent (now type parameters are always preceded by the type keyword).</p> </li> </ul> <pre><code>func (x Foo(type T)) Bar()\n</code></pre> <ul> <li>Patrick Smith: In this example, is <code>Foo(T)</code> embedded in <code>Bar(T)</code>, or does <code>Bar(T)</code> have a method named <code>Foo</code>?</li> </ul> <pre><code>type Foo(type T) interface {}\ntype Bar(type T) interface {\n        Foo(T)\n}\n</code></pre> <ul> <li> <p>Xingtao Zhao: There are too many round brackets in the proposal. In the proposal, it is said that \"[]\" is ambiguous in some cases. While if we use [type T, S contract], there are no ambiguities any more.</p> </li> <li> <p>Dave Cheney: The earlier Type Functions proposal showed that a type declaration can support a parameter. If this is correct, then the proposed contract declaration could be rewritten from</p> </li> </ul> <pre><code>contract stringer(x T) {\n    var s string = x.String()\n}\n</code></pre> <p>to</p> <pre><code>type stringer(x T) contract {\n    var s string = x.String()\n}\n</code></pre> <p>This supports Roger\u2019s observation that a contract is a superset of an interface. <code>type stringer(x T) contract { ... }</code> introduces a new contract type in the same way <code>type stringer interface { ... }</code> introduces a new interface type.</p> <ul> <li> <p>jimmyfrasche: A contract is not a type, though. You can't have a value that is a <code>stringer</code>. You can have a value of a type that is a <code>stringer</code>. It's a metatype. A type is a kind of predicate on values. You ask the compiler \"is this value a <code>string</code>\" and it answers yes (allowing compilation to continue) or no (stopping to tell you what went wrong). A contract is a predicate on a vector of types. You ask the compiler two questions. Do these types satisfy this contract? Then: do these values satisfy these types? Interfaces kind of blur these lines by storing a <code>(type, value)</code> pair, provided that the type has the appropriate methods. It's simultaneously a type and a metatype. Any generics system that does not use interfaces as the metatypes will unavoidably contain a superset of interfaces. While it is entirely possible to define a generics system that exclusively uses interfaces as the metatypes, that does mean losing the ability to write generic functions that use things that interfaces can't talk about, like operators. You have to limit the questions you can ask about the types to their method sets. (I'm fine with this).</p> </li> <li> <p>btj: Two very important entries are missing in the draft design document's Designs in Other Languages section: Haskell, with its typeclasses, and Scala, with its implicit arguments.</p> </li> <li> <p>iamgoroot: Wouldn't it be natural to make better type aliasing support and let user have generics as option? And you dont need much syntax for that</p> </li> </ul> <pre><code>type Key _\ntype Value _\n\ntype IntStringHolder Holder&lt;Key:int, Value:string&gt;\n\ntype Holder struct {\n    K Key\n    V Value\n}\n\nfunc (h *Holder) Set(k Key, v Value) {\n    h.K = k\n    h.V = v\n}\n\nfunc main() {\n    v:= IntStringHolder{}\n    v.Set(7,\"Lucky\")\n}\n</code></pre> <ul> <li> <p>antoniomo: While the draft clearly explains why <code>F&lt;T&gt;</code>, <code>F[T]</code> and non-ASCII (unable to type it here) <code>F&lt;&lt;T&gt;&gt;</code> where discarded, feels like <code>F{T}</code> would be more human readable than the sometimes three in a row set of <code>()</code>, while not complicating the parser with unbounded lookahead as you can't open a block in those circumstances.</p> </li> <li> <p>aprice2704: I really dislike the idea of using regular parentheses <code>(</code>, would a two-character sequence cause compiler overhead from unbounded lookahead? How about &lt;| and |&gt; ? would they work? They have the advantages of being quite distinct from <code>(</code>, making some visual sense in ascii, and in the 'Fira Code' font (highly recommended) which I use in VSCode there are ligatures to render these as little right or left pointing triangles.</p> </li> <li> <p>leaxoy: First I'm sorry for editing the page footer, however I can't remove footer content. This is my opinion: lots of <code>(</code> &amp; <code>)</code> made go looks so messy, <code>&lt;</code> &amp; <code>&gt;</code> like other language is better, and is more kindly for those come from other languages.</p> </li> <li> <p>Hajime Hoshi: I completely agree on aprice2704's syntax concern. Wouldn't <code>[[</code> / <code>]]</code> work, for example?</p> </li> </ul>"},{"location":"GoArm/","title":"Go on ARM","text":""},{"location":"GoArm/#introduction","title":"Introduction","text":"<p>Go is fully supported on Linux and Darwin. Any Go program that you can compile for x86/x86_64 should work on Arm. Besides Linux and Darwin, Go is also experimentally supported on FreeBSD, OpenBSD and NetBSD.</p>"},{"location":"GoArm/#supported-architectures","title":"Supported architectures","text":"<p>Go supports the following ARM architectural families.</p> Architecture Status GOARM value GOARCH value ARMv4 and below not supported n/a n/a ARMv5 supported GOARM=5 GOARCH=arm ARMv6 supported GOARM=6 GOARCH=arm ARMv7 supported GOARM=7 GOARCH=arm ARMv8 supported n/a GOARCH=arm64 ARMv9 supported n/a GOARCH=arm64 <p>Starting from Go 1.1, the appropriate GOARM value will be chosen if you compile the program from source on the target machine. In cross compilation situations, it is recommended that you always set an appropriate GOARM value along with GOARCH.</p>"},{"location":"GoArm/#supported-operating-systems","title":"Supported operating systems","text":"<ul> <li>ARM on Linux. You must run an EABI kernel. These are generally known as <code>armel</code> for softfloat (compatible with ARMv5) or <code>armhf</code> for hardware floating point (ARMv6 and above).</li> <li>ARM on Darwin: ARMv7 is required.</li> <li>ARM on FreeBSD, OpenBSD, and NetBSD: ARMv6K or above is required.</li> </ul>"},{"location":"GoArm/#recommended-go-version","title":"Recommended Go version","text":"<p>Go has a mature support for ARM systems; so, just like for other architectures, use the latest stable version (eg: Go 1.18 at the time of writing).</p>"},{"location":"GoArm/#tips-and-tricks","title":"Tips and tricks","text":""},{"location":"GoArm/#tmp-and-tmpfs","title":"/tmp and tmpfs","text":"<p>The <code>go</code> build tool uses <code>/tmp</code> when compiling and testing, this can cause heavy wear and tear if <code>/tmp</code> lives on your SD card. To minimise this effect, either <code>export TMPDIR</code> to somewhere that lives on another filesystem. Alternatively if you have lots of physical memory you can mount a swap backed tmpfs filesystem on /tmp by adding this line to <code>/etc/fstab</code></p> <pre><code>tmpfs /tmp tmpfs nodev,nosuid,mode=1777 0 0\n</code></pre>"},{"location":"GoArm/#swap","title":"Swap","text":"<p>Building Go from source requires at least 256mb of RAM. Running the tests requires at least 256mb of memory and at least 512mb of swap space.</p>"},{"location":"GoArm/#test-failures-due-to-resource-starvation","title":"Test failures due to resource starvation","text":"<p>The runtime tests create many native operating system threads which at the default of 8mb per thread can exhaust an ARM system with 32bit user mode address space (especially on multicore ARM systems such as the Raspberry PI 2). To prevent the runtime test from failing you may need lower the thread stack limit:</p> <p><pre><code>% ulimit -s 1024     # set the thread stack limit to 1mb\n% ulimit -s          # check that it worked\n1024\n</code></pre> See Dave Cheney's blog post about building Go on Raspberry Pi for details.</p>"},{"location":"GoArm/#build-failures-due-to-lack-of-memory","title":"Build failures due to lack of memory","text":"<p>The Go tool will try to keep all your cpu cores busy when installing packages (during make.bash), this is normally preferable on PCs where memory is abundant. However, some powerful multicore ARM machines don't have enough memory to support parallel builds utilizing all available cores, and you can work around that by using the <code>taskset(1)</code> utility to limit Go to only use one core without resorting to swaps. <pre><code>taskset 1 ./make.bash # use 3 if you want to use two cores\n</code></pre> Note: the 1 here is a bitmask for cpu affinity and it's not the number of cpu cores you're willing to use, please refer to <code>taskset(1)</code> manual for details.</p>"},{"location":"GoArm/#known-issues","title":"Known issues","text":""},{"location":"GoArm/#lack-of-floating-point-hardware-on-armv5","title":"Lack of floating point hardware on ARMv5","text":"<p>The major issue with ARMv5 is the lack of floating point support in common ARMv5 hardware<sup>\u2020</sup>. When compiled with the GOARM=5 environment variable, the 5l linker will insert a call to <code>_sfloat</code> before any block of floating point instructions to branch into the floating point emulator. This means that binaries produced with a Go installation that was compiled with soft float support will work on all supported architectures, but builds compiled without soft floating point support will not work on ARMv5.</p> <p><sup>\u2020</sup> This isn't strictly true, there exist ARMv5 implementations which have VFP1 floating point. However the compiler doesn't support VFP1 yet.</p>"},{"location":"GoArm/#htmltemplate-and-testnilptrgo-test-fail-on-htc-android","title":"html/template and test/nilptr.go test fail on HTC Android","text":"<p>html/template test and test/nilptr.go is known to fail on HTC's Android kernels (ref), because the kernel will kill  the application after 10 segfaults.</p>"},{"location":"GoArm/#potential-kernel-bug-in-2632-5-kirkwood-on-qnap-219p","title":"Potential kernel bug in 2.6.32-5-kirkwood on QNAP 219P","text":"<p>See Issue 5466 for details. Updating to 3.2.0-4-kirkwood solved the issue.</p>"},{"location":"GoArm/#success-stories","title":"Success stories","text":"<p>ARM hardware comes in a myriad of shapes and sizes. If you've had a success story building and running Go on your Arm system, please detail your results here.</p>"},{"location":"GoArm/#netgear-stora","title":"Netgear Stora","text":"<p>Architecture: ARMv5</p> <p>Operating System: Debian Sid</p> <p>The Netgear Stora is an ARMv5 (Marvell Kirkwood) platform. I flashed mine with a Debian Sid distribution and it was, until Go1, a solid platform for Go development. The main drawback is the Stora only has 128mb of ram, which is not quite enough to run ./all.bash as 5l can use more than 100mb of ram when linking some commands.</p> <p>Instructions for installing Debian on your Stora can be found on the OpenStora website, http://www.openstora.com/wiki/index.php?title=How_to_install_Debian_Linux_on_NETGEAR_Stora.</p> <p>\u2013 dave cheney</p>"},{"location":"GoArm/#qnap-ts-119p-ii","title":"Qnap TS-119P II","text":"<p>Architecture: ARMv5</p> <p>Operating System: Debian Squeeze</p> <p>The Qnap TS series of NASs are excellent hackable little linux hosts. The TS-11P9 II is a 2Ghz Marvell Kirkwood ARMv5 processor with 512mb of ram and a single SATA drive bay.</p> <p>The kirkwood platform is supported by the native debian installer. http://www.cyrius.com/debian/kirkwood/qnap/ts-119/install.html</p> <p>\u2013 dave cheney</p>"},{"location":"GoArm/#pandaboard","title":"Pandaboard","text":"<p>Architecture: ARMv7</p> <p>Operating System: Ubuntu 12.04LTS (armhf)</p> <p>The Pandaboard is a dual core ARMv7 development board based on the Texas Instruments OMAP4 SoC platform. I run ubuntu 12.04 LTS server on mine, which is an excellent distribution for Arm development. The Pandaboard has a gig of ram which makes it excellent for development and benchmarking.</p> <p>Instructions and SD card image can be found on on the Ubuntu wiki, https://wiki.ubuntu.com/ARM/Server/Install#Installing_pre-installed_OMAP4_Precise_.2812.04.29_Server_Images.</p> <p>\u2013 dave cheney</p>"},{"location":"GoArm/#beaglebone","title":"BeagleBone","text":"<p>Architecture: ARMv7 single core, Cortex-A8, 256MB RAM, 720 MHz</p> <p>Operating System: Angstrom Linux</p> <p>BeagleBone is similar to Beagleboard, but without the video components. Angstrom is a very small Linux distribution for ARM based systems. It is built on top of Yocto and OpenEmbedded with additional tools and recipes to make it even easier to build a distribution. You can think of Angstrom as Ubuntu and OpenEmbedded/Yocto as Debian. Angstrom is very light weight and fast compared to Ubuntu. It uses systemd instead of the sys5 scripts which help give you a very fast boot time of a few seconds.</p> <p>BeagleBone is probably faster than a RaspberryPI because of it's newer Cortex-A8 dual-issue superscalar architecture, but the PI has the GPU which theoretically could be used with something like OpenCL to really run circles around the BeagleBone. However, for embedded applications the BeagleBone is easier to work with because it is ready out of the box with GPIO connections.</p> <p>I've cross compiled for ARM with 5g from a Mac and so far I haven't run into any problems. You can build on the BeagleBone, but cross compiling with Go is so easy that it is better to save wear and tear on the flash drive and just compile somewhere else.</p> <p>\u2013 hans stimer</p>"},{"location":"GoArm/#zyxel-nsa-310","title":"Zyxel NSA 310","text":"<p>Architecture: ARM5 Platform: Debian Wheeze</p> <p>Successfully built default branch, going to write fan control daemon for this device in golang.</p>"},{"location":"GoArm/#raspberry-pi","title":"Raspberry Pi","text":"<ul> <li>Building Go 1.5 on the Raspberry Pi - Dave Cheney</li> </ul> <p>Architecture: ARM1176JZFS, with floating point, running at 700Mhz</p> <p>Operating System: Debian Wheezy beta distribution (http://www.raspberrypi.org/archives/1435) reported as:</p> <p><code>Linux raspberrypi 3.1.9+ #125 PREEMPT Sun Jun 17 16:09:36 BST 2012 armv6l GNU/Linux</code></p> <p>Memory Split: the Pi shares its 256mb of memory between the CPU and the GPU. You should allocate as much memory as possible to the CPU for a successful compilation. The configuration for the memory split is stored on your SD card. This link has a script to adjust the configuration, http://sirlagz.net/?p=445.</p> <p>Go version weekly.2012-03-27 +645947213cac, with timeout and GOARM 7 patches http://codereview.appspot.com/5987063/) builds with 2 test failures: encoding/gob fails with out of memory, and fmt fails the NaN test.</p> <p>Successfully installed and run SVGo via go get github.com/ajstarks/svgo, tested with goplay:</p> <p></p> <p>Division benchmark via http://codereview.appspot.com/6258067:</p> <pre><code>$ cd $GOROOT/src/pkg/runtime\n$ go test -test.bench=BenchmarkUint\n\n\nBenchmarkUint32Div7\t 5000000\t       547 ns/op\nBenchmarkUint32Div37\t 5000000\t       547 ns/op\nBenchmarkUint32Div123\t 5000000\t       547 ns/op\nBenchmarkUint32Div763\t 5000000\t       547 ns/op\nBenchmarkUint32Div1247\t 5000000\t       547 ns/op\nBenchmarkUint32Div9305\t 5000000\t       547 ns/op\nBenchmarkUint32Div13307\t 5000000\t       547 ns/op\nBenchmarkUint32Div52513\t 5000000\t       547 ns/op\nBenchmarkUint32Div60978747\t 5000000\t       547 ns/op\nBenchmarkUint32Div106956295\t 5000000\t       547 ns/op\nBenchmarkUint32Mod7\t 5000000\t       547 ns/op\nBenchmarkUint32Mod37\t 5000000\t       547 ns/op\nBenchmarkUint32Mod123\t 5000000\t       547 ns/op\nBenchmarkUint32Mod763\t 5000000\t       547 ns/op\nBenchmarkUint32Mod1247\t 5000000\t       547 ns/op\nBenchmarkUint32Mod9305\t 5000000\t       547 ns/op\nBenchmarkUint32Mod13307\t 5000000\t       547 ns/op\nBenchmarkUint32Mod52513\t 5000000\t       547 ns/op\nBenchmarkUint32Mod60978747\t 5000000\t       547 ns/op\nBenchmarkUint32Mod106956295\t 5000000\t       547 ns/op\n</code></pre> <p>Running the hardware floating point distribution, Raspbian \"pisces\" (http://www.raspbian.org/PiscesImages) and applying the patches in https://gist.github.com/3116118, here are the results of the Eleanor McHugh gospeed benchmark:</p> <pre><code>raspbian@pisces:~/gowork/src/github.com/feyeleanor/gospeed$ uname -a\nLinux pisces 3.1.9+ #171 PREEMPT Tue Jul 17 01:08:22 BST 2012 armv6l GNU/Linux\nraspbian@pisces:~/gowork/src/github.com/feyeleanor/gospeed$ go test -test.bench=\".*\"\nPASS\nBenchmarkBaselineCastInt32ToInt\t100000000\t        13.5 ns/op\nBenchmarkBaselineCastIntToInt32\t100000000\t        13.5 ns/op\nBenchmarkBaselineCastInt64ToUint64\t100000000\t        17.8 ns/op\nBenchmarkBaselineCastUint64ToInt64\t100000000\t        17.2 ns/op\nBenchmarkBaselineVariableGet\t100000000\t        13.4 ns/op\nBenchmarkBaselineVariableSet\t100000000\t        22.4 ns/op\nBenchmarkBaselineVariableGetInterface\t100000000\t        13.5 ns/op\nBenchmarkBaselineVariableSetInterface\t50000000\t        31.3 ns/op\nBenchmarkBaselineVariableIncrement\t100000000\t        23.9 ns/op\nBenchmarkBaselineVariableDecrement\t100000000\t        23.9 ns/op\nBenchmarkBaselineFieldGet\t100000000\t        13.5 ns/op\nBenchmarkBaselineFieldSet\t100000000\t        20.9 ns/op\nBenchmarkBaselineSliceGet\t50000000\t        32.9 ns/op\nBenchmarkBaselineSliceSet\t50000000\t        34.5 ns/op\nBenchmarkBaselineMapIntGet\t 1000000\t      1448 ns/op\nBenchmarkBaselineMapIntSet\t 1000000\t      1968 ns/op\nBenchmarkBaselineMapStringGet\t 1000000\t      1119 ns/op\nBenchmarkBaselineMapStringSet\t 1000000\t      1675 ns/op\nBenchmarkBaselineIf\t100000000\t        15.0 ns/op\nBenchmarkBaselineIfElse\t100000000\t        15.0 ns/op\nBenchmarkBaselineSwitchDefault\t100000000\t        13.5 ns/op\nBenchmarkBaselineSwitchOneCase\t100000000\t        15.0 ns/op\nBenchmarkBaselineSwitchTwoCases\t100000000\t        18.0 ns/op\nBenchmarkBaselineSwitchTwoCasesFallthrough\t100000000\t        18.0 ns/op\nBenchmarkBaselineForLoopIteration\t50000000\t        42.0 ns/op\nBenchmarkBaselineForReverseLoopIteration\t50000000\t        36.0 ns/op\nBenchmarkBaselineForRange\t20000000\t        80.9 ns/op\nBenchmarkBaselineForSliceLength\t50000000\t        39.0 ns/op\nBenchmarkBaselineForReverseSliceLength\t50000000\t        36.0 ns/op\nBenchmarkBaselineForLoopIteration10\t20000000\t       119 ns/op\nBenchmarkBaselineForReverseLoopIteration10\t20000000\t        92.9 ns/op\nBenchmarkBaselineForRange10\t10000000\t       215 ns/op\nBenchmarkBaselineForSliceLength10\t20000000\t       109 ns/op\nBenchmarkBaselineForReverseSliceLength10\t20000000\t        92.9 ns/op\nBenchmarkBaselineForLoopIteration100\t 2000000\t       929 ns/op\nBenchmarkBaselineForReverseLoopIteration100\t 5000000\t       700 ns/op\nBenchmarkBaselineForRange100\t 1000000\t      1567 ns/op\nBenchmarkBaselineForSliceLength100\t 2000000\t       853 ns/op\nBenchmarkBaselineForReverseSliceLength100\t 5000000\t       700 ns/op\nBenchmarkBaselineForLoopIteration10000\t   10000\t    106006 ns/op\nBenchmarkBaselineForReverseLoopIteration10000\t   50000\t     67480 ns/op\nBenchmarkBaselineForRange10000\t   10000\t    153841 ns/op\nBenchmarkBaselineForSliceLength10000\t   20000\t     85735 ns/op\nBenchmarkBaselineForReverseSliceLength10000\t   50000\t     69461 ns/op\nBenchmarkBaselineMakeChannelBoolUnbuffered\t  200000\t     10162 ns/op\nBenchmarkBaselineMakeChannelBool1\t  200000\t     12517 ns/op\nBenchmarkBaselineMakeChannelBool10\t  200000\t     12521 ns/op\nBenchmarkBaselineMakeChannelStringUnbuffered\t  500000\t     10369 ns/op\nBenchmarkBaselineMakeChannelString1\t  200000\t     12576 ns/op\nBenchmarkBaselineMakeChannelString10\t  100000\t     22358 ns/op\nBenchmarkBaselineGo\t   50000\t    367593 ns/op\nBenchmarkBaselineFunctionCall\t50000000\t        57.0 ns/op\nBenchmarkBaselineFunctionCallArg\t20000000\t        81.0 ns/op\nBenchmarkBaselineFunctionCall5VarArgs\t  500000\t      6852 ns/op\nBenchmarkBaselineFunctionCallInt\t50000000\t        60.3 ns/op\nBenchmarkBaselineFunctionCall5VarInts\t 1000000\t      3185 ns/op\nBenchmarkBaselineFunctionCallWithDefer\t 1000000\t      2330 ns/op\nBenchmarkBaselineFunctionCallPanicRecover\t  500000\t      6222 ns/op\nBenchmarkBaselineMethodCallDirect\t20000000\t        83.8 ns/op\nBenchmarkBaselineMethodCallDirect1Arg\t20000000\t       106 ns/op\nBenchmarkBaselineMethodCallDirect1Int\t20000000\t        85.2 ns/op\nBenchmarkBaselineMethodCallDirect5Args\t 5000000\t       368 ns/op\nBenchmarkBaselineMethodCallDirect5Ints\t10000000\t       233 ns/op\nBenchmarkBaselineMethodCallIndirect\t100000000\t        18.0 ns/op\nBenchmarkBaselineMethodCallIndirect1Arg\t50000000\t        42.0 ns/op\nBenchmarkBaselineMethodCallIndirect1Int\t100000000\t        19.5 ns/op\nBenchmarkBaselineMethodCallIndirect5Args\t 5000000\t       309 ns/op\nBenchmarkBaselineMethodCallIndirect5Ints\t10000000\t       168 ns/op\nBenchmarkBaselineTypeAssertion\t10000000\t       218 ns/op\nBenchmarkBaselineTypeAssertionEmptyInterface\t20000000\t       106 ns/op\nBenchmarkBaselineTypeAssertionInterface1\t 5000000\t       576 ns/op\nBenchmarkBaselineTypeAssertionInterface2\t 5000000\t       579 ns/op\nBenchmarkBaselineTypeReflectPrimitiveToValue\t 5000000\t       425 ns/op\nBenchmarkBaselineTypeReflectSliceToValue\t 1000000\t      3218 ns/op\nBenchmarkBaselineTypeReflectStructToValue\t  500000\t      4760 ns/op\nBenchmarkBaselineTypeCheck\t10000000\t       189 ns/op\nBenchmarkBaselineTypeCheckEmptyInterface\t20000000\t        93.1 ns/op\nBenchmarkBaselineTypeCheckInterface1\t 5000000\t       511 ns/op\nBenchmarkBaselineTypeCheckInterface2\t 5000000\t       516 ns/op\nBenchmarkBaselineTypeSwitchOneCase\t10000000\t       262 ns/op\nBenchmarkBaselineTypeSwitchBasicTypesCase\t10000000\t       295 ns/op\nBenchmarkBaselineTypeSwitchEmptyInterface\t10000000\t       163 ns/op\nBenchmarkBaselineTypeSwitchInterface1\t 5000000\t       588 ns/op\nBenchmarkBaselineTypeSwitchInterface2\t 5000000\t       602 ns/op\nBenchmarkBaselineNewStructureLiteral\t20000000\t        84.0 ns/op\nBenchmarkBaselineNewStructure\t20000000\t       127 ns/op\nBenchmarkBaselineNewSliceLiteral\t50000000\t        54.2 ns/op\nBenchmarkBaselineNewSlice\t 1000000\t      3124 ns/op\nBenchmarkBaselineNewMapLiteralIntToInt\t  500000\t      9083 ns/op\nBenchmarkBaselineNewMapLiteralIntToInterface\t  500000\t      9807 ns/op\nBenchmarkBaselineNewMapLiteralStringToInt\t  500000\t      9792 ns/op\nBenchmarkBaselineNewMapLiteralStringToInterface\t  500000\t     10595 ns/op\nBenchmarkBaselineNewMapLiteralIntToInt2Item\t  200000\t     14265 ns/op\nBenchmarkBaselineNewMapLiteralIntToInterface2Item\t  200000\t     14669 ns/op\nBenchmarkBaselineNewMapLiteralStringToInt2Item\t  200000\t     14025 ns/op\nBenchmarkBaselineNewMapLiteralStringToInterface2Item\t  200000\t     15086 ns/op\nBenchmarkBaselineNewMapIntToInt\t  500000\t      9025 ns/op\nBenchmarkBaselineNewMapIntToInterface\t  500000\t      9753 ns/op\nBenchmarkBaselineNewMapStringToInt\t  500000\t      9740 ns/op\nBenchmarkBaselineNewMapStringToInterface\t  500000\t     10486 ns/op\nBenchmarkBaselineSliceCopy\t 5000000\t       300 ns/op\nBenchmarkBaselineNewSliceAppendElement1\t 1000000\t      3318 ns/op\nBenchmarkBaselineNewSliceAppendElement10\t 1000000\t      5174 ns/op\nok  \tgithub.com/feyeleanor/gospeed\t417.296s\n</code></pre> <p>\u2013 anthony starks</p>"},{"location":"GoArm/#raspberry-pi-2","title":"Raspberry Pi 2","text":"<ul> <li>Building Go 1.5 on the Raspberry Pi - Dave Cheney</li> </ul> <pre><code>go version\ngo version devel +07f9c25 Wed Dec 9 21:25:05 2015 +0000 linux/arm\n\n$ go test -timeout 20m -v -bench=Benchmark -run=X\nPASS\nBenchmarkAppend-4                        3000000           402 ns/op\nBenchmarkAppendGrowByte-4                     50      27296836 ns/op\nBenchmarkAppendGrowString-4                    1    1277592542 ns/op\nBenchmarkAppend1Byte-4                  20000000            75.6 ns/op\nBenchmarkAppend4Bytes-4                 20000000            88.2 ns/op\nBenchmarkAppend7Bytes-4                 20000000           103 ns/op\nBenchmarkAppend8Bytes-4                 20000000            89.1 ns/op\nBenchmarkAppend15Bytes-4                20000000           109 ns/op\nBenchmarkAppend16Bytes-4                20000000            94.5 ns/op\nBenchmarkAppend32Bytes-4                20000000            91.4 ns/op\nBenchmarkAppendStr1Byte-4               20000000            73.9 ns/op\nBenchmarkAppendStr4Bytes-4              20000000            84.7 ns/op\nBenchmarkAppendStr8Bytes-4              20000000            88.7 ns/op\nBenchmarkAppendStr16Bytes-4             20000000            94.5 ns/op\nBenchmarkAppendStr32Bytes-4             20000000            91.3 ns/op\nBenchmarkAppendSpecialCase-4             2000000           675 ns/op\nBenchmarkCopy1Byte-4                    20000000           109 ns/op       9.13 MB/s\nBenchmarkCopy2Byte-4                    20000000           112 ns/op      17.77 MB/s\nBenchmarkCopy4Byte-4                    10000000           120 ns/op      33.26 MB/s\nBenchmarkCopy8Byte-4                    10000000           122 ns/op      65.32 MB/s\nBenchmarkCopy12Byte-4                   10000000           126 ns/op      94.82 MB/s\nBenchmarkCopy16Byte-4                   10000000           129 ns/op     123.60 MB/s\nBenchmarkCopy32Byte-4                   10000000           126 ns/op     252.60 MB/s\nBenchmarkCopy128Byte-4                  10000000           162 ns/op     786.76 MB/s\nBenchmarkCopy1024Byte-4                  3000000           479 ns/op    2134.17 MB/s\nBenchmarkCopy1String-4                  20000000           100 ns/op       9.98 MB/s\nBenchmarkCopy2String-4                  20000000           104 ns/op      19.19 MB/s\nBenchmarkCopy4String-4                  20000000           111 ns/op      35.86 MB/s\nBenchmarkCopy8String-4                  20000000           114 ns/op      70.02 MB/s\nBenchmarkCopy12String-4                 20000000           116 ns/op     103.17 MB/s\nBenchmarkCopy16String-4                 10000000           120 ns/op     132.69 MB/s\nBenchmarkCopy32String-4                 20000000           116 ns/op     273.77 MB/s\nBenchmarkCopy128String-4                10000000           150 ns/op     851.31 MB/s\nBenchmarkCopy1024String-4                3000000           472 ns/op    2167.03 MB/s\nBenchmarkChanNonblocking-4              20000000            77.7 ns/op\nBenchmarkSelectUncontended-4             2000000           780 ns/op\nBenchmarkSelectSyncContended-4            100000         15094 ns/op\nBenchmarkSelectAsyncContended-4           500000          2569 ns/op\nBenchmarkSelectNonblock-4               10000000           226 ns/op\nBenchmarkChanUncontended-4                 50000         26993 ns/op\nBenchmarkChanContended-4                   10000        111382 ns/op\nBenchmarkChanSync-4                       300000          3994 ns/op\nBenchmarkChanProdCons0-4                  500000          3100 ns/op\nBenchmarkChanProdCons10-4                1000000          2099 ns/op\nBenchmarkChanProdCons100-4               1000000          1342 ns/op\nBenchmarkChanProdConsWork0-4              500000          3071 ns/op\nBenchmarkChanProdConsWork10-4             500000          2332 ns/op\nBenchmarkChanProdConsWork100-4           1000000          1382 ns/op\nBenchmarkSelectProdCons-4                 300000          5015 ns/op\nBenchmarkChanCreation-4                  2000000           629 ns/op\nBenchmarkChanSem-4                       1000000          1116 ns/op\nBenchmarkChanPopular-4                       200       7597153 ns/op\nBenchmarkCallClosure-4                  30000000            43.5 ns/op\nBenchmarkCallClosure1-4                 30000000            49.0 ns/op\nBenchmarkCallClosure2-4                  5000000           323 ns/op\nBenchmarkCallClosure3-4                  5000000           318 ns/op\nBenchmarkCallClosure4-4                  5000000           324 ns/op\nBenchmarkComplex128DivNormal-4           3000000           488 ns/op\nBenchmarkComplex128DivNisNaN-4           5000000           375 ns/op\nBenchmarkComplex128DivDisNaN-4           5000000           362 ns/op\nBenchmarkComplex128DivNisInf-4           5000000           289 ns/op\nBenchmarkComplex128DivDisInf-4           5000000           273 ns/op\nBenchmarkSetTypePtr-4                   20000000            85.1 ns/op    46.98 MB/s\nBenchmarkSetTypePtr8-4                  10000000           169 ns/op     189.14 MB/s\nBenchmarkSetTypePtr16-4                 10000000           213 ns/op     299.83 MB/s\nBenchmarkSetTypePtr32-4                  5000000           297 ns/op     429.62 MB/s\nBenchmarkSetTypePtr64-4                  3000000           462 ns/op     553.72 MB/s\nBenchmarkSetTypePtr126-4                 2000000           791 ns/op     636.59 MB/s\nBenchmarkSetTypePtr128-4                 2000000           777 ns/op     658.60 MB/s\nBenchmarkSetTypePtrSlice-4                200000          6208 ns/op     659.75 MB/s\nBenchmarkSetTypeNode1-4                 10000000           160 ns/op      74.86 MB/s\nBenchmarkSetTypeNode1Slice-4             1000000          1076 ns/op     356.60 MB/s\nBenchmarkSetTypeNode8-4                 10000000           221 ns/op     180.94 MB/s\nBenchmarkSetTypeNode8Slice-4             1000000          2359 ns/op     542.53 MB/s\nBenchmarkSetTypeNode64-4                 3000000           506 ns/op     521.63 MB/s\nBenchmarkSetTypeNode64Slice-4             100000         12992 ns/op     650.22 MB/s\nBenchmarkSetTypeNode64Dead-4             5000000           308 ns/op     856.90 MB/s\nBenchmarkSetTypeNode64DeadSlice-4         200000         11506 ns/op     734.21 MB/s\nBenchmarkSetTypeNode124-4                2000000           799 ns/op     630.27 MB/s\nBenchmarkSetTypeNode124Slice-4            100000         23306 ns/op     692.00 MB/s\nBenchmarkSetTypeNode126-4                2000000           776 ns/op     659.33 MB/s\nBenchmarkSetTypeNode126Slice-4            100000         21520 ns/op     761.31 MB/s\nBenchmarkSetTypeNode128-4                2000000           850 ns/op     611.35 MB/s\nBenchmarkSetTypeNode128Slice-4             50000         24122 ns/op     689.81 MB/s\nBenchmarkSetTypeNode130-4                2000000           827 ns/op     638.06 MB/s\nBenchmarkSetTypeNode130Slice-4             50000         24322 ns/op     694.67 MB/s\nBenchmarkSetTypeNode1024-4                300000          5655 ns/op     725.66 MB/s\nBenchmarkSetTypeNode1024Slice-4            10000        183602 ns/op     715.28 MB/s\nBenchmarkAllocation-4                      10000        166825 ns/op\nBenchmarkHash5-4                        10000000           217 ns/op      23.02 MB/s\nBenchmarkHash16-4                        5000000           289 ns/op      55.18 MB/s\nBenchmarkHash64-4                        2000000           770 ns/op      83.10 MB/s\nBenchmarkHash1024-4                       200000          9442 ns/op     108.44 MB/s\nBenchmarkHash65536-4                        2000        600452 ns/op     109.14 MB/s\nBenchmarkEqEfaceConcrete-4              20000000            79.1 ns/op\nBenchmarkEqIfaceConcrete-4              20000000            77.0 ns/op\nBenchmarkNeEfaceConcrete-4              20000000            80.0 ns/op\nBenchmarkNeIfaceConcrete-4              20000000            77.7 ns/op\nBenchmarkConvT2ESmall-4                  5000000           362 ns/op\nBenchmarkConvT2EUintptr-4                5000000           394 ns/op\nBenchmarkConvT2ELarge-4                  3000000           457 ns/op\nBenchmarkConvT2ISmall-4                  3000000           482 ns/op\nBenchmarkConvT2IUintptr-4                3000000           524 ns/op\nBenchmarkConvT2ILarge-4                  3000000           600 ns/op\nBenchmarkConvI2E-4                      20000000            60.5 ns/op\nBenchmarkConvI2I-4                       5000000           302 ns/op\nBenchmarkAssertE2T-4                    10000000           121 ns/op\nBenchmarkAssertE2TLarge-4               10000000           131 ns/op\nBenchmarkAssertE2I-4                     5000000           329 ns/op\nBenchmarkAssertI2T-4                    10000000           125 ns/op\nBenchmarkAssertI2I-4                     5000000           328 ns/op\nBenchmarkAssertI2E-4                    20000000            84.6 ns/op\nBenchmarkAssertE2E-4                    50000000            32.5 ns/op\nBenchmarkAssertE2T2-4                   10000000           129 ns/op\nBenchmarkAssertE2T2Blank-4              100000000           18.0 ns/op\nBenchmarkAssertI2E2-4                   20000000            91.2 ns/op\nBenchmarkAssertI2E2Blank-4              100000000           16.7 ns/op\nBenchmarkAssertE2E2-4                   10000000           159 ns/op\nBenchmarkAssertE2E2Blank-4              100000000           16.8 ns/op\nBenchmarkMalloc8-4                       5000000           317 ns/op\nBenchmarkMalloc16-4                      3000000           485 ns/op\nBenchmarkMallocTypeInfo8-4               3000000           587 ns/op\nBenchmarkMallocTypeInfo16-4              2000000           661 ns/op\nBenchmarkMallocLargeStruct-4              500000          3205 ns/op\nBenchmarkGoroutineSelect-4                   100      18605318 ns/op\nBenchmarkGoroutineBlocking-4                 100      17222169 ns/op\nBenchmarkGoroutineForRange-4                 100      19092854 ns/op\nBenchmarkGoroutineIdle-4                     100      12554944 ns/op\nBenchmarkMapPop100-4                        5000        270721 ns/op\nBenchmarkMapPop1000-4                        300       4674884 ns/op\nBenchmarkMapPop10000-4                        10     110070793 ns/op\nBenchmarkHashStringSpeed-4               3000000           400 ns/op\nBenchmarkHashBytesSpeed-4                2000000           709 ns/op\nBenchmarkHashInt32Speed-4                5000000           305 ns/op\nBenchmarkHashInt64Speed-4                5000000           349 ns/op\nBenchmarkHashStringArraySpeed-4          2000000           911 ns/op\nBenchmarkMegMap-4                        5000000           367 ns/op\nBenchmarkMegOneMap-4                     5000000           311 ns/op\nBenchmarkMegEqMap-4                          100      10147332 ns/op\nBenchmarkMegEmptyMap-4                  10000000           138 ns/op\nBenchmarkSmallStrMap-4                   5000000           367 ns/op\nBenchmarkMapStringKeysEight_16-4         5000000           395 ns/op\nBenchmarkMapStringKeysEight_32-4         5000000           378 ns/op\nBenchmarkMapStringKeysEight_64-4         5000000           378 ns/op\nBenchmarkMapStringKeysEight_1M-4         5000000           376 ns/op\nBenchmarkIntMap-4                       10000000           198 ns/op\nBenchmarkRepeatedLookupStrMapKey32-4     2000000           799 ns/op\nBenchmarkRepeatedLookupStrMapKey1M-4         100      10023558 ns/op\nBenchmarkNewEmptyMap-4                   2000000           841 ns/op           0 B/op          0 allocs/op\nBenchmarkNewSmallMap-4                   1000000          2357 ns/op           0 B/op          0 allocs/op\nBenchmarkMapIter-4                       1000000          2132 ns/op\nBenchmarkMapIterEmpty-4                 20000000           107 ns/op\nBenchmarkSameLengthMap-4                20000000           111 ns/op\nBenchmarkBigKeyMap-4                     2000000           727 ns/op\nBenchmarkBigValMap-4                     2000000           754 ns/op\nBenchmarkSmallKeyMap-4                   5000000           296 ns/op\nBenchmarkComplexAlgMap-4                 1000000          1786 ns/op\nBenchmarkMemmove0-4                     30000000            47.7 ns/op\nBenchmarkMemmove1-4                     30000000            50.2 ns/op    19.93 MB/s\nBenchmarkMemmove2-4                     30000000            53.7 ns/op    37.28 MB/s\nBenchmarkMemmove3-4                     30000000            56.9 ns/op    52.76 MB/s\nBenchmarkMemmove4-4                     20000000            61.1 ns/op    65.42 MB/s\nBenchmarkMemmove5-4                     20000000            75.8 ns/op    65.95 MB/s\nBenchmarkMemmove6-4                     20000000            79.2 ns/op    75.80 MB/s\nBenchmarkMemmove7-4                     20000000            82.5 ns/op    84.84 MB/s\nBenchmarkMemmove8-4                     20000000            64.8 ns/op   123.37 MB/s\nBenchmarkMemmove9-4                     20000000            67.1 ns/op   134.16 MB/s\nBenchmarkMemmove10-4                    20000000            76.4 ns/op   130.87 MB/s\nBenchmarkMemmove11-4                    20000000            81.3 ns/op   135.30 MB/s\nBenchmarkMemmove12-4                    20000000            66.8 ns/op   179.68 MB/s\nBenchmarkMemmove13-4                    20000000            70.6 ns/op   184.23 MB/s\nBenchmarkMemmove14-4                    20000000            75.2 ns/op   186.19 MB/s\nBenchmarkMemmove15-4                    20000000            79.5 ns/op   188.74 MB/s\nBenchmarkMemmove16-4                    20000000            71.8 ns/op   222.73 MB/s\nBenchmarkMemmove32-4                    20000000            68.3 ns/op   468.52 MB/s\nBenchmarkMemmove64-4                    20000000            79.2 ns/op   808.35 MB/s\nBenchmarkMemmove128-4                   20000000           101 ns/op    1256.13 MB/s\nBenchmarkMemmove256-4                   10000000           145 ns/op    1755.64 MB/s\nBenchmarkMemmove512-4                    5000000           244 ns/op    2095.34 MB/s\nBenchmarkMemmove1024-4                   3000000           475 ns/op    2153.54 MB/s\nBenchmarkMemmove2048-4                   2000000           883 ns/op    2317.95 MB/s\nBenchmarkMemmove4096-4                   1000000          1809 ns/op    2262.99 MB/s\nBenchmarkMemmoveUnaligned0-4            30000000            58.1 ns/op\nBenchmarkMemmoveUnaligned1-4            20000000            63.3 ns/op    15.81 MB/s\nBenchmarkMemmoveUnaligned2-4            20000000            66.6 ns/op    30.04 MB/s\nBenchmarkMemmoveUnaligned3-4            20000000            69.9 ns/op    42.89 MB/s\nBenchmarkMemmoveUnaligned4-4            20000000            95.6 ns/op    41.85 MB/s\nBenchmarkMemmoveUnaligned5-4            20000000            98.6 ns/op    50.73 MB/s\nBenchmarkMemmoveUnaligned6-4            20000000            99.9 ns/op    60.08 MB/s\nBenchmarkMemmoveUnaligned7-4            20000000           101 ns/op      68.77 MB/s\nBenchmarkMemmoveUnaligned8-4            20000000           108 ns/op      73.58 MB/s\nBenchmarkMemmoveUnaligned9-4            20000000           112 ns/op      79.90 MB/s\nBenchmarkMemmoveUnaligned10-4           10000000           126 ns/op      79.18 MB/s\nBenchmarkMemmoveUnaligned11-4           10000000           128 ns/op      85.32 MB/s\nBenchmarkMemmoveUnaligned12-4           10000000           132 ns/op      90.67 MB/s\nBenchmarkMemmoveUnaligned13-4           10000000           125 ns/op     103.51 MB/s\nBenchmarkMemmoveUnaligned14-4           10000000           132 ns/op     105.50 MB/s\nBenchmarkMemmoveUnaligned15-4           10000000           138 ns/op     108.38 MB/s\nBenchmarkMemmoveUnaligned16-4           10000000           141 ns/op     112.89 MB/s\nBenchmarkMemmoveUnaligned32-4           10000000           154 ns/op     207.69 MB/s\nBenchmarkMemmoveUnaligned64-4           10000000           211 ns/op     303.20 MB/s\nBenchmarkMemmoveUnaligned128-4           5000000           318 ns/op     401.47 MB/s\nBenchmarkMemmoveUnaligned256-4           3000000           436 ns/op     586.76 MB/s\nBenchmarkMemmoveUnaligned512-4           2000000           722 ns/op     708.50 MB/s\nBenchmarkMemmoveUnaligned1024-4          1000000          1296 ns/op     789.56 MB/s\nBenchmarkMemmoveUnaligned2048-4           500000          2576 ns/op     794.83 MB/s\nBenchmarkMemmoveUnaligned4096-4           300000          4999 ns/op     819.32 MB/s\nBenchmarkMemclr5-4                      20000000            77.1 ns/op    64.82 MB/s\nBenchmarkMemclr16-4                     20000000            96.3 ns/op   166.15 MB/s\nBenchmarkMemclr64-4                     20000000            85.0 ns/op   753.23 MB/s\nBenchmarkMemclr256-4                    10000000           125 ns/op    2040.75 MB/s\nBenchmarkMemclr4096-4                    1000000          1662 ns/op    2464.13 MB/s\nBenchmarkMemclr65536-4                     30000         50428 ns/op    1299.58 MB/s\nBenchmarkMemclr1M-4                         2000        875472 ns/op    1197.73 MB/s\nBenchmarkMemclr4M-4                          500       3529939 ns/op    1188.21 MB/s\nBenchmarkMemclr8M-4                          200       7088731 ns/op    1183.37 MB/s\nBenchmarkMemclr16M-4                         100      14275180 ns/op    1175.27 MB/s\nBenchmarkMemclr64M-4                          20      59343321 ns/op    1130.86 MB/s\nBenchmarkGoMemclr5-4                    20000000            61.4 ns/op    81.44 MB/s\nBenchmarkGoMemclr16-4                   20000000            81.7 ns/op   195.78 MB/s\nBenchmarkGoMemclr64-4                   20000000            69.8 ns/op   917.14 MB/s\nBenchmarkGoMemclr256-4                  20000000           109 ns/op    2339.84 MB/s\nBenchmarkClearFat8-4                    200000000            7.84 ns/op\nBenchmarkClearFat12-4                   200000000            8.93 ns/op\nBenchmarkClearFat16-4                   100000000           10.1 ns/op\nBenchmarkClearFat24-4                   100000000           12.3 ns/op\nBenchmarkClearFat32-4                   100000000           14.5 ns/op\nBenchmarkClearFat40-4                   30000000            52.4 ns/op\nBenchmarkClearFat48-4                   20000000            60.3 ns/op\nBenchmarkClearFat56-4                   20000000            65.9 ns/op\nBenchmarkClearFat64-4                   20000000            73.8 ns/op\nBenchmarkClearFat128-4                  10000000           126 ns/op\nBenchmarkClearFat256-4                  10000000           234 ns/op\nBenchmarkClearFat512-4                   3000000           448 ns/op\nBenchmarkClearFat1024-4                  2000000           872 ns/op\nBenchmarkCopyFat8-4                     200000000            6.72 ns/op\nBenchmarkCopyFat12-4                    200000000            7.80 ns/op\nBenchmarkCopyFat16-4                    200000000            8.93 ns/op\nBenchmarkCopyFat24-4                    100000000           11.2 ns/op\nBenchmarkCopyFat32-4                    100000000           17.9 ns/op\nBenchmarkCopyFat64-4                    20000000            75.0 ns/op\nBenchmarkCopyFat128-4                   10000000           128 ns/op\nBenchmarkCopyFat256-4                   10000000           236 ns/op\nBenchmarkCopyFat512-4                    3000000           449 ns/op\nBenchmarkCopyFat1024-4                   2000000           879 ns/op\nBenchmarkFinalizer-4                         500       3830391 ns/op\nBenchmarkFinalizerRun-4                   200000          6697 ns/op\nBenchmarkSyscall-4                       5000000           296 ns/op\nBenchmarkSyscallWork-4                   3000000           551 ns/op\nBenchmarkSyscallExcess-4                 5000000           296 ns/op\nBenchmarkSyscallExcessWork-4             3000000           552 ns/op\nBenchmarkPingPongHog-4                    100000         13315 ns/op\nBenchmarkStackGrowth-4                    500000          2461 ns/op\nBenchmarkStackGrowthDeep-4                  2000       1028254 ns/op\nBenchmarkCreateGoroutines-4               500000          2722 ns/op\nBenchmarkCreateGoroutinesParallel-4      2000000           649 ns/op\nBenchmarkCreateGoroutinesCapture-4        100000         21739 ns/op          16 B/op          1 allocs/op\nBenchmarkClosureCall-4                  30000000            48.0 ns/op\nBenchmarkMatmult-4                      50000000            40.3 ns/op\nBenchmarkIfaceCmp100-4                    500000          2369 ns/op\nBenchmarkIfaceCmpNil100-4                 500000          2475 ns/op\nBenchmarkDefer-4                         1000000          1203 ns/op\nBenchmarkDefer10-4                       1000000          1089 ns/op\nBenchmarkDeferMany-4                     1000000          2045 ns/op\nBenchmarkStackCopy-4                           1    2767373639 ns/op\nBenchmarkCompareStringEqual-4           10000000           140 ns/op\nBenchmarkCompareStringIdentical-4       30000000            41.4 ns/op\nBenchmarkCompareStringSameLength-4      20000000            92.0 ns/op\nBenchmarkCompareStringDifferentLength-4 100000000           13.4 ns/op\nBenchmarkCompareStringBigUnaligned-4         100      11917034 ns/op      87.99 MB/s\nBenchmarkCompareStringBig-4                  200      10163432 ns/op     103.17 MB/s\nBenchmarkRuneIterate-4                    500000          3969 ns/op\nBenchmarkRuneIterate2-4                   500000          3947 ns/op\nBenchmarkUint32Div7-4                   20000000           102 ns/op\nBenchmarkUint32Div37-4                  20000000           102 ns/op\nBenchmarkUint32Div123-4                 20000000           102 ns/op\nBenchmarkUint32Div763-4                 20000000           102 ns/op\nBenchmarkUint32Div1247-4                20000000           102 ns/op\nBenchmarkUint32Div9305-4                20000000           102 ns/op\nBenchmarkUint32Div13307-4               20000000           102 ns/op\nBenchmarkUint32Div52513-4               20000000           103 ns/op\nBenchmarkUint32Div60978747-4            20000000            98.7 ns/op\nBenchmarkUint32Div106956295-4           20000000           100.0 ns/op\nBenchmarkUint32Mod7-4                   20000000           102 ns/op\nBenchmarkUint32Mod37-4                  20000000           102 ns/op\nBenchmarkUint32Mod123-4                 20000000           102 ns/op\nBenchmarkUint32Mod763-4                 20000000           103 ns/op\nBenchmarkUint32Mod1247-4                20000000           103 ns/op\nBenchmarkUint32Mod9305-4                20000000           102 ns/op\nBenchmarkUint32Mod13307-4               20000000           102 ns/op\nBenchmarkUint32Mod52513-4               20000000           103 ns/op\nBenchmarkUint32Mod60978747-4            20000000           100 ns/op\nBenchmarkUint32Mod106956295-4           20000000           100 ns/op\nok      runtime 562.289s\n</code></pre>"},{"location":"GoArm/#raspberry-pi-zero","title":"Raspberry Pi Zero","text":"<p>Architecture: 1 GHz ARM1176JZF-S, running at 700Mhz; 512MB RAM</p> <p>Operating System: Raspbian Jessie</p> <pre><code>$ go version\ngo version devel +5c24832 Sat Dec 5 00:10:40 2015 +0000 linux/arm\n\n$ go test -timeout 20m -v -bench=Benchmark -run=X\nPASS\nBenchmarkAppend                        3000000         518 ns/op\nBenchmarkAppendGrowByte                     20    95720661 ns/op\nBenchmarkAppendGrowString                    1  2232033275 ns/op\nBenchmarkAppend1Byte                  20000000          99.0 ns/op\nBenchmarkAppend4Bytes                 10000000         120 ns/op\nBenchmarkAppend7Bytes                 10000000         155 ns/op\nBenchmarkAppend8Bytes                 10000000         132 ns/op\nBenchmarkAppend15Bytes                10000000         162 ns/op\nBenchmarkAppend16Bytes                10000000         134 ns/op\nBenchmarkAppend32Bytes                10000000         121 ns/op\nBenchmarkAppendStr1Byte               20000000          97.0 ns/op\nBenchmarkAppendStr4Bytes              10000000         118 ns/op\nBenchmarkAppendStr8Bytes              10000000         129 ns/op\nBenchmarkAppendStr16Bytes             10000000         132 ns/op\nBenchmarkAppendStr32Bytes             10000000         121 ns/op\nBenchmarkAppendSpecialCase             2000000         791 ns/op\nBenchmarkCopy1Byte                    10000000         132 ns/op     7.54 MB/s\nBenchmarkCopy2Byte                    10000000         144 ns/op    13.81 MB/s\nBenchmarkCopy4Byte                    10000000         153 ns/op    26.12 MB/s\nBenchmarkCopy8Byte                    10000000         164 ns/op    48.51 MB/s\nBenchmarkCopy12Byte                   10000000         162 ns/op    74.03 MB/s\nBenchmarkCopy16Byte                   10000000         167 ns/op    95.63 MB/s\nBenchmarkCopy32Byte                   10000000         155 ns/op   205.20 MB/s\nBenchmarkCopy128Byte                  10000000         192 ns/op   664.06 MB/s\nBenchmarkCopy1024Byte                  2000000         689 ns/op  1484.28 MB/s\nBenchmarkCopy1String                  10000000         120 ns/op     8.27 MB/s\nBenchmarkCopy2String                  10000000         134 ns/op    14.85 MB/s\nBenchmarkCopy4String                  10000000         142 ns/op    28.01 MB/s\nBenchmarkCopy8String                  10000000         154 ns/op    51.81 MB/s\nBenchmarkCopy12String                 10000000         151 ns/op    79.01 MB/s\nBenchmarkCopy16String                 10000000         157 ns/op   101.82 MB/s\nBenchmarkCopy32String                 10000000         145 ns/op   219.52 MB/s\nBenchmarkCopy128String                10000000         182 ns/op   700.88 MB/s\nBenchmarkCopy1024String                2000000         976 ns/op  1048.87 MB/s\nBenchmarkChanNonblocking               5000000         246 ns/op\nBenchmarkSelectUncontended              500000        3610 ns/op\nBenchmarkSelectSyncContended            100000       18957 ns/op\nBenchmarkSelectAsyncContended           500000        3614 ns/op\nBenchmarkSelectNonblock                2000000         814 ns/op\nBenchmarkChanUncontended                 10000      135820 ns/op\nBenchmarkChanContended                   10000      133122 ns/op\nBenchmarkChanSync                       200000        5870 ns/op\nBenchmarkChanProdCons0                  200000        5899 ns/op\nBenchmarkChanProdCons10                 500000        2138 ns/op\nBenchmarkChanProdCons100               1000000        1557 ns/op\nBenchmarkChanProdConsWork0              200000        8948 ns/op\nBenchmarkChanProdConsWork10             300000        5043 ns/op\nBenchmarkChanProdConsWork100            300000        4498 ns/op\nBenchmarkSelectProdCons                 200000       10818 ns/op\nBenchmarkChanCreation                   500000        3187 ns/op\nBenchmarkChanSem                       1000000        1266 ns/op\nBenchmarkChanPopular                       100    14315946 ns/op\nBenchmarkCallClosure                  30000000          50.0 ns/op\nBenchmarkCallClosure1                 30000000          56.3 ns/op\nBenchmarkCallClosure2                  3000000         512 ns/op\nBenchmarkCallClosure3                  3000000         503 ns/op\nBenchmarkCallClosure4                  3000000         512 ns/op\nBenchmarkComplex128DivNormal           2000000         735 ns/op\nBenchmarkComplex128DivNisNaN            200000        6001 ns/op\nBenchmarkComplex128DivDisNaN            200000        5992 ns/op\nBenchmarkComplex128DivNisInf           5000000         390 ns/op\nBenchmarkComplex128DivDisInf           5000000         375 ns/op\nBenchmarkSetTypePtr                   10000000         119 ns/op    33.43 MB/s\nBenchmarkSetTypePtr8                  10000000         227 ns/op   140.89 MB/s\nBenchmarkSetTypePtr16                  5000000         285 ns/op   224.30 MB/s\nBenchmarkSetTypePtr32                  5000000         388 ns/op   329.65 MB/s\nBenchmarkSetTypePtr64                  3000000         591 ns/op   432.77 MB/s\nBenchmarkSetTypePtr126                 1000000        1021 ns/op   493.46 MB/s\nBenchmarkSetTypePtr128                 1000000        1003 ns/op   510.46 MB/s\nBenchmarkSetTypePtrSlice                200000        7427 ns/op   551.43 MB/s\nBenchmarkSetTypeNode1                 10000000         217 ns/op    55.20 MB/s\nBenchmarkSetTypeNode1Slice             1000000        1284 ns/op   299.03 MB/s\nBenchmarkSetTypeNode8                  5000000         277 ns/op   144.17 MB/s\nBenchmarkSetTypeNode8Slice              500000        2825 ns/op   453.02 MB/s\nBenchmarkSetTypeNode64                 2000000         661 ns/op   398.89 MB/s\nBenchmarkSetTypeNode64Slice             100000       15531 ns/op   543.92 MB/s\nBenchmarkSetTypeNode64Dead             5000000         382 ns/op   689.66 MB/s\nBenchmarkSetTypeNode64DeadSlice         100000       13252 ns/op   637.46 MB/s\nBenchmarkSetTypeNode124                1000000        1017 ns/op   495.27 MB/s\nBenchmarkSetTypeNode124Slice             50000       28139 ns/op   573.14 MB/s\nBenchmarkSetTypeNode126                2000000        1001 ns/op   511.10 MB/s\nBenchmarkSetTypeNode126Slice             50000       26535 ns/op   617.43 MB/s\nBenchmarkSetTypeNode128                1000000        1087 ns/op   478.22 MB/s\nBenchmarkSetTypeNode128Slice             50000       29166 ns/op   570.52 MB/s\nBenchmarkSetTypeNode130                1000000        1067 ns/op   494.83 MB/s\nBenchmarkSetTypeNode130Slice             50000       29691 ns/op   569.04 MB/s\nBenchmarkSetTypeNode1024                200000        7155 ns/op   573.51 MB/s\nBenchmarkSetTypeNode1024Slice             5000      224292 ns/op   585.52 MB/s\nBenchmarkAllocation                       2000      957094 ns/op\nBenchmarkHash5                         5000000         349 ns/op    14.29 MB/s\nBenchmarkHash16                        3000000         436 ns/op    36.66 MB/s\nBenchmarkHash64                        1000000        1007 ns/op    63.49 MB/s\nBenchmarkHash1024                       200000       11267 ns/op    90.88 MB/s\nBenchmarkHash65536                        2000      797741 ns/op    82.15 MB/s\nBenchmarkEqEfaceConcrete              20000000         111 ns/op\nBenchmarkEqIfaceConcrete              20000000         106 ns/op\nBenchmarkNeEfaceConcrete              20000000         111 ns/op\nBenchmarkNeIfaceConcrete              20000000         106 ns/op\nBenchmarkConvT2ESmall                  3000000         561 ns/op\nBenchmarkConvT2EUintptr                2000000         599 ns/op\nBenchmarkConvT2ELarge                  2000000         767 ns/op\nBenchmarkConvT2ISmall                  2000000         724 ns/op\nBenchmarkConvT2IUintptr                2000000         750 ns/op\nBenchmarkConvT2ILarge                  2000000         907 ns/op\nBenchmarkConvI2E                      20000000          76.7 ns/op\nBenchmarkConvI2I                       3000000         425 ns/op\nBenchmarkAssertE2T                    10000000         176 ns/op\nBenchmarkAssertE2TLarge               10000000         189 ns/op\nBenchmarkAssertE2I                     3000000         455 ns/op\nBenchmarkAssertI2T                    10000000         176 ns/op\nBenchmarkAssertI2I                     3000000         451 ns/op\nBenchmarkAssertI2E                    20000000         109 ns/op\nBenchmarkAssertE2E                    30000000          40.7 ns/op\nBenchmarkAssertE2T2                   10000000         180 ns/op\nBenchmarkAssertE2T2Blank              50000000          22.8 ns/op\nBenchmarkAssertI2E2                   20000000         117 ns/op\nBenchmarkAssertI2E2Blank              100000000         21.7 ns/op\nBenchmarkAssertE2E2                   10000000         231 ns/op\nBenchmarkAssertE2E2Blank              100000000         21.8 ns/op\nBenchmarkMalloc8                       3000000         507 ns/op\nBenchmarkMalloc16                      2000000         848 ns/op\nBenchmarkMallocTypeInfo8               2000000        1012 ns/op\nBenchmarkMallocTypeInfo16              1000000        1168 ns/op\nBenchmarkMallocLargeStruct              500000        4823 ns/op\nBenchmarkGoroutineSelect                    20    76172338 ns/op\nBenchmarkGoroutineBlocking                  20    63469806 ns/op\nBenchmarkGoroutineForRange                  20    64107650 ns/op\nBenchmarkGoroutineIdle                      20    60844381 ns/op\nBenchmarkMapPop100                        3000      409498 ns/op\nBenchmarkMapPop1000                        200     7783817 ns/op\nBenchmarkMapPop10000                        10   170736704 ns/op\nBenchmarkHashStringSpeed               3000000         541 ns/op\nBenchmarkHashBytesSpeed                1000000        1157 ns/op\nBenchmarkHashInt32Speed                5000000         371 ns/op\nBenchmarkHashInt64Speed                3000000         427 ns/op\nBenchmarkHashStringArraySpeed          1000000        1417 ns/op\nBenchmarkMegMap                        3000000         404 ns/op\nBenchmarkMegOneMap                     5000000         346 ns/op\nBenchmarkMegEqMap                          100    16663414 ns/op\nBenchmarkMegEmptyMap                  10000000         160 ns/op\nBenchmarkSmallStrMap                   3000000         415 ns/op\nBenchmarkMapStringKeysEight_16         3000000         417 ns/op\nBenchmarkMapStringKeysEight_32         3000000         420 ns/op\nBenchmarkMapStringKeysEight_64         3000000         420 ns/op\nBenchmarkMapStringKeysEight_1M         3000000         419 ns/op\nBenchmarkIntMap                       10000000         220 ns/op\nBenchmarkRepeatedLookupStrMapKey32     1000000        1015 ns/op\nBenchmarkRepeatedLookupStrMapKey1M         100    15652033 ns/op\nBenchmarkNewEmptyMap                   1000000        1395 ns/op         0 B/op        0 allocs/op\nBenchmarkNewSmallMap                    300000        3368 ns/op         0 B/op        0 allocs/op\nBenchmarkMapIter                        500000        2947 ns/op\nBenchmarkMapIterEmpty                 20000000         163 ns/op\nBenchmarkSameLengthMap                10000000         133 ns/op\nBenchmarkBigKeyMap                     2000000         899 ns/op\nBenchmarkBigValMap                     2000000         922 ns/op\nBenchmarkSmallKeyMap                   3000000         402 ns/op\nBenchmarkComplexAlgMap                 1000000        2003 ns/op\nBenchmarkMemmove0                     20000000          61.4 ns/op\nBenchmarkMemmove1                     20000000          76.6 ns/op    13.05 MB/s\nBenchmarkMemmove2                     20000000          86.3 ns/op    23.18 MB/s\nBenchmarkMemmove3                     20000000          83.7 ns/op    35.83 MB/s\nBenchmarkMemmove4                     20000000          88.0 ns/op    45.48 MB/s\nBenchmarkMemmove5                     20000000         110 ns/op    45.37 MB/s\nBenchmarkMemmove6                     20000000         115 ns/op    51.99 MB/s\nBenchmarkMemmove7                     10000000         123 ns/op    56.89 MB/s\nBenchmarkMemmove8                     20000000          99.5 ns/op    80.44 MB/s\nBenchmarkMemmove9                     20000000         112 ns/op    79.76 MB/s\nBenchmarkMemmove10                    10000000         125 ns/op    79.48 MB/s\nBenchmarkMemmove11                    10000000         125 ns/op    87.84 MB/s\nBenchmarkMemmove12                    20000000          96.9 ns/op   123.87 MB/s\nBenchmarkMemmove13                    20000000         110 ns/op   117.83 MB/s\nBenchmarkMemmove14                    10000000         123 ns/op   113.65 MB/s\nBenchmarkMemmove15                    10000000         122 ns/op   122.30 MB/s\nBenchmarkMemmove16                    20000000         101 ns/op   156.89 MB/s\nBenchmarkMemmove32                    20000000          90.8 ns/op   352.44 MB/s\nBenchmarkMemmove64                    20000000         108 ns/op   588.34 MB/s\nBenchmarkMemmove128                   10000000         127 ns/op  1001.83 MB/s\nBenchmarkMemmove256                   10000000         178 ns/op  1436.19 MB/s\nBenchmarkMemmove512                    5000000         326 ns/op  1569.07 MB/s\nBenchmarkMemmove1024                   2000000         631 ns/op  1620.84 MB/s\nBenchmarkMemmove2048                   1000000        1251 ns/op  1636.60 MB/s\nBenchmarkMemmove4096                    500000        2499 ns/op  1638.97 MB/s\nBenchmarkMemmoveUnaligned0            20000000          72.5 ns/op\nBenchmarkMemmoveUnaligned1            20000000          87.8 ns/op    11.39 MB/s\nBenchmarkMemmoveUnaligned2            20000000          99.4 ns/op    20.12 MB/s\nBenchmarkMemmoveUnaligned3            20000000          96.9 ns/op    30.96 MB/s\nBenchmarkMemmoveUnaligned4            10000000         135 ns/op    29.44 MB/s\nBenchmarkMemmoveUnaligned5            10000000         147 ns/op    33.90 MB/s\nBenchmarkMemmoveUnaligned6            10000000         146 ns/op    41.09 MB/s\nBenchmarkMemmoveUnaligned7            10000000         151 ns/op    46.27 MB/s\nBenchmarkMemmoveUnaligned8            10000000         156 ns/op    51.22 MB/s\nBenchmarkMemmoveUnaligned9            10000000         161 ns/op    55.82 MB/s\nBenchmarkMemmoveUnaligned10           10000000         166 ns/op    60.09 MB/s\nBenchmarkMemmoveUnaligned11           10000000         171 ns/op    64.17 MB/s\nBenchmarkMemmoveUnaligned12           10000000         177 ns/op    67.79 MB/s\nBenchmarkMemmoveUnaligned13           10000000         181 ns/op    71.60 MB/s\nBenchmarkMemmoveUnaligned14           10000000         189 ns/op    74.03 MB/s\nBenchmarkMemmoveUnaligned15           10000000         196 ns/op    76.30 MB/s\nBenchmarkMemmoveUnaligned16           10000000         200 ns/op    79.91 MB/s\nBenchmarkMemmoveUnaligned32           10000000         221 ns/op   144.64 MB/s\nBenchmarkMemmoveUnaligned64            5000000         290 ns/op   220.16 MB/s\nBenchmarkMemmoveUnaligned128           3000000         413 ns/op   309.84 MB/s\nBenchmarkMemmoveUnaligned256           2000000         766 ns/op   334.16 MB/s\nBenchmarkMemmoveUnaligned512           2000000         925 ns/op   553.13 MB/s\nBenchmarkMemmoveUnaligned1024           500000        2747 ns/op   372.66 MB/s\nBenchmarkMemmoveUnaligned2048           500000        3180 ns/op   643.85 MB/s\nBenchmarkMemmoveUnaligned4096           200000        6206 ns/op   659.99 MB/s\nBenchmarkMemclr5                      20000000         105 ns/op    47.53 MB/s\nBenchmarkMemclr16                     20000000         110 ns/op   144.77 MB/s\nBenchmarkMemclr64                     10000000         125 ns/op   511.58 MB/s\nBenchmarkMemclr256                    10000000         182 ns/op  1402.34 MB/s\nBenchmarkMemclr4096                     500000        2489 ns/op  1645.22 MB/s\nBenchmarkMemclr65536                     50000       39883 ns/op  1643.18 MB/s\nBenchmarkMemclr1M                         2000      636812 ns/op  1646.60 MB/s\nBenchmarkMemclr4M                          500     2549362 ns/op  1645.24 MB/s\nBenchmarkMemclr8M                          300     5162451 ns/op  1624.93 MB/s\nBenchmarkMemclr16M                         200    10300878 ns/op  1628.72 MB/s\nBenchmarkMemclr64M                          30    42801198 ns/op  1567.92 MB/s\nBenchmarkGoMemclr5                    20000000          73.5 ns/op    67.99 MB/s\nBenchmarkGoMemclr16                   20000000          85.9 ns/op   186.24 MB/s\nBenchmarkGoMemclr64                   20000000          87.8 ns/op   729.24 MB/s\nBenchmarkGoMemclr256                  10000000         160 ns/op  1591.97 MB/s\nBenchmarkClearFat8                    100000000         15.6 ns/op\nBenchmarkClearFat12                   100000000         27.5 ns/op\nBenchmarkClearFat16                   100000000         32.4 ns/op\nBenchmarkClearFat24                   50000000          57.0 ns/op\nBenchmarkClearFat32                   50000000          80.5 ns/op\nBenchmarkClearFat40                   30000000          77.5 ns/op\nBenchmarkClearFat48                   30000000         105 ns/op\nBenchmarkClearFat56                   20000000          87.1 ns/op\nBenchmarkClearFat64                   20000000         137 ns/op\nBenchmarkClearFat128                  20000000         278 ns/op\nBenchmarkClearFat256                   5000000         537 ns/op\nBenchmarkClearFat512                   2000000        1293 ns/op\nBenchmarkClearFat1024                  1000000        2545 ns/op\nBenchmarkCopyFat8                     100000000         12.2 ns/op\nBenchmarkCopyFat12                    100000000         20.3 ns/op\nBenchmarkCopyFat16                    100000000         34.3 ns/op\nBenchmarkCopyFat24                    50000000          27.7 ns/op\nBenchmarkCopyFat32                    50000000          25.4 ns/op\nBenchmarkCopyFat64                    20000000         135 ns/op\nBenchmarkCopyFat128                   10000000         299 ns/op\nBenchmarkCopyFat256                    2000000         571 ns/op\nBenchmarkCopyFat512                    1000000        1218 ns/op\nBenchmarkCopyFat1024                    500000        2665 ns/op\nBenchmarkFinalizer                          50    20313669 ns/op\nBenchmarkFinalizerRun                    30000       49987 ns/op\nBenchmarkSyscall                       1000000        1625 ns/op\nBenchmarkSyscallWork                    500000        2668 ns/op\nBenchmarkSyscallExcess                 1000000        1613 ns/op\nBenchmarkSyscallExcessWork              500000        2658 ns/op\nBenchmarkPingPongHog                    100000       20539 ns/op\nBenchmarkStackGrowth                     50000       28473 ns/op\nBenchmarkStackGrowthDeep                   500     2845263 ns/op\nBenchmarkCreateGoroutines               300000        4297 ns/op\nBenchmarkCreateGoroutinesParallel       300000        4300 ns/op\nBenchmarkCreateGoroutinesCapture         50000       33218 ns/op        16 B/op        1 allocs/op\nBenchmarkClosureCall                  30000000          55.1 ns/op\nBenchmarkMatmult                      10000000         196 ns/op\nBenchmarkIfaceCmp100                    500000        2672 ns/op\nBenchmarkIfaceCmpNil100                 500000        2982 ns/op\nBenchmarkDefer                         1000000        1819 ns/op\nBenchmarkDefer10                       1000000        1478 ns/op\nBenchmarkDeferMany                      500000        3464 ns/op\nBenchmarkStackCopy                           1  3714828065 ns/op\nBenchmarkCompareStringEqual           10000000         160 ns/op\nBenchmarkCompareStringIdentical       30000000          54.1 ns/op\nBenchmarkCompareStringSameLength      20000000         111 ns/op\nBenchmarkCompareStringDifferentLength 100000000         16.3 ns/op\nBenchmarkCompareStringBigUnaligned         100    16695582 ns/op    62.81 MB/s\nBenchmarkCompareStringBig                  100    17208318 ns/op    60.93 MB/s\nBenchmarkRuneIterate                    300000        5159 ns/op\nBenchmarkRuneIterate2                   300000        5158 ns/op\nBenchmarkUint32Div7                   10000000         144 ns/op\nBenchmarkUint32Div37                  10000000         144 ns/op\nBenchmarkUint32Div123                 10000000         144 ns/op\nBenchmarkUint32Div763                 10000000         148 ns/op\nBenchmarkUint32Div1247                10000000         144 ns/op\nBenchmarkUint32Div9305                10000000         144 ns/op\nBenchmarkUint32Div13307               10000000         144 ns/op\nBenchmarkUint32Div52513               10000000         144 ns/op\nBenchmarkUint32Div60978747            10000000         131 ns/op\nBenchmarkUint32Div106956295           10000000         131 ns/op\nBenchmarkUint32Mod7                   10000000         144 ns/op\nBenchmarkUint32Mod37                  10000000         144 ns/op\nBenchmarkUint32Mod123                 10000000         144 ns/op\nBenchmarkUint32Mod763                 10000000         144 ns/op\nBenchmarkUint32Mod1247                10000000         144 ns/op\nBenchmarkUint32Mod9305                10000000         144 ns/op\nBenchmarkUint32Mod13307               10000000         144 ns/op\nBenchmarkUint32Mod52513               10000000         144 ns/op\nBenchmarkUint32Mod60978747            10000000         131 ns/op\nBenchmarkUint32Mod106956295           10000000         131 ns/op\nok    runtime 566.969s\n</code></pre>"},{"location":"GoArm/#odroid-x","title":"ODROID-X","text":"<p>Architecture: ARMv7 quad-core Cortex-A9 (Samsung Exynos 4412 1.4GHz), 1GB RAM, Mali graphics (untested).</p> <p>Operating System: Archlinux ARM</p> <p>Go pre-1.1 compiles out of the box. The four cores make it particularly suited to Go multi-threaded programs. An ODROID-X2 is coming (Nov 2012) with more RAM.</p> <p>\u2013 R\u00e9my Oudompheng</p>"},{"location":"GoArm/#bananapi","title":"BananaPi","text":"<p>BananaPi has a few enhanced hardware components compare with Raspberry Pi.</p> Architecture Comments Allwinner A20(ARM Cortex-A7 Dual-core, 1GHz, Mali400MP2 GPU) tbc eSATA No worry to wear out your root SD Card Onboard Microphone tbc 1G Ethernet tbc 1G RAM tbc Reset Switch To reset the board ? Power Switch To power cycle the board ? <pre><code>root@bpi01:/data/go13/src# cat ./buildgo.bash\n##!/bin/bash\n## use 1 CPU to avoid out of memory compilation issue.\ntime taskset 2 ./make.bash\n\nroot@bpi01:/data/go13/src# ./buildgo.bash\n\n&lt;snipped&gt;\n\nInstalled Go for linux/arm in /data/go1.3\nInstalled commands in /data/go1.3/bin\n\nreal    9m9.222s\nuser    8m18.960s\nsys     0m40.920s\nroot@bpi01:/data/go1.3/src#\n</code></pre> <p>\u2013T.J. Yang</p>"},{"location":"GoArm/#appliedmicro-x-gene-armv8","title":"AppliedMicro X-Gene (ARMv8)","text":"<p>Architecture: ARMv8 (64-bit) 8-core, 2.4GHz, 16GB RAM</p> <p>Operating Systems: Linux, Fedora 21</p> <p>You will need to cross-compile a toolchain using bootstrap.bash. After you copy it to the arm64 system and set <code>GOROOT_BOOTSTRAP</code>, you can build go natively.</p>"},{"location":"GoArm/#96boards-hikey-armv8","title":"96Boards HiKey (ARMv8)","text":"<p>Architecture: ARMv8 (64-bit) 8-core, 1.2GHz, 1GB RAM</p> <p>Operating System: Linux (Linaro)</p> <p>Go Version:  1.5Beta1</p> <p>Special Notes:  Enable a swap partition (&lt;=1GB is fine). Build process is CPU-intensive and may cause the internal 90C temperature threshold to be exceeded - keep the HiKey cool during the build.</p> <p>As mentioned above, use bootstrap.sh (e.g. on Ubuntu AMD64) for ARM64, then transfer over the bootstrap tbx file, untar it, and use it as GOROOT_BOOTSTRAP.  Check out the Go sources into a separate GOROOT, and build.</p> <p>\u2013Andrew Cencini (andrew@vapor.io)</p>"},{"location":"GoArm/#scaleway-c1-server","title":"Scaleway C1 Server","text":"<p>Architecture: armv7l</p> <p>Operating System: Debian 8.2 (armhf)</p> <p>Go Version: 1.5</p> <p>The Scaleway C1 Server is a dedicated ARM server with 2GiB RAM using a SAN for storage.</p> <p>I used the following guide: Building Go 1.5 on the Raspberry Pi</p> <p>_\u2013Laurent Debacker</p>"},{"location":"GoArm/#jetson-nano","title":"Jetson Nano","text":"<p>Jetson Nano\u2122 from NVIDIA\u00ae is a high performance low-power single board computer built for edge Artificial Intelligence computing. It has Quad-core ARM57 based CPU clocked at 1.43 Ghz, 128-core Maxwell based GPU and 4GB of LPDDR4 memory with 25.6 GB/s bandwidth.</p> <p>Architecture: ARMv8-A</p> <p>Operating System: Jetson Nano Developer Kit (Ubuntu 18.04 LTS) with JetPack 4.2</p> <p>Kernel: I'm using a custom compiled official kernel with patch for enabling Zswap and having the root file system in a USB SSD. The procedure for doing this is detailed in Syonyk's blog. <pre><code>abishek@Titan:~$ uname -a\nLinux Titan 4.9.140 #1 SMP PREEMPT Thu May 23 01:33:05 IST 2019 aarch64 aarch64 aarch64 GNU/Linux\n</code></pre></p> <p>Go Version: <pre><code>abishek@Titan:~$ go version\ngo version go1.12.5 linux/arm64\n</code></pre> I used the ARMv8 version from Other Ports section of official downloads. I set the following system wide environment variables in /etc/environment. <pre><code>GOROOT=\"/usr/local/go\"\nGOPATH=\"/home/abishek/Developer/go/packages\"\nPATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/local/go/bin:/home/abishek/Developer/go/packages/bin\"\nLANG=\"en_IN\"\n</code></pre></p> <p>Benchmarks:</p> <p>HW configuration : 5V 4A power via DC barrel jack. Noctua 40mm PWM fan. Samsung 840 EVO 120 GB SSD.</p> <p>SW configuration : Headless. Zswap. 12 GB swap partition.</p> <p>Simple benchmark. <pre><code>abishek@Titan:~$ cd $GOROOT/src/runtime\n$ go test -test.bench=BenchmarkUint\nPASS\nok  \truntime\t \t329.992s\n</code></pre> Extensive benchmarks. <pre><code>$ go test -test.bench=\".*\" -test.timeout=\"60m\"\ngoos: linux\ngoarch: arm64\npkg: runtime\nBenchmarkMakeChan/Byte-4                  \t10000000\t       219 ns/op\nBenchmarkMakeChan/Int-4                   \t 5000000\t       298 ns/op\nBenchmarkMakeChan/Ptr-4                   \t 3000000\t       452 ns/op\nBenchmarkMakeChan/Struct/0-4              \t10000000\t       196 ns/op\nBenchmarkMakeChan/Struct/32-4             \t 3000000\t       519 ns/op\nBenchmarkMakeChan/Struct/40-4             \t 3000000\t       592 ns/op\nBenchmarkChanNonblocking-4                \t200000000\t         7.93 ns/op\nBenchmarkSelectUncontended-4              \t10000000\t       124 ns/op\nBenchmarkSelectSyncContended-4            \t  200000\t      7358 ns/op\nBenchmarkSelectAsyncContended-4           \t 2000000\t       671 ns/op\nBenchmarkSelectNonblock-4                 \t100000000\t        22.7 ns/op\nBenchmarkChanUncontended-4                \t  200000\t      6956 ns/op\nBenchmarkChanContended-4                  \t   30000\t     51996 ns/op\nBenchmarkChanSync-4                       \t 1000000\t      1118 ns/op\nBenchmarkChanSyncWork-4                   \t  200000\t     11784 ns/op\nBenchmarkChanProdCons0-4                  \t 2000000\t       817 ns/op\nBenchmarkChanProdCons10-4                 \t 2000000\t       656 ns/op\nBenchmarkChanProdCons100-4                \t 3000000\t       561 ns/op\nBenchmarkChanProdConsWork0-4              \t 2000000\t       803 ns/op\nBenchmarkChanProdConsWork10-4             \t 2000000\t       706 ns/op\nBenchmarkChanProdConsWork100-4            \t 2000000\t       633 ns/op\nBenchmarkSelectProdCons-4                 \t 1000000\t      1411 ns/op\nBenchmarkChanCreation-4                   \t10000000\t       206 ns/op\nBenchmarkChanSem-4                        \t 3000000\t       502 ns/op\nBenchmarkChanPopular-4                    \t    1000\t   1503920 ns/op\nBenchmarkCallClosure-4                    \t200000000\t         6.54 ns/op\nBenchmarkCallClosure1-4                   \t300000000\t         5.94 ns/op\nBenchmarkCallClosure2-4                   \t20000000\t        72.0 ns/op\nBenchmarkCallClosure3-4                   \t20000000\t        77.9 ns/op\nBenchmarkCallClosure4-4                   \t20000000\t        74.6 ns/op\nBenchmarkComplex128DivNormal-4            \t20000000\t        72.3 ns/op\nBenchmarkComplex128DivNisNaN-4            \t30000000\t        47.0 ns/op\nBenchmarkComplex128DivDisNaN-4            \t20000000\t        67.6 ns/op\nBenchmarkComplex128DivNisInf-4            \t50000000\t        38.7 ns/op\nBenchmarkComplex128DivDisInf-4            \t20000000\t        79.3 ns/op\nBenchmarkSetTypePtr-4                     \t200000000\t         8.54 ns/op\t 936.87 MB/s\nBenchmarkSetTypePtr8-4                    \t50000000\t        37.2 ns/op\t1720.14 MB/s\nBenchmarkSetTypePtr16-4                   \t30000000\t        45.6 ns/op\t2806.20 MB/s\nBenchmarkSetTypePtr32-4                   \t20000000\t        60.4 ns/op\t4236.17 MB/s\nBenchmarkSetTypePtr64-4                   \t20000000\t       110 ns/op\t4615.47 MB/s\nBenchmarkSetTypePtr126-4                  \t10000000\t       171 ns/op\t5892.51 MB/s\nBenchmarkSetTypePtr128-4                  \t10000000\t       169 ns/op\t6030.73 MB/s\nBenchmarkSetTypePtrSlice-4                \t 1000000\t      1589 ns/op\t5154.84 MB/s\nBenchmarkSetTypeNode1-4                   \t50000000\t        33.7 ns/op\t 712.62 MB/s\nBenchmarkSetTypeNode1Slice-4              \t10000000\t       197 ns/op\t3881.85 MB/s\nBenchmarkSetTypeNode8-4                   \t30000000\t        42.1 ns/op\t1899.69 MB/s\nBenchmarkSetTypeNode8Slice-4              \t 3000000\t       558 ns/op\t4584.96 MB/s\nBenchmarkSetTypeNode64-4                  \t10000000\t       128 ns/op\t4123.56 MB/s\nBenchmarkSetTypeNode64Slice-4             \t  500000\t      2707 ns/op\t6240.73 MB/s\nBenchmarkSetTypeNode64Dead-4              \t20000000\t        72.4 ns/op\t7291.77 MB/s\nBenchmarkSetTypeNode64DeadSlice-4         \t  500000\t      3203 ns/op\t5274.16 MB/s\nBenchmarkSetTypeNode124-4                 \t10000000\t       169 ns/op\t5961.36 MB/s\nBenchmarkSetTypeNode124Slice-4            \t  300000\t      4505 ns/op\t7159.55 MB/s\nBenchmarkSetTypeNode126-4                 \t10000000\t       171 ns/op\t5971.04 MB/s\nBenchmarkSetTypeNode126Slice-4            \t  300000\t      4430 ns/op\t7395.67 MB/s\nBenchmarkSetTypeNode128-4                 \t10000000\t       181 ns/op\t5737.43 MB/s\nBenchmarkSetTypeNode128Slice-4            \t  300000\t      4958 ns/op\t6711.13 MB/s\nBenchmarkSetTypeNode130-4                 \t10000000\t       183 ns/op\t5764.99 MB/s\nBenchmarkSetTypeNode130Slice-4            \t  300000\t      5092 ns/op\t6635.64 MB/s\nBenchmarkSetTypeNode1024-4                \t 1000000\t      1104 ns/op\t7430.05 MB/s\nBenchmarkSetTypeNode1024Slice-4           \t   50000\t     32624 ns/op\t8050.89 MB/s\nBenchmarkAllocation-4                     \t   30000\t     42818 ns/op\nBenchmarkReadMemStats-4                   \t   50000\t     26260 ns/op\nBenchmarkWriteBarrier-4                   \t20000000\t        59.5 ns/op\nBenchmarkBulkWriteBarrier-4               \t50000000\t        30.4 ns/op\nBenchmarkScanStackNoLocals-4              \t      10\t 161375576 ns/op\nBenchmarkHash5-4                          \t50000000\t        24.4 ns/op\t 205.24 MB/s\nBenchmarkHash16-4                         \t100000000\t        22.9 ns/op\t 698.97 MB/s\nBenchmarkHash64-4                         \t50000000\t        36.2 ns/op\t1766.78 MB/s\nBenchmarkHash1024-4                       \t10000000\t       144 ns/op\t7062.29 MB/s\nBenchmarkHash65536-4                      \t  200000\t      7637 ns/op\t8580.67 MB/s\nBenchmarkAlignedLoad-4                    \t200000000\t         7.74 ns/op\nBenchmarkUnalignedLoad-4                  \t200000000\t         7.72 ns/op\nBenchmarkEqEfaceConcrete-4                \t500000000\t         3.51 ns/op\nBenchmarkEqIfaceConcrete-4                \t500000000\t         3.86 ns/op\nBenchmarkNeEfaceConcrete-4                \t500000000\t         3.51 ns/op\nBenchmarkNeIfaceConcrete-4                \t500000000\t         3.86 ns/op\nBenchmarkConvT2ESmall-4                   \t100000000\t        10.9 ns/op\nBenchmarkConvT2EUintptr-4                 \t100000000\t        10.7 ns/op\nBenchmarkConvT2ELarge-4                   \t20000000\t       119 ns/op\nBenchmarkConvT2ISmall-4                   \t100000000\t        11.0 ns/op\nBenchmarkConvT2IUintptr-4                 \t100000000\t        10.5 ns/op\nBenchmarkConvT2ILarge-4                   \t20000000\t       118 ns/op\nBenchmarkConvI2E-4                        \t300000000\t         5.43 ns/op\nBenchmarkConvI2I-4                        \t30000000\t        52.5 ns/op\nBenchmarkAssertE2T-4                      \t500000000\t         3.79 ns/op\nBenchmarkAssertE2TLarge-4                 \t200000000\t         7.13 ns/op\nBenchmarkAssertE2I-4                      \t30000000\t        53.3 ns/op\nBenchmarkAssertI2T-4                      \t500000000\t         3.75 ns/op\nBenchmarkAssertI2I-4                      \t30000000\t        54.0 ns/op\nBenchmarkAssertI2E-4                      \t300000000\t         5.38 ns/op\nBenchmarkAssertE2E-4                      \t300000000\t         4.91 ns/op\nBenchmarkAssertE2T2-4                     \t300000000\t         4.91 ns/op\nBenchmarkAssertE2T2Blank-4                \t500000000\t         3.04 ns/op\nBenchmarkAssertI2E2-4                     \t200000000\t         6.67 ns/op\nBenchmarkAssertI2E2Blank-4                \t500000000\t         3.04 ns/op\nBenchmarkAssertE2E2-4                     \t200000000\t         6.32 ns/op\nBenchmarkAssertE2E2Blank-4                \t500000000\t         3.04 ns/op\nBenchmarkConvT2Ezero/zero/16-4            \t100000000\t        10.9 ns/op\nBenchmarkConvT2Ezero/zero/32-4            \t100000000\t        10.5 ns/op\nBenchmarkConvT2Ezero/zero/64-4            \t100000000\t        10.5 ns/op\nBenchmarkConvT2Ezero/zero/str-4           \t100000000\t        11.9 ns/op\nBenchmarkConvT2Ezero/zero/slice-4         \t100000000\t        12.8 ns/op\nBenchmarkConvT2Ezero/zero/big-4           \t 2000000\t       715 ns/op\nBenchmarkConvT2Ezero/nonzero/16-4         \t30000000\t        52.6 ns/op\nBenchmarkConvT2Ezero/nonzero/32-4         \t20000000\t        61.4 ns/op\nBenchmarkConvT2Ezero/nonzero/64-4         \t20000000\t        73.1 ns/op\nBenchmarkConvT2Ezero/nonzero/str-4        \t10000000\t       128 ns/op\nBenchmarkConvT2Ezero/nonzero/slice-4      \t10000000\t       160 ns/op\nBenchmarkConvT2Ezero/nonzero/big-4        \t 2000000\t       722 ns/op\nBenchmarkMalloc8-4                        \t20000000\t        67.4 ns/op\nBenchmarkMalloc16-4                       \t20000000\t       102 ns/op\nBenchmarkMallocTypeInfo8-4                \t20000000\t        99.4 ns/op\nBenchmarkMallocTypeInfo16-4               \t20000000\t       119 ns/op\nBenchmarkMallocLargeStruct-4              \t 1000000\t      1034 ns/op\nBenchmarkGoroutineSelect-4                \t     200\t   5243015 ns/op\nBenchmarkGoroutineBlocking-4              \t     200\t   6219647 ns/op\nBenchmarkGoroutineForRange-4              \t     200\t   6146714 ns/op\nBenchmarkGoroutineIdle-4                  \t     500\t   2738542 ns/op\nBenchmarkHashStringSpeed-4                \t20000000\t        75.0 ns/op\nBenchmarkHashBytesSpeed-4                 \t20000000\t       123 ns/op\nBenchmarkHashInt32Speed-4                 \t30000000\t        64.2 ns/op\nBenchmarkHashInt64Speed-4                 \t20000000\t        56.2 ns/op\nBenchmarkHashStringArraySpeed-4           \t10000000\t       175 ns/op\nBenchmarkMegMap-4                         \t30000000\t        51.4 ns/op\nBenchmarkMegOneMap-4                      \t100000000\t        21.8 ns/op\nBenchmarkMegEqMap-4                       \t    5000\t    378562 ns/op\nBenchmarkMegEmptyMap-4                    \t200000000\t         9.83 ns/op\nBenchmarkSmallStrMap-4                    \t30000000\t        53.3 ns/op\nBenchmarkMapStringKeysEight_16-4          \t30000000\t        48.8 ns/op\nBenchmarkMapStringKeysEight_32-4          \t30000000\t        47.0 ns/op\nBenchmarkMapStringKeysEight_64-4          \t30000000\t        47.0 ns/op\nBenchmarkMapStringKeysEight_1M-4          \t30000000\t        47.3 ns/op\nBenchmarkIntMap-4                         \t30000000\t        47.9 ns/op\nBenchmarkMapFirst/1-4                     \t100000000\t        15.4 ns/op\nBenchmarkMapFirst/2-4                     \t100000000\t        15.6 ns/op\nBenchmarkMapFirst/3-4                     \t100000000\t        15.6 ns/op\nBenchmarkMapFirst/4-4                     \t100000000\t        15.6 ns/op\nBenchmarkMapFirst/5-4                     \t100000000\t        15.6 ns/op\nBenchmarkMapFirst/6-4                     \t100000000\t        15.4 ns/op\nBenchmarkMapFirst/7-4                     \t100000000\t        15.6 ns/op\nBenchmarkMapFirst/8-4                     \t100000000\t        15.4 ns/op\nBenchmarkMapFirst/9-4                     \t50000000\t        35.2 ns/op\nBenchmarkMapFirst/10-4                    \t50000000\t        35.4 ns/op\nBenchmarkMapFirst/11-4                    \t50000000\t        35.1 ns/op\nBenchmarkMapFirst/12-4                    \t50000000\t        35.1 ns/op\nBenchmarkMapFirst/13-4                    \t50000000\t        35.1 ns/op\nBenchmarkMapFirst/14-4                    \t50000000\t        35.1 ns/op\nBenchmarkMapFirst/15-4                    \t50000000\t        35.1 ns/op\nBenchmarkMapFirst/16-4                    \t50000000\t        35.1 ns/op\nBenchmarkMapMid/1-4                       \t100000000\t        16.1 ns/op\nBenchmarkMapMid/2-4                       \t100000000\t        19.0 ns/op\nBenchmarkMapMid/3-4                       \t100000000\t        19.1 ns/op\nBenchmarkMapMid/4-4                       \t100000000\t        21.3 ns/op\nBenchmarkMapMid/5-4                       \t100000000\t        21.1 ns/op\nBenchmarkMapMid/6-4                       \t100000000\t        23.2 ns/op\nBenchmarkMapMid/7-4                       \t100000000\t        23.2 ns/op\nBenchmarkMapMid/8-4                       \t50000000\t        25.6 ns/op\nBenchmarkMapMid/9-4                       \t30000000\t        40.0 ns/op\nBenchmarkMapMid/10-4                      \t30000000\t        55.1 ns/op\nBenchmarkMapMid/11-4                      \t30000000\t        46.0 ns/op\nBenchmarkMapMid/12-4                      \t30000000\t        46.0 ns/op\nBenchmarkMapMid/13-4                      \t30000000\t        46.0 ns/op\nBenchmarkMapMid/14-4                      \t50000000\t        46.0 ns/op\nBenchmarkMapMid/15-4                      \t30000000\t        40.0 ns/op\nBenchmarkMapMid/16-4                      \t50000000\t        46.4 ns/op\nBenchmarkMapLast/1-4                      \t100000000\t        16.1 ns/op\nBenchmarkMapLast/2-4                      \t100000000\t        19.0 ns/op\nBenchmarkMapLast/3-4                      \t100000000\t        21.1 ns/op\nBenchmarkMapLast/4-4                      \t50000000\t        23.2 ns/op\nBenchmarkMapLast/5-4                      \t50000000\t        25.3 ns/op\nBenchmarkMapLast/6-4                      \t50000000\t        27.4 ns/op\nBenchmarkMapLast/7-4                      \t50000000\t        29.6 ns/op\nBenchmarkMapLast/8-4                      \t30000000\t        47.4 ns/op\nBenchmarkMapLast/9-4                      \t30000000\t        52.1 ns/op\nBenchmarkMapLast/10-4                     \t30000000\t        56.8 ns/op\nBenchmarkMapLast/11-4                     \t30000000\t        56.9 ns/op\nBenchmarkMapLast/12-4                     \t30000000\t        55.6 ns/op\nBenchmarkMapLast/13-4                     \t20000000\t        55.1 ns/op\nBenchmarkMapLast/14-4                     \t20000000\t        51.9 ns/op\nBenchmarkMapLast/15-4                     \t30000000\t        48.4 ns/op\nBenchmarkMapLast/16-4                     \t30000000\t        48.4 ns/op\nBenchmarkMapCycle-4                       \t20000000\t        80.9 ns/op\nBenchmarkRepeatedLookupStrMapKey32-4      \t20000000\t        76.9 ns/op\nBenchmarkRepeatedLookupStrMapKey1M-4      \t    5000\t    241809 ns/op\nBenchmarkMakeMap/[Byte]Byte-4             \t 5000000\t       378 ns/op\nBenchmarkMakeMap/[Int]Int-4               \t 3000000\t       586 ns/op\nBenchmarkNewEmptyMap-4                    \t50000000\t        25.3 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkNewSmallMap-4                    \t10000000\t       152 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkMapIter-4                        \t 5000000\t       323 ns/op\nBenchmarkMapIterEmpty-4                   \t100000000\t        22.5 ns/op\nBenchmarkSameLengthMap-4                  \t100000000\t        18.3 ns/op\nBenchmarkBigKeyMap-4                      \t20000000\t        95.4 ns/op\nBenchmarkBigValMap-4                      \t20000000\t        95.5 ns/op\nBenchmarkSmallKeyMap-4                    \t20000000\t        66.7 ns/op\nBenchmarkMapPopulate/1-4                  \t20000000\t        83.6 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkMapPopulate/10-4                 \t 1000000\t      1953 ns/op\t     179 B/op\t       1 allocs/op\nBenchmarkMapPopulate/100-4                \t   50000\t     25432 ns/op\t    3252 B/op\t      15 allocs/op\nBenchmarkMapPopulate/1000-4               \t    5000\t    279914 ns/op\t   49383 B/op\t      19 allocs/op\nBenchmarkMapPopulate/10000-4              \t     500\t   2723038 ns/op\t  412217 B/op\t     163 allocs/op\nBenchmarkMapPopulate/100000-4             \t      50\t  28713410 ns/op\t 3588881 B/op\t    3733 allocs/op\nBenchmarkComplexAlgMap-4                  \t10000000\t       214 ns/op\nBenchmarkGoMapClear/Reflexive/1-4         \t20000000\t       112 ns/op\nBenchmarkGoMapClear/Reflexive/10-4        \t10000000\t       123 ns/op\nBenchmarkGoMapClear/Reflexive/100-4       \t 5000000\t       304 ns/op\nBenchmarkGoMapClear/Reflexive/1000-4      \t  300000\t      3735 ns/op\nBenchmarkGoMapClear/Reflexive/10000-4     \t   50000\t     34074 ns/op\nBenchmarkGoMapClear/NonReflexive/1-4      \t 5000000\t       379 ns/op\nBenchmarkGoMapClear/NonReflexive/10-4     \t 3000000\t       480 ns/op\nBenchmarkGoMapClear/NonReflexive/100-4    \t 1000000\t      1183 ns/op\nBenchmarkGoMapClear/NonReflexive/1000-4   \t  100000\t     13549 ns/op\nBenchmarkGoMapClear/NonReflexive/10000-4  \t   10000\t    117289 ns/op\nBenchmarkMapStringConversion/32/simple-4  \t30000000\t        41.9 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkMapStringConversion/32/struct-4  \t30000000\t        41.9 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkMapStringConversion/32/array-4   \t30000000\t        41.8 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkMapStringConversion/64/simple-4  \t30000000\t        46.3 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkMapStringConversion/64/struct-4  \t30000000\t        46.3 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkMapStringConversion/64/array-4   \t30000000\t        46.3 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkMapPop100-4                      \t   50000\t     36575 ns/op\nBenchmarkMapPop1000-4                     \t    3000\t    511995 ns/op\nBenchmarkMapPop10000-4                    \t     100\t  12112237 ns/op\nBenchmarkMapAssign/Int32/256-4            \t20000000\t        66.0 ns/op\nBenchmarkMapAssign/Int32/65536-4          \t20000000\t        90.2 ns/op\nBenchmarkMapAssign/Int64/256-4            \t20000000\t        66.0 ns/op\nBenchmarkMapAssign/Int64/65536-4          \t10000000\t       115 ns/op\nBenchmarkMapAssign/Str/256-4              \t20000000\t        79.9 ns/op\nBenchmarkMapAssign/Str/65536-4            \t10000000\t       186 ns/op\nBenchmarkMapOperatorAssign/Int32/256-4    \t20000000\t        66.2 ns/op\nBenchmarkMapOperatorAssign/Int32/65536-4  \t20000000\t        95.3 ns/op\nBenchmarkMapOperatorAssign/Int64/256-4    \t20000000\t        66.7 ns/op\nBenchmarkMapOperatorAssign/Int64/65536-4  \t10000000\t       138 ns/op\nBenchmarkMapOperatorAssign/Str/256-4      \t 1000000\t      5035 ns/op\nBenchmarkMapOperatorAssign/Str/65536-4    \t 3000000\t       682 ns/op\nBenchmarkMapAppendAssign/Int32/256-4      \t20000000\t        96.4 ns/op\t      47 B/op\t       0 allocs/op\nBenchmarkMapAppendAssign/Int32/65536-4    \t 5000000\t       275 ns/op\t      28 B/op\t       0 allocs/op\nBenchmarkMapAppendAssign/Int64/256-4      \t20000000\t        95.7 ns/op\t      47 B/op\t       0 allocs/op\nBenchmarkMapAppendAssign/Int64/65536-4    \t 5000000\t       293 ns/op\t      28 B/op\t       0 allocs/op\nBenchmarkMapAppendAssign/Str/256-4        \t10000000\t       318 ns/op\t      93 B/op\t       0 allocs/op\nBenchmarkMapAppendAssign/Str/65536-4      \t 3000000\t       465 ns/op\t      48 B/op\t       0 allocs/op\nBenchmarkMapDelete/Int32/100-4            \t20000000\t       104 ns/op\nBenchmarkMapDelete/Int32/1000-4           \t20000000\t        77.8 ns/op\nBenchmarkMapDelete/Int32/10000-4          \t20000000\t       103 ns/op\nBenchmarkMapDelete/Int64/100-4            \t20000000\t       103 ns/op\nBenchmarkMapDelete/Int64/1000-4           \t20000000\t        80.3 ns/op\nBenchmarkMapDelete/Int64/10000-4          \t20000000\t       104 ns/op\nBenchmarkMapDelete/Str/100-4              \t10000000\t       124 ns/op\nBenchmarkMapDelete/Str/1000-4             \t20000000\t       117 ns/op\nBenchmarkMapDelete/Str/10000-4            \t10000000\t       126 ns/op\nBenchmarkMemmove/0-4                      \t300000000\t         5.58 ns/op\nBenchmarkMemmove/1-4                      \t100000000\t        13.5 ns/op\t  74.30 MB/s\nBenchmarkMemmove/2-4                      \t100000000\t        13.5 ns/op\t 148.40 MB/s\nBenchmarkMemmove/3-4                      \t100000000\t        13.3 ns/op\t 225.03 MB/s\nBenchmarkMemmove/4-4                      \t100000000\t        13.3 ns/op\t 299.99 MB/s\nBenchmarkMemmove/5-4                      \t100000000\t        13.3 ns/op\t 374.96 MB/s\nBenchmarkMemmove/6-4                      \t100000000\t        13.5 ns/op\t 444.23 MB/s\nBenchmarkMemmove/7-4                      \t100000000\t        13.4 ns/op\t 522.62 MB/s\nBenchmarkMemmove/8-4                      \t100000000\t        13.3 ns/op\t 600.00 MB/s\nBenchmarkMemmove/9-4                      \t100000000\t        13.4 ns/op\t 673.43 MB/s\nBenchmarkMemmove/10-4                     \t100000000\t        13.3 ns/op\t 750.14 MB/s\nBenchmarkMemmove/11-4                     \t100000000\t        13.3 ns/op\t 824.91 MB/s\nBenchmarkMemmove/12-4                     \t100000000\t        13.3 ns/op\t 899.90 MB/s\nBenchmarkMemmove/13-4                     \t100000000\t        13.5 ns/op\t 962.98 MB/s\nBenchmarkMemmove/14-4                     \t100000000\t        13.4 ns/op\t1046.19 MB/s\nBenchmarkMemmove/15-4                     \t100000000\t        13.3 ns/op\t1124.88 MB/s\nBenchmarkMemmove/16-4                     \t100000000\t        13.5 ns/op\t1188.13 MB/s\nBenchmarkMemmove/32-4                     \t100000000\t        13.6 ns/op\t2356.67 MB/s\nBenchmarkMemmove/64-4                     \t100000000\t        16.3 ns/op\t3924.55 MB/s\nBenchmarkMemmove/128-4                    \t50000000\t        23.9 ns/op\t5354.07 MB/s\nBenchmarkMemmove/256-4                    \t50000000\t        35.2 ns/op\t7280.74 MB/s\nBenchmarkMemmove/512-4                    \t20000000\t        68.1 ns/op\t7522.83 MB/s\nBenchmarkMemmove/1024-4                   \t20000000\t       113 ns/op\t9060.92 MB/s\nBenchmarkMemmove/2048-4                   \t10000000\t       203 ns/op\t10086.84 MB/s\nBenchmarkMemmove/4096-4                   \t 5000000\t       383 ns/op\t10668.94 MB/s\nBenchmarkMemmoveUnalignedDst/0-4          \t100000000\t        10.7 ns/op\nBenchmarkMemmoveUnalignedDst/1-4          \t100000000\t        15.4 ns/op\t  64.75 MB/s\nBenchmarkMemmoveUnalignedDst/2-4          \t100000000\t        14.0 ns/op\t 142.50 MB/s\nBenchmarkMemmoveUnalignedDst/3-4          \t100000000\t        14.0 ns/op\t 213.78 MB/s\nBenchmarkMemmoveUnalignedDst/4-4          \t100000000\t        14.5 ns/op\t 275.50 MB/s\nBenchmarkMemmoveUnalignedDst/5-4          \t100000000\t        14.9 ns/op\t 335.56 MB/s\nBenchmarkMemmoveUnalignedDst/6-4          \t100000000\t        14.7 ns/op\t 407.71 MB/s\nBenchmarkMemmoveUnalignedDst/7-4          \t100000000\t        14.9 ns/op\t 468.79 MB/s\nBenchmarkMemmoveUnalignedDst/8-4          \t100000000\t        14.5 ns/op\t 550.56 MB/s\nBenchmarkMemmoveUnalignedDst/9-4          \t100000000\t        14.7 ns/op\t 611.60 MB/s\nBenchmarkMemmoveUnalignedDst/10-4         \t100000000\t        15.0 ns/op\t 668.48 MB/s\nBenchmarkMemmoveUnalignedDst/11-4         \t100000000\t        14.8 ns/op\t 744.55 MB/s\nBenchmarkMemmoveUnalignedDst/12-4         \t100000000\t        15.1 ns/op\t 792.42 MB/s\nBenchmarkMemmoveUnalignedDst/13-4         \t100000000\t        15.0 ns/op\t 866.28 MB/s\nBenchmarkMemmoveUnalignedDst/14-4         \t100000000\t        14.9 ns/op\t 942.03 MB/s\nBenchmarkMemmoveUnalignedDst/15-4         \t100000000\t        15.0 ns/op\t1000.58 MB/s\nBenchmarkMemmoveUnalignedDst/16-4         \t100000000\t        14.5 ns/op\t1103.84 MB/s\nBenchmarkMemmoveUnalignedDst/32-4         \t100000000\t        16.7 ns/op\t1921.87 MB/s\nBenchmarkMemmoveUnalignedDst/64-4         \t50000000\t        32.7 ns/op\t1954.46 MB/s\nBenchmarkMemmoveUnalignedDst/128-4        \t50000000\t        28.1 ns/op\t4560.37 MB/s\nBenchmarkMemmoveUnalignedDst/256-4        \t30000000\t        47.7 ns/op\t5364.41 MB/s\nBenchmarkMemmoveUnalignedDst/512-4        \t20000000\t        84.9 ns/op\t6029.49 MB/s\nBenchmarkMemmoveUnalignedDst/1024-4       \t10000000\t       156 ns/op\t6552.17 MB/s\nBenchmarkMemmoveUnalignedDst/2048-4       \t 5000000\t       290 ns/op\t7059.63 MB/s\nBenchmarkMemmoveUnalignedDst/4096-4       \t 3000000\t       561 ns/op\t7296.37 MB/s\nBenchmarkMemmoveUnalignedSrc/0-4          \t100000000\t        10.5 ns/op\nBenchmarkMemmoveUnalignedSrc/1-4          \t100000000\t        15.6 ns/op\t  64.12 MB/s\nBenchmarkMemmoveUnalignedSrc/2-4          \t100000000\t        14.0 ns/op\t 142.49 MB/s\nBenchmarkMemmoveUnalignedSrc/3-4          \t100000000\t        14.2 ns/op\t 211.08 MB/s\nBenchmarkMemmoveUnalignedSrc/4-4          \t100000000\t        13.9 ns/op\t 287.49 MB/s\nBenchmarkMemmoveUnalignedSrc/5-4          \t100000000\t        13.6 ns/op\t 367.36 MB/s\nBenchmarkMemmoveUnalignedSrc/6-4          \t100000000\t        13.9 ns/op\t 432.38 MB/s\nBenchmarkMemmoveUnalignedSrc/7-4          \t100000000\t        13.6 ns/op\t 514.32 MB/s\nBenchmarkMemmoveUnalignedSrc/8-4          \t100000000\t        13.8 ns/op\t 579.18 MB/s\nBenchmarkMemmoveUnalignedSrc/9-4          \t100000000\t        14.0 ns/op\t 643.05 MB/s\nBenchmarkMemmoveUnalignedSrc/10-4         \t100000000\t        14.0 ns/op\t 715.96 MB/s\nBenchmarkMemmoveUnalignedSrc/11-4         \t100000000\t        13.8 ns/op\t 795.76 MB/s\nBenchmarkMemmoveUnalignedSrc/12-4         \t100000000\t        14.0 ns/op\t 855.35 MB/s\nBenchmarkMemmoveUnalignedSrc/13-4         \t100000000\t        14.0 ns/op\t 930.87 MB/s\nBenchmarkMemmoveUnalignedSrc/14-4         \t100000000\t        14.0 ns/op\t 998.89 MB/s\nBenchmarkMemmoveUnalignedSrc/15-4         \t100000000\t        14.0 ns/op\t1072.50 MB/s\nBenchmarkMemmoveUnalignedSrc/16-4         \t100000000\t        14.0 ns/op\t1141.96 MB/s\nBenchmarkMemmoveUnalignedSrc/32-4         \t100000000\t        15.4 ns/op\t2072.73 MB/s\nBenchmarkMemmoveUnalignedSrc/64-4         \t100000000\t        18.5 ns/op\t3450.95 MB/s\nBenchmarkMemmoveUnalignedSrc/128-4        \t50000000\t        25.6 ns/op\t4996.57 MB/s\nBenchmarkMemmoveUnalignedSrc/256-4        \t50000000\t        37.9 ns/op\t6754.79 MB/s\nBenchmarkMemmoveUnalignedSrc/512-4        \t20000000\t        74.0 ns/op\t6919.73 MB/s\nBenchmarkMemmoveUnalignedSrc/1024-4       \t20000000\t       119 ns/op\t8554.12 MB/s\nBenchmarkMemmoveUnalignedSrc/2048-4       \t10000000\t       206 ns/op\t9940.15 MB/s\nBenchmarkMemmoveUnalignedSrc/4096-4       \t 5000000\t       385 ns/op\t10629.02 MB/s\nBenchmarkMemclr/5-4                       \t100000000\t        14.7 ns/op\t 339.27 MB/s\nBenchmarkMemclr/16-4                      \t100000000\t        14.9 ns/op\t1075.74 MB/s\nBenchmarkMemclr/64-4                      \t100000000\t        20.0 ns/op\t3192.24 MB/s\nBenchmarkMemclr/256-4                     \t50000000\t        34.7 ns/op\t7373.17 MB/s\nBenchmarkMemclr/4096-4                    \t 5000000\t       288 ns/op\t14199.71 MB/s\nBenchmarkMemclr/65536-4                   \t  200000\t      5920 ns/op\t11069.74 MB/s\nBenchmarkMemclr/1M-4                      \t   10000\t    119686 ns/op\t8761.04 MB/s\nBenchmarkMemclr/4M-4                      \t    3000\t    492651 ns/op\t8513.73 MB/s\nBenchmarkMemclr/8M-4                      \t    2000\t    978378 ns/op\t8573.99 MB/s\nBenchmarkMemclr/16M-4                     \t    1000\t   1960626 ns/op\t8557.07 MB/s\nBenchmarkMemclr/64M-4                     \t     200\t   7860433 ns/op\t8537.55 MB/s\nBenchmarkGoMemclr/5-4                     \t200000000\t         8.66 ns/op\t 577.65 MB/s\nBenchmarkGoMemclr/16-4                    \t200000000\t         7.03 ns/op\t2277.18 MB/s\nBenchmarkGoMemclr/64-4                    \t100000000\t        13.3 ns/op\t4810.16 MB/s\nBenchmarkGoMemclr/256-4                   \t50000000\t        31.5 ns/op\t8122.27 MB/s\nBenchmarkClearFat8-4                      \t2000000000\t         1.40 ns/op\nBenchmarkClearFat12-4                     \t2000000000\t         1.40 ns/op\nBenchmarkClearFat16-4                     \t2000000000\t         1.40 ns/op\nBenchmarkClearFat24-4                     \t2000000000\t         1.40 ns/op\nBenchmarkClearFat32-4                     \t2000000000\t         1.42 ns/op\nBenchmarkClearFat40-4                     \t2000000000\t         1.40 ns/op\nBenchmarkClearFat48-4                     \t2000000000\t         1.40 ns/op\nBenchmarkClearFat56-4                     \t2000000000\t         1.40 ns/op\nBenchmarkClearFat64-4                     \t2000000000\t         1.40 ns/op\nBenchmarkClearFat128-4                    \t2000000000\t         1.40 ns/op\nBenchmarkClearFat256-4                    \t2000000000\t         1.40 ns/op\nBenchmarkClearFat512-4                    \t2000000000\t         1.40 ns/op\nBenchmarkClearFat1024-4                   \t2000000000\t         1.42 ns/op\nBenchmarkCopyFat8-4                       \t2000000000\t         1.40 ns/op\nBenchmarkCopyFat12-4                      \t2000000000\t         1.40 ns/op\nBenchmarkCopyFat16-4                      \t2000000000\t         1.40 ns/op\nBenchmarkCopyFat24-4                      \t2000000000\t         1.40 ns/op\nBenchmarkCopyFat32-4                      \t2000000000\t         1.40 ns/op\nBenchmarkCopyFat64-4                      \t2000000000\t         1.40 ns/op\nBenchmarkCopyFat128-4                     \t2000000000\t         1.42 ns/op\nBenchmarkCopyFat256-4                     \t2000000000\t         1.41 ns/op\nBenchmarkCopyFat512-4                     \t2000000000\t         1.40 ns/op\nBenchmarkCopyFat520-4                     \t2000000000\t         1.40 ns/op\nBenchmarkCopyFat1024-4                    \t2000000000\t         1.40 ns/op\nBenchmarkIssue18740-4                     \t  100000\t     14531 ns/op\nBenchmarkFinalizer-4                      \t     500\t   2526732 ns/op\nBenchmarkFinalizerRun-4                   \t 1000000\t      2604 ns/op\nBenchmarkSyscall-4                        \t20000000\t        63.4 ns/op\nBenchmarkSyscallWork-4                    \t20000000\t        96.9 ns/op\nBenchmarkSyscallExcess-4                  \t20000000\t        63.4 ns/op\nBenchmarkSyscallExcessWork-4              \t20000000\t        96.8 ns/op\nBenchmarkPingPongHog-4                    \t  500000\t      2889 ns/op\nBenchmarkStackGrowth-4                    \t100000000\t        21.2 ns/op\nBenchmarkStackGrowthDeep-4                \t  500000\t      2548 ns/op\nBenchmarkCreateGoroutines-4               \t 1000000\t      1046 ns/op\nBenchmarkCreateGoroutinesParallel-4       \t10000000\t       198 ns/op\nBenchmarkCreateGoroutinesCapture-4        \t  200000\t      8941 ns/op\t      16 B/op\t       1 allocs/op\nBenchmarkClosureCall-4                    \t300000000\t         5.80 ns/op\nBenchmarkWakeupParallelSpinning/0s-4      \t  100000\t     20843 ns/op\nBenchmarkWakeupParallelSpinning/1\u00b5s-4     \t   50000\t     23993 ns/op\nBenchmarkWakeupParallelSpinning/2\u00b5s-4     \t   50000\t     27880 ns/op\nBenchmarkWakeupParallelSpinning/5\u00b5s-4     \t   50000\t     37540 ns/op\nBenchmarkWakeupParallelSpinning/10\u00b5s-4    \t   30000\t     56729 ns/op\nBenchmarkWakeupParallelSpinning/20\u00b5s-4    \t   20000\t     96465 ns/op\nBenchmarkWakeupParallelSpinning/50\u00b5s-4    \t   10000\t    221160 ns/op\nBenchmarkWakeupParallelSpinning/100\u00b5s-4   \t    5000\t    359871 ns/op\nBenchmarkWakeupParallelSyscall/0s-4       \t   10000\t    321507 ns/op\nBenchmarkWakeupParallelSyscall/1\u00b5s-4      \t    5000\t    335555 ns/op\nBenchmarkWakeupParallelSyscall/2\u00b5s-4      \t    5000\t    346055 ns/op\nBenchmarkWakeupParallelSyscall/5\u00b5s-4      \t    5000\t    343007 ns/op\nBenchmarkWakeupParallelSyscall/10\u00b5s-4     \t    5000\t    386787 ns/op\nBenchmarkWakeupParallelSyscall/20\u00b5s-4     \t    5000\t    387292 ns/op\nBenchmarkWakeupParallelSyscall/50\u00b5s-4     \t    5000\t    556090 ns/op\nBenchmarkWakeupParallelSyscall/100\u00b5s-4    \t    3000\t    626904 ns/op\nBenchmarkMatmult-4                        \t200000000\t         9.45 ns/op\nBenchmarkFastrand-4                       \t2000000000\t         1.65 ns/op\nBenchmarkFastrandHashiter-4               \t50000000\t        32.3 ns/op\nBenchmarkFastrandn/2-4                    \t200000000\t         8.42 ns/op\nBenchmarkFastrandn/3-4                    \t200000000\t         8.43 ns/op\nBenchmarkFastrandn/4-4                    \t200000000\t         8.50 ns/op\nBenchmarkFastrandn/5-4                    \t200000000\t         8.42 ns/op\nBenchmarkIfaceCmp100-4                    \t 5000000\t       370 ns/op\nBenchmarkIfaceCmpNil100-4                 \t10000000\t       203 ns/op\nBenchmarkEfaceCmpDiff-4                   \t 1000000\t      2052 ns/op\nBenchmarkDefer-4                          \t 5000000\t       256 ns/op\nBenchmarkDefer10-4                        \t10000000\t       230 ns/op\nBenchmarkDeferMany-4                      \t 3000000\t       489 ns/op\nBenchmarkRWMutexUncontended-4             \t20000000\t       112 ns/op\nBenchmarkRWMutexWrite100-4                \t10000000\t       197 ns/op\nBenchmarkRWMutexWrite10-4                 \t 1000000\t      1629 ns/op\nBenchmarkRWMutexWorkWrite100-4            \t10000000\t       221 ns/op\nBenchmarkRWMutexWorkWrite10-4             \t 1000000\t      1314 ns/op\nBenchmarkMakeSlice/Byte-4                 \t20000000\t        60.2 ns/op\nBenchmarkMakeSlice/Int16-4                \t20000000\t        73.2 ns/op\nBenchmarkMakeSlice/Int-4                  \t10000000\t       133 ns/op\nBenchmarkMakeSlice/Ptr-4                  \t10000000\t       188 ns/op\nBenchmarkMakeSlice/Struct/24-4            \t10000000\t       200 ns/op\nBenchmarkMakeSlice/Struct/32-4            \t10000000\t       230 ns/op\nBenchmarkMakeSlice/Struct/40-4            \t 5000000\t       262 ns/op\nBenchmarkGrowSlice/Byte-4                 \t10000000\t       144 ns/op\nBenchmarkGrowSlice/Int16-4                \t10000000\t       204 ns/op\nBenchmarkGrowSlice/Int-4                  \t 5000000\t       245 ns/op\nBenchmarkGrowSlice/Ptr-4                  \t 5000000\t       365 ns/op\nBenchmarkGrowSlice/Struct/24-4            \t 3000000\t       428 ns/op\nBenchmarkGrowSlice/Struct/32-4            \t 3000000\t       486 ns/op\nBenchmarkGrowSlice/Struct/40-4            \t 2000000\t       607 ns/op\nBenchmarkExtendSlice/IntSlice-4           \t10000000\t       165 ns/op\nBenchmarkExtendSlice/PointerSlice-4       \t10000000\t       213 ns/op\nBenchmarkExtendSlice/NoGrow-4             \t100000000\t        15.4 ns/op\nBenchmarkAppend-4                         \t30000000\t        56.2 ns/op\nBenchmarkAppendGrowByte-4                 \t     300\t   5560036 ns/op\nBenchmarkAppendGrowString-4               \t       5\t 226765389 ns/op\nBenchmarkAppendSlice/1Bytes-4             \t100000000\t        12.6 ns/op\nBenchmarkAppendSlice/4Bytes-4             \t100000000\t        12.0 ns/op\nBenchmarkAppendSlice/7Bytes-4             \t100000000\t        11.9 ns/op\nBenchmarkAppendSlice/8Bytes-4             \t100000000\t        12.0 ns/op\nBenchmarkAppendSlice/15Bytes-4            \t100000000\t        11.9 ns/op\nBenchmarkAppendSlice/16Bytes-4            \t100000000\t        12.3 ns/op\nBenchmarkAppendSlice/32Bytes-4            \t100000000\t        12.6 ns/op\nBenchmarkAppendSliceLarge/1024Bytes-4     \t 1000000\t      1420 ns/op\nBenchmarkAppendSliceLarge/4096Bytes-4     \t  300000\t      4643 ns/op\nBenchmarkAppendSliceLarge/16384Bytes-4    \t  100000\t     13584 ns/op\nBenchmarkAppendSliceLarge/65536Bytes-4    \t   50000\t     32999 ns/op\nBenchmarkAppendSliceLarge/262144Bytes-4   \t   10000\t    120741 ns/op\nBenchmarkAppendSliceLarge/1048576Bytes-4  \t    2000\t    679068 ns/op\nBenchmarkAppendStr/1Bytes-4               \t100000000\t        13.5 ns/op\nBenchmarkAppendStr/4Bytes-4               \t100000000\t        11.9 ns/op\nBenchmarkAppendStr/8Bytes-4               \t100000000\t        11.9 ns/op\nBenchmarkAppendStr/16Bytes-4              \t100000000\t        12.6 ns/op\nBenchmarkAppendStr/32Bytes-4              \t100000000\t        14.4 ns/op\nBenchmarkAppendSpecialCase-4              \t20000000\t        85.0 ns/op\nBenchmarkCopy/1Byte-4                     \t100000000\t        14.0 ns/op\t  71.25 MB/s\nBenchmarkCopy/1String-4                   \t100000000\t        13.8 ns/op\t  72.29 MB/s\nBenchmarkCopy/2Byte-4                     \t100000000\t        21.4 ns/op\t  93.67 MB/s\nBenchmarkCopy/2String-4                   \t100000000\t        17.1 ns/op\t 117.24 MB/s\nBenchmarkCopy/4Byte-4                     \t100000000\t        16.9 ns/op\t 237.34 MB/s\nBenchmarkCopy/4String-4                   \t100000000\t        16.8 ns/op\t 237.50 MB/s\nBenchmarkCopy/8Byte-4                     \t100000000\t        22.9 ns/op\t 348.61 MB/s\nBenchmarkCopy/8String-4                   \t100000000\t        16.8 ns/op\t 475.00 MB/s\nBenchmarkCopy/12Byte-4                    \t100000000\t        16.8 ns/op\t 712.43 MB/s\nBenchmarkCopy/12String-4                  \t100000000\t        16.9 ns/op\t 712.04 MB/s\nBenchmarkCopy/16Byte-4                    \t50000000\t        24.8 ns/op\t 646.37 MB/s\nBenchmarkCopy/16String-4                  \t100000000\t        16.8 ns/op\t 949.90 MB/s\nBenchmarkCopy/32Byte-4                    \t100000000\t        16.3 ns/op\t1964.35 MB/s\nBenchmarkCopy/32String-4                  \t100000000\t        16.4 ns/op\t1956.17 MB/s\nBenchmarkCopy/128Byte-4                   \t50000000\t        27.4 ns/op\t4676.48 MB/s\nBenchmarkCopy/128String-4                 \t50000000\t        27.4 ns/op\t4676.64 MB/s\nBenchmarkCopy/1024Byte-4                  \t20000000\t       113 ns/op\t9005.87 MB/s\nBenchmarkCopy/1024String-4                \t20000000\t       113 ns/op\t9004.83 MB/s\nBenchmarkAppendInPlace/NoGrow/Byte-4      \t 1000000\t      1352 ns/op\nBenchmarkAppendInPlace/NoGrow/1Ptr-4      \t  300000\t      4058 ns/op\nBenchmarkAppendInPlace/NoGrow/2Ptr-4      \t  200000\t      7520 ns/op\nBenchmarkAppendInPlace/NoGrow/3Ptr-4      \t  200000\t      8608 ns/op\nBenchmarkAppendInPlace/NoGrow/4Ptr-4      \t  100000\t     14133 ns/op\nBenchmarkAppendInPlace/Grow/Byte-4        \t 1000000\t      1076 ns/op\nBenchmarkAppendInPlace/Grow/1Ptr-4        \t 1000000\t      1074 ns/op\nBenchmarkAppendInPlace/Grow/2Ptr-4        \t 1000000\t      1449 ns/op\nBenchmarkAppendInPlace/Grow/3Ptr-4        \t 1000000\t      1841 ns/op\nBenchmarkAppendInPlace/Grow/4Ptr-4        \t 1000000\t      1983 ns/op\nBenchmarkStackCopyPtr-4                   \t       5\t 309390029 ns/op\nBenchmarkStackCopy-4                      \t       5\t 297313618 ns/op\nBenchmarkStackCopyNoCache-4               \t       2\t 518883532 ns/op\nBenchmarkCompareStringEqual-4             \t100000000\t        12.8 ns/op\nBenchmarkCompareStringIdentical-4         \t100000000\t        11.9 ns/op\nBenchmarkCompareStringSameLength-4        \t100000000\t        10.5 ns/op\nBenchmarkCompareStringDifferentLength-4   \t2000000000\t         1.40 ns/op\nBenchmarkCompareStringBigUnaligned-4      \t    3000\t    430422 ns/op\t2436.18 MB/s\nBenchmarkCompareStringBig-4               \t    3000\t    428766 ns/op\t2445.59 MB/s\nBenchmarkConcatStringAndBytes-4           \t20000000\t        78.6 ns/op\nBenchmarkSliceByteToString/1-4            \t100000000\t        16.9 ns/op\nBenchmarkSliceByteToString/2-4            \t20000000\t        65.6 ns/op\nBenchmarkSliceByteToString/4-4            \t20000000\t        73.4 ns/op\nBenchmarkSliceByteToString/8-4            \t20000000\t        88.1 ns/op\nBenchmarkSliceByteToString/16-4           \t10000000\t       122 ns/op\nBenchmarkSliceByteToString/32-4           \t10000000\t       139 ns/op\nBenchmarkSliceByteToString/64-4           \t10000000\t       186 ns/op\nBenchmarkSliceByteToString/128-4          \t 5000000\t       281 ns/op\nBenchmarkRuneCount/lenruneslice/ASCII-4   \t50000000\t        37.9 ns/op\nBenchmarkRuneCount/lenruneslice/Japanese-4         \t 5000000\t       263 ns/op\nBenchmarkRuneCount/lenruneslice/MixedLength-4      \t10000000\t       232 ns/op\nBenchmarkRuneCount/rangeloop/ASCII-4               \t50000000\t        33.0 ns/op\nBenchmarkRuneCount/rangeloop/Japanese-4            \t 5000000\t       260 ns/op\nBenchmarkRuneCount/rangeloop/MixedLength-4         \t10000000\t       208 ns/op\nBenchmarkRuneCount/utf8.RuneCountInString/ASCII-4  \t30000000\t        41.4 ns/op\nBenchmarkRuneCount/utf8.RuneCountInString/Japanese-4         \t10000000\t       184 ns/op\nBenchmarkRuneCount/utf8.RuneCountInString/MixedLength-4      \t10000000\t       218 ns/op\nBenchmarkRuneIterate/range/ASCII-4                           \t50000000\t        29.5 ns/op\nBenchmarkRuneIterate/range/Japanese-4                        \t 5000000\t       246 ns/op\nBenchmarkRuneIterate/range/MixedLength-4                     \t10000000\t       206 ns/op\nBenchmarkRuneIterate/range1/ASCII-4                          \t50000000\t        29.5 ns/op\nBenchmarkRuneIterate/range1/Japanese-4                       \t 5000000\t       246 ns/op\nBenchmarkRuneIterate/range1/MixedLength-4                    \t10000000\t       221 ns/op\nBenchmarkRuneIterate/range2/ASCII-4                          \t50000000\t        29.5 ns/op\nBenchmarkRuneIterate/range2/Japanese-4                       \t 5000000\t       246 ns/op\nBenchmarkRuneIterate/range2/MixedLength-4                    \t10000000\t       204 ns/op\nBenchmarkArrayEqual-4                                        \t200000000\t         6.33 ns/op\nBenchmarkClockVDSOAndFallbackPaths/vDSO-4                    \t10000000\t       195 ns/op\nBenchmarkClockVDSOAndFallbackPaths/Fallback-4                \t 1000000\t      1936 ns/op\nBenchmarkTimeNow-4                                           \t10000000\t       197 ns/op\nPASS\nok  \truntime\t\t1331.420s\n</code></pre></p> <p>\u2013Abishek Muthian (@heavyinfo)</p>"},{"location":"GoArm/#apple-silicon","title":"Apple silicon","text":"<p>Cross-compiling Go applications</p> <p>Host/Build: macOS/x86_64 Target: macOS/arm64 On host machine:</p> <p>Xcode: Install latest Xcode which supports Apple silicon</p> <p>Go: Install go*.darwin-amd64.pkg (or build go from source) on macOS/x86_64</p> <p>Set go executable in PATH</p> <p>Export the following environment variables before cross compiling go apps for macOS/arm64</p> <pre><code>export SDK_NAME=macosx\nexport SDK_PATH=$(xcrun --show-sdk-path --sdk $SDK_NAME)\nexport CGO_ENABLED=1\nexport GOOS=darwin\nexport GOARCH=arm64\nexport CC=\"$(xcrun -sdk $SDK_PATH --find clang) -arch $GOARCH -isysroot $SDK_PATH\"\nexport CFLAGS=\"-isysroot $SDK_PATH -arch $GOARCH -I$SDK_PATH/usr/include\"\nexport LD_LIBRARY_PATH=\"$SDK_PATH/usr/lib\"\nexport CGO_CFLAGS=\"-isysroot $SDK_PATH -arch $GOARCH\"\nexport CGO_LDFLAGS=\"-isysroot $SDK_PATH -arch $GOARCH\"\nCompile the app as below:\n$ GOOS=darwin GOARCH=arm64 go build &lt;app&gt;\n</code></pre> <p>Copy the generated arm64 executable to target machine (macOS/arm64) and run</p>"},{"location":"GoForCPPProgrammers/","title":"GoForCPPProgrammers","text":"<p>Go is a systems programming language intended to be a general-purpose systems language, like C++.  These are some notes on Go for experienced C++ programmers. This document discusses the differences between Go and C++, and says little to nothing about the similarities.</p> <p>An important point to keep in mind is that there are some fundamental differences in the thought processes required to be proficient in the two respective languages.  Most formidably, C++'s object model is based on classes and class hierarchies while Go's object model is based on interfaces (and is essentially flat).  Consequently, C++ design patterns rarely translate verbatim to Go.  To program effectively in Go, one has to consider the problem being solved, not the mechanisms one might use in C++ to solve the problem.</p> <p>For a more general introduction to Go, see the Go Tour, How to Write Go Code and Effective Go.</p> <p>For a detailed description of the Go language, see the Go spec.</p> Conceptual Differences <ul> <li>Go does not have classes with constructors or destructors.  Instead of class methods, a class inheritance hierarchy, and virtual functions, Go provides interfaces, which are discussed in more detail below.  Interfaces are also used where C++ uses templates.</li> <li>Go provides automatic garbage collection of allocated memory. It is not necessary (or possible) to release memory explicitly.  There is no need to worry about heap-allocated vs. stack-allocated storage, <code>new</code> vs. <code>malloc</code>, or <code>delete</code> vs. <code>delete[]</code> vs. <code>free</code>.  There is no need to separately manage <code>std::unique_ptr</code>, <code>std::shared_ptr</code>, <code>std::weak_ptr</code>, <code>std::auto_ptr</code>, and ordinary, non-smart \"raw\" pointers.  Go's run-time system handles all of that error-prone code on the programmer's behalf.</li> <li>Go has pointers but not pointer arithmetic. Go pointers therefore more closely resemble C++ references.  One cannot use a Go pointer variable to walk through the bytes of a string.  Slices, discussed further below, satisfy most of the need for pointer arithmetic.</li> <li>Go is \"safe\" by default.  Pointers cannot point to arbitrary memory, and buffer overruns result in crashes, not security exploits.  The <code>unsafe</code> package lets programmers bypass some of Go's protection mechanisms where explicitly requested.</li> <li>Arrays in Go are first class values. When an array is used as a function parameter, the function receives a copy of the array, not a pointer to it.  However, in practice functions often use slices for parameters; slices hold pointers to underlying arrays.  Slices are discussed further below.</li> <li>Strings are provided by the language. They may not be changed once they have been created.</li> <li>Hash tables are provided by the language. They are called maps.</li> <li>Separate threads of execution, and communication channels between them, are provided by the language. This is discussed further below.</li> <li>Certain types (maps and channels, described further below) are passed by reference, not by value. That is, passing a map to a function does not copy the map, and if the function changes the map the change will be seen by the caller.  In C++ terms, one can think of these as being reference types.</li> <li>Go does not use header files. Instead, each source file is part of a defined package. When a package defines an object (type, constant, variable, function) with a name starting with an upper case letter, that object is visible to any other file which imports that package.</li> <li>Go does not support implicit type conversion. Operations that mix different types require casts (called conversions in Go).  This is true even of different user-defined aliases of the same underlying type.</li> <li>Go does not support function overloading and does not support user defined operators.</li> <li>Go does not support <code>const</code> or <code>volatile</code> qualifiers.</li> <li>Go uses <code>nil</code> for invalid pointers, where C++ uses <code>NULL</code> or simply <code>0</code> (or in C++11, <code>nullptr</code>).</li> <li>Idiomatic Go uses multiple return values to convey errors\u2014one or more data results plus an error code\u2014instead of sentinel values (e.g., <code>-1</code>) or structured exception handling (C++'s <code>try</code>\u2026<code>catch</code> and <code>throw</code> or Go's <code>panic</code>\u2026<code>recover</code>).</li> </ul> Syntax <p>The declaration syntax is reversed compared to C++. You write the name followed by the type. Unlike in C++, the syntax for a type does not match the way in which the variable is used. Type declarations may be read easily from left to right.  (<code>var v1 int</code> \u2192 \"Variable <code>v1</code> is an <code>int</code>.\")</p> <pre><code>//Go                      C++\nvar v1 int                // int v1;\nvar v2 string             // const std::string v2;  (approximately)\nvar v3 [10]int            // int v3[10];\nvar v4 []int              // int* v4;  (approximately)\nvar v5 struct { f int }   // struct { int f; } v5;\nvar v6 *int               // int* v6;  (but no pointer arithmetic)\nvar v7 map[string]int     // unordered_map&lt;string, int&gt;* v7;  (approximately)\nvar v8 func(a int) int    // int (*v8)(int a);\n</code></pre> <p>Declarations generally take the form of a keyword followed by the name of the object being declared.  The keyword is one of <code>var</code>, <code>func</code>, <code>const</code>, or <code>type</code>.  Method declarations are a minor exception in that the receiver appears before the name of the object being declared; see the discussion of interfaces.</p> <p>You can also use a keyword followed by a series of declarations in parentheses.</p> <pre><code>var (\n\ti int\n\tm float64\n)\n</code></pre> <p>When declaring a function, you must either provide a name for each parameter or not provide a name for any parameter.  (That is, C++ permits <code>void f(int i, int);</code>, but Go does not permit the analogous <code>func f(i int, int)</code>.)  However, for convenience, in Go you may group several names with the same type:</p> <pre><code>func f(i, j, k int, s, t string)\n</code></pre> <p>A variable may be initialized when it is declared.  When this is done, specifying the type is permitted but not required.  When the type is not specified, the type of the variable is the type of the initialization expression.</p> <pre><code>var v = *p\n</code></pre> <p>See also the discussion of constants, below.  If a variable is not initialized explicitly, the type must be specified.  In that case it will be implicitly initialized to the type's zero value (<code>0</code>, <code>nil</code>, etc.).  There are no uninitialized variables in Go.</p> <p>Within a function, a short declaration syntax is available with <code>:=</code> .</p> <pre><code>v1 := v2 // C++11: auto v1 = v2;\n</code></pre> <p>This is equivalent to</p> <pre><code>var v1 = v2 // C++11: auto v1 = v2;\n</code></pre> <p>Go permits multiple assignments, which are done in parallel.  That is, first all of the values on the right-hand side are computed, and then these values are assigned to the variables on the left-hand side.</p> <pre><code>i, j = j, i // Swap i and j.\n</code></pre> <p>Functions may have multiple return values, indicated by a list in parentheses.  The returned values can be stored by assignment to a list of variables.</p> <pre><code>func f() (i int, j int) { ... }\nv1, v2 = f()\n</code></pre> <p>Multiple return values are Go's primary mechanism for error handling:</p> <pre><code>result, ok := g()\nif !ok {\n  // Something bad happened.\n  return nil\n}\n// Continue as normal.\n\u2026\n</code></pre> <p>or, more tersely,</p> <pre><code>if result, ok := g(); !ok {\n  // Something bad happened.\n  return nil\n}\n// Continue as normal.\n\u2026\n</code></pre> <p>Go code uses very few semicolons in practice.  Technically, all Go statements are terminated by a semicolon.  However, Go treats the end of a non-blank line as a semicolon unless the line is clearly incomplete (the exact rules are in the language specification).  A consequence of this is that in some cases Go does not permit you to use a line break.  For example, you may not write</p> <pre><code>func g()\n{                  // INVALID\n}\n</code></pre> <p>A semicolon will be inserted after <code>g()</code>, causing it to be a function declaration rather than a function definition.  Similarly, you may not write</p> <pre><code>if x {\n}\nelse {             // INVALID\n}\n</code></pre> <p>A semicolon will be inserted after the <code>}</code> preceding the <code>else</code>, causing a syntax error.</p> <p>Since semicolons do end statements, you may continue using them as in C++.  However, that is not the recommended style.  Idiomatic Go code omits unnecessary semicolons, which in practice is all of them other than the initial <code>for</code> loop clause and cases where you want several short statements on a single line.</p> <p>While we're on the topic, we recommend that rather than worry about semicolons and brace placement, you format your code with the <code>gofmt</code> program.  That will produce a single standard Go style, and let you worry about your code rather than your formatting.  While the style may initially seem odd, it is as good as any other style, and familiarity will lead to comfort.</p> <p>When using a pointer to a struct, you use <code>.</code> instead of <code>-&gt;</code>.  Thus, syntactically speaking, a structure and a pointer to a structure are used in the same way.</p> <pre><code>type myStruct struct{ i int }\nvar v9 myStruct  // v9 has structure type\nvar p9 *myStruct // p9 is a pointer to a structure\nf(v9.i, p9.i)\n</code></pre> <p>Go does not require parentheses around the condition of an <code>if</code> statement, or the expressions of a <code>for</code> statement, or the value of a <code>switch</code> statement.  On the other hand, it does require curly braces around the body of an <code>if</code> or <code>for</code> statement.</p> <pre><code>if a &lt; b { f() }             // Valid\nif (a &lt; b) { f() }           // Valid (condition is a parenthesized expression)\nif (a &lt; b) f()               // INVALID\nfor i = 0; i &lt; 10; i++ {}    // Valid\nfor (i = 0; i &lt; 10; i++) {}  // INVALID\n</code></pre> <p>Go does not have a <code>while</code> statement nor does it have a <code>do/while</code> statement.  The <code>for</code> statement may be used with a single condition, which makes it equivalent to a <code>while</code> statement.  Omitting the condition entirely is an endless loop.</p> <p>Go permits <code>break</code> and <code>continue</code> to specify a label.  The label must refer to a <code>for</code>, <code>switch</code>, or <code>select</code> statement.</p> <p>In a <code>switch</code> statement, <code>case</code> labels do not fall through.  You can make them fall through using the <code>fallthrough</code> keyword.  This applies even to adjacent cases.</p> <pre><code>switch i {\ncase 0: // empty case body\ncase 1:\n\tf() // f is not called when i == 0!\n}\n</code></pre> <p>But a <code>case</code> can have multiple values.</p> <pre><code>switch i {\ncase 0, 1:\n\tf() // f is called if i == 0 || i == 1.\n}\n</code></pre> <p>The values in a <code>case</code> need not be constants\u2013or even integers; any type that supports the equality comparison operator, such as strings or pointers, can be used\u2013and if the <code>switch</code> value is omitted it defaults to <code>true</code>.</p> <pre><code>switch {\ncase i &lt; 0:\n\tf1()\ncase i == 0:\n\tf2()\ncase i &gt; 0:\n\tf3()\n}\n</code></pre> <p>The <code>defer</code> statement may be used to call a function after the function containing the <code>defer</code> statement returns.  <code>defer</code> often takes the place of a destructor in C++ but is associated with the calling code, not any particular class or object.</p> <pre><code>fd := open(\"filename\")\ndefer close(fd) // fd will be closed when this function returns.\n</code></pre> Operators <p>The <code>++</code> and <code>--</code> operators may only be used in statements, not in expressions.  You cannot write <code>c = *p++</code>.  <code>*p++</code> is parsed as <code>(*p)++</code>.</p> <p>The operator precedence is different. As an example <code>4 &amp; 3 &lt;&lt; 1</code> evaluates to <code>0</code> in Go and <code>4</code> in C++.</p> <pre><code>Go operator precedence:\n1. *   /   %  &lt;&lt;  &gt;&gt;  &amp;  &amp;^\n2. +   -   |  ^\n3. ==  !=  &lt;  &lt;=  &gt;   &gt;=\n4. &amp;&amp;\n5. ||\n</code></pre> <pre><code>C++ operator precedence (only relevant operators):\n1.  *    /   %\n2.  +    -\n3.  &lt;&lt;   &gt;&gt;\n4.  &lt;    &lt;=  &gt;   &gt;=\n5.  ==   !=\n6.  &amp;\n7.  ^\n8.  |\n9.  &amp;&amp;\n10. ||\n</code></pre> Constants <p>In Go constants may be untyped. This applies even to constants named with a <code>const</code> declaration, if no type is given in the declaration and the initializer expression uses only untyped constants.  A value derived from an untyped constant becomes typed when it is used within a context that requires a typed value. This permits constants to be used relatively freely without requiring general implicit type conversion.</p> <pre><code>var a uint\nf(a + 1) // untyped numeric constant \"1\" becomes typed as uint\n</code></pre> <p>The language does not impose any limits on the size of an untyped numeric constant or constant expression. A limit is only applied when a constant is used where a type is required.</p> <pre><code>const huge = 1 &lt;&lt; 100\nf(huge &gt;&gt; 98)\n</code></pre> <p>Go does not support enums.  Instead, you can use the special name <code>iota</code> in a single <code>const</code> declaration to get a series of increasing value.  When an initialization expression is omitted for a <code>const</code>, it reuses the preceding expression.</p> <pre><code>const (\n\tred   = iota // red == 0\n\tblue         // blue == 1\n\tgreen        // green == 2\n)\n</code></pre> Types <p>C++ and Go provide similar, but not identical, built-in types: signed and unsigned integers of various widths, 32-bit and 64-bit floating-point numbers (real and complex), <code>struct</code>s, pointers, etc.  In Go, <code>uint8</code>, <code>int64</code>, and like-named integer types are part of the language, not built on top of integers whose sizes are implementation-dependent (e.g., <code>long long</code>).  Go additionally provides native <code>string</code>, <code>map</code>, and <code>chan</code> (channel) types as well as first-class arrays and slices (described below).  Strings are encoded with Unicode, not ASCII.</p> <p>Go is far more strongly typed than C++.  In particular, there is no implicit type conversion in Go, only explicit type conversion.  This provides additional safety and freedom from a class of bugs but at the cost of some additional typing.  There is also no <code>union</code> type in Go, as this would enable subversion of the type system.  However, a Go <code>interface{}</code> (see below) provides a type-safe alternative.</p> <p>Both C++ and Go support type aliases (<code>typedef</code> in C++, <code>type</code> in Go).  However, unlike C++, Go treats these as different types.  Hence, the following is valid in C++:</p> <pre><code>// C++\ntypedef double position;\ntypedef double velocity;\n\nposition pos = 218.0;\nvelocity vel = -9.8;\n\npos += vel;\n</code></pre> <p>but the equivalent is invalid in Go without an explicit type conversion:</p> <pre><code>type position float64\ntype velocity float64\n\nvar pos position = 218.0\nvar vel velocity = -9.8\n\npos += vel // INVALID: mismatched types position and velocity\n// pos += position(vel)  // Valid\n</code></pre> <p>The same is true even for unaliased types: an <code>int</code> and a <code>uint</code> cannot be combined in an expression without explicitly converting one to the other.</p> <p>Go does not allow pointers to be cast to and from integers, unlike in C++.  However, Go's <code>unsafe</code> package enables one to explicitly bypass this safety mechanism if necessary (e.g., for use in low-level systems code).</p> Slices <p>A slice is conceptually a struct with three fields: a pointer to an array, a length, and a capacity.  Slices support the <code>[]</code> operator to access elements of the underlying array.  The builtin <code>len</code> function returns the length of the slice.  The builtin <code>cap</code> function returns the capacity.</p> <p>Given an array, or another slice, a new slice is created via <code>a[i:j]</code>.  This creates a new slice that refers to <code>a</code>, starts at index <code>i</code>, and ends before index <code>j</code>.  It has length <code>j-i</code>.  If <code>i</code> is omitted, the slice starts at <code>0</code>.  If <code>j</code> is omitted, the slice ends at <code>len(a)</code>.  The new slice refers to the same array to which <code>a</code> refers.  Two implications of this statement are that \u2460 changes made using the new slice may be seen using <code>a</code>, and \u2461 slice creation is (intended to be) cheap; no copy needs to be made of the underlying array.  The capacity of the new slice is simply the capacity of <code>a</code> minus <code>i</code>.  The capacity of an array is the length of the array.</p> <p>What this means is that Go uses slices for some cases where C++ uses pointers.  If you create a value of type <code>[100]byte</code> (an array of 100 bytes, perhaps a buffer) and you want to pass it to a function without copying it, you should declare the function parameter to have type <code>[]byte</code>, and pass a slice of the array (<code>a[:]</code> will pass the entire array).  Unlike in C++, it is not necessary to pass the length of the buffer; it is efficiently accessible via <code>len</code>.</p> <p>The slice syntax may also be used with a string.  It returns a new string, whose value is a substring of the original string.  Because strings are immutable, string slices can be implemented without allocating new storage for the slices's contents.</p> Making values <p>Go has a builtin function <code>new</code> which takes a type and allocates space on the heap. The allocated space will be zero-initialized for the type.  For example, <code>new(int)</code> allocates a new int on the heap, initializes it with the value <code>0</code>, and returns its address, which has type <code>*int</code>.  Unlike in C++, <code>new</code> is a function, not an operator; <code>new int</code> is a syntax error.</p> <p>Perhaps surprisingly, <code>new</code> is not commonly used in Go programs.  In Go taking the address of a variable is always safe and never yields a dangling pointer.  If the program takes the address of a variable, it will be allocated on the heap if necessary.  So these functions are equivalent:</p> <pre><code>type S struct { I int }\n\nfunc f1() *S {\n\treturn new(S)\n}\n\nfunc f2() *S {\n\tvar s S\n\treturn &amp;s\n}\n\nfunc f3() *S {\n\t// More idiomatic: use composite literal syntax.\n\treturn &amp;S{}\n}\n</code></pre> <p>In contrast, it is not safe in C++ to return a pointer to a local variable:</p> <pre><code>// C++\nS* f2() {\n  S s;\n  return &amp;s;   // INVALID -- contents can be overwritten at any time\n}\n</code></pre> <p>Map and channel values must be allocated using the builtin function <code>make</code>.  A variable declared with map or channel type without an initializer will be automatically initialized to <code>nil</code>.  Calling <code>make(map[int]int)</code> returns a newly allocated value of type <code>map[int]int</code>. Note that <code>make</code> returns a value, not a pointer.  This is consistent with the fact that map and channel values are passed by reference.  Calling <code>make</code> with a map type takes an optional argument which is the expected capacity of the map.  Calling <code>make</code> with a channel type takes an optional argument which sets the buffering capacity of the channel; the default is 0 (unbuffered).</p> <p>The <code>make</code> function may also be used to allocate a slice.  In this case it allocates memory for the underlying array and returns a slice referring to it.  There is one required argument, which is the number of elements in the slice.  A second, optional, argument is the capacity of the slice.  For example, <code>make([]int, 10, 20)</code>.  This is identical to <code>new([20]int)[0:10]</code>.  Since Go uses garbage collection, the newly allocated array will be discarded sometime after there are no references to the returned slice.</p> Interfaces <p>Where C++ provides classes, subclasses and templates, Go provides interfaces.  A Go interface is similar to a C++ pure abstract class: a class with no data members, with methods which are all pure virtual.  However, in Go, any type which provides the methods named in the interface may be treated as an implementation of the interface.  No explicitly declared inheritance is required.  The implementation of the interface is entirely separate from the interface itself.</p> <p>A method looks like an ordinary function definition, except that it has a receiver.  The receiver is similar to the <code>this</code> pointer in a C++ class method.</p> <pre><code>type myType struct{ i int }\n\nfunc (p *myType) Get() int { return p.i }\n</code></pre> <p>This declares a method <code>Get</code> associated with <code>myType</code>.  The receiver is named <code>p</code> in the body of the function.</p> <p>Methods are defined on named types.  If you convert the value to a different type, the new value will have the methods of the new type, not the old type.</p> <p>You may define methods on a builtin type by declaring a new named type derived from it.  The new type is distinct from the builtin type.</p> <pre><code>type myInteger int\n\nfunc (p myInteger) Get() int { return int(p) } // Conversion required.\nfunc f(i int)                {}\n\nvar v myInteger\n\n// f(v) is invalid.\n// f(int(v)) is valid; int(v) has no defined methods.\n</code></pre> <p>Given this interface:</p> <pre><code>type myInterface interface {\n\tGet() int\n\tSet(i int)\n}\n</code></pre> <p>we can make <code>myType</code> satisfy the interface by adding</p> <pre><code>func (p *myType) Set(i int) { p.i = i }\n</code></pre> <p>Now any function which takes <code>myInterface</code> as a parameter will accept a variable of type <code>*myType</code>.</p> <pre><code>func GetAndSet(x myInterface) {}\nfunc f1() {\n\tvar p myType\n\tGetAndSet(&amp;p)\n}\n</code></pre> <p>In other words, if we view <code>myInterface</code> as a C++ pure abstract base class, defining <code>Set</code> and <code>Get</code> for <code>*myType</code> made <code>*myType</code> automatically inherit from <code>myInterface</code>.  A type may satisfy multiple interfaces.</p> <p>An anonymous field may be used to implement something much like a C++ child class.</p> <pre><code>type myChildType struct {\n\tmyType\n\tj int\n}\n\nfunc (p *myChildType) Get() int { p.j++; return p.myType.Get() }\n</code></pre> <p>This effectively implements <code>myChildType</code> as a child of <code>myType</code>.</p> <pre><code>func f2() {\n\tvar p myChildType\n\tGetAndSet(&amp;p)\n}\n</code></pre> <p>The <code>Set</code> method is effectively inherited from <code>myType</code>, because methods associated with the anonymous field are promoted to become methods of the enclosing type.  In this case, because <code>myChildType</code> has an anonymous field of type <code>myType</code>, the methods of <code>myType</code> also become methods of <code>myChildType</code>.  In this example, the <code>Get</code> method was overridden, and the <code>Set</code> method was inherited.</p> <p>This is not precisely the same as a child class in C++.  When a method of an anonymous field is called, its receiver is the field, not the surrounding struct.  In other words, methods on anonymous fields are not virtual functions. When you want the equivalent of a virtual function, use an interface.</p> <p>A variable that has an interface type may be converted to have a different interface type using a special construct called a type assertion. This is implemented dynamically at run time, like C++ <code>dynamic_cast</code>.  Unlike <code>dynamic_cast</code>, there does not need to be any declared relationship between the two interfaces.</p> <pre><code>type myPrintInterface interface {\n\tPrint()\n}\n\nfunc f3(x myInterface) {\n\tx.(myPrintInterface).Print() // type assertion to myPrintInterface\n}\n</code></pre> <p>The conversion to <code>myPrintInterface</code> is entirely dynamic.  It will work as long as the dynamic type of x defines a <code>Print</code> method.</p> <p>Because the conversion is dynamic, it may be used to implement generic programming similar to templates in C++.  This is done by manipulating values of the minimal interface.</p> <pre><code>type Any interface{}\n</code></pre> <p>Containers may be written in terms of <code>Any</code>, but the caller must unbox using a type assertion to recover values of the contained type.  As the typing is dynamic rather than static, there is no equivalent of the way that a C++ template may inline the relevant operations.  The operations are fully type-checked at run time, but all operations will involve a function call.</p> <pre><code>type Iterator interface {\n\tGet() Any\n\tSet(v Any)\n\tIncrement()\n\tEqual(arg Iterator) bool\n}\n</code></pre> <p>Note that <code>Equal</code> has an argument of type <code>Iterator</code>.  This does not behave like a C++ template.  See the FAQ.</p> Function closures <p>In C++ versions prior to C++11, the most common way to create a function with hidden state is to use a \"functor\"\u2014a class that overloads <code>operator()</code> to make instances look like functions.  For example, the following code defines a <code>my_transform</code> function (a simplified version of the STL's <code>std::transform</code>) that applies a given unary operator (<code>op</code>) to each element of an array (<code>in</code>), storing the result in another array (<code>out</code>).  To implement a prefix sum (i.e., {<code>x[0]</code>, <code>x[0]+x[1]</code>, <code>x[0]+x[1]+x[2]</code>, \u2026}) the code creates a functor (<code>MyFunctor</code>) that keeps track of the running total (<code>total</code>) and passes an instance of this functor to <code>my_transform</code>.</p> <pre><code>// C++\n#include &lt;iostream&gt;\n#include &lt;cstddef&gt;\n\ntemplate &lt;class UnaryOperator&gt;\nvoid my_transform (size_t n_elts, int* in, int* out, UnaryOperator op)\n{\n  size_t i;\n\n  for (i = 0; i &lt; n_elts; i++)\n    out[i] = op(in[i]);\n}\n\nclass MyFunctor {\npublic:\n  int total;\n  int operator()(int v) {\n    total += v;\n    return total;\n  }\n  MyFunctor() : total(0) {}\n};\n\nint main (void)\n{\n  int data[7] = {8, 6, 7, 5, 3, 0, 9};\n  int result[7];\n  MyFunctor accumulate;\n  my_transform(7, data, result, accumulate);\n\n  std::cout &lt;&lt; \"Result is [ \";\n  for (size_t i = 0; i &lt; 7; i++)\n    std::cout &lt;&lt; result[i] &lt;&lt; ' ';\n  std::cout &lt;&lt; \"]\\n\";\n  return 0;\n}\n</code></pre> <p>C++11 adds anonymous (\"lambda\") functions, which can be stored in variables and passed to functions.  They can optionally serve as closures, meaning they can reference state from parent scopes.  This feature greatly simplifies <code>my_transform</code>:</p> <pre><code>// C++11\n#include &lt;iostream&gt;\n#include &lt;cstddef&gt;\n#include &lt;functional&gt;\n\nvoid my_transform (size_t n_elts, int* in, int* out, std::function&lt;int(int)&gt; op)\n{\n  size_t i;\n\n  for (i = 0; i &lt; n_elts; i++)\n    out[i] = op(in[i]);\n}\n\nint main (void)\n{\n  int data[7] = {8, 6, 7, 5, 3, 0, 9};\n  int result[7];\n  int total = 0;\n  my_transform(7, data, result, [&amp;total] (int v) {\n      total += v;\n      return total;\n    });\n\n  std::cout &lt;&lt; \"Result is [ \";\n  for (size_t i = 0; i &lt; 7; i++)\n    std::cout &lt;&lt; result[i] &lt;&lt; ' ';\n  std::cout &lt;&lt; \"]\\n\";\n  return 0;\n}\n</code></pre> <p>A typical Go version of <code>my_transform</code> looks a lot like the C++11 version:</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc my_transform(in []int, xform func(int) int) (out []int) {\n\tout = make([]int, len(in))\n\tfor idx, val := range in {\n\t\tout[idx] = xform(val)\n\t}\n\treturn\n}\n\nfunc main() {\n\tdata := []int{8, 6, 7, 5, 3, 0, 9}\n\ttotal := 0\n\tfmt.Printf(\"Result is %v\\n\", my_transform(data, func(v int) int {\n\t\ttotal += v\n\t\treturn total\n\t}))\n}\n</code></pre> <p>(Note that we chose to return <code>out</code> from <code>my_transform</code> rather than pass it an <code>out</code> to write to.  This was an aesthetic decision; the code could have been written more like the C++ version in that regard.)</p> <p>In Go, functions are always full closures, the equivalent of <code>[&amp;]</code> in C++11.  An important difference is that it is invalid in C++11 for a closure to reference a variable whose scope has gone away (as may be caused by an upward funarg\u2014a function that returns a lambda that references local variables).  In Go, this is perfectly valid.</p> Concurrency <p>Like C++11's <code>std::thread</code>, Go permits starting new threads of execution that run concurrently in a shared address space.  These are called goroutines and are spawned using the <code>go</code> statement.  While typical <code>std::thread</code> implementations launch heavyweight, operating-system threads, goroutines are implemented as lightweight, user-level threads that are multiplexed among multiple operating-system threads.  Consequently, goroutines are (intended to be) cheap and can be used liberally throughout a program.</p> <pre><code>func server(i int) {\n\tfor {\n\t\tfmt.Print(i)\n\t\ttime.Sleep(10 * time.Second)\n\t}\n}\ngo server(1)\ngo server(2)\n</code></pre> <p>(Note that the <code>for</code> statement in the <code>server</code> function is equivalent to a C++ <code>while (true)</code> loop.)</p> <p>Function literals (which Go implements as closures) can be useful with the <code>go</code> statement.</p> <pre><code>var g int\ngo func(i int) {\n\ts := 0\n\tfor j := 0; j &lt; i; j++ {\n\t\ts += j\n\t}\n\tg = s\n}(1000) // Passes argument 1000 to the function literal.\n</code></pre> <p>Like C++11, but unlike prior versions of C++, Go defines a memory model for unsynchronized accesses to memory.  Although Go provides an analogue of <code>std::mutex</code> in its <code>sync</code> package, this is not the normal way to implement inter-thread communication and synchronization in Go programs.  Instead, Go threads more typically communicate by message passing, which is a fundamentally different approach from locks and barriers.  The Go mantra for this subject is,</p> <p>Do not communicate by sharing memory; instead, share memory by communicating.</p> <p>That is, channels are used to communicate among goroutines.  Values of any type (including other channels!) can be sent over a channel.  Channels can be unbuffered or buffered (using a buffer length specified at channel-construction time).</p> <p>Channels are first-class values; they can be stored in variables and passed to and from functions like any other value.  (When supplied to functions, channels are passed by reference.)  Channels are also typed: a <code>chan int</code> is different from a <code>chan string</code>.</p> <p>Because they are so widely used in Go programs, channels are (intended to be) efficient and cheap.  To send a value on a channel, use <code>&lt;-</code> as a binary operator.  To receive a value on a channel, use <code>&lt;-</code> as a unary operator.  Channels can be shared among multiple senders and multiple receivers and guarantee that each value sent is received by at most one receiver.</p> <p>Here is an example of using a manager function to control access to a single value.</p> <pre><code>type Cmd struct {\n\tGet bool\n\tVal int\n}\n\nfunc Manager(ch chan Cmd) {\n\tval := 0\n\tfor {\n\t\tc := &lt;-ch\n\t\tif c.Get {\n\t\t\tc.Val = val\n\t\t\tch &lt;- c\n\t\t} else {\n\t\t\tval = c.Val\n\t\t}\n\t}\n}\n</code></pre> <p>In that example the same channel is used for input and output.  This is incorrect if there are multiple goroutines communicating with the manager at once: a goroutine waiting for a response from the manager might receive a request from another goroutine instead.  A solution is to pass in a channel.</p> <pre><code>type Cmd2 struct {\n\tGet bool\n\tVal int\n\tCh  chan&lt;- int\n}\n\nfunc Manager2(ch &lt;-chan Cmd2) {\n\tval := 0\n\tfor {\n\t\tc := &lt;-ch\n\t\tif c.Get {\n\t\t\tc.Ch &lt;- val\n\t\t} else {\n\t\t\tval = c.Val\n\t\t}\n\t}\n}\n</code></pre> <p>To use <code>Manager2</code>, given a channel to it:</p> <pre><code>func getFromManagedChannel(ch chan&lt;- Cmd2) int {\n\tmyCh := make(chan int)\n\tc := Cmd2{true, 0, myCh} // Composite literal syntax.\n\tch &lt;- c\n\treturn &lt;-myCh\n}\n\nfunc main() {\n\tch := make(chan Cmd2)\n\tgo Manager2(ch)\n\t// ... some code ...\n\tcurrentValue := getFromManagedChannel(ch)\n\t// ... some more code...\n}\n</code></pre>"},{"location":"GoGenerateTools/","title":"GoGenerateTools","text":"<p><code>go generate</code> is only useful if you have tools to use it with! Here is an incomplete list of useful tools that generate code.</p> <ul> <li>goyacc \u2013 Yacc for Go.</li> <li>stringer \u2013 Implements <code>fmt.Stringer</code> interface for enums.</li> <li>gostringer \u2013 Implements <code>fmt.GoStringer</code> interface for enums.</li> <li>jsonenums \u2013 Implements <code>json.Marshaler</code> and <code>json.Unmarshaler</code> interfaces for enums.</li> <li>go-syncmap - Generates Go code using a package as a generic template for <code>sync.Map</code>.</li> <li>go-syncpool - Generates Go code using a package as a generic template for <code>sync.Pool</code>.</li> <li>go-atomicvalue - Generates Go code using a package as a generic template for <code>atomic.Value</code>.</li> <li>go-nulljson - Generates Go code using a package as a generic template that implements <code>database/sql.Scanner</code> and <code>database/sql/driver.Valuer</code>.</li> <li>go-enum - Generates Go code using a package as a generic template which implements interface <code>fmt.Stringer</code> | <code>binary</code> | <code>json</code> | <code>text</code> | <code>sql</code> | <code>yaml</code> for enums.</li> <li>enumer - Generates Go code that convert Go enum to/from strings.</li> <li>go-import \u2014 Performs auto import of non go files.</li> <li>gojson - Generates go struct definitions from example json documents.</li> <li>vfsgen - Generates a vfsdata.go file that statically implements the given virtual filesystem.</li> <li>goreuse - Generates Go code using a package as a generic template by replacing definitions.</li> <li>embedfiles - Embeds files into Go code.</li> <li>ragel - State machine compiler</li> <li>peachpy - x86-64 assembler embedded in Python, generates Go assembly</li> <li>bundle - Bundle creates a single-source-file version of a source package suitable for inclusion in a particular target package.</li> <li>msgp - A Go code generator for MessagePack</li> <li>protobuf - protobuf</li> <li>thriftrw - thrift</li> <li>gogen-avro - avro</li> <li>swagger-gen-types - go types from swagger specifications</li> <li>avo - generate assembly code with Go</li> <li>Wire - Compile-time Dependency Injection for Go</li> <li>sumgen - generate interface method implementations from sum-type declarations</li> <li>interface-extractor - generates an interface of a desired type, with only methods used within the package.</li> <li>deep-copy - creates a deep copy method for the given types.</li> <li>libfsm - fsm toolkit supporting (among others) Go and Go-flavored amd64 assembly for matching regexps</li> <li>re2c - lexer generator for C, C++ and Go</li> <li>re2dfa - Transform regular expressions into finite state machines and output Go source code</li> <li>pigeon - a PEG parser generator for Go</li> </ul>"},{"location":"GoGetProxyConfig/","title":"GoGetProxyConfig","text":"<p>Setting proxies for source code used by <code>go get</code> (listed in GoGetTools)</p>"},{"location":"GoGetProxyConfig/#windows-command-line","title":"Windows command line","text":"<pre><code>$ set http_proxy=http://proxy.example.com:port\n</code></pre>"},{"location":"GoGetProxyConfig/#git","title":"git","text":"<pre><code>$ git config [--global] http.proxy http://proxy.example.com:port\n</code></pre>"},{"location":"GoGetProxyConfig/#mercurial","title":"mercurial","text":"<p>Edit <code>~/.hgrc</code> and add the following: <pre><code>[http_proxy]\nhost=proxy.example.com:port\n</code></pre></p>"},{"location":"GoGetProxyConfig/#svn","title":"svn","text":"<p>Edit <code>~/.subversion/servers</code> and add the following: <pre><code>[Global] \nhttp-proxy-host=proxy.example.com\nhttp-proxy-port=xxxx \n</code></pre></p>"},{"location":"GoGetTools/","title":"GoGetTools","text":""},{"location":"GoGetTools/#installing-version-control-tools-for-go-get","title":"Installing Version Control Tools for <code>go get</code>","text":"<p>The <code>go get</code> fetching of source code is done by using one of the following tools expected to be found on your system:</p> <ul> <li>svn - Subversion, download at: http://subversion.apache.org/packages.html</li> <li>hg - Mercurial, download at https://www.mercurial-scm.org/downloads</li> <li>git - Git, download at http://git-scm.com/downloads</li> <li>bzr - Bazaar, download at http://wiki.bazaar.canonical.com/Download</li> </ul> <p>For example, git is used for GitHub, hg is used for Bitbucket, etc.</p> <p>Refer GoGetProxyConfig for setting proxies for these tools.</p>"},{"location":"GoMips/","title":"Go on MIPS","text":""},{"location":"GoMips/#introduction","title":"Introduction","text":"<p>Go programs can be cross-compiled e.g., on x86/x86_64 build systems to run on MIPS target machines.</p>"},{"location":"GoMips/#supported-architectures","title":"Supported architectures","text":"<p>Go supports the following MIPS architectural families. (Are there more?)</p> Architecture Status GOMIPS value GOARCH value Big endian (e.g., ar71xx) supported GOMIPS=softfloat GOARCH=mips Little endian supported n/a GOARCH=mipsle"},{"location":"GoMips/#supported-operating-systems","title":"Supported operating systems","text":"<ul> <li>MIPS on Linux. Tested with an ar71xx based OpenWrt device.</li> </ul>"},{"location":"GoMips/#recommended-go-version","title":"Recommended Go version","text":"<p>The tested version for running Go on MIPS systems is Go 1.13.</p>"},{"location":"GoMips/#tips-and-tricks","title":"Tips and tricks","text":""},{"location":"GoMips/#building-for-ar71xx-openwrt","title":"Building for ar71xx OpenWrt","text":"<p>This builds a Go program, strips unneeded strings and symbols to minimize its size, and compresses it to further minimize its size:</p> <pre><code>env GOOS=linux GOARCH=mips GOMIPS=softfloat  go build -trimpath -ldflags=\"-s -w\" 'server.go'\nupx -9 server\n</code></pre>"},{"location":"GoMips/#success-stories","title":"Success stories","text":"<p>MIPS hardware comes in a myriad of shapes and sizes. If you've had a success story building and running Go on your Arm system, please detail your results here.</p>"},{"location":"GoMips/#d-link-dir-505-mobile-companion","title":"D-Link DIR-505 Mobile Companion","text":"<p>Architecture: ar71xx</p> <p>Operating System: OpenWrt</p> <p>The D-Link DIR-505 Mobile Companion comes with an Atheros AR1311 processor, 8 MB flash and 64 MB RAM. This space is limited but allows us to load Go applications, e.g., from network into <code>/tmpfs</code> and execute them from there.</p> <p>Further information about the device can be found at https://openwrt.org/toh/d-link/dir-505.</p>"},{"location":"GoMips/#teltonika-rut955","title":"Teltonika RUT955","text":"<p>Architecture: ar9344</p> <p>Operating System: RutOS (based on OpenWrt)</p> <p>The Teltonika RUT955 has a Atheros Wasp MIPS 74Kc CPU running at 550 MHz with 16 MB flash 128 MB RAM. Inbuilt flash will be insufficient for most applications but a Micro SD or USB stick can be added (running application directly from SD was unreliable but copying to /tmpfs and running from there works OK). The inbuilt IO, GPS etc can be accessed via Modbus TCP and the RS232/RS485 ports worked without issue. Tested with Go 1.14.6,  1.15.3 &amp; 1.21.1 (GOARCH=mips, GOMIPS=softfloat).</p> <p>Further information about the device can be found at https://teltonika-networks.com/product/rut955/.</p>"},{"location":"GoMips/#teltonika-rut956","title":"Teltonika RUT956","text":"<p>Architecture: MediaTek MT7628AN ver:1 eco:2</p> <p>Operating System: RutOS (based on OpenWrt)</p> <p>The Teltonika RUT956 has a Mediatek MIPS 24KEc CPU running at 580 MHz with 16 MB flash 128 MB RAM. Inbuilt flash will be insufficient for most applications but a USB stick can be added. The inbuilt IO, GPS etc can be accessed via Modbus TCP and the RS232/RS485 ports worked without issue. Tested with Go 1.21.1 (GOARCH=mipsle, GOMIPS=softfloat). Note that <code>illegal instruction</code> is output if <code>GOMIPS</code> is not set.</p> <p>Further information about the device can be found at https://teltonika-networks.com/product/rut956/.</p>"},{"location":"GoMips/#tp-link-archer-a6-wifi-router","title":"TP-Link Archer A6 WiFi Router","text":"<p>Architecture: ath79 (same hardware as ar71xx, but with native kernel support)</p> <p>Operating System: OpenWrt</p> <p>The TP-Link Archer A6 comes with an Atheros QCA9563 MIPS 24K classic processor, 16 MB flash, and 128 MB RAM. Flash storage is limited and no USB ports are available for storage expansion, so programs are loaded from the network into /tmpfs and executed.</p> <p>Further information about the device can be found at https://openwrt.org/toh/hwdata/tp-link/tp-link_archer_a6_us_tw.</p>"},{"location":"GoMips/#belkin-f7d7302-wifi-router","title":"Belkin F7D7302 WiFi Router","text":"<p>Architecture: mipsel_74kc</p> <p>Operating System: DD-WRT</p> <p>The Belkin F7D7302 comes with a Broadcom BCM4716 little-endian MIPS 74K classic processor, 8 MB flash, and 64 MB RAM. Flash storage is severely limited, but there is a USB port available so programs can be loaded onto a flash drive and executed.</p> <p>Further information about the device can be found at https://openwrt.org/toh/belkin/f7d3302.</p>"},{"location":"GoMips/#avm-fritzbox-7362-sl","title":"AVM FRITZ!Box 7362 SL","text":"<p>System type: xRX200 rev 1.2  CPU model: MIPS 34Kc V5.6</p> <p>Operating System: OpenWrt 21</p> <p>Further information about the device can be found at https://openwrt.org/toh/avm/avm_7362_sl.</p>"},{"location":"GoStrings/","title":"GoStrings","text":"<p>Strings are not required to be UTF-8. Go source code is required to be UTF-8. There is a complex path between the two.</p> <p>In short, there are three kinds of strings. They are:</p> <ol> <li>the substring of the source that lexes into a string literal.</li> <li>a string literal.</li> <li>a value of type string.</li> </ol> <p>Only the first is required to be UTF-8. The second is required to be written in UTF-8, but its contents are interpreted various ways and may encode arbitrary bytes. The third can contain any bytes at all.</p> <p>Try this on:</p> <p><pre><code>var s string = \"\\xFF\u8a9e\"\n</code></pre> Source substring: <code>\"\\xFF\u8a9e\"</code>, UTF-8 encoded. The data:</p> <pre><code>22\n5c\n78\n46\n46\ne8\naa\n9e\n22\n</code></pre> <p>String literal: <code>\\xFF\u8a9e</code> (between the quotes). The data:</p> <pre><code>5c\n78\n46\n46\ne8\naa\n9e\n</code></pre> <p>The string value (unprintable; this is a UTF-8 stream). The data:</p> <pre><code>ff\ne8\naa\n9e\n</code></pre> <p>And for record, the characters (code points): <pre><code>&lt;erroneous byte FF, will appear as U+FFFD if you range over the string value&gt;\n\u8a9e U+8a9e\n</code></pre></p>"},{"location":"GoTalks/","title":"Go talks","text":"<p>Check out http://talks.golang.org for presentations for some of the talks. For a comprehensive, curated and searchable index, try GopherVids from Damian Gryski.</p>"},{"location":"GoTalks/#official","title":"Official","text":""},{"location":"GoTalks/#introductory-talks","title":"Introductory Talks","text":"<p>An introduction to Go.</p>"},{"location":"GoTalks/#russ-coxs-tour-of-go","title":"Russ Cox's Tour of Go","text":"<p>[video and discussion]</p> <p>Three things that make Go fast, fun, and productive:interfaces, reflection, and concurrency. Builds a toy web crawler to demonstrate these.</p>"},{"location":"GoTalks/#go-a-simple-programming-environment","title":"Go: a simple programming environment","text":"<p>[video] [another video] [slides]</p> <p>Go is a general-purpose language that bridges the gap between efficient statically typed languages and productive dynamic language. But it\u2019s not just the language that makes Go special \u2013 Go has broad and consistent standard libraries and powerful but simple tools.</p> <p>This talk gives an introduction to Go, followed by a tour of some real programs that demonstrate the power, scope, and simplicity of the Go programming environment.</p>"},{"location":"GoTalks/#get-started-with-go","title":"Get Started with Go","text":"<p>[video]</p> <p>Get a feel for the language and its standard libraries and tools in this session, where we go through installing Go and writing some simple but useful programs.</p>"},{"location":"GoTalks/#go-programming","title":"Go Programming","text":"<p>[video]  [code]</p> <p>A presentation delivered by Rob Pike and Russ Cox at Google I/O 2010.  It illustrates how programming in Go differs from other languages through a set of examples demonstrating features particular to Go.  These include concurrency, embedded types, methods on any type, and program construction using interfaces.</p>"},{"location":"GoTalks/#the-go-tech-talk","title":"The Go Tech Talk","text":"<p>[video] [slides]</p> <p>An hour-long talk delivered by Rob Pike at Google in October 2009. The language's first public introduction. The language has changed since it was made, but it's still a good introduction.</p>"},{"location":"GoTalks/#development-in-go","title":"Development in Go","text":""},{"location":"GoTalks/#writing-web-apps-in-go","title":"Writing Web Apps in Go","text":"<p>[video]  [slides]</p> <p>A talk by Rob Pike and Andrew Gerrand presented at Google I/O 2011. It walks through the construction and deployment of a simple web application and unveils the Go runtime for App Engine.</p>"},{"location":"GoTalks/#real-world-go","title":"Real World Go","text":"<p>[video]  [slides]</p> <p>A talk by Andrew Gerrand presented at Google I/O Bootcamp 2011. It gives a broad overview of Go's type system and concurrency model and provides four examples of Go programs that solve real problems.</p>"},{"location":"GoTalks/#building-integrated-apps-on-googles-cloud-platform","title":"Building Integrated Apps on Google's Cloud Platform","text":"<p>[video]</p> <p>A talk by Andrew Gerrand presented at Google Developer Day Japan 2011. It discusses the development of a web application that runs on Google App Engine and renders raytraced that it stores on Google Cloud Storage.</p>"},{"location":"GoTalks/#high-performance-apps-with-go-on-app-engine","title":"High Performance Apps with Go on App Engine","text":"<p>Google I/O, May 2013</p> <p>[video]  [slides]</p>"},{"location":"GoTalks/#practical-go-programming","title":"Practical Go Programming","text":"<p>[video]  [slides]  [code]</p> <p>This talk presents the development of a complete web application in Go. It looks at design, storage, concurrency, and scaling issues in detail, using the simple example of an URL shortening service.</p>"},{"location":"GoTalks/#lexical-scanning-in-go","title":"Lexical Scanning in Go","text":"<p>[video]</p> <p>This GTUG talk by Rob Pike discusses the detailed design of a lexical scanner that uses Go's features in expressive combinations. (The discussion near the end about avoiding goroutines at initialization is obsolete: Go 1 allows goroutines in init functions so the extra complexity is unnecessary.)</p>"},{"location":"GoTalks/#go-in-production","title":"Go in Production","text":"<p>Google I/O, June 2012</p> <p>[video]</p> <p>Since Go's release in 2009 many companies (besides Google, of course) have used the language to build cool stuff. In this session programmers from several companies will share their first-hand experience using Go in production environments.</p>"},{"location":"GoTalks/#go-code-that-grows-with-grace","title":"Go: code that grows with grace","text":"<p>[video] [slides]</p> <p>One of the Go Programming Language\u2019s key design goals is code adaptability; that it should be easy to take a simple design and build upon it in a clean and natural way. In this talk I describe a simple \u201cchat roulette\u201d server that matches pairs of incoming TCP connections, and then use Go\u2019s concurrency mechanisms, interfaces, and standard library to extend it with a web interface and other features. Although the function of the program changes dramatically, the inherent flexibility of Go allows the original design to remain intact as it grows.</p>"},{"location":"GoTalks/#implementing-a-bignum-calculator","title":"Implementing a bignum calculator","text":"<p>[video] [slides]</p> <p>Rob Pike describes his interpreter for an APL-like calculator language.</p>"},{"location":"GoTalks/#go-in-go","title":"Go in Go","text":"<p>[video] [slides]</p> <p>Rob Pike speaks on moving the Go toolchain from C to Go</p>"},{"location":"GoTalks/#concurrency-in-go","title":"Concurrency in Go","text":""},{"location":"GoTalks/#go-concurrency-patterns","title":"Go concurrency patterns","text":"<p>Google I/O, June 2012</p> <p>[video]</p>"},{"location":"GoTalks/#advanced-concurrency-patterns","title":"Advanced Concurrency Patterns","text":"<p>[video] [slides]</p> <p>Google I/0, May 2013</p> <p>Concurrency is the key to designing high performance network services. This talk expands on last year's popular Go Concurrency Patterns talk to dive deeper into Go's concurrency primitives, and see how tricky concurrency problems can be solved gracefully with simple Go code.</p>"},{"location":"GoTalks/#design-of-go","title":"Design of Go","text":""},{"location":"GoTalks/#the-expressiveness-of-go","title":"The Expressiveness Of Go","text":"<p>[slides]</p> <p>A discussion of the qualities that make Go an expressive and comprehensible language.  The talk was presented by Rob Pike at JAOO 2010. The recording of the event was lost due to a hardware error.</p>"},{"location":"GoTalks/#another-go-at-language-design","title":"Another Go at Language Design","text":"<p>[video from Sydney University] [slides]</p> <p>A tour, with some background, of the major features of Go, intended for an audience new to the language.  The talk was presented at OSCON 2010. This talk was also delivered at Sydney University in September 2010.</p>"},{"location":"GoTalks/#go-emerging-languages-conference-talk","title":"Go Emerging Languages Conference Talk","text":"<p>[video] [slides] </p> <p>Rob Pike's Emerging Languages Conference presentation delivered in July 2010.  Talk abstract:</p> <p>Go\u2019s approach to concurrency differs from that of many languages, even those (such as Erlang) that make concurrency central, yet it has deep roots. The path from Hoare\u2019s 1978 paper to Go provides insight into how and why Go works as it does.</p>"},{"location":"GoTalks/#the-state-of-go","title":"The State of Go","text":""},{"location":"GoTalks/#june-2014","title":"June 2014","text":"<p>[video] [slides]</p>"},{"location":"GoTalks/#february-2015","title":"February 2015","text":"<p>[video] [slides]</p>"},{"location":"GoTalks/#may-2015","title":"May 2015","text":"<p>[video] [slides]</p>"},{"location":"GoTalks/#miscellaneous","title":"Miscellaneous","text":""},{"location":"GoTalks/#the-go-frontend-for-gcc","title":"The Go frontend for GCC","text":"<p>[paper]</p> <p>A description of the Go language frontend for gcc. Ian Lance Taylor's paper delivered at the GCC Summit 2010.</p>"},{"location":"GoTalks/#the-go-promo-video","title":"The Go Promo Video","text":"<p>[video]</p> <p>A short promotional video featuring Russ Cox demonstrating Go's fast compiler.</p>"},{"location":"GoTalks/#meet-the-go-team","title":"Meet the Go team","text":"<p>Google I/O, June 2012</p> <p>[video]</p> <p>A panel discussion with David Symonds, Robert Griesemer, Rob Pike, Ken Thompson, Andrew Gerrand, and Brad Fitzpatrick.</p>"},{"location":"GoTalks/#fireside-chat-with-go-team","title":"Fireside Chat with Go team","text":"<p>Google I/0, May 2013</p> <p>[video]</p> <p>A fireside chat with Andrew Gerrand, Brad Fitzpatrick, David Symonds, Ian Lance Taylor, Nigel Tao, Rob Pike, Robert Griesemer, Sameer Ajmani.</p>"},{"location":"GoTalks/#the-state-of-the-gopher","title":"The State of the Gopher","text":"<p>[video] [slides]</p>"},{"location":"GoTalks/#unofficial","title":"Unofficial","text":"<p>Talks by members of the community.</p>"},{"location":"GoTalks/#lets-go-or-introduction-to-go","title":"Let's Go, or introduction to Go","text":"<p>[video (starting at 14:35)]  [slides]  [source]</p> <p>This talk gives an introduction to Go in Russian.</p>"},{"location":"GoTalks/#what-are-go-modules-and-how-do-i-use-them","title":"What are Go modules and how do I use them?","text":"<p>Paul Jolly at LondonGophers</p> <p>[video] [slides]</p>"},{"location":"GoTalks/#what-else-is-in-go-111","title":"What else is in Go 1.11","text":"<p>Daniel Mart\u00ec at LondonGophers</p> <p>[video] [slides]</p> <p>Sneak peak at the Go 1.11 release</p>"},{"location":"GoTalks/#get-going-with-webassembly","title":"Get Going with WebAssembly","text":"<p>Johan Brandhorst at LondonGophers</p> <p>[video] [slides] [code wasm] [code grpc]</p> <p>In this talk, Johan introduces you to the WebAssembly port in Go 1.11 and how it can help when dealing with JavaScript madness :)</p>"},{"location":"GoTalks/#go-and-mongo---and-how-its-changing","title":"Go and Mongo - and how it's changing","text":"<p>DJ Walker-Morgan at LondonGophers</p> <p>[video] [slides]</p>"},{"location":"GoTalks/#building-a-simple-concurrency-teaching-language-with-go","title":"Building a simple concurrency teaching language with Go","text":"<p>Nicholas Ng at LondonGophers</p> <p>[video] [slides]</p> <p>In this talk Nicholas presents the design and implementation of a simple language designed for teaching concurrency theory (process calculi), implemented in Go. He covers some of Go's static analysis tools used in the implementation and show how you can use them too!</p>"},{"location":"GoTalks/#introducing-remoto","title":"Introducing Remoto","text":"<p>Mat Ryer at LondonGophers</p> <p>[video]</p> <p>Mat shares the first glimpse of a new project that aims to make building RPC services easy. gRPC isn\u2019t good for clients (especially web), and RESTful designs sometimes lead to confusing APIs. Remoto lets you define your service with a Go interface, and generate everything you need to build and consume the service.</p>"},{"location":"GoTalks/#go-swagger","title":"Go Swagger","text":"<p>Simone Trubian at LondonGophers</p> <p>[video]</p> <p>Simone gives an overview of the Go Swagger command line tool and briefly explain how he used it to improve productivity in designing REST API's.</p>"},{"location":"GoTalks/#orms-in-go","title":"ORMs in Go","text":"<p>Renato Serra at LondonGophers</p> <p>[video]</p> <p>Renato explains where ORMs can help, what the options were and what it's been like to use one.</p>"},{"location":"GoTalks/#unused-parameters-in-go-code","title":"Unused parameters in Go code","text":"<p>Daniel Mart\u00ec at LondonGophers</p> <p>[video] [slides]</p> <p>Daniel talks about how to use SSA and callgraphs to write powerful code analysis tools. In particular, he demonstrates how to detect unused parameters in functions.</p>"},{"location":"GoTalks/#lies-damn-lies-and-benchmarks","title":"Lies, Damn Lies, and Benchmarks","text":"<p>Amnon at LondonGophers</p> <p>[video] [slides]</p> <p>Amnon discusses why microbenchmarks can be misleading for optimising real world systems, why data layout is often more significant than code structure, and how Go can help us in the quest for performance.</p>"},{"location":"GoTalks/#a-debugger-from-scratch","title":"A debugger from scratch","text":"<p>Liz Rice at LondonGophers</p> <p>[video] [slides] [code]</p> <p>Liz explains how a debugger works by building one in a few lines of Go. This includes mapping between Go source code and the machine code instructions it compiles to, and using the ptrace system call to set break points and examine and modify the running process.</p>"},{"location":"GoTalks/#fast-fractal-fun-with-sdl","title":"Fast Fractal Fun With SDL","text":"<p>Sue Spence at LondonGophers</p> <p>[video] [slides] [code]</p> <p>Go programs which create images such as the Mandelbrot &amp; Julia sets often output an image file. I will show how to use Go bindings for the Simple Directmedia Layer library to output them on a display device instead.</p>"},{"location":"GoTalks/#concurrency-a-journey-from-ruby-to-go","title":"Concurrency: a Journey from Ruby to Go","text":"<p>Mathilda Thompson at LondonGophers</p> <p>[video]</p>"},{"location":"GoTalks/#go-in-a-polyglot-environment","title":"Go in a Polyglot Environment","text":"<p>Kevin McKelvin at LondonGophers</p> <p>[video]</p> <p>In this talk Kevin goes through his experience of adopting Go, moving to a polyglot environment, successes and challenges, and how Go fits into his company's overall architecture and strategy.</p>"},{"location":"GoTalks/#delivering-go-services","title":"Delivering Go Services","text":"<p>Zak Knill at LondonGophers</p> <p>[video]</p> <p>Delivering Go Services: After introducing Go to your company, and deploying your first go service. What are the next steps? This talk focuses on some of the things that come next, touching on the fabled \"New service to prod in X (10, 20, 30) mins\", as well as some gotchas along the way.</p>"},{"location":"GoTalks/#go-ing-lambda","title":"Go-ing Lambda","text":"<p>David Blooman at LondonGophers</p> <p>[video]</p> <p>Go-ing Lambda - A year in production: How we(FundApps) used Go in lambda functions to build a service for importing/scraping/parsing data for financial services to build API's on top of. Tips and tricks of lambda functions in Go, limitations, performance and using the Apex framework.</p>"},{"location":"GoTalks/#the-red-method","title":"The RED method","text":"<p>Tom Wilkie at LondonGophers</p> <p>[video]</p> <p>We'll also have a section dedicated to those of you who are hiring or looking to get hired (if we'll miss it like last time, please don't be afraid to remind us).</p>"},{"location":"GoTalks/#abusing-gos-net-package-for-fun-and-profit","title":"Abusing Go\u2019s net package for fun and profit","text":"<p>Micha\u0142 Witkowski at LondonGophers</p> <p>[video]</p> <p>This talks into the details of how Go\u2019s composition-based philosophy, as applied to the net package, can be creatively leveraged to beautiful and useful hacks that significantly augment the functionality of the stack. We\u2019ll explore the net.Conn, and how one can (ab)use them in creative ways. We\u2019ll take a peek into net/http, and explore how the http.Handler and http.Roundtripper interfaces can be creatively appropriated to build useful middleware. We\u2019ll then dig even deeper into the net/http internals and how they related tls.Conn and x/net/http2, to understand how they work, and armed with that knowledge we\u2019ll demonstrate some of our most beautiful hacks.</p>"},{"location":"GoTalks/#2018s-stringer","title":"2018's stringer","text":"<p>Daniel Mart\u00ec at LondonGophers</p> <p>[video] [slides]</p> <p>2018's stringer - a demonstration of new features you likely haven't heard of.</p>"},{"location":"GoUserGroups/","title":"GoUserGroups","text":""},{"location":"GoUserGroups/#africa","title":"Africa","text":"<ul> <li>Golang Buea - Buea, Cameroon</li> <li>Go Egypt - Cairo, Egypt.</li> <li>Go Cape Town - Cape Town.</li> <li>golang-dakar Dakar (S\u00e9n\u00e9gal)</li> <li>Joburg Golang Group - Johannesburg</li> <li>angolang Luanda, Angola</li> <li>Golang Nigeria - Lagos, Nigeria</li> <li>Golang Abuja - Abuja, Nigeria</li> <li>Gophers Mauritius - Mauritius</li> <li>cyberstorm.mu - Mauritius</li> <li>Tunisian Gophers - Tunisia</li> <li>Nairobi Gophers - Nairobi, Kenya</li> </ul>"},{"location":"GoUserGroups/#asia","title":"Asia","text":"<ul> <li>Golang \u0650Arabic Community</li> <li>Golang Azerbaijan - Baku, Azerbaijan \ud83c\udde6\ud83c\uddff</li> <li>Golang Iraq - Iraq</li> <li>Indonesia - Indonesia</li> <li>GoJakarta - Jakarta, Indonesia.</li> <li>Golang Surabaya - Surabaya, Indonesia.</li> <li>Persia</li> <li>Telegram Iranian Group - Iran</li> <li>devheroes Iran - Iran</li> <li>India</li> <li>Golang New Delhi - New Delhi, India.</li> <li>Golang Bangalore - Bangalore, India.</li> <li>Golang Chennai - Chennai, India</li> <li>Golang Pune - Pune, India.</li> <li>Golang Ahmedabad - Ahmedabad, India.</li> <li>Golang Kolkata - Kolkata, India.</li> <li>Japan</li> <li>Gophers Japan - Japan.</li> <li>golang.tokyo - Tokyo, Japan.</li> <li>Akiba.go - Tokyo, Japan.</li> <li>Women Who Go Tokyo - Tokyo, Japan.</li> <li>kyoto.go - Kyoto, Japan.</li> <li>Umeda.go - Osaka, Japan.</li> <li>Sendai.go - Miyagi, Japan.</li> <li>Fukuoka.go - Fukuoka, Japan.</li> <li>Okayama.go - Okayama, Japan.</li> <li>nagoya.go - Aichi, Japan.</li> <li>Shizuoka.go - Shizuoka, Japan.</li> <li>Golang\u672d\u5e4c - Hokkaido, Japan.</li> <li>Gopher\u9053\u5834 - Japan.</li> <li>Go Language Specification \u8f2a\u8aad\u4f1a - Japan.</li> <li> <p>\u30b4\u30ea\u30e9.Go - Japan.</p> </li> <li> <p>Other</p> </li> <li>Golang China - China.</li> <li>Golang Korea - Korea.</li> <li>Golang Vietnam - github -  Vietnam</li> <li>Golang Taiwan - Taiwan.</li> <li>Golang Israel - Israel.</li> <li>Singapore Gophers - Meetup - Singapore</li> <li>Golang UAE - UAE.</li> <li>Golang Malaysia - Homepage - Malaysia.</li> <li>Go Developers Network Bangladesh - Bangladesh.</li> <li>Golang Pakistan - Facebook Group - Pakistan</li> </ul>"},{"location":"GoUserGroups/#europe","title":"Europe","text":"<ul> <li>B\u00e4rner Go Meetup - Berne, Switzerland</li> <li>Budapest Go Meetup - Budapest, Hungary</li> <li>Athens Gophers - Athens, Greece.</li> <li>Golang T\u00fcrkiye - Istanbul, Turkey.</li> <li>Gophers Aachen - Aachen, Germany.</li> <li>Amsterdam, NL</li> <li>Belarus - Belarus.</li> <li>Belfast Gophers - Belfast, UK.</li> <li>Barcelona - Barcelona, Catalunya, Spain.</li> <li>Brno Golang - Brno, the Czech Republic</li> <li>Golang Prague - Prague, Czech Republic.</li> <li>Cambridge Gophers - Cambridge, UK</li> <li>Suffolk Gophers - Suffolk, UK</li> <li>Stuttgart Gophers - Stuttgart, Germany.</li> <li>GDG Berlin Golang - Berlin, Germany.</li> <li>Go-User-Group-Hamburg - Hamburg, Germany.</li> <li>Go-User-Group Rhein-Ruhr - Rhine-Ruhr region, Germany.</li> <li>Go Lithuania User Group - Lithuania, Kaunas.</li> <li>Go London User Group - London, UK.</li> <li>ManGo The Manchester Go User Group - Manchester, UK.</li> <li>Golang Dorset - Bournemouth, UK.</li> <li>Golang Bristol++ - Bristol, UK.</li> <li>GoSheffield - Sheffield, UK.</li> <li>GoMAD - Madrid, Spain </li> <li>Go Valhalla - Valencia, Spain. \ud83c\uddfb\ud83c\uddf3</li> <li>Go Wales User Group - Wales, UK.</li> <li>Golang \u041c\u043e\u0441\u043a\u0432\u0430 - Moscow, Russia.</li> <li>Golang \u041f\u0438\u0442\u0435\u0440 - Saint Petersburg, Russia.</li> <li>Golang \u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a - Novosibirsk, Russia.</li> <li>Golang \u041a\u0430\u0437\u0430\u043d\u044c - Kazan, Russia.</li> <li>Go Yola - Yoshkar-Ola, Russia.</li> <li>Chisinau Golang Meetup - Chisinau, Moldova</li> <li>Munich Gophers - Munich, Germany</li> <li>Golang Paris - Paris, France.</li> <li>Golang Rennes - Rennes, France.</li> <li>Golang Lyon - Lyon, France.</li> <li>Golang Lille - Lille, France.</li> <li>Golang Marseille - Marseille, France.</li> <li>golang-pl - Poland.</li> <li>Gophers Katowice - Katowice, Poland.</li> <li>Golang Warsaw - Warsaw, Poland.</li> <li>G.L.U.G. Wroclaw - Wroclaw, Poland</li> <li>Golang User Group Tr\u00f3jmiasto - Gda\u0144sk/Gdynia/Sopot, Poland</li> <li>Go-Stockholm - Stockholm, Sweden.</li> <li>Go-Uppsala - Uppsala, Sweden.</li> <li>Go-Malm\u00f6 - Malm\u00f6, Sweden.</li> <li>golang-greece - Greece</li> <li>GolangIT - Italy.</li> <li>Go-Turkey - Turkey.</li> <li>Go Graz - Graz, Austria</li> <li>Meetup Belgium - Belgium</li> <li>Meetup Lausanne - Lausanne, Switzerland</li> <li>Meetup Zurich - Zurich, Switzerland</li> <li>Meetup Frankfurt - Frankfurt am Main, Germany</li> <li>Go-ningen - Groningen, The Netherlands</li> <li>Golang Ljubljana - Ljubljana, Slovenia</li> <li>Go Euregio - Maastricht, Netherlands; Li\u00e8ge/Hasselt, Belgium; Aachen, Germany</li> <li>Ukrainian Golang User Group - Kyiv, Ukraine</li> <li>L'viv Golang Group - L'viv, Ukraine</li> <li>Go SXB, Go! - Strasbourg, France</li> <li>Hannover Gophers Meetup - Hannover, Germany</li> <li>Golang N\u00fcrnberg - N\u00fcrnberg, Germany</li> <li>Helsinki Gophers - Helsinki, Finland</li> <li>Golang Cologne - Cologne/Bonn, Germany</li> <li>Golang Vilnius - Vilnius, Lithuania</li> <li>Meetup Surrey - Surrey, UK</li> <li>Golang Zagreb - Zagreb, Croatia</li> <li>Meetup Edinburgh - Edinburgh, UK</li> <li>M\u00fcnster Gophers - M\u00fcnster, Germany</li> <li>Vienna.go - Vienna Go User Group - Vienna, Austria</li> <li>Golang Bulgaria - Sofia, Bulgaria \ud83c\udde7\ud83c\uddec </li> <li>Go Oslo User Group - Oslo, Norway</li> <li>Gophers Linz - Linz, Austria</li> <li>Golang Rotterdam - Rotterdam, Netherlands</li> <li>Leipzig Gophers - Leipzig, Germany</li> <li>Golang Estonia - Estonia</li> </ul>"},{"location":"GoUserGroups/#north-america","title":"North America","text":""},{"location":"GoUserGroups/#canada","title":"Canada","text":"<ul> <li>Edmonton Go Meetup - Edmonton AB, Canada.</li> <li>vangophers - Vancouver BC, Canada.</li> <li>Go Vancouver - Vancouver BC, Canada.</li> <li>GolangVan meetup - Vancouver BC, Canada.</li> <li>GolangVan - Vancouver BC, Canada.</li> <li>GoTO - Toronto ON, Canada.</li> <li>Ottawa Go - Ottawa ON, Canada.</li> <li>KW Go Developers - Waterloo, ON, Canada.</li> <li>Golang Montr\u00e9al - Montr\u00e9al, QC</li> <li>Golang Winnipeg - Winnipeg MB, Canada</li> </ul>"},{"location":"GoUserGroups/#dominican-republic","title":"Dominican Republic","text":"<ul> <li>Golang Dominicana - Rep\u00fablica Dominicana.</li> </ul>"},{"location":"GoUserGroups/#latin-america","title":"Latin America","text":"<ul> <li>Golang-ES - Facebook Espa\u00f1ol-Latino.</li> <li>Gophers LATAM - Discord Espa\u00f1ol-Latino.</li> </ul>"},{"location":"GoUserGroups/#mexico","title":"Mexico","text":"<ul> <li>Golang - Go MX - All Mexico</li> <li>GophersMX - Ciudad de M\u00e9xico, M\u00e9xico</li> <li>Golang Monterrey - Monterrey, Mexico</li> <li>Golang Guadalajara - Guadalajara, M\u00e9xico</li> </ul>"},{"location":"GoUserGroups/#united-states","title":"United States","text":"<ul> <li>Los-Angeles-Gophers - Los Angeles CA, USA.</li> <li>Westside GoLang Meetup - Los Angeles CA, USA.</li> <li>OC Gophers - Orange County CA, USA.</li> <li>SDGophers \u2014 San Diego CA, USA</li> <li>GoSF - San Francisco CA, USA.</li> <li>GoSV - San Mateo CA, USA.</li> <li>Boulder Gophers - Boulder CO, USA.</li> <li>Denver Go Language User Group - Denver CO, USA.</li> <li>DTC Go Meetup - Denver Tech Center CO, USA.</li> <li>Go-Miami - Miami FL, USA.</li> <li>Orlando Go Users - Orlando FL, USA</li> <li>Go-Users-Group-Atlanta - Atlanta GA, USA.</li> <li>chicagolang - Chicago IL, USA.</li> <li>Chicago Ultimate Golang - Chicago IL, USA.</li> <li>Boston Golang - Boston MA, USA.</li> <li>Framingham Go - Framingham MA, USA.</li> <li>GoMN - Minneapolis MN, USA.</li> <li>Buffalo GoLang Meetup Group - Buffalo NY, USA.</li> <li>New York Go Language Meetup - New York NY, USA.</li> <li>New Jersey Go Language Meetup - New Jersey NY, USA.</li> <li>Bowery Golang Meetup - New York NY, USA.</li> <li>GoLangPhilly - Philadelphia PA, USA.</li> <li>GoLangPhoenix - Phoenix AZ, USA.</li> <li>GoLangCleveland - Cleveland OH, USA.</li> <li>Cincinnati Golang Meetup - Cincinnati, OH, USA.</li> <li>EUG-Go - Eugene, OR, USA.</li> <li>PDX-Go - Portland, OR, USA.</li> <li>GoLancaster - Lancaster PA, USA.</li> <li>ATX-Golang - Austin TX, USA.</li> <li>GoDFW - Dallas TX, USA.</li> <li>Golang Houston - Houston TX, USA.</li> <li>Utah Golang (#UTGO) - Salt Lake City UT, USA.</li> <li>Golang-DC - Arlington VA, USA.</li> <li>Seattle Go Programmers - Seattle WA, USA.</li> <li>Go Charlotte Meetup - Charlotte NC, USA</li> <li>Triangle Golang - Raleigh NC, USA.</li> <li>Las Vegas Go Meetup - Las Vegas NV, USA.</li> <li>Ann Arbor Gophers - Ann Arbor MI, USA</li> <li>Baltimore Metro Area Golang - Baltimore MD, USA</li> <li>Nashville Gophers - Nashville TN, USA</li> <li>Omaha Gophers - Omaha NE, USA</li> <li>St Louis Go Meetup - St Louis, MO, USA</li> </ul>"},{"location":"GoUserGroups/#oceania","title":"Oceania","text":"<ul> <li>Canberra Gophers - Canberra, Australia.</li> <li>golang-sydney - Sydney, Australia.</li> <li>golang-nz - New Zealand.</li> <li>Golang Wellington - Wellington, New Zealand.</li> <li>Melbourne-Go-Nuts - Melbourne, Australia.</li> <li>Brisbane Gophers - Brisbane, Australia.</li> <li>Honolulu Go Users - Oahu, Hawaii</li> </ul>"},{"location":"GoUserGroups/#south-america","title":"South America","text":"<ul> <li>Golang Brasil - Brazil.</li> <li>Golang Rio de Janeiro - Rio de Janeiro, Brazil.</li> <li>Golang Recife - Recife, Pernambuco, Brazil.</li> <li>Golang Argentina - Argentina.</li> <li>Golang Medell\u00edn - Colombia.</li> <li>Golang Chile - Chile.</li> <li>Golang Panam\u00e1 - Panam\u00e1.</li> <li>Golang Lima - Per\u00fa</li> <li>Golang Venezuela - Venezuela</li> </ul>"},{"location":"GoUsers/","title":"GoUsers","text":"<p>To add your company to the list, please file a CL updating the wiki repo or file a PR updating the file in Github.</p>"},{"location":"GoUsers/#companies-currently-using-go-throughout-the-world","title":"Companies currently using Go throughout the world","text":""},{"location":"GoUsers/#countries","title":"Countries","text":"<ul> <li>Africa</li> <li>Angola</li> <li>Argentina</li> <li>Armenia</li> <li>Australia</li> <li>Austria</li> <li>Bangladesh</li> <li>Belarus</li> <li>Belgium</li> <li>Brazil</li> <li>Bulgaria</li> <li>Canada</li> <li>Chile</li> <li>China</li> <li>Croatia</li> <li>Colombia</li> <li>Denmark</li> <li>Estonia</li> <li>Finland</li> <li>France</li> <li>Germany</li> <li>Greece</li> <li>Hong Kong</li> <li>Hungary</li> <li>India</li> <li>Indonesia</li> <li>Iraq</li> <li>Iran</li> <li>Ireland</li> <li>Israel</li> <li>Italy</li> <li>Japan</li> <li>Kazakhstan</li> <li>Korea (South)</li> <li>Lithuania</li> <li>Malaysia</li> <li>Mexico</li> <li>Middle-East</li> <li>Moldova</li> <li>Morocco</li> <li>Nepal</li> <li>Netherlands</li> <li>New Zealand</li> <li>Nigeria</li> <li>Norway</li> <li>Oman</li> <li>Pakistan</li> <li>Philippines</li> <li>Poland</li> <li>Portugal</li> <li>Romania</li> <li>Russia</li> <li>Saudi Arabia</li> <li>Serbia</li> <li>Singapore</li> <li>Slovenia</li> <li>South Africa</li> <li>Southeast Asia</li> <li>Spain</li> <li>Sri Lanka</li> <li>Sweden</li> <li>Switzerland</li> <li>Taiwan</li> <li>Thailand</li> <li>Turkey</li> <li>Ukraine</li> <li>United Arab Emirates</li> <li>United Kingdom</li> <li>United States</li> <li>Vietnam</li> </ul>"},{"location":"GoUsers/#africa","title":"Africa","text":"<ul> <li>Afariat - Classifieds platform in Tunisia.</li> </ul>"},{"location":"GoUsers/#angola","title":"Angola","text":"<ul> <li>Nellcorp - Technology consulting agency.</li> </ul>"},{"location":"GoUsers/#argentina","title":"Argentina","text":"<ul> <li>Mercadolibre - Biggest E-Commerce platform in Latam.</li> <li>Wilab - Industrial IoT platform.</li> <li>Omnia - Administrative systems for health organizations</li> </ul>"},{"location":"GoUsers/#armenia","title":"Armenia","text":"<ul> <li>PlayEngine - Automated and data-driven solution for sports betting.</li> </ul>"},{"location":"GoUsers/#australia","title":"Australia","text":"<ul> <li>Assembly Payments - github - Flexible payment solutions provider</li> <li>Atlassian</li> <li>AusOcean - Helping our oceans through the use of technology.</li> <li>BCZ - Free website creation platform.</li> <li>Buildkite - github</li> <li>Crewmojo - People management platform.</li> <li>Dgraph Labs - github</li> <li>Fleet Space Technologies</li> <li>Fly365 - github</li> <li>mx51 - github</li> <li>Massive Interactive</li> <li>MNF Group</li> <li>OneConfig - my.oneconfig.com</li> <li>GO1</li> <li>SafetyCulture</li> <li>Sajari - github blog</li> <li>SocietyOne</li> <li>VERSENT</li> <li>Nine Publishing (formerly known as Fairfax Media)</li> </ul>"},{"location":"GoUsers/#austria","title":"Austria","text":"<ul> <li>Digital City Solutions</li> <li>Symflower, github</li> </ul>"},{"location":"GoUsers/#bangladesh","title":"Bangladesh","text":"<ul> <li>AppsCode Ltd. (BD subsidiary of AppsCode Inc.) - facebook, github, twitter</li> <li>Furqan Software</li> <li>Telenor Health(A health service company) built USSD server with go</li> <li>Pathao(A ride sharing company)</li> <li>GAAN</li> <li>Restra</li> <li>ELO (Embedded Logic Operations)</li> </ul>"},{"location":"GoUsers/#belarus","title":"Belarus","text":"<ul> <li>Cactussoft - github</li> <li>BykovSoft - github</li> <li>SmartPro</li> <li>Spiral Scout - github</li> <li>Intelligent Speaker - proprietary fremium text-to-speech browser extension</li> <li>Visutech Plating</li> </ul>"},{"location":"GoUsers/#belgium","title":"Belgium","text":"<ul> <li>Continu-IT NV</li> <li>IN4IT</li> <li>Be-Mobile</li> <li>Elimity</li> <li>Factry - github</li> <li>nexuzhealth</li> <li>OTA Insight</li> <li>Pronovix - github</li> <li>Showpad</li> <li>UZ Leuven</li> <li>KU Leuven</li> <li>Twixl media</li> <li>dploy.ai (MLOps platform | Belgium &amp; remote )</li> </ul>"},{"location":"GoUsers/#brazil","title":"Brazil","text":"<ul> <li>99 Taxis - github</li> <li>Acesso - github</li> <li>AStar  - github</li> <li>Astrolink - github</li> <li>B2W - github</li> <li>Beauty Date</li> <li>Bemobi - linkedin</li> <li>Benef\u00edcio F\u00e1cil - forums</li> <li>Bexs - an forex Bank</li> <li>BoaCompra</li> <li>Catho - github</li> <li>CloudWalk - github - an open payment platform</li> <li>Coderockr</li> <li>Conductor</li> <li>Conta Azul - github</li> <li>Cora - github</li> <li>DB1 Global Software - github</li> <li>Dafiti - github</li> <li>Delivery Much - github</li> <li>Daki</li> <li>DAXPER - github</li> <li>Dinamize - github</li> <li>Dito - github</li> <li>Dropadev</li> <li>Easy Carros</li> <li>Emprego Ligado</li> <li>Estrat\u00e9gia Concursos - github</li> <li>Eventials - github</li> <li>Everymind</li> <li>Finan\u00e7as 360</li> <li>Fix Pay- github</li> <li>Fliper</li> <li>Fluid</li> <li>FourTwo - github</li> <li>Fundamentei</li> <li>GissOnline</li> <li>Globo.com - github article</li> <li>Grupo Bandeirantes</li> <li>Grupo SBF - github</li> <li>Hash - github</li> <li>Hurb - github</li> <li>Hubcash - github</li> <li>iFood - github</li> <li>In Loco - github</li> <li>Involves - github</li> <li>IQ Escolhas Inteligentes - github</li> <li>isaac - github</li> <li>Jexia - github</li> <li>Jusbrasil - github</li> <li>Koli - github</li> <li>Levpay - github</li> <li>Loggi - github</li> <li>M4U - github</li> <li>MadeiraMadeira - github</li> <li>Magazine Luiza - github</li> <li>Mendelics - github</li> <li>Mercado Livre - github</li> <li>Meu Astro</li> <li>Moip Pagamentos</li> <li>Mosaico - github - Biggest content and sales generation platform in Brazil. Zoom, Buscap\u00e9 and Bondfaro.</li> <li>MundiPagg - github</li> <li>Neoway Business Solutions - github</li> <li>Newcore</li> <li>Nic.br - github</li> <li>Nuveo - github</li> <li>Olist - github</li> <li>OLX Brasil - github</li> <li>Open Vista Global</li> <li>OPLEN</li> <li>Pagar.me</li> <li>Pagro</li> <li>PagSeguro</li> <li>PicPay</li> <li>Pismo</li> <li>Pol\u00edcia Militar do Estado de Minas Gerais</li> <li>PowerSystem-TI</li> <li>Rednaxel - github</li> <li>Resultados Digitais</li> <li>Reviewr - github</li> <li>Riocard Tecnologia da Informa\u00e7\u00e3o</li> <li>Sensedia</li> <li>Sage Brasil</li> <li>ServiceNet</li> <li>SiBBr.gov.br - github</li> <li>SumUp</li> <li>Stone Pagamentos - github</li> <li>Studio Sol - github</li> <li>Synchro</li> <li>TOTVS</li> <li>TraiveFinance</li> <li>TC Investimentos - github</li> <li>Ulife - github</li> <li>Unico</li> <li>Universo Online - github</li> <li>VivaReal - github</li> <li>Walmart</li> <li>Zup Innovation - an open source tool that allows you to create, store and share automations</li> </ul>"},{"location":"GoUsers/#bulgaria","title":"Bulgaria","text":"<ul> <li>clouWay - github</li> <li>SumUp</li> <li>Gtmhub</li> </ul>"},{"location":"GoUsers/#canada","title":"Canada","text":"<ul> <li>1Password</li> <li>ActiveState - blog - github</li> <li>Apex</li> <li>[NxTide] (https://nxtide.com/)</li> <li>Blue Flag Consulting</li> <li>Bold Commerce</li> <li>Buf</li> <li>ChainSafe Systems - github</li> <li>district m - jobs</li> <li>Ecobee</li> <li>Greenfield Labs / Zenreach - jobs</li> <li>Go2Mobi - HN</li> <li>Hootsuite</li> <li>Horizon</li> <li>Index Exchange - jobs</li> <li>Insights.gg - jobs</li> <li>Kira Systems \u2014 jobs</li> <li>Klei Entertainment - jobs</li> <li>KOHO - jobs</li> <li>League - jobs</li> <li>Lendesk - jobs</li> <li>Lightspeed - jobs</li> <li>LoginRadius - Blog - GitHub</li> <li>Manifold</li> <li>NV Digital</li> <li>Obkio</li> <li>Pressly - github</li> <li>Sendwithus</li> <li>SweetIQ - jobs</li> <li>ThinkSquare</li> <li>Tidal Migrations</li> <li>Blendibox</li> <li>Tulip - jobs</li> <li>Wattpad</li> <li>500px - blog - github</li> <li>Qlik - jobs - github</li> </ul>"},{"location":"GoUsers/#chile","title":"Chile","text":"<ul> <li>Prey - blog - github</li> <li>Webdox</li> </ul>"},{"location":"GoUsers/#china","title":"China","text":"<ul> <li>Baidu</li> <li>Alibaba</li> <li>Xiaomi</li> <li>Tencent</li> <li>163yun - github - Netease Public Cloud</li> <li>BaishanCloud</li> <li>ByteDance</li> <li>Ciprun</li> <li>CS2C - github</li> <li>deepin - github - a linux distribution aiming to provide an elegant desktop</li> <li>EasyAR</li> <li>Feiyu</li> <li>FunPlus - We Create Leading Innovative and Fun Experiences Worldwide</li> <li>FutureBots</li> <li>iDCOS<ul> <li>CloudBoot</li> </ul> </li> <li>Inke - the most popular broadcast platform</li> <li>Kidswant</li> <li>KLOOK</li> <li>MegaEase</li> <li>Megvii</li> <li>Mili</li> <li>MobiExchanger - Mobile Internet advertising company</li> <li>Momenta</li> <li>MZD - github</li> <li>OPPO</li> <li>Qiniu - github - Qiniu builds and operates one of the largest public cloud services in China, with millions of code written in Go since 2011.</li> <li>Rainbond - github - Rainbond is an application centric PaaS</li> <li>SenseTime - a global leading A.I. company</li> <li>Shihuo - github</li> <li>Teambition - github</li> <li>TiDB - tweet: Golang in TiDB - github - TiDB is a distributed HTAP database compatible with the MySQL protocol</li> <li>Udesk - github</li> <li>XiaoChuan</li> <li>Xiaoying</li> <li>Xunlei</li> <li>YeePay</li> <li>Yeeuu</li> <li>Youmi - a global leading comprehensive mobile internet enterprise</li> <li>cshome</li> <li>DiDi</li> <li>meicai - Catering supply chain service provider</li> <li>360</li> <li>xueqiu</li> <li>Habby</li> </ul>"},{"location":"GoUsers/#croatia","title":"Croatia","text":"<ul> <li>Crossvallia</li> <li>CROZ - github</li> <li>GoodCode - github</li> <li>Happening</li> <li>Kraken</li> <li>Leapbit</li> <li>minus5 - github</li> <li>Mosaic Croatia d.o.o.</li> <li>Nivas - github</li> <li>Rentlio - github</li> <li>Sartura - github</li> <li>SedamIT</li> <li>Syntio - github</li> <li>Pointer</li> </ul>"},{"location":"GoUsers/#colombia","title":"Colombia","text":"<ul> <li>Wawandco - github</li> </ul>"},{"location":"GoUsers/#denmark","title":"Denmark","text":"<ul> <li>Onlime</li> <li>SYBO Games</li> <li>Vivino</li> <li>ZeroNorth</li> </ul>"},{"location":"GoUsers/#estonia","title":"Estonia","text":"<ul> <li>Wallester - github</li> </ul>"},{"location":"GoUsers/#finland","title":"Finland","text":"<ul> <li>Alma Media - Media/Publishing company. Twitter</li> </ul>"},{"location":"GoUsers/#france","title":"France","text":"<ul> <li>Blog lecoinoccasion</li> <li>Accenta</li> <li>Algolia</li> <li>Batch.com</li> <li>Containo.us</li> <li>Crisp</li> <li>cr\u00e8me de la cr\u00e8me</li> <li>Cycloid - github - blog</li> <li>Digikong</li> <li>Equisense</li> <li>Eleven Labs</li> <li>Fabriks</li> <li>HAProxy Technologies - github</li> <li>Heetch - github</li> <li>IoThings</li> <li>IRI France</li> <li>Leboncoin - github - blog</li> <li>LibMed</li> <li>Molotov TV</li> <li>Objenious</li> <li>OneStock</li> <li>Orange</li> <li>ProcessOne</li> <li>PSA - github</li> <li>Rive</li> <li>Scaleway - github - blog</li> <li>Sendinblue</li> <li>Sfeir</li> <li>Synthesio</li> <li>Teads.tv</li> <li>TF1</li> <li>Ulule - github</li> <li>Veepee - github - blog</li> <li>Zenly</li> <li>teckinside</li> </ul>"},{"location":"GoUsers/#germany","title":"Germany","text":"<ul> <li>Applied Go - blog</li> <li>B\u00fcrkert</li> <li>Cloudogu - github</li> <li>Doozer - github</li> <li>Centrifuge - github</li> <li>Delivery Hero</li> <li>EGYM - Blog</li> <li>ESG Book</li> <li>ESONO AG</li> <li>FastBill</li> <li>Fraugster</li> <li>Friendsurance</li> <li>fromAtoB - blog</li> <li>HaCon Ingenieurgesellschaft mbH</li> <li>HelloFresh - github</li> <li>Herdius - github</li> <li>HolidayCheck - github - [Blog]</li> <li>IDAGIO</li> <li>Industrial-DevOps - gitlab</li> <li>JustWatch - HN</li> <li>KI Labs</li> <li>loodse - github</li> <li>limango</li> <li>Meplato</li> <li>Naga Virtual</li> <li>Native Instruments - github</li> <li>networkteam GmbH - github</li> <li>OptioPay</li> <li>ownCloud - github</li> <li>Posteo - Green, secure, ad-free email service</li> <li>PubNative - github</li> <li>simplesurance</li> <li>Sixt</li> <li>Spreadshirt</li> <li>solarisBank</li> <li>SoundCloud - blog</li> <li>SumUp</li> <li>Streetspotr - blog - tweet</li> <li>Tourlane</li> <li>trivago N.V. - blog - github</li> <li>Weaveworks</li> <li>Zalando SE - blog</li> <li>Onefootball</li> <li>Sudokoin</li> <li>H\u00c4VG Rechenzentrum GmbH - blog - github</li> </ul>"},{"location":"GoUsers/#greece","title":"Greece","text":"<ul> <li>Beat</li> <li>Skroutz</li> <li>BestPrice</li> <li>Inaccess</li> </ul>"},{"location":"GoUsers/#hong-kong","title":"Hong Kong","text":"<ul> <li>PassKit - github</li> <li>Lalamove</li> <li>Sandbox VR</li> </ul>"},{"location":"GoUsers/#hungary","title":"Hungary","text":"<ul> <li>Pronovix - github</li> </ul>"},{"location":"GoUsers/#india","title":"India","text":"<ul> <li>AirCTO</li> <li>AmberStudent</li> <li>Betacraft</li> <li>BookMyShow</li> <li>Blogger Cage</li> <li>BLITZPOKER</li> <li>Carmatec</li> <li>CRED</li> <li>C42 Engineering</li> <li>Cralina</li> <li>CodeIgnition - twitter</li> <li>Company 0</li> <li>Cloudsdeal</li> <li>Continuum Managed Solutions</li> <li>Crowdfire</li> <li>Tasker Project Management Tool</li> <li>CoderCV.com Freelancer Marketplace</li> <li>DeHaat - Full Stack Agri Tech Solutions</li> <li>DeepSource - Automated code review tool for developers</li> <li>Dunzo</li> <li>EasyAcco</li> <li>Euphoros Limited</li> <li>Exotel - website</li> <li>FamPay - India\u2019s first neobank for teenagers and their families.</li> <li>Fastah (Blackbuck Computing)</li> <li>FStack (Golang Consulting)</li> <li>Fynd</li> <li>GeekTrust</li> <li>GetMega</li> <li>Gloop</li> <li>Gojek</li> <li>Gradeup</li> <li>Guavus</li> <li>Halodoc</li> <li>Hasura</li> <li>Hotstar</li> <li>INDmoney</li> <li>Instamojo</li> <li>Improwised Technologies</li> <li>Ithaka</li> <li>Josh Software</li> <li>JusTickets - built with Go</li> <li>Kayako</li> <li>LiteBreeze</li> <li>MakeMyTrip</li> <li>South Tourism</li> <li>Mailazy</li> <li>Mindbowser</li> <li>Mindship</li> <li>Myntra</li> <li>Nazara Games</li> <li>Noticeboard</li> <li>teckinside</li> <li>Onet</li> <li>OpenEBS - Containerized,opensource storage for containers</li> <li>Pincode.app - Local Social Network</li> <li>Propebbles</li> <li>Provlem.com</li> <li>PubMatic - AdTech company</li> <li>Qube Cinema</li> <li>Qwentic - A Golang specialized software development company</li> <li>Qwinix</li> <li>RevvSales</li> <li>Rapyuta Robotics</li> <li>Razorpay</li> <li>RenoApp</li> <li>Ruhi handblock Printers</li> <li>Sahaj Software Solutions</li> <li>Saltside Technologies AB</li> <li>Saven Technologies Ltd</li> <li>Sendinblue</li> <li>SellerApp</li> <li>Sezzle</li> <li>Siminars</li> <li>Singulerp</li> <li>Skit.ai</li> <li>SocialCops - engineering page</li> <li>SoStronk</li> <li>Spoors</li> <li>Squadcast - A Site Reliability Engineering (SRE) Product company</li> <li>Swiggy</li> <li>Synerzip</li> <li>Tarkalabs</li> <li>Techequity Technologies</li> <li>ThoughtBox Online Services Pvt Ltd - A FinTech Solution Provider</li> <li>ThoughtWorks</li> <li>Unbxd</li> <li>University Living</li> <li>UserCV.com Freelancer Marketplace</li> <li>Verloop.io - An AI chat bot company</li> <li>Vernacular.ai</li> <li>WazirX</li> <li>WebAuditor</li> <li>Zomato</li> <li>Zerodha</li> <li>ZopSmart</li> </ul>"},{"location":"GoUsers/#indonesia","title":"Indonesia","text":"<ul> <li>123 Berita</li> <li>Auditsi Executive Recruitment Services</li> <li>Amartha</li> <li>Alphamor</li> <li>Bareksa</li> <li>Bhinneka</li> <li>BlockchainZoo</li> <li>Brankas</li> <li>Brodo</li> <li>Bukalapak</li> <li>CICIL.CO.ID</li> <li>Codemi Learning Management System</li> <li>DigiAset</li> <li>EACIIT</li> <li>Emtrade</li> <li>Gilkor</li> <li>GoApotik</li> <li>GOJEK</li> <li>Graboards</li> <li>Guteninc</li> <li>Halodoc</li> <li>HappyFresh Indonesia</li> <li>Ice House Corp</li> <li>Jejak Techno</li> <li>Kelir.tv</li> <li>Koinworks - P2P Lending Platform.</li> <li>Korina</li> <li>Kudo</li> <li>kumparan</li> <li>Kurio</li> <li>Lazada</li> <li>Kucari.com</li> <li>LinkAja</li> <li>LionJobs</li> <li>Matahari Mall</li> <li>Magicsoft Asia Systems</li> <li>Medcampus</li> <li>Michael Page Indonesia</li> <li>Midtrans Payment Gateway</li> <li>meTube.id</li> <li>Minyak Telon</li> <li>Nodeflux</li> <li>PDAM Kab. Batang</li> <li>Pinhome</li> <li>Pinjam Indonesia - FinTech</li> <li>Pintu Magang - Jobs for Student</li> <li>President University</li> <li>Qasico Teknologi Indonesia</li> <li>Qasir.id</li> <li>Qiscus</li> <li>QUPAS.ID</li> <li>Ralali - B2B Marketplace Platform</li> <li>Raydar</li> <li>RebelWorks</li> <li>RedtreeMobile</li> <li>Reservasi</li> <li>Rimbun Job Agency</li> <li>RSU Anwar Medika</li> <li>Ruangguru</li> <li>Sorabel by Sale Stock</li> <li>SAP Indonesia</li> <li>Tokopedia</li> <li>Tech in Asia Indonesia</li> <li>Valutac</li> <li>Tugujatim</li> <li>Tugumalang</li> <li>Deepta</li> <li>Visinesia Global Trade</li> <li>Ourintake</li> <li>Mangko</li> </ul>"},{"location":"GoUsers/#iraq","title":"Iraq","text":"<ul> <li>eSITE</li> </ul>"},{"location":"GoUsers/#iran","title":"Iran","text":"<ul> <li>Iran Legal \u2013 Legal services in Persian GitHub</li> <li>Kamva \u2013 Kamva eCommerce Platform github</li> <li>Idpay - bank gateways and a stable billing service in order to connect payments.</li> <li>IranBooking - Online booking system for hotels in Iran</li> <li>QuizOfKings - Online trivia game among the most popular mobile game in iran</li> <li>open market - best online home store.</li> <li>ManaGroup - github Iranian Payment And Traveling Solution \ud83d\udcb8\u2705\ud83d\ude80</li> <li>Emji - Emji is a new refined social networking platform aimed at simplicity and connectivity</li> <li>Clickyab - Clickyab is different online advertising &amp; digital media agency</li> <li>Sazito - Sazito is multi-functional tools to build and manage your online store.</li> <li>Aparat \u2013 Most popular video sharing platform in Iran</li> <li>Asan Pardakht \u2013 Pay Smarter. Pay Simpler. Pay Anywhere!</li> <li>SabzCity - github</li> <li>Bahamta - Fintech company.</li> <li>flytoday -  best online travel agency in Iran</li> <li>Taskmiran -  best Xiaomi warranty in Iran</li> <li>Tahvienovin -  number one chiller producer in Iran</li> <li>Bilitkade -  Travel and Ticketing Platform</li> <li>Telmaperfume - Promotional Gifts.</li> <li>Giftsbox - Promotional Mothers Day Gifts.</li> <li>Snapp - Snapp is a web and mobile ride-hailing platform in Iran</li> <li>Parsaspace - Parsaspace is an iranian storage as a service</li> <li>Shafa.clinic -  best medical laser service in Iran</li> <li>Cafe Bazaar -  Iranian Android marketplace</li> <li>Alibaba Travels Co. - (GitHub) - Iranian online travel agency</li> </ul>"},{"location":"GoUsers/#ireland","title":"Ireland","text":"<ul> <li>EXADS</li> <li>Intercom</li> <li>Teamwork - blog</li> <li>Nitro - We make document productivity easy, powerful, affordable, and available to all.</li> </ul>"},{"location":"GoUsers/#israel","title":"Israel","text":"<ul> <li>353solutions</li> <li>AppsFlyer</li> <li>Aqua Security</li> <li>BigPanda</li> <li>Bottomline Technologies</li> <li>Bringg</li> <li>Check Point</li> <li>Cloud Invent</li> <li>Cloudinary</li> <li>CTERA</li> <li>Cyren</li> <li>Dragontail Systems</li> <li>Domino's Pizza</li> <li>Elastifile Ltd</li> <li>Ensilo</li> <li>EyeSight</li> <li>Fiverr</li> <li>Firedome</li> <li>Gett</li> <li>HERE Mobility</li> <li>Intuit</li> <li>ironSource</li> <li>Jewish Interactive</li> <li>JFrog - github</li> <li>Firedome - github</li> <li>Iguazio - Data science and analytics PaaS<ul> <li>v3io - Iguazio open source</li> <li>nuclio - Nuclio Serverless project</li> </ul> </li> <li>JobJob</li> <li>LivePerson</li> <li>Make My Day</li> <li>Medtronic</li> <li>Mathematic.ai</li> <li>Nexar</li> <li>Nexite</li> <li>Panoply</li> <li>playtech</li> <li>Peer5</li> <li>PlanGrid</li> <li>Proofpoint</li> <li>Protected Media</li> <li>PUB+</li> <li>PushApps</li> <li>Rimoto</li> <li>Rounds</li> <li>SentinelOne</li> <li>sigmadots</li> <li>Soluto</li> <li>SimilarWeb</li> <li>spot.im</li> <li>Stratoscale - github</li> <li>StreamRail</li> <li>TechedUp - (Blog)</li> <li>Tikal</li> <li>Tufin</li> <li>Twistlock</li> <li>uponit</li> <li>Venn</li> <li>Yodas</li> <li>Yotpo</li> <li>ZipRecruiter</li> <li>MinuteMedia</li> </ul>"},{"location":"GoUsers/#italy","title":"Italy","text":"<ul> <li>Oxequa - (Realize, Grace)</li> <li>Qurami - github</li> <li>Sorint.lab - github</li> <li>Tren\u00ect! - (FB post) \u2013 Most popular mobile app for Italian trains schedules</li> <li>Develer</li> <li>Qlik - jobs</li> <li>Wellnet</li> <li>Pixartprinting</li> <li>Overzoom</li> </ul>"},{"location":"GoUsers/#japan","title":"Japan","text":"<ul> <li>3-shake, Inc.</li> <li>ACALL, Inc.</li> <li>and factory, Inc.</li> <li>ANDPAD Inc.</li> <li>Appify Technologies, Inc.<ul> <li>gqlgo - GraphQL Go organization</li> </ul> </li> <li>aptpod, Inc.</li> <li>AtCoder, Inc.</li> <li>Atrae, Inc.</li> <li>Axsh, Co.<ul> <li>LiquidMetal is a web service and a hardware appliance that together bring continuous automated testing to network system operation.</li> </ul> </li> <li>Azoop Co., Ltd.</li> <li>Baseconnect, Inc.</li> <li>BASE BANK, Inc.</li> <li>Belong Inc.</li> <li>Bengo4.com,Inc.<ul> <li>CloudSign</li> </ul> </li> <li>Bitkey Inc.</li> <li>Canary Inc. - github, twitter, engineering blog</li> <li>CastingONE Inc.</li> <li>Check Inn, Inc.</li> <li>Chompy, Inc.</li> <li>Cluster, Inc.</li> <li>Cloud Ace, Inc.</li> <li>Clover Lab.,inc.</li> <li>Connehito Inc.</li> <li>Cookpad Inc.</li> <li>CyberAgent, Inc.<ul> <li>PipeCD - Continuous Delivery for Declarative Kubernetes, Serverless and Infrastructure Applications</li> <li>ecs-formation - ecs-formation is a tool for defining several Docker continers and clusters on Amazon EC2 Container Service(ECS)</li> <li>plasma - plasma is event push middleware by using gRPC stream</li> </ul> </li> <li>Cybozu - github</li> <li>DeNA Co.,Ltd.</li> <li>D.A.Consortium Inc.</li> <li>DIP Corporation.</li> <li>DMM.com Group</li> <li>Dr.'s Prime, Inc.</li> <li>D2C Inc.</li> <li>Eichiii, Inc.</li> <li>enish,Inc.</li> <li>eureka</li> <li>feedtailor</li> <li>Fenrir</li> <li>Finatext Ltd.</li> <li>Fixpoint, Inc.<ul> <li>Kompira cloud - Automation service for system operator</li> </ul> </li> <li>Flatt - Live Commerce Application</li> <li>FreakOut, Inc.</li> <li>freee K.K.</li> <li>Fukurou Labo, inc.</li> <li>Fusic Co., Ltd.</li> <li>Future Architect<ul> <li>Vuls - Vulnerability scanner for Linux/FreeBSD, agentless, written in Go</li> </ul> </li> <li>Fuller, Inc.</li> <li>Gaudiy, Inc.</li> <li>GameWith, Inc.</li> <li>Gemcook, Inc.</li> <li>Giftee, Inc.</li> <li>GMO Pepabo, Inc.</li> <li>GOODWITH LLC.,<ul> <li>Dockle - Container Image Linter for Security, Helping build the Best-Practice Docker Image, Easy to start</li> </ul> </li> <li>Graffer, Inc.</li> <li>Groovenauts, Inc.</li> <li>Gunosy Inc.</li> <li>Gurunavi, Inc.</li> <li>Hatena<ul> <li>Mackerel - Monitoring as a Service (github)</li> </ul> </li> <li>HEARTBEATS<ul> <li>happo-agent - Yet another Nagios nrpe</li> </ul> </li> <li>HENNGE K.K.</li> <li>HiCustomer - a Customer Success management platform</li> <li>Howtelevision, Inc.</li> <li>HRBrain, Inc.</li> <li>Internet Initiative Japan Inc.</li> <li>IRIAM Inc.</li> <li>istyle Inc.</li> <li>JapanTaxi Co.,Ltd.</li> <li>JX Press Corporation</li> <li>Kanmu, Inc.</li> <li>KAYAC Inc. - github</li> <li>KLab Inc.</li> <li>Knowledge Work Inc.</li> <li>KRPEO</li> <li>Kyash Inc</li> <li>LayerX, Inc</li> <li>LEAN BODY Inc.</li> <li>Link-U Inc.</li> <li>Linkbal Inc.</li> <li>LINE</li> <li>Liquid Inc.</li> <li>Livesense Inc. - github</li> <li>LOB, Inc. - github</li> <li>M3</li> <li>Makuake, Inc.</li> <li>mediba</li> <li>Mercari, Inc.<ul> <li>gaurun - Gaurun is the general push notification server in Go.</li> <li>widebullet - Widebullet is an API gateway with JSON-RPC.</li> <li>go-httpdoc - Golang package for generating API documentation from httptest.</li> <li>Datastore - (AE|Cloud) Datastore Wrapper.</li> <li>yo - yo is a command-line tool to generate Go code for Google Cloud Spanner.</li> <li>go-dnscache - Go package for caching DNS lookup results in memory.</li> <li>grpc-http-proxy - A reverse proxy server which translate JSON HTTP requests to gRPC calls based on protoreflect.</li> <li>go-httpstats - Go package for reporting HTTP stats.</li> <li>certificate-expiry-monitor-controller - Certificate Expiry Monitor Controller monitors the expiration of TLS certificates used in Ingress.</li> <li>tfnotify - A CLI command to parse Terraform execution result and notify it to GitHub.</li> <li>imageflux-cli - Imageflux Client written in Go.</li> </ul> </li> <li>Merpay, Inc.</li> <li>MNES, Inc.</li> <li>Miniascape Co., Ltd.</li> <li>Minna Bank, Ltd.</li> <li>Mirrativ, Inc.</li> <li>MIXI, Inc.</li> <li>Mobingi - github</li> <li>Mokelab - github</li> <li>Momentum Inc.</li> <li>Money Forward, Inc.</li> <li>MF KESSAI, Inc.</li> <li>Nagisa Inc.</li> <li>neuet, Inc.</li> <li>Nikkei Inc.</li> <li>nonpi Inc.</li> <li>NOT A HOTEL inc.</li> <li>Nulab - github</li> <li>O-KUN Inc.</li> <li>omeroid</li> <li>OPTiM Corporation</li> <li>Origami Inc.</li> <li>PERSOL CAREER CO., LTD.</li> <li>PicApp Inc.</li> <li>pixiv Inc.</li> <li>Play Technologies, inc.</li> <li>Preferred Networks<ul> <li>SensorBee - Lightweight streaming processing engine for IoT</li> </ul> </li> <li>Progate, inc.</li> <li>Quipper Ltd.</li> <li>Rakuten Inc. - Largest e-commerce, online bank, and credit card (by transaction value) company in Japan with many smaller online services and subsidiaries.</li> <li>READYFOR INC.</li> <li>Repro Inc.</li> <li>Retail AI, Inc.</li> <li>Retty Inc.</li> <li>redish Inc. - Message delivery service on AWS Lambda</li> <li>ROLLCAKE Inc.</li> <li>SAKURA Internet Inc. - github<ul> <li>Arukas - github - Docker Container Hosting</li> <li>Web Accelerator</li> <li>sakura.io</li> </ul> </li> <li>Sharedine</li> <li>SheepMedical</li> <li>Showcase Gig Inc.</li> <li>SMART EDUCATION, Ltd.<ul> <li>KitS</li> <li>Artpop!</li> </ul> </li> <li>SmartShopping, Inc.</li> <li>SODA inc. - SNKRDUNK is a Japan\u2019s No.1 Sneaker &amp; Streetwear C2C Marketplace.</li> <li>Souzoh, Inc.</li> <li>Spectra, Inc.</li> <li>Speee, Inc.</li> <li>STORES, Inc.</li> <li>TOPGATE</li> <li>Toreta, Inc.</li> <li>Ubie, inc.</li> <li>Unipos Inc.</li> <li>UPSIDER, Inc.</li> <li>VELTRA Corporation</li> <li>Video Market Corporation</li> <li>viviON, inc.</li> <li>Voicy, Inc.</li> <li>VOYAGE GROUP</li> <li>VRize, Inc.</li> <li>WACUL, Inc.</li> <li>Wantedly, Inc.<ul> <li>github</li> </ul> </li> <li>WealthPark, Inc.</li> <li>wesionaryTEAM</li> <li>XICA Inc.</li> <li>XSHELL<ul> <li>Isaax</li> <li>IoTit Flashing tool</li> </ul> </li> <li>Yahoo! JAPAN Corporation<ul> <li>Vald - A highly scalable distributed fast approximate nearest neighbor dense vector search engine.<ul> <li>NGTD - NGTD provides serving function for NGT.</li> <li>gongt - NGT Go client library</li> </ul> </li> <li>Athenz - Open source platform for X.509 certificate based service authentication and fine grained access control in dynamic infrastructures<ul> <li>Garm - Kubernetes authorization webhook (SubjectAccessReview API) server for Athenz</li> <li>Athenz Authorizer - Athenz policy management library for golang</li> <li>Athenz Client Sidecar - An implementation of Kubernetes sidecar container to provide a common interface to retrieve authentication and authorization credential from Athenz server.</li> <li>Athenz Authorization Proxy - An implementation of Kubernetes sidecar container to provide a common interface for API endpoint authentication and authorization. It caches the policies from Athenz, and provides a reverse proxy interface to control access on specific URL endpoints.</li> </ul> </li> </ul> </li> <li>Yappli, Inc.</li> <li>ZOZO, Inc.</li> </ul>"},{"location":"GoUsers/#kazakhstan","title":"Kazakhstan","text":"<ul> <li>Kolesa LLC - microservices for classified ads websites and mobile applications backend (Kolesa, Krisha, Market)</li> <li>Technodom Operator - eCommerce platform.</li> </ul>"},{"location":"GoUsers/#korea-south","title":"Korea (South)","text":"<ul> <li>ComTrue Technologies - Network Packet Analyzer</li> <li>Digitalidea - inhouse tool for VFX</li> <li>FlyHigh - Information Security Solution</li> <li>KonaCard - Payment Service</li> <li>Lazypic - Contents creation and support Solution</li> <li>NHN Entertainment</li> <li>Quicket - Image Proxy, Push, Messenger</li> <li>Toast Cloud - Public Cloud Service</li> <li>Wemakeprice - CRM Solution</li> <li>Gabia - Server monitoring solution</li> <li>BankSalad - Personal Finance Management Service</li> <li>Daangn Market - Used trades between people in the same area</li> <li>DelightRoom - The world\u2019s most annoying alarm clock - Alarmy</li> </ul>"},{"location":"GoUsers/#lithuania","title":"Lithuania","text":"<ul> <li>DATA-DOG</li> </ul>"},{"location":"GoUsers/#malaysia","title":"Malaysia","text":"<ul> <li>MHub</li> <li>Revenue Monster</li> <li>iflix - Free and Subscription Video On Demand Service</li> <li>AirAsia</li> </ul>"},{"location":"GoUsers/#mexico","title":"Mexico","text":"<ul> <li>Conekta - Payment Service</li> <li>Segundamano</li> <li>Entropy - Ecommerce Marketing Optimization Platform.</li> <li>Credijusto - Financial Services</li> <li>Tredicom - B2B, EDI &amp; Ecommerce Services</li> </ul>"},{"location":"GoUsers/#middle-east","title":"Middle-East","text":"<ul> <li>ThoughtBox Technologies - A FinTech Solution Provider</li> </ul>"},{"location":"GoUsers/#moldova","title":"Moldova","text":"<ul> <li>Emphatic Spark</li> </ul>"},{"location":"GoUsers/#morocco","title":"Morocco","text":"<ul> <li>Avito</li> </ul>"},{"location":"GoUsers/#nepal","title":"Nepal","text":"<ul> <li>wesionaryTEAM</li> <li>Leapfrog Technology</li> </ul>"},{"location":"GoUsers/#netherlands","title":"Netherlands","text":"<ul> <li>Aan Zee</li> <li>Albert Heijn</li> <li>BloomReach</li> <li>bol.com</li> <li>booking.com</li> <li>Bubble Shooter</li> <li>Cloudbear - github</li> <li>Dataswimmer</li> <li>Datumprikker.nl</li> <li>FindHotel</li> <li>FLYR</li> <li>Housing Anywhere</li> <li>ISAAC</li> <li>Jexia - github</li> <li>Kickstox</li> <li>Kopano - github</li> <li>localsensor</li> <li>MessageBird - github</li> <li>Nerdalize - github</li> <li>Nextail</li> <li>NPO - github</li> <li>nx'change</li> <li>Pocket Media - company website, github</li> <li>Poki - company website, github</li> <li>Pointer Brand Protection</li> <li>Sensys Gatso Group</li> <li>Sentia</li> <li>The Things Network - github</li> <li>Travix International- github</li> <li>Ultraware</li> <li>Wercker - github</li> <li>Xebia - github</li> <li>Yonego</li> </ul>"},{"location":"GoUsers/#new-zealand","title":"New Zealand","text":"<ul> <li>9Spokes - github</li> <li>Aeroqual - github</li> <li>Boxer\u00ae - github</li> <li>Caruso - jobs</li> <li>Comet Backup - github</li> <li>DroneDeploy Ground Robotics (previously Rocos) - github</li> <li>GNS Science / GeoNet - github</li> <li>Hapara - github</li> <li>IQ Hive - github</li> <li>Jasper - github</li> <li>Lightspeed (formerly known as Vend) - github - jobs</li> <li>Modica Group - github</li> <li>Movio - article github</li> <li>OnFinality - github</li> <li>Portainer.io - github</li> <li>Spalk - github</li> <li>Sylo - github</li> <li>Ticketure - github</li> <li>Weta Digital - Slides</li> <li>Xerra Earth Observation Institute - Starboard Maritime Intelligence</li> </ul>"},{"location":"GoUsers/#nigeria","title":"Nigeria","text":"<ul> <li>Jumia Food - Instant delivery platform.</li> <li>Global Performance Index (GPI) - Biggest Software automation company in Nigeria.</li> </ul>"},{"location":"GoUsers/#norway","title":"Norway","text":"<ul> <li>Aller media</li> <li>Amedia</li> <li>Avinor</li> <li>Bare Bitcoin</li> <li>Bouvet</li> <li>Bridge Technologies</li> <li>Bulder Bank</li> <li>Capra Consulting</li> <li>Canonical</li> <li>Celerway</li> <li>Conclude</li> <li>CoopX</li> <li>Cutters</li> <li>CYBR</li> <li>Disruptive Technologies</li> <li>Ditio</li> <li>DNB</li> <li>Firi</li> <li>Finn.no</li> <li>Futurehome</li> <li>Helse Vest IKT</li> <li>Ilder</li> <li>ITverket</li> <li>Jottacloud</li> <li>Just Technologies</li> <li>Laerdal Medical</li> <li>Maritime Optima AS</li> <li>Moen Marin</li> <li>Neatframe</li> <li>No Isolation</li> <li>Northern.tech</li> <li>Norwegian Labour and Welfare Administration (NAV)</li> <li>Nurofy</li> <li>Oda</li> <li>Oslo kommune Oslo Origo</li> <li>Owners Room</li> <li>Payr</li> <li>Pexip</li> <li>Pioner Labs</li> <li>qbee - IoT device management platform</li> <li>reMarkable</li> <li>Raa Labs</li> <li>Rendra</li> <li>Sanity.io</li> <li>Schlumberger</li> <li>Searis</li> <li>Shortcut</li> <li>SpareBank1</li> <li>Sportradar</li> <li>Sysco</li> <li>Tapad</li> <li>Telenor</li> <li>Telia</li> <li>Teston, part of UserTesting</li> <li>TIDAL</li> <li>TV2</li> <li>Unacast</li> <li>Vipps</li> <li>Water Linked</li> <li>Webstep</li> <li>Zeipt</li> <li>Zendera</li> </ul>"},{"location":"GoUsers/#oman","title":"Oman","text":"<ul> <li>Rihal - Designed for Data</li> </ul>"},{"location":"GoUsers/#pakistan","title":"Pakistan","text":"<ul> <li>Datum Brain - github - AI, data science, big data analytics and IoT company</li> <li>TalkShot  - Social Networking based on Live events</li> </ul>"},{"location":"GoUsers/#philippines","title":"Philippines","text":"<ul> <li>22 Delta Labs - github - AI, data science, software and product development company</li> <li>EngageSPARK</li> </ul>"},{"location":"GoUsers/#poland","title":"Poland","text":"<ul> <li>OLX - blog</li> <li>allegro - blog - biggest polish e-commerce platform</li> <li>hostit.pl - blog</li> <li>Brainhub - blog</li> <li>Cardinal Cryptography - blockchain, DLT, and software development</li> <li>CloudThing - IoT cloud platform</li> <li>HolidayCheck</li> <li>Husar Labs - software development company</li> <li>RnDity - software and hardware development company</li> <li>Grey Wizard - cybersecurity company</li> <li>podioom - With podioom we create bonds that support those who care and who want to stay in shape!</li> <li>beFOGG - platform that will take tourism to the next level</li> <li>Miquido - Mobile-first software development company</li> <li>Brainly - blog</li> <li>limango</li> <li>SoftKraft - software development company</li> </ul>"},{"location":"GoUsers/#portugal","title":"Portugal","text":"<ul> <li>OLX - blog</li> <li>AppGeneration</li> <li>Lmit</li> <li>Uniplaces</li> <li>Bright Pixel</li> <li>Observador</li> <li>SaltPay</li> <li>Worten</li> </ul>"},{"location":"GoUsers/#romania","title":"Romania","text":"<ul> <li>Primal Skill - software development company focusing on web, API development with offices in Romania</li> <li>Trisoft - software development company with offices in San Francisco and Romania</li> <li>JobDone - Freelancer Marketplace</li> <li>CrowdStrike - software development company with offices in US, UK, Romania and Australia</li> </ul>"},{"location":"GoUsers/#russia","title":"Russia","text":"<ul> <li>2GIS</li> <li>avito.ru</li> <li>citilink.ru</li> <li>Gett</li> <li>ITooLabs</li> <li>Izvestia</li> <li>iSpring</li> <li>Mail.ru</li> <li>mc\u00b2 software</li> <li>OZON.ru</li> <li>Positive Technologies</li> <li>PostmanQ - High performance Mail Transfer Agent (MTA)</li> <li>ThetaPad</li> <li>Tinkoff</li> <li>Tochka</li> <li>TRY.FIT</li> <li>VK.COM (Part of our Go services: https://www.youtube.com/watch?v=Llmpfv8PIt4)</li> <li>Quadcode</li> </ul>"},{"location":"GoUsers/#saudi-arabia","title":"Saudi Arabia","text":"<ul> <li>Tamkeen Technologies</li> </ul>"},{"location":"GoUsers/#serbia","title":"Serbia","text":"<ul> <li>Seven Bridges - github</li> </ul>"},{"location":"GoUsers/#singapore","title":"Singapore","text":"<ul> <li>OKiT247 - Frontend analytics and web content delivery.</li> <li>Rate</li> <li>Singapore Power</li> <li>Eatigo</li> <li>ekeynow</li> </ul>"},{"location":"GoUsers/#slovenia","title":"Slovenia","text":"<ul> <li>Koofr</li> <li>nChain</li> <li>Niteo</li> <li>Outbrain</li> <li>Visionect d.o.o.</li> </ul>"},{"location":"GoUsers/#south-africa","title":"South Africa","text":"<ul> <li>Luno - github</li> <li>SaltPay</li> <li>Span Digital - github</li> <li>Ringier SA - International software development company.</li> </ul>"},{"location":"GoUsers/#southeast-asia","title":"Southeast Asia","text":"<ul> <li>Dwarves Foundation - github</li> <li>engageSPARK - HN</li> <li>Grab</li> <li>HealthCo</li> <li>Pocketmath</li> <li>Tokopedia</li> <li>TablePlus</li> <li>Carousell</li> </ul>"},{"location":"GoUsers/#spain","title":"Spain","text":"<ul> <li>alea soluciones</li> <li>Bugfender</li> <li>Cabify - github, twitter</li> <li>jobandtalent</li> <li>Ximdex</li> <li>puzzlopia - github</li> <li>binomads</li> <li>Schibsted</li> <li>Mediasmart.io - twitter</li> <li>Mavrix - github</li> <li>Typeform</li> <li>source{d}</li> <li>Nayar Systems</li> <li>Stayforlong</li> <li>Hosco</li> </ul>"},{"location":"GoUsers/#sri-lanka","title":"Sri Lanka","text":"<ul> <li>Xiges.io - Low-code Industrial IoT Platform</li> <li>PickMe - Universal Hailing Platform</li> <li>Mybudget - Financial Health Management System</li> <li>Moneta - Sri Lankans' Best Lifestyle App</li> <li>TryFix - Go Platform Developers</li> <li>Circles.Life - Building Telecommunication Provider Platform Running in Singapore</li> </ul>"},{"location":"GoUsers/#sweden","title":"Sweden","text":"<ul> <li>Abios - The world's most trusted esports API.</li> <li>Booli</li> <li>Digital Route</li> <li>Embark Studios</li> <li>Encore - The Cloud-Native Development Platform for Go.</li> <li>Greta</li> <li>Ingrid</li> <li>Kiliaro</li> <li>LootLocker</li> <li>Min Doktor</li> <li>Modular Finance</li> <li>Northvolt - The Future of Energy</li> <li>Qlik - jobs</li> <li>Slagkryssaren</li> <li>Studentlitteratur</li> <li>TV4 - blog</li> </ul>"},{"location":"GoUsers/#switzerland","title":"Switzerland","text":"<ul> <li>Acronis</li> <li>AgFlow SA</li> <li>Aleph Zero - blockchain platform</li> <li>Centralway Numbrs AG</li> <li>HolidayCheck</li> <li>Magazine zum Globus AG - github</li> <li>Perron2 GmbH</li> <li>Proton Technologies AG</li> <li>RedCarbon SA</li> <li>Ricardo</li> </ul>"},{"location":"GoUsers/#taiwan","title":"Taiwan","text":"<ul> <li>QNAP Systems, Inc.</li> <li>ProphetStor Data Services, Inc.</li> <li>Duotify Inc. (\u591a\u5947\u6578\u4f4d\u5275\u610f\u6709\u9650\u516c\u53f8)</li> </ul>"},{"location":"GoUsers/#thailand","title":"Thailand","text":"<ul> <li>3DS Interactive</li> <li>AIS - Top 3 of telecommunication company in Thailand.</li> <li>Appsynth Asia</li> <li>Ascend Wealth - An investment platform.</li> <li>Beebber</li> <li>botio</li> <li>Computerlogy</li> <li>Dcenbase</li> <li>Donuts Bangkok</li> <li>Drone Academy Thailand</li> <li>DTAC - Top 3 of telecommunication company in Thailand.</li> <li>Fastwork - Freelance platform in Thailand and Indonesia.</li> <li>Fillgoods</li> <li>Findx Solution</li> <li>Finnomena</li> <li>Gurusquare</li> <li>hytexts</li> <li>IBM Solutions Delivery</li> <li>Imatthio - Cloud Service Platform Development in Thailand.</li> <li>Insightera</li> <li>KBTG: KASIKORN Business-Technology Group - A group of tech companies of Kasikorn Bank Group. Top 3 in banking services in Thailand.</li> <li>KTB: Krung Thai Bank - Top 10 in banking services in Thailand.</li> <li>LINE Company (Thailand) - Most popular message platform in Thailand.</li> <li>LINE MAN Wongnai</li> <li>NEXPIE</li> <li>Odd-e Thailand</li> <li>ODDS - A group of people that believe that software development should be fun. And we believe in continues improvement.</li> <li>Omise - Payment gateway for Thailand.</li> <li>Onedaycat</li> <li>Paiduaykanmai</li> <li>Paybox</li> <li>Que Q</li> <li>Sellsuki</li> <li>SIX network - Financial Services</li> <li>SPRINT3r</li> <li>T.N. Incorporation - Core banking transformation company.</li> <li>Tencent Thailand</li> <li>THiNKNET</li> <li>ThoughtWorks Thailand</li> <li>True E-Logistics</li> <li>TRUE - Top 3 telecommunication company in Thailand.</li> <li>TrueMoney Number one of financial company without branches based in Thailand.</li> <li>WISESIGHT - Social media data analysis, Previously ThothZocial</li> <li>Xcellence Corporation</li> <li>Zanroo</li> <li>Zarewoft</li> </ul>"},{"location":"GoUsers/#turkey","title":"Turkey","text":"<ul> <li>Admongrel</li> <li>Frigbo</li> <li>Hepiyo</li> <li>icibot</li> <li>Insider</li> <li>LocRep - github - DevOps OSS Artifact Manager. Azure-DevOps - CI/CD and Scrum</li> <li>MasomoGaming - github - Online HeadBall2 Game Server by Go</li> <li>Mentornity, Inc. - Backend API</li> <li>Mos Teknoloji</li> <li>Imer Profesyonel Yonetim - github - Backend APIs</li> <li>Optimum Yaz\u0131l\u0131m</li> <li>Peak Games - github - Processing billions of events per day.</li> <li>put.io - github</li> <li>Mersin Teknik Asansor - github - Backend APIs</li> <li>MonoPayments - github - Fintech Platform.</li> <li>Robomotion RPA - github - Cloud native RPA platform for Kubernetes</li> <li>Sir Studios</li> <li>Trendyol.com - github - Backend APIs</li> <li>Armut/HomeRun - github - Backend APIs</li> <li>BiTaksi - github</li> <li>Hepsiburada.com - github - Backend APIs</li> <li>Clemta \u2013 github \u2013 Backend APIs</li> </ul>"},{"location":"GoUsers/#ukraine","title":"Ukraine","text":"<ul> <li>Agilites</li> <li>Aura</li> <li>ElifTech</li> <li>QArea</li> <li>Diligences</li> <li>ElementalsWeb</li> <li>monobank</li> <li>Reface</li> <li>ROZETKA</li> <li>VP Software - tech blog - software development company</li> </ul>"},{"location":"GoUsers/#united-arab-emirates","title":"United Arab Emirates","text":"<ul> <li>Milenow</li> <li>PayTabs Payment Gateway - Dubai</li> </ul>"},{"location":"GoUsers/#united-kingdom","title":"United Kingdom","text":"<ul> <li>4ARMED</li> <li>Acuris</li> <li>Admongrel</li> <li>A1comms</li> <li>Badoo - github</li> <li>BBC - public source</li> <li>BBC Worldwide - source</li> <li>Bedful Booking System</li> <li>Belua</li> <li>bet365 - github</li> <li>Bubble Student</li> <li>Bud</li> <li>comnoco</li> <li>Countingup - github</li> <li>Cytora - github</li> <li>Deliveroo - github</li> <li>DeviseOps</li> <li>Form3 - github</li> <li>Fortifi - github</li> <li>Awesome Shit You Can Buy</li> <li>Freelance Marketplace</li> <li>GOV.UK - slides github blog</li> <li>Geckoboard</li> <li>graze - github</li> <li>HM Treasury, UK.gov - github</li> <li>Intern Avenue</li> <li>iZettle - github</li> <li>Logit.io</li> <li>Lush Digital - GitHub</li> <li>Micro - github</li> <li>Monzo - github, blog</li> <li>New Bamboo - blog</li> <li>News UK</li> <li>oyato cloud - github</li> <li>Paymentsense - Data team</li> <li>Printer Central</li> <li>Pusher - github blog</li> <li>Ravelin</li> <li>Reactive Markets</li> <li>Resource Guru - blog</li> <li>Restorepoint</li> <li>Ryanair - source</li> <li>Sainsbury's</li> <li>SaltPay</li> <li>Sky Betting &amp; Gaming</li> <li>Skyscanner</li> <li>Songkick</li> <li>StorageOS</li> <li>Synthace - github</li> <li>thinkmoney</li> <li>Tyk - github</li> <li>Utility Warehouse</li> <li>Weaveworks</li> <li>XTX Markets - github</li> <li>YouView TV Ltd</li> <li>Ernest.io</li> <li>Landoop - github, blog</li> <li>Gram Games 90% of the backend and internal tools implemented with Go. Using it in production since 2015.</li> <li>WhatsOnChain - Backend APIs for Blockchain Explorer</li> </ul>"},{"location":"GoUsers/#united-states","title":"United States","text":"<ul> <li>Google - the core Go team work at Google. Most uses of Go at Google are confidential.<ul> <li>Kubernetes</li> <li>The YouTube team have released their MySQL scaling infrastructure as open source software 1, 2, 3</li> <li>dl.google.com is written in Go: mailing list discussion / OSCON slides</li> <li>Flywheel: Google's Data Compression Proxy for the Mobile Web, blog post on the rewrite</li> <li>A lot of scripts that earlier were written in Sawzall</li> <li>Seesaw load balancer -github repo</li> <li>Other known uses include</li> <li>the Turkey Doodle (2011),</li> <li>the Santa Tracker (2012),</li> <li>writing map/reduce jobs,</li> <li>Jam With Chrome,</li> <li>the CubeSlam Chrome Experiment,</li> <li>Google Helpouts,</li> <li>Doorman, Global Distributed Client Side Rate Limiting</li> <li>pprof command line tool</li> <li>pi.delivery API for Pi Day 2019</li> </ul> </li> <li>6Wunderkinder - video</li> <li>99designs - golang-nuts</li> <li>Abot - github</li> <li>ActiveState - github</li> <li>Acquia - blog</li> <li>adeven - blog</li> <li>Adobe</li> <li>SEMRush Pricing</li> <li>Adori Labs</li> <li>AeroFS - github, blog</li> <li>Aerospike - blog</li> <li>Airbrake</li> <li>Airware - eng blog, github</li> <li>Alaska Airlines - github</li> <li>Amazon Web Services - github github</li> <li>American Express - github</li> <li>Apcera - blog</li> <li>Apeiron Data Systems</li> <li>Appbase</li> <li>Append Media</li> <li>Appoxy - twitter</li> <li>AppsCode Inc. - github, twitter</li> <li>Arista Networks - twitter</li> <li>Ardan Studios/Labs - twitter</li> <li>Aruba Networks - golang-nuts</li> <li>Ascendant Compliance Manager - Batch process millions of security trades per day.</li> <li>Assembled - github</li> <li>AT&amp;T - GitHub and gopkgs repository</li> <li>Atatus - blog</li> <li>Aura</li> <li>Avocet - blog</li> <li>Awake Networks</li> <li>Axioms - blog</li> <li>Basecamp - blog</li> <li>Batch.sh - github</li> <li>Beachfront Media article</li> <li>Beam - github</li> <li>Beehively - Presentation</li> <li>Betable - talk #1, talk #2</li> <li>Benzinga - pro, jobs</li> <li>BigCommerce - blog, github</li> <li>Bitbucket - source</li> <li>bitly - github blog</li> <li>Blippar</li> <li>Bluecore</li> <li>Blink Analytics - github</li> <li>Bolt</li> <li>bol.com - github blog</li> <li>botvs.com</li> <li>Booking.com - source</li> <li>Boot.dev - source</li> <li>Bread Finance</li> <li>Bridgevine - github</li> <li>Brightcove</li> <li>Bringhub</li> <li>BuySellAds</li> <li>BuzzFeed - talk</li> <li>Byndr</li> <li>ByteGain</li> <li>Canonical - source, email</li> <li>CBS Interactive - github</li> <li>Capital One - blog</li> <li>Caprinova</li> <li>Carmatec</li> <li>Carbon Games - source</li> <li>CB Insights - source</li> <li>CenturyLink - github</li> <li>Channel</li> <li>Chatlio</li> <li>Chubbs Solutions - Progressive Tech (APIs).</li> <li>Cisco - github</li> <li>Circle</li> <li>CircleCI</li> <li>Circonus</li> <li>Clearblade - github</li> <li>Clever - github blog</li> <li>ClickAway</li> <li>CloudFlare - blog article</li> <li>Cloud Foundry - blog github</li> <li>CloudWalk - github</li> <li>clypd - blog</li> <li>Cockroach Labs - blog github</li> <li>CodeShip - blog</li> <li>Comcast - github</li> <li>Conformal Systems - github</li> <li>Copper.IO - blog</li> <li>CoreOS - github, blog</li> <li>Couchbase - github</li> <li>Crashlytics - tweet</li> <li>Crowdstrike - blog</li> <li>Cupcake - tweet github</li> <li>CURT Manufacturing - github</li> <li>Cycle.io</li> <li>CustomerIO - tweet</li> <li>Dailymotion - github, blog</li> <li>Datadog - blog</li> <li>Datascale</li> <li>DeferPanic - github</li> <li>Dell</li> <li>Diggernaut - Data mining and extraction service</li> <li>DigitalOcean - blog</li> <li>Discovery - Video streaming.</li> <li>Disney - Gophercon 2017 lightning talk</li> <li>Disqus - blog, blog</li> <li>DNSimple - blog</li> <li>Docker - docker [slides]</li> <li>domainr - tweet</li> <li>Dollar Shave Club - blog</li> <li>DoltHub - Dolt: The first and only SQL database that supports clone, branch, and merge. (GitHub) (Twitter) (Discord)</li> <li>DotDashPay - github</li> <li>DoubleDutch (http://www.slideshare.net/jpetazzo/docker-and-go-why-did-we-decide-to-write-docker-in-go)</li> <li>Doximity</li> <li>DramaFever - github</li> <li>DreamList</li> <li>drone.io - post github</li> <li>Dropbox - blog, github</li> <li>Druva - The data resiliency cloud</li> <li>eBay - github, meetup</li> <li>Economist - github</li> <li>Embedly - blog</li> <li>EMC Cloud Services - tweet</li> <li>Enova - github, blog</li> <li>ERNIT - Medium</li> <li>EverQuote</li> <li>Everything.me - blog</li> <li>Expedia - github</li> <li>Facebook - github, blog</li> <li>FieldEngineer</li> <li>Factom - github</li> <li>Fanatics - github</li> <li>Fast - github, twitter</li> <li>ForexSignals</li> <li>Fastly - blog, twitter - The only real-time content delivery network designed to seamlessly integrate with your development stack.</li> <li>Foize - github</li> <li>Flipboard  - source (job post)</li> <li>FLXOne - blog</li> <li>Fullstory - blog</li> <li>FuboTV</li> <li>Gaikai (Playstation NOW)</li> <li>Gatherer - twitter</li> <li>Gamegos</li> <li>Gametime</li> <li>Gemfury</li> <li>General Electric Software - tweet, jobs</li> <li>Gengo  - blog</li> <li>Getty Images - tweet tweet</li> <li>GitHub - blog post</li> <li>GitLab - gitaly</li> <li>GlobalSign</li> <li>Granify - blog</li> <li>GrayMeta, Inc.</li> <li>Grovo</li> <li>Glympse</li> <li>Hailo - slides</li> <li>Happy Pancake - blog</li> <li>HashiCorp - github</li> <li>HER</li> <li>Heroku - Go blog post, news</li> <li>Hewlett Packard Enterprise - GitHub</li> <li>Home24 - github</li> <li>Honeywell</li> <li>Hooklift - github</li> <li>HP</li> <li>HyperDev - blog post</li> <li>IBM - Clampify, i18n4go, IBM zOS, libsecurity</li> <li>Igneous</li> <li>Imagefly</li> <li>Imgix - StackShare, job posting</li> <li>Imgur - github</li> <li>Interface - github</li> <li>INdigital - APIs and Microservices for Public Safety.</li> <li>InfluxData - blog github</li> <li>Instela</li> <li>Intel - snap telemetry framework, ciao cloud orchestration, Clear Containers</li> <li>identakid.com</li> <li>Invoiced</li> <li>Ionic Security</li> <li>IPinfo.io</li> <li>Iron.io - source blog:\"30 servers to 2\" blog:\"2 years of production Go\"</li> <li>ISDC - InsideSales.com</li> <li>iTechArt</li> <li>Jack Henry and Associates</li> <li>JelloLabs</li> <li>Jenkins X - GitHub</li> <li>Jimdo - tweet github</li> <li>Jive - github</li> <li>Jive Software - github</li> <li>JPMorgan Chase - github</li> <li>Karma - blog</li> <li>Kayako - twitter</li> <li>Keybase.io - github</li> <li>Khan Academy - blog</li> <li>Kohl's - github</li> <li>Kingsoft - github</li> <li>Chamoji - augmented reality</li> <li>K&amp;J Translations</li> <li>Kochava</li> <li>Koding - quora</li> <li>LabStack - github, website</li> <li>Laserlike</li> <li>LaunchDarkly - github, golang sdk</li> <li>Lean Labs - git release</li> <li>Liftoff</li> <li>Lincoln Loop - blog (as part of https://botbot.me/ , #go-nuts IRC logging)</li> <li>Linc Global</li> <li>LiveRamp</li> <li>Lob</li> <li>LocalRaces - website</li> <li>LogPacker - website</li> <li>LosVirtuality - website</li> <li>Lovoo - github</li> <li>Luckie &amp; Company</li> <li>Luxor</li> <li>Lyft - github</li> <li>Lytics - CDP that automates 1:1 marketing</li> <li>Magento</li> <li>Magic Leap - twitter</li> <li>Maldive</li> <li>MalwareBytes - blog</li> <li>Mastercard - github</li> <li>Mattel - Mattel uses go on its backend for APIs and IOT data processing.</li> <li>Mattermost - github - Open source, private cloud Slack-alternative</li> <li>MaxCDN - blog</li> <li>Medium - blog</li> <li>MediaMath - github, youtube</li> <li>Mesosphere - github</li> <li>Meta Search - twitter</li> <li>Microcosm - slides</li> <li>Mindbowser</li> <li>Minio - github blog- Object Storage compatible with Amazon S3 API</li> <li>Modcloth - github</li> <li>Moovweb - github source</li> <li>MongoDB - github, blog</li> <li>Monsoon Commerce - blog</li> <li>Mozilla - github</li> <li>MROffice - source</li> <li>Namely - blog</li> <li>NetApp - github</li> <li>Netflix - github, blog</li> <li>New Relic - HN</li> <li>New York Times - source</li> <li>News Corp</li> <li>Newspaper - source</li> <li>Nextdoor - source</li> <li>Next Jump - Next Jump the company that manages the perks platform Perks at Work uses Go in it's backend.</li> <li>NextUser</li> <li>Nexway</li> <li>Nike - github</li> <li>Ninchat - twitter</li> <li>Nordstrom - github</li> <li>Northwestern Mutual - github</li> <li>Novartis - g+ post</li> <li>Nutanix</li> <li>Odoscope - twitter, job</li> <li>Ookma-Kyi - Open Source Implementation of the now defunct Battlemail MMO GitHub Twitter</li> <li>Ooyala - github</li> <li>Opendoor - HN</li> <li>OpenShift - blog</li> <li>Oracle - Wercker is a Automation platform for Kubernetes &amp; Microservice Deployments</li> <li>Orijtech - github</li> <li>Ottemo - Managed Commerce Platform written in golang</li> <li>Outdoorsy</li> <li>Outreach</li> <li>OvrClk - github</li> <li>Oyster Books - blog</li> <li>Pachyderm.io - github</li> <li>Packet - github</li> <li>Pagoda Box/Nanopack - github</li> <li>Pantheon - blog</li> <li>Parse.com - blog</li> <li>Partner Fusion</li> <li>PayPal.com - github</li> <li>Pendo.io - github</li> <li>Percona - blog</li> <li>pet.io</li> <li>Pilosa - github</li> <li>Pinshape - job</li> <li>Pinterest - github</li> <li>Pivotal - Cloud Foundry and Cloud Foundry Incubator</li> <li>PocketList</li> <li>Points.com - Points Loyalty Wallet</li> <li>pool.ntp.org - blog status</li> <li>Poptip - blog, job posting</li> <li>Pressly - github, product</li> <li>Procore - github</li> <li>Pronovix - blog, github, product</li> <li>Public Good Corp - meetup</li> <li>PullRequest - meetup</li> <li>Quoori - github</li> <li>Rackspace - github</li> <li>RailsCarma</li> <li>Raintank - blog</li> <li>Rakuten Marketing</li> <li>Recime</li> <li>RapidLoop - product</li> <li>Rawstream  - tweets</li> <li>Raygun - blog</li> <li>RealBuildPro - product</li> <li>Reddit - AMA post, github</li> <li>Red Ventures</li> <li>ReelDx - medvid.io, twitter</li> <li>Remember The Milk</li> <li>Remind101 - github, blog</li> <li>Remitly</li> <li>Rendered :Text - blog</li> <li>Replicated</li> <li>Repustate</li> <li>ReverbNation</li> <li>ReviewTrackers - HN</li> <li>Revolving Cow</li> <li>Riot Games - talk</li> <li>Room for More</li> <li>Rounds - blog</li> <li>RueBaRue</li> <li>Runscope - blog</li> <li>Sagan Systems - HN</li> <li>Samsara - blog</li> <li>Secret - blog</li> <li>SecurityScorecard - github blog</li> <li>Segment - github</li> <li>SendGrid - blog</li> <li>SendHub - source (shipbuilder PaaS)</li> <li>SessionM - HN</li> <li>Shopify tweet</li> <li>Showyou source</li> <li>Shutterfly</li> <li>SignalFx - blog</li> <li>Skimlinks blog</li> <li>Slack - blog</li> <li>SlingTV</li> <li>SmartyStreets - github, blog</li> <li>SmugMug - blog</li> <li>Snyk</li> <li>Social Blade</li> <li>Sorint.US - github</li> <li>SoundCloud - blog</li> <li>SoundHound</li> <li>Sourcegraph - talk, github</li> <li>source{d} - github, twitter, blog</li> <li>Space Monkey - blog</li> <li>SpaceX - reddit</li> <li>SpeedyTV</li> <li>Sphere Software - github</li> <li>Splice - tweet, blog, blog</li> <li>Springer - tweet</li> <li>Squadcast</li> <li>Square - blog</li> <li>StackEngine - blog</li> <li>Stack Exchange - blog, github, website</li> <li>Staffjoy - blog</li> <li>StatHat - Go blog post</li> <li>Steals.com blog</li> <li>SteelSeries - blog</li> <li>StorReduce</li> <li>Stream - github</li> <li>Stripe - github</li> <li>SumoLogic - github</li> <li>SuperHuman - HN</li> <li>SyndicatePro - source</li> <li>Tamber - blog</li> <li>Tapglue</li> <li>Tapjoy - blog, github</li> <li>Target - blog</li> <li>Teespring</li> <li>Telit IoT Portal</li> <li>TelTech - github</li> <li>Tendermint - github</li> <li>TF2Stadium - github, blog</li> <li>TGen - github, blog</li> <li>The Home Depot</li> <li>The Plant - Qortex, QoR</li> <li>Thisissoon - github</li> <li>Thomson Reuters Eikon - github source, video</li> <li>thoughtbot - blog github</li> <li>Thumbtack - Go Hercule blog post</li> <li>TIBCO</li> <li>Ticketmaster - github</li> <li>Timehop - blog</li> <li>TinkerCad</li> <li>Toggl - blog</li> <li>Torbit  - blog</li> <li>Total Care Auto</li> <li>TraiveFinance</li> <li>Transloadit - blog</li> <li>Treetop Commons, NobleHour - tweet</li> <li>Trippple</li> <li>Trisoft - software development company with offices in San Francisco and Romania</li> <li>Tumblr  - github source</li> <li>Tune</li> <li>TurboBytes - github, tweet</li> <li>Twitch - blog</li> <li>Twitter - blog</li> <li>TweetQureet - blog</li> <li>Uber - blog github tweet</li> <li>Ulele - tweet</li> <li>Umbel - tweet</li> <li>Underarmour - github</li> <li>Undisclosed.ch - github</li> <li>Unfold - Part of Squarespace runs all backend services using Go</li> <li>Upskill - github</li> <li>Verifone</li> <li>Vertamedia - github</li> <li>VerveMobile</li> <li>VHSCast</li> <li>VictoriaMetrics - github.</li> <li>Vimeo - blog, github</li> <li>VividCortex - blog, github</li> <li>VMware - github</li> <li>VSCO - blog post</li> <li>Vungle - shared libs, OpenRTB, VAST, etc</li> <li>Walmart Labs - github</li> <li>Wasabi</li> <li>Weave</li> <li>Weaveworks</li> <li>Western Digital - github</li> <li>Wercker - github</li> <li>Whim - meetup, tweet</li> <li>Wikia</li> <li>Wireless Registry - github</li> <li>Workiva - github</li> <li>WP Engine - github</li> <li>Verizon Media / Yahoo - github</li> <li>Yandex - blog</li> <li>Yik Yak - tweet</li> <li>Zalando - github</li> <li>Zapier - github</li> <li>Zenoss - github</li> <li>Zenreach - jobs</li> <li>ZITEC</li> <li>Zumba - github</li> <li>Zynga - github</li> <li>Tipe - github</li> <li>4wardtech Inc</li> </ul>"},{"location":"GoUsers/#vietnam","title":"Vietnam","text":"<ul> <li>BeGroup</li> <li>ChoTot</li> <li>Money Forward Vietnam</li> <li>ViralWorks</li> <li>WeTrust</li> <li>VinID</li> </ul> <p>See also Success Stories</p> <p>See also Wikipedia category and Wikidata and Wikidata for free and open-source software only</p>"},{"location":"Gomote/","title":"Gomote","text":"<p>The gomote command is a client for the Go builder infrastructure. It's a remote control for remote Go builder machines.</p>"},{"location":"Gomote/#installation","title":"Installation","text":"<pre><code>$ go install golang.org/x/build/cmd/gomote@latest  # Go 1.16 and later\n</code></pre>"},{"location":"Gomote/#usage","title":"Usage","text":"<p>The most basic usage of the gomote tool involves just a few steps: 1. Create an instance. 1. Push code to the instance. 1. Run commands on the instance.</p> <p>Running the <code>create</code> command with the <code>-list</code> flag will list available instance types.</p> <pre><code>$ gomote create -list\n(list tons of builder types)\n</code></pre> <p>Then, an instance can be created by specifying an instance type. The instance's name will be printed to stdout, so the result may be stored in an environment variable. (There may be other logging messages, but they will be on stderr and each line will have a '#' prefix.)</p> <pre><code>$ gomote create gotip-linux-amd64\n# still creating gotip-linux-amd64 (1) after 5s; 0 requests ahead of you\nuser-gotip-linux-amd64-0\n</code></pre> <p>With that instance's name you can now push a GOROOT to the instance and install a bootstrap toolchain. The repository you sync will appear at the <code>go</code> subdirectory of <code>$WORKDIR</code> (the default directory of all gomote operations). The bootstrap toolchain will always go into the <code>go1.4</code> subdirectory (even if the bootstrap toolchain isn't from version 1.4).</p> <pre><code>$ GOROOT=/path/to/local/go/repo gomote push user-gotip-linux-amd64-0\n$ gomote ls user-gotip-linux-amd64-0\ngo\ngo1.4\n</code></pre> <p>Note that <code>push</code> really is a \"sync\" operation, so next time you push the gomote tool will only push what has changed (files added, modified, or removed).</p> <p>With a toolchain installed, you can now build it by running commands on the instance. The <code>run</code> command allows you to specify an executable to run. The executable must be specified relative to <code>$WORKDIR</code> (e.g. <code>go/bin/go</code>) or via an absolute path (e.g. <code>/bin/bash</code>). That executable will then run with its current working directory set to the directory containing the executable.</p> <pre><code>$ gomote run user-gotip-linux-amd64-0 go/src/make.bash\n</code></pre> <p>To then run the built Go toolchain, use <code>go/bin/go</code>.</p> <pre><code>$ gomote run user-gotip-linux-amd64-0 go/bin/go test -run=\"TestSomething\" -v runtime\n</code></pre> <p>You can additionally specify a working directory and environment variables via flags to <code>run</code> that will be applied before the command is executed.</p> <p>Note that gomote instances will automatically disappear after 30 minutes of inactivity. Use the <code>list</code> command to check how long they have left.</p> <pre><code>$ gomote list\nuser-gotip-linux-amd64-0\tgotip-linux-amd64\tgotip-linux-amd64\texpires in 10m27.339494527s\n</code></pre> <p>The <code>ping</code> command can be used to keep an instance alive if no other commands are being run against it.</p> <p>For more information on each command run <code>gomote help &lt;command&gt;</code>. For more commands, run <code>gomote help</code>.</p>"},{"location":"Gomote/#builder-types","title":"Builder types","text":"<p>Available builder types follow a certain structure, loosely <code>$GOBRANCH-($REPO-)?$GOOS-$GOARCH(_$OS)-$EXTRA</code>.</p> <p>A few useful notes about these names. - Different <code>$GOBRANCH</code> mainly modify the preinstalled tool versions, like the bootstrap Go toolchain. - Builder types with <code>$REPO</code> will have the specified repository downloaded to the work root at tip-of-tree.</p>"},{"location":"Gomote/#debugging-buildlets-directly","title":"Debugging buildlets directly","text":"<p>The <code>create</code> command contacts the build coordinator (farmer.golang.org) and requests that it create the buildlet on your behalf. All subsequent commands (such as <code>gomote run</code> or <code>gomote ls</code>) then proxy your request via the coordinator.  To access a buildlet directly (for example, when working on the buildlet code), you can skip the <code>gomote create</code> step and use the special builder name <code>&lt;build-config-name&gt;@ip[:port&gt;</code>, such as <code>windows-amd64-2008@10.1.5.3</code>.</p>"},{"location":"Gomote/#groups","title":"Groups","text":"<p>Instances may be managed in named groups, and commands are broadcast to all instances in the group.</p> <p>A group is specified either by the <code>-group</code> global flag or through the <code>GOMOTE_GROUP</code> environment variable. The <code>-group</code> flag must always specify a valid group, whereas <code>GOMOTE_GROUP</code> may contain an invalid group. Instances may be part of more than one group.</p> <p>Groups may be explicitly managed with the \"group\" subcommand, but there are several short-cuts that make this unnecessary in most cases:</p> <ul> <li>The <code>create</code> command can create a new group for instances with the <code>-new-group</code> flag.</li> <li>The <code>create</code> command will automatically create the group in <code>GOMOTE_GROUP</code> if it does not exist and no other group is explicitly specified.</li> <li>The <code>destroy</code> command can destroy a group in addition to its instances with the <code>-destroy-group</code> flag.</li> </ul> <p>As a result, the easiest way to use groups is to just set the <code>GOMOTE_GROUP</code> environment variable:</p> <pre><code>$ export GOMOTE_GROUP=debug\n$ gomote create gotip-linux-amd64\n$ GOROOT=/path/to/goroot gomote push\n$ gomote run go/src/make.bash\n</code></pre> <p>As this example demonstrates, groups are useful even if the group contains only a single instance: it can dramatically shorten most gomote commands.</p>"},{"location":"Gomote/#tips-and-tricks","title":"Tips and tricks","text":""},{"location":"Gomote/#general","title":"General","text":"<p>The <code>create</code> command accepts the <code>-setup</code> flag which also pushes a <code>GOROOT</code> and runs the appropriate equivalent of <code>make.bash</code> for the instance.</p> <p>Example: <pre><code>$ GOROOT=/path/to/my/goroot gomote create -setup gotip-linux-amd64\n# Creating user-gotip-linux-amd64-0...\n# Pushing /path/to/my/goroot to user-gotip-linux-amd64-0\n# Running make.bash on user-gotip-linux-amd64-0...\n</code></pre></p> <p>The <code>create</code> command accepts the <code>-count</code> flag for creating several instances at once.</p> <p>Example: <pre><code>$ gomote create -count=3 gotip-linux-amd64\n# Creating user-gotip-linux-amd64-0...\n# Creating user-gotip-linux-amd64-1...\n# Creating user-gotip-linux-amd64-2...\n</code></pre></p> <p>The <code>run</code> command accepts the <code>-collect</code> flag for automatically writing the output from the command to a file in the current working directory, as well as a copy of the full file tree from the instance. This command is useful for capturing the output of long-running commands in a set-and-forget manner.</p> <p>Example: <pre><code>$ gomote run -collect user-gotip-linux-amd64-0 /bin/bash -c 'echo hi'\n# Writing output to user-gotip-linux-amd64-0.stdout...\n$ cat user-gotip-linux-amd64-0.stdout\nhi\n$ ls user-gotip-linux-amd64-0.tar.gz\nuser-gotip-linux-amd64-0.tar.gz\n</code></pre></p> <p>The <code>run</code> command accepts the <code>-until</code> flag for continuously executing a command until the output of the command matches some pattern. This is useful for reproducing rare issues, and especially useful when used together with <code>-collect</code>.</p> <p>Example: <pre><code>$ gomote run -until 'FAIL' -collect user-gotip-linux-amd64-0 go/bin/go test -run 'TestFlaky' -count=1000 runtime\n# Writing output to user-gotip-linux-amd64-0.stdout...\n$ cat user-gotip-linux-amd64-0.stdout\n...\n--- FAIL: TestFlaky ---\n...\n$ ls user-gotip-linux-amd64-0.tar.gz\nuser-gotip-linux-amd64-0.tar.gz\n</code></pre></p> <p>Note that the <code>run</code> command always streams output to a temporary file regardless of any additional flags to avoid losing output due to terminal scrollback. It always prints the location of the file.</p>"},{"location":"Gomote/#reproducing-a-rare-failure","title":"Reproducing a rare failure","text":"<p>Putting together some of the tricks above and making use of groups, it's much easier to hammer on some test to try to reproduce a rare failure. For example:</p> <pre><code>$ export GOMOTE_GROUP=debug\n$ GOROOT=/path/to/goroot gomote create -setup -count=10 gotip-linux-amd64\n$ gomote run -until='unexpected return pc' -collect go/bin/go run -run=\"TestFlaky\" -count=100 runtime\n</code></pre>"},{"location":"Gomote/#darwin","title":"Darwin","text":"<p>Darwin gomotes are known to take a few minutes to set up, even if there are machines available. This is due to the extra time necessary to set up Xcode.</p>"},{"location":"Gomote/#windows","title":"Windows","text":"<pre><code>$ gomote run -path '$PATH,$WORKDIR/go/bin' $MOTE go/src/make.bat\n$ gomote run -path '$PATH,$WORKDIR/go/bin' $MOTE go/bin/go.exe test cmd/go -short\n</code></pre> <p>Note: previous versions of the wiki have advised setting GOROOT for gomote 'run' commands (e.g. \"-e GOROOT=%WORKDIR%go\"); this is no longer recommended (causes problems with Go command caching).</p>"},{"location":"Gomote/#subrepos-on-windows","title":"Subrepos on Windows","text":"<pre><code>$ tar --exclude .git -C ~/go/src/ -zc golang.org/x/tools | gomote puttar -dir=gopath/src $MOTE -\n$ gomote run -e 'GOPATH=%WORKDIR%\\gopath' $MOTE go/bin/go test -run=TestFixImportsVendorPackage golang.org/x/tools/imports\n</code></pre> <p>If ssh'd into the machine, these envvars may be handy:</p> <pre><code>$ set GOPATH=%WORKDIR%\\gopath\n$ set PATH=%PATH%;%WORKDIR%\\gopath\\bin;%WORKDIR%\\go\\bin\n$ set CGO_ENABLED=0\n</code></pre>"},{"location":"Gomote/#subrepos-on-unix","title":"Subrepos on Unix","text":"<p>Testing golang.org/x/sys/unix on $MOTE</p> <pre><code>$ tar -C $GOPATH/src/ -zc golang.org/x/sys/unix | gomote puttar -dir=gopath/src $MOTE\n$ gomote run -e 'GOPATH=/tmp/workdir/gopath' -dir 'gopath/src/golang.org/x/sys/unix' $MOTE go/bin/go test -v golang.org/x/sys/unix\n</code></pre> <p>(The GOPATH part is for GOPATH compatibility mode; the <code>-dir</code> is for modules mode, which looks in the working directory and up for <code>go.mod</code>)</p>"},{"location":"Gomote/#android","title":"Android","text":"<p><pre><code>export MOTE=`gomote create android-arm64-wikofever`\ngomote push $MOTE\ngomote run $MOTE go/src/make.bash\n</code></pre> PATH must contain the exec wrapper, <code>go_android_*_exec</code>, built by make.bash.</p> <pre><code>gomote run -path '$PATH,$WORKDIR/go/bin' $MOTE go/bin/go test math/big\n</code></pre>"},{"location":"Gomote/#about-buildlets","title":"About buildlets","text":"<p>https://farmer.golang.org/builders lists information about how each buildlet is deployed and configured. The information is from golang.org/x/build/dashboard and golang.org/x/build/env.</p>"},{"location":"Gomote/#access","title":"Access","text":"<p>Effective January 2025, gomote access will automatically be granted to contributors who have Approvers access.</p> <p>On August 2022, a new infrastructure was deployed which required the removal of all gomote access from previously approved users. Please re-request access if you still require access.</p> <p>To request access to the gomote service, file a new issue (https://go.dev/issue/new?title=access:+&amp;body=See+https://go.dev/wiki/Gomote%23access.) and state the Google account you use to log in to Gerrit. The provided account will only be used for authentication purposes.</p> <p>Authentication is triggered with the first invocation of a command:</p> <pre><code>$ gomote create gotip-linux-amd64\nPlease visit https://www.google.com/device in your browser and enter verification code:\n ABCD-4567\n...\n</code></pre> <p>The login command will also initiate the authentication workflow:</p> <pre><code>$ gomote login\nPlease visit https://www.google.com/device in your browser and enter verification code:\n ABCD-4567\n...\n</code></pre> <p>After opening a browser with the provided link the user must authenticate with the google account and paste the verification code into the browser. After a short wait the client will be authenticated.</p>"},{"location":"Gomote/#gomote-ssh","title":"gomote ssh","text":"<p>The <code>gomote ssh</code> command uses a SSH keys created specifically for gomote. On the first use of the <code>gomote ssh</code> a set of keys will be created and stored in the local user configuration directory. You may be asked to add set a password for the keys (a password is not required). The SSH functionality operates with OpenSSH certificate authentication and does not require any additional configuration. Not all builder types support <code>gomote ssh</code>.</p>"},{"location":"Gopher/","title":"Gopher","text":"<p>The Go gopher was designed by Renee French. The design is licensed under the Creative Commons 4.0 Attributions license. Read this article and watch The Go Gopher A Character Study for more details.</p>"},{"location":"Gopher/#where-can-i-find-more-gopher-illustrations","title":"Where can I find more gopher illustrations?","text":"<ul> <li>gophers in the Go website repository</li> <li>gopher vector</li> <li>gopher 3d</li> <li>golang graphics</li> <li>print-ready swimming gopher</li> <li>go gopher vector</li> <li>gophericons</li> <li>gophers by Egon Elbre</li> <li>Go Gopher model (3d)</li> <li>Gopher Artwork by Ashley McNamara</li> <li>Gopherize.me - a Gopher avatar that's as unique as you</li> <li>Free Gophers Pack</li> </ul>"},{"location":"HandlingIssues/","title":"HandlingIssues","text":"<p>This document explains how we handle issue triage and scheduling in the Go project's issue tracker.</p>"},{"location":"HandlingIssues/#issue-states","title":"Issue States","text":"<p>Any issue must be in one of the following states. Project contributors move issues from one state to another. The intent behind these explicit states is to describe the (minimum) next steps required to bring the issue to resolution. Issues may move between states in any order, as dictated by the needs of the particular issue.</p>"},{"location":"HandlingIssues/#new","title":"New","text":"<ul> <li>The issue has been filed.</li> <li>May not be correctly formatted (title, etc).</li> <li>To transition from this state, someone must clean up the issue report and optionally CC people who might best investigate or fix it.</li> </ul>"},{"location":"HandlingIssues/#needs-investigation","title":"Needs Investigation","text":"<ul> <li>Is correctly formatted.</li> <li>The title has a path prefix.</li> <li>The body describes the issue.</li> <li>Has a milestone.</li> <li>If the issue is not important, it is ok to set the milestone to <code>Backlog</code>. Otherwise, set it to the next upcoming release.</li> <li>Has the label <code>NeedsInvestigation</code>.</li> <li>May also have the label <code>WaitingForInfo</code> if the investigator is waiting for more information from someone (e.g., the issue reporter).</li> <li>To transition from this state, someone must examine the issue and confirm that it is valid and not a duplicate of an existing issue.</li> </ul>"},{"location":"HandlingIssues/#needs-decision","title":"Needs Decision","text":"<ul> <li>The issue is real, but we're not sure what action to take.</li> <li>The issue can be addressed in Go 1.</li> <li>Feedback is required from experts, contributors, and/or the community before a fix can be made.</li> <li>Note that the majority of issues will never transition to this state, as most of the time the decision is an obvious \u201cYes, this should be fixed.\u201d</li> <li>Has a milestone.</li> <li>Has the label <code>NeedsDecision</code>.</li> <li>May have the label <code>WaitingForInfo</code>.</li> <li>May have the label <code>Blocked</code> if forward progress depends upon the resolution of another issue or the release of a future version of Go. An accompanying comment should explain the blockage.</li> <li>Must not have the label <code>Go2</code>. (Those issues are handled separately.)</li> <li>To transition from this state, someone must decide how the issue is to be resolved.<ul> <li>If the decision is complicated, the issue may be given a <code>Proposal</code> label. The issue remains in this state until the proposal process is complete, and moves to <code>NeedsFix</code> if approved.</li> </ul> </li> </ul>"},{"location":"HandlingIssues/#needs-fix","title":"Needs Fix","text":"<ul> <li>The path to resolution is known, but the work has not been done.</li> <li>Has a milestone.</li> <li>Has the label <code>NeedsFix</code>.</li> <li>May have the labels <code>Blocked</code> or <code>WaitingForInfo</code>.</li> <li>To transition from this state, someone must do the work to fix the issue.</li> </ul>"},{"location":"HandlingIssues/#fix-pending","title":"Fix Pending","text":"<ul> <li>Has a CL that fixes the bug, not yet submitted, that passes TryBots.</li> <li>Should not have labels <code>Blocked</code> or <code>WaitingForInfo</code>.</li> </ul>"},{"location":"HandlingIssues/#fixed","title":"Fixed","text":"<ul> <li>The issue is resolved. No further attention is required.</li> <li>The issue is closed.</li> </ul>"},{"location":"HandlingIssues/#proposal","title":"Proposal","text":"<ul> <li>See below for the proposal process.</li> </ul> <p>Issues move from one state to another where appropriate. For example, a contributor may file an issue, assign it to themselves, and immediately apply the <code>NeedsFix</code> label. Or, an issue may go from <code>NeedsDecision</code> to <code>NeedsFix</code>, only to later move back to <code>NeedsDecision</code> as complexities arise.</p> <p>An issue may be closed at any time, with a comment to indicate the reason for closure (\"fixed by \u2026\", \"duplicate of \u2026\", \"working as intended\", etc).</p> <p>At any state (except New) the issue may be assigned to someone. Unassigned issues are considered available for anyone to address.</p>"},{"location":"HandlingIssues/#milestones","title":"Milestones","text":"<p>Milestones describe the timeline for issue resolution.</p> <ul> <li> <p>Go1.x.y</p> <p>Planned to be fixed in release 1.x.y.</p> </li> <li> <p>Go1.x.y with release-blocker label</p> <p>Must be fixed for release 1.x.y, or explicitly postponed to a later release.</p> </li> <li> <p>Proposal</p> <p>Is a proposal and does not pertain to a specific release.</p> </li> <li> <p>Backlog</p> <p>Someone has plans to work on it, but it is not assigned to a release milestone yet.</p> </li> <li> <p>Unplanned</p> <p>Might be fixed at some point, but nobody is planning to do it.</p> </li> <li> <p>Unreleased</p> <p>Is not included in or needed by a release.</p> </li> <li> <p>Gccgo</p> <p>For gccgo issues.</p> </li> </ul> <p>Additional milestones may be used to manage specific project work.</p> <p>The label \"Soon\" is used independently of milestones to indicate that the issue is time-sensitive.</p>"},{"location":"HandlingIssues/#proposals","title":"Proposals","text":"<p>Changes to the language or the standard library API go through the proposal process. In the issue tracker a proposal will normally have the <code>Proposal</code> label and be in the <code>Proposal</code> milestone.</p> <p>A proposal that suggests a backward-incompatible change to a library will have the <code>v2</code> label, meaning that it can only be adopted if there is a v2 version of the package (or, in the distant future, a v3 version).</p> <p>A proposal that suggests a change to the language should have the <code>LanguageChange</code> label. Minor language changes are handled as part of the regular proposal process. Larger language changes are handled by a language review process; those issues should have a <code>LanguageChangeReview</code> label.</p>"},{"location":"HostedContinuousIntegration/","title":"HostedContinuousIntegration","text":"<p>A number of hosted continuous integration platforms have support for Go</p> Provider Documentation Notes AppVeyor docs Windows CircleCI docs howto-1 howto-2 Codeship docs drone.io docs open-source version Jenkins docs Magnum CI docs Travis CI docs howto, go-client-api Azure Devops docs Wercker docs"},{"location":"How-to-ask-for-help/","title":"How-to-ask-for-help","text":"<p>This page gives some hints on how to successfully ask for help in the various Go support forums.</p>"},{"location":"How-to-ask-for-help/#before-you-ask-your-question","title":"Before you ask your question","text":"<p>Before asking for help, please check that you've addressed the following common issues:</p>"},{"location":"How-to-ask-for-help/#always-check-all-errors","title":"Always check all errors","text":"<p>Always check all errors. It is common to see problems reported related to nil panics due to code like this <pre><code>result, err := somefunction()\nif err != nil {\n      log.Println(\"oops an error happened\", err)\n      // return is missing here\n}\n// the code then continues to use result which is invalid.\n</code></pre> or <pre><code>result, _ := somefunction()\n// code uses result which might be invalid\n</code></pre> You should make sure it is clear that your code is correctly handling all error conditions before asking for help.</p> <p>Further reading: - Error handling and Go </p>"},{"location":"How-to-ask-for-help/#check-that-your-code-is-free-from-data-races","title":"Check that your code is free from data races","text":"<p>Unexpected runtime panics are often caused by data races in your program. If your program contains a data race you need to address the race before asking for help.</p> <p>If your program has good test coverage you can test for races by adding the <code>-race</code> flag to your <code>go test</code> invocation.</p> <p>If your program does not have good test coverage or the crash only happens when running the program, you can build a race enabled version of your program by passing <code>-race</code> to your <code>go build</code> or <code>go install</code> invocation.</p> <p>The behaviour of a Go program with a data race is undefined. There are no safe data races in Go programs.</p> <p>Further reading: - Introducing the race detector</p>"},{"location":"How-to-ask-for-help/#asking-questions","title":"Asking questions","text":"<p>The best way to get help is to show </p> <ol> <li>What you did, ideally with a small complete, stand-alone, example.    If you ran a command, show the command that you ran. If your program failed, provide the source of the program that failed. If the program is too large, or you cannot share the source, instead provide a self contained, runnable example, that demonstrates the problem.</li> <li>What you expected to happen. If you expected the command to complete successfully, say that. If you expected the program to produce a particular output, give an example of the output you expected.</li> <li>What happened instead.   If the command failed, include the full output of the failure, not just a single line that you though was the cause. If the program failed to produce the expected output, include what it did output.</li> </ol>"},{"location":"How-to-ask-for-help/#additional-tips","title":"Additional tips","text":"<ul> <li>If you are posting the output of a command, paste the text, not a screenshot of the text. If it's actually an image, that's ok.</li> <li>If you are posting a large amount of output, you may consider using a pastebin or gist service.</li> <li>When posting code samples, use the Go playground (unless it is unavailable in your country).</li> </ul>"},{"location":"HowToAsk/","title":"HowToAsk","text":""},{"location":"HowToAsk/#a-quick-introduction","title":"A quick introduction","text":"<p>Imagine you want to know how to get from \"Old street\" to \"New street\". You call a random person to get help and you ask \"What is the fastest way I can get from Old street 19 to New street 3?\". Would the random person be able to help you?</p> <p>There are a lot of \"New\" and \"Old\" streets in the world, so first he would need to know what country and city you are in. If the street layout is complicated then maybe you need to name some buildings that are near you. Of course because speed is an issue then your means of transportation is also important; are you by foot, bike, car or truck? You can go on foot into places where you can't get by truck.</p> <p>Those questions around the immediate question \"How do I X?\" is the context of the problem, it helps other people orient to the problem. Giving advice without context could mean that the other person will describe the wrong city.</p> <p>In person it's easy to ask those questions and can be done in rapid succession, although on the forums this will result in a lot of back-and-forth questions that can be avoided. So, how to properly give the context to the problem?</p>"},{"location":"HowToAsk/#how-to-ask-a-good-question","title":"How to ask a good question","text":"<p>People on the forums have limited time available. So, to speed things up, here is a small template for asking a question that will get better answers and answers quicker:</p> <p>The gist of the problem you are having.</p>  How did you encounter the problem? What are you trying to accomplish? What is the context of the problem? What are the requirements for the solution? What are the context-specific constraints/properties? Your compilable and runnable example on play.golang.org  Other notes about the situation (production/school/playing/learning) <p>Things to keep in mind:</p> <ul><li>Take your time to spell-check and make sure that your sentences are readable. </li><li>The solution can be far away from the immediate problem. So be sure that the question contains answers to the 5 whys. The template implicitly already contains answers to 3 whys. </li><li>The context of the question is important, so always give one. Not giving the context may end up hurting you, because you\u2019ll get an answer that\u2019s more suited to a different context. The context is the end-user or domain problem and goal, with the information how it tries to solve it. </li><li>Try not to ask abstract questions but if you do then add multiple concrete examples. Asking abstract things without concrete examples (usually) wastes time. Although they can be sometimes interesting, the concrete examples allow the discussion to be precise. </li><li>Avoid imprecise terms such as \"a lot of data\" or \"needs to work fast\". Give something measurable such as \"it needs to work upto 1GB of data\" or \"it needs to communicate with 1000 concurrent clients within 100ms\". </li><li>If you are not able to give the compilable example in go, any language will do... many people are well versed in other languages. If you are not able to make it compile or run, it's fine too. </li><li>Try to explain your situation: <ul><li>Noting that \"it is homework\" means people can explain a bit more and won't do the homework for you. </li><li>Information such as \"it needs to work on a cluster of X nodes\" can provide situational context. Where and how the code must eventually run. </li><li>Noting that \"it\u2019s for learning X\" makes it clear that you are trying to get a deeper understanding of different approaches. </li><li>Noting that \"I\u2019m under NDA and can\u2019t disclose the code\", means people won\u2019t bother asking for it. Although you should still try to come up with a similar situation, it helps the answerer. </li></ul></li><li>Giving a simplified example can be helpful for readers, but do not forget to give the full version as well. The simplified version is different from the full version and therefore the solutions can be different.</li></ul> <p>Of course, don't worry too much\u2026 you can't answer all possible questions. It's not needed to write a 4 page essay on the whole thing. People can always ask when something needs clarification. </p> The story of a bad question <p>Why is that template necessary? Let's put you in the shoes of the answerer, and let's say you get this question: </p> How do I use the reflect <code>Set</code> method? <p>From the askers perspective this may look like a straightforward problem. Of course, you have no idea what the asker is trying to do. Is he trying to set a value on a value, struct, array or a map? This means you need to ask the first question: Can you give an example?.  Now the asker will provide an example: </p> I'm basically trying to do this: <pre><code>    m := make(map[string]int)\n    v := reflect.ValueOf(m)\n    key := reflect.ValueOf(\"hello\")\n    val := reflect.ValueOf(123)\n    v.MapIndex(k).Set(val)\n    print(m)\n</code></pre> But it just panics. <p>Now you've got some code that even doesn't compile. This means you need to copy paste it somewhere and fix the mistakes. Putting it on play.golang.org makes it easier to see the problem (e.g. play.golang.org/p/fCxBlL9V4Y). The fix is simple; just use <code>SetMapIndex</code> instead. Of course that may not be the full story. The asker now comes back with another problem: </p> Yay, I've got the reflection working, but it's not fast enough. How can I make it faster? <p>What does \"faster\" mean? What is he trying to do? So you need to ask more about the specifics of the problem. So you ask: What are you trying to accomplish?</p> I'm trying to implement a set package that can store generic types. <p>Well, ok, but that still didn't answer why it needs to be faster. Why is he using <code>reflect</code> for that anyway, when you can use <code>map</code> instead. So you answer: Can't you just use <code>map</code> instead (e.g. <code>map[type]struct{}</code>)? What are you writing the <code>set</code> package for?.</p> I'm writing a program that goes over multiple sequences and that finds the common elements. The main use for is for using on nucleotides and it should work on large datasets. But it should also work on proteins, which are represented by another type. Yes, the <code>map[NucleotideIndex]struct{}</code> works a bit better, but it's still not fast enough, and I would now have to write the same code for proteins. <p>Finally we have all the information that's needed. The solution is straightforward: <code>biogo</code> https://code.google.com/p/biogo/ has most of the stuff necessary for handling large datasets and parallelism etc. Also what's the \"<code>NucleotideIndex</code>\". The asker may have found the answer and say: Thanks that's really nice. but there is a possibility of: </p> Whoa, that looks nice, but I'm in a bioinformatics course and we need to write that code ourselves. The \"<code>NucleotideIndex</code>\" is a \"<code>struct {Nucleotide Nucleotide; Index int}</code>\". <p>That looks weird, why would you do it that way. Nevertheless we've all done something stupid, so\u2026 now you can start suggesting something better: Probably dealing with <code>map[Type]map[int]struct{}</code> would be much easier. Because you are dealing with sequences and the set elements are always used in an increasing order you can just store the index in an array e.g. <code>map[Type][]int</code>. Also if the memory starts to become the problem you could make it into a run-length-encoded set\u2026</p> <p>Now we can have a more meaningful discussion about the (dis)advantages of different set types.  Hopefully after this long example, you probably understand why it's useful to provide more information. The initial back and forth questions could have been avoided. Proper question could have saved time for the question asker and the answerer.  The initial question could have been: </p> How do I use the reflect <code>Set</code> method with <code>MapIndex</code>?  I'm trying to set a value on a generic map for a set package. But it just gives a panic when I try to do that. play.golang.org/p/fCxBlL9V4Y  I use the set package in a program that goes over multiple sequences and find all the common elements in a sequence. The sequence elements could be nucleotides or proteins. The program needs to be able to deal with data-sizes upto 1GB.  My current code is available at github.com/...   I'm writing this for a bioinformatics course, so I need to implement it myself. <p>Summary: </p> <ul><li>The best answer depends on the context. In some cases maybe research.swtch.com/sparse would be more appropriate. If the speed isn't important using a <code>map</code> would be sufficient. So the requirements are also important. </li><li>The problem can be somewhere else. As you saw the answerer didn't expect that the structure of the program was at fault. Using a struct <code>NucleotideIndex</code> with a <code>map</code>, meant he had to build elaborate things with reflection. Often when you fix the higher-level problem, everything else will become much easier. </li><li>Constraints/properties matter. The property \"set elements are used in increasing order\" meant that there was a simple method that didn't require a full-blown <code>set</code> implementation. This specialized structure can be much faster. The information about the system, context or domain may make the problem much simpler. </li><li>The solution may differ from your usual approaches. Maybe the asker decided to use <code>reflect</code> package, because he was used to generics in Java. Go is different language, so the final solution may look a lot different from the solution in Java.</li></ul> More tips <p><li>Smart questions </li><li>Short, Self Contained, Correct (Compilable), Example"},{"location":"IDEsAndTextEditorPlugins/","title":"Editors and IDEs for Go","text":""},{"location":"IDEsAndTextEditorPlugins/#popular","title":"Popular","text":"<p>The Go Developer Survey showed these as the most popular editors.   * Visual Studio Code: Free &amp; open source IDE by Microsoft. Visual Studio Code supports Go syntax highlighting out of the box. Additional features are provided by the official vscode-go plugin.   * GoLand: JetBrains's cross-platform, fully featured Go IDE (commercial). Free for students, teachers, open-source developers, and user-groups (see details). Also available as part of IntelliJ IDEA Ultimate.</p> <ul> <li>Vim &amp; Neovim: Vi Improved. There are a number of plugins available that make editing Go code easier.<ul> <li>The vim-go plugin includes misc/vim and has many other new improvements.</li> <li>ALE for linting, async</li> <li>coc for code completion</li> <li>The tagbar plugin uses Gotags, above, to show an outline of the current file</li> <li>A vim compiler plugin for syntax checking</li> <li>A vim-godef plugin integrates with the 'godef' tool, above</li> <li>A vim-go-extra is vim plugin based on misc/vim in go repository. This works fine on windows too!</li> <li>The go-ide is a Neovim configuration file that ties go related plugins together making autocomplete, auto-importing, snippets, code formatting, and file search/browsing easier.</li> <li>govim is an LSP-driven vim plugin for Go development, written in Go using Vim8\u2019s channel support.</li> </ul> </li> <li>Emacs: Extensible and customizable text editor. It has generic LSP support that works well with gopls, the official Go language server.<ul> <li>LSP Mode provides LSP support with a batteries-included approach, with many integrations enabled \u201cout of the box\u201d and several additional behaviors provided by lsp-mode itself.</li> <li>Eglot provides LSP support with a minimally-intrusive approach, focusing on smooth integration with other established packages. It provides a few of its own eglot- commands but no additional keybindings by default.</li> <li>Mode file maintained at dominikh/go-mode.el.</li> <li>GoFlyMake Flymake-style syntax checking for Go</li> <li>go-errcheck.el Errcheck integration for Emacs</li> <li>flycheck-metalinter Flycheck integration for go-metalinter utility</li> <li>go-playground Local playground inside Emacs</li> </ul> </li> </ul>"},{"location":"IDEsAndTextEditorPlugins/#less-popular","title":"Less popular","text":"<p>These editors are less popular, and may have less modern Go support. In particular, they may not support Go modules.   * Atom: JavaScript-based editor from GitHub. Go support at go-plus   * BBEdit: free text editor for macOS (with paid upgrade for pro features).      * Go support available with the Go-bbpackage module including syntax highlighting, clippings, ctags standard library completion, and tools   * Brackets: a modern, open source text editor that understands web design.     * go-ide Go support with autocompletion through gocode.   * Chime: Capable. Focused. Fast. A Go editor for macOS.   * CodeLobster IDE Smart free cross-platform IDE with built-in Go support   * CodePerfect 95: A blazing fast IDE for Go.   * jEdit: open-source, cross-platform text editor written in Java. Syntax-highlighting file available.   * Kate Kate is an advanced, cross-platform text editor developed by KDE, with Go support out-of-the-box.   * Komodo IDE Powerful cross-platform IDE with built-in Go support   * Komodo Edit Powerful cross-platform text editor, Go-lang support available via plugin   * LiteIDE: A simple, open source and cross-platform Go IDE   * Micro: A modern and intuitive terminal-based text editor written in Go     * Go language support (gofmt and goimports) via plugin   * Notepad++: Free source code editor for Windows.     * notepadplus-go Syntax highlighting, functions list panel (for code browsing), code completion for keywords &amp; builtins.     * The GOnpp plugin (available via Notepad++'s built-in Plugin Manager) provides code completion (requires gocode), function calltips, goimports integration, and keyboard shortcuts for common go commands. [sources, binaries].     * GoAutocomplete is another code completion plugin.   * Nova: Native Mac code editor.     * Go Language Definition for Nova \u2014 Go syntax highlighting and interface with the Language Server Protocol (LSP) using Google's official <code>gopls</code> language server for Go (if installed).     * Go Tools \u2014 Run <code>goimports</code> on save or via a command. Syntax highlighting for Go.   * Source Insight: Commercial programming editor &amp; code browser with built-in live analysis for C, C++, C#, Java, and more; helping you understand large projects.     * golang.xclf is a Custom Language file adding syntax formatting and some parsing support to Source Insight for Go language.   * Sublime Text: Commercial text editor.     * (Sublime Text 4 only) LSP + gopls is a plugin collection with IDE-like features available.     * GoSublime is a plugin collection with IDE-like features available.     * Golang Build is the official Sublime Text package for Go build system integration.   * Textadept:  Textadept is a fast, minimalist, and remarkably extensible cross-platform text editor. Supports Go syntax highlighting out of the box.   * TextMate: Commercial text editor for macOS. Source code available under the GPLv3. Bundle for Go available.   * Zed: Code at the speed of thought.</p>"},{"location":"IDEsAndTextEditorPlugins/#cloud-based-ides","title":"Cloud Based IDEs","text":"<ul> <li>Cloud9: claims full Go support.</li> <li>Gitpod: GitHub integrated cloud IDE with full Go support.</li> </ul>"},{"location":"InstallFromSource/","title":"InstallFromSource","text":""},{"location":"InstallFromSource/#introduction","title":"Introduction","text":"<p>This is a companion to https://go.dev/doc/install/source providing additional instructions for various operating systems.</p>"},{"location":"InstallFromSource/#install-c-tools","title":"Install C tools","text":"<p>On OS X, a C compiler is bundled in the command line tools for Xcode, and you don't need to install the whole Xcode to compile Go. If you have already installed Xcode 4.3+, you can install command line tools from the Components tab of the Downloads preferences panel. In more recent versions of Xcode, you can use <code>xcode-select --install</code> command to install the command line tools without opening Xcode. To verify you have a working compiler, just invoke <code>gcc</code> in a freshly created Terminal window, unless you see the <code>\"gcc: command not found\"</code> error, you are ready to go.</p> <p>On Ubuntu/Debian, use <code>sudo apt-get install gcc libc6-dev</code>. If you want to build 32-bit binaries on a 64-bit system you'll also need the <code>libc6-dev-i386</code> package.</p> <p>On RedHat/Centos 6, use <code>sudo yum install gcc glibc-devel</code>. If you want to build 32-bit binaries on a 64-bit system you'll need both <code>glibc-devel.i386</code> and <code>glibc-devel.x86_64</code> packages.</p> <p>On Windows, install <code>gcc</code> with TDM-GCC. or try TDM-GCC Sourceforge link. (Make sure you add its <code>bin</code> subdirectory to your <code>PATH</code>.) Go does not support the Cygwin toolchain.</p>"},{"location":"InstallTroubleshooting/","title":"InstallTroubleshooting","text":""},{"location":"InstallTroubleshooting/#introduction","title":"Introduction","text":"<p>There are many times in which you may install Go (either from source or from a binary distribution) and things don't work quite right.  This page is meant to collect some common wisdom about problems that are relatively common or difficult to diagnose and provide tips and solutions.</p>"},{"location":"InstallTroubleshooting/#contents","title":"Contents","text":"<ul> <li>Introduction</li> <li>Tips<ul> <li>Environment variables</li> </ul> </li> <li>Troubleshooting<ul> <li>Still need help?</li> </ul> </li> </ul>"},{"location":"InstallTroubleshooting/#tips","title":"Tips","text":""},{"location":"InstallTroubleshooting/#environment-variables","title":"Environment variables","text":"<p>There are several environment variables that can be set to configure your Go installation: see https://pkg.go.dev/cmd/go#hdr-Environment_variables.</p> <p>Normally none of them need to be set.</p> <p>That said, the default for <code>GOROOT</code> is the root of your Go installation. The default for <code>GOPATH</code> is the directory named \"go\" in your home directory. The <code>GOPATH</code> directory should not be set to, or contain, the <code>GOROOT</code> directory.</p> <p>If you have installed Go in the \"go\" directory in your home directory, running the go tool will print a warning. You should either move the Go installation, or set the <code>GOPATH</code> environment variable to some other directory.</p> <p>For example, on a Unix system:</p> <pre><code>&gt; go run hello.go\nwarning: GOPATH set to GOROOT (/home/username/go) has no effect\nHello, world\n&gt; GOPATH=/home/username/gopath\n&gt; export GOPATH\n&gt; go run hello.go\nHello, world\n</code></pre>"},{"location":"InstallTroubleshooting/#troubleshooting","title":"Troubleshooting","text":""},{"location":"InstallTroubleshooting/#the-go-build-command-doesnt-do-anything","title":"The <code>go build</code> command doesn't do anything!","text":"<p>The <code>go build</code> command will only produce a binary; if you run go build in a package directory, it will build the package normally (and report any compile errors), but it will not install it.  For that, you use <code>go install</code>.  If you think you're building a binary and none is produced, make sure you are in package <code>main</code> and that you do not have GOBIN set.</p>"},{"location":"InstallTroubleshooting/#why-does-go-get-report-fetching-httpsruntimecgogo-get1","title":"Why does <code>go get</code> report <code>\"Fetching https://runtime/cgo?go-get=1\"</code>?","text":"<p>If you have a source distribution, make sure that your packages are up-to-date.  Also double check the environment above.</p>"},{"location":"InstallTroubleshooting/#when-cross-compiling-i-get-runtimeexterngo135-undefined-thegoos","title":"When cross compiling, I get <code>\"runtime/extern.go:135: undefined: theGoos\"</code>","text":"<p>Read WindowsCrossCompiling for some helpful scripts.  You can also use the <code>--no-clean</code> argument when you're building the cross-compile toolchain via <code>make.bash</code>.</p>"},{"location":"InstallTroubleshooting/#why-does-go-get-work-for-some-packages-and-report-permission-denied-in-goroot-for-some-others-with-gopath-set-properly","title":"Why does <code>go get</code> work for some packages and report <code>permission denied</code> in <code>$GOROOT</code> for some others (with GOPATH set properly)?","text":"<p>If you at any point installed the package in <code>GOROOT</code> (either by having no <code>GOPATH</code> set or by including <code>GOROOT</code> itself in <code>GOPATH</code>) then there might still be a directory in <code>$GOROOT</code> (which is always checked first) that is overriding your <code>GOPATH</code>.  To verify, run <code>go list -f {{.Dir}} importpath</code> and if it reports a directory under <code>$GOPATH</code> try deleting that first.</p>"},{"location":"InstallTroubleshooting/#still-need-help","title":"Still need help?","text":"<p>Visit us on IRC or ask on the mailing list.  You will want to provide the output of the following commands, in addition to any errors you are getting:</p>"},{"location":"InstallTroubleshooting/#linuxdarwin","title":"Linux/darwin","text":"<pre><code>go version\ngo env\nenv | grep GO\n</code></pre>"},{"location":"InstallTroubleshooting/#windows","title":"Windows","text":"<pre><code>go version\ngo env\nset | findstr GO\n</code></pre>"},{"location":"InterfaceSlice/","title":"InterfaceSlice","text":""},{"location":"InterfaceSlice/#introduction","title":"Introduction","text":"<p>Given that you can assign a variable of any type to an <code>interface{}</code>, often people will try code like the following. <pre><code>var dataSlice []int = foo()\nvar interfaceSlice []interface{} = dataSlice\n</code></pre> This gets the error <pre><code>cannot use dataSlice (type []int) as type []interface { } in assignment\n</code></pre></p> <p>The question then, \"Why can't I assign any slice to an <code>[]interface{}</code>, when I can assign any type to an <code>interface{}</code>?\"</p>"},{"location":"InterfaceSlice/#why","title":"Why?","text":"<p>There are two main reasons for this.</p> <p>The first is that a variable with type <code>[]interface{}</code> is not an interface! It is a slice whose element type happens to be <code>interface{}</code>. But even given this, one might say that the meaning is clear.</p> <p>Well, is it? A variable with type <code>[]interface{}</code> has a specific memory layout, known at compile time.</p> <p>Each <code>interface{}</code> takes up two words (one word for the type of what is contained, the other word for either the contained data or a pointer to it). As a consequence, a slice with length N and with type <code>[]interface{}</code> is backed by a chunk of data that is N*2 words long.</p> <p>This is different than the chunk of data backing a slice with type <code>[]MyType</code> and the same length. Its chunk of data will be N*sizeof(MyType) words long.</p> <p>The result is that you cannot quickly assign something of type <code>[]MyType</code> to something of type <code>[]interface{}</code>; the data behind them just look different.</p>"},{"location":"InterfaceSlice/#what-can-i-do-instead","title":"What can I do instead?","text":"<p>It depends on what you wanted to do in the first place.</p> <p>If you want a container for an arbitrary array type, and you plan on changing back to the original type before doing any indexing operations, you can just use an <code>interface{}</code>. The code will be generic (if not compile-time type-safe) and fast.</p> <p>If you really want a <code>[]interface{}</code> because you'll be doing indexing before converting back, or you are using a particular interface type and you want to use its methods, you will have to make a copy of the slice. <pre><code>var dataSlice []int = foo()\nvar interfaceSlice []interface{} = make([]interface{}, len(dataSlice))\nfor i, d := range dataSlice {\n\tinterfaceSlice[i] = d\n}\n</code></pre></p>"},{"location":"InvalidFlag/","title":"InvalidFlag","text":"<pre><code>invalid flag in #cgo CFLAGS\n</code></pre> <p>This page describes the background for build errors like <code>invalid flag in #cgo CFLAGS</code> and what you can do about them.</p> <p>CVE-2018-6574 described a potential security violation in the go tool: running <code>go get</code> downloads and builds Go code from the Internet, Go code that uses cgo can specify options to pass to the compiler, so careful use of <code>-fplugin</code> can cause <code>go get</code> to execute arbitrary code.  While it is difficult to block every possible way that the compiler might be attacked, we have chosen to block the obvious ones.</p> <p>As described at issue 23672, this is done by using a safelist of compiler/linker options that are permitted during <code>go get</code>, <code>go build</code>, and friends.  When cgo code tries to use to pass an option that is not on the safelist, the go tool will report an error <code>invalid flag in #cgo CFLAGS</code> (or <code>#cgo LDFLAGS</code>, <code>pkg-config --cflags</code>, <code>pkg-config --ldflags</code>, and so forth).</p> <p>This safelist is new in releases 1.8.7, 1.9.4, and 1.10, and all subsequent releases.</p>"},{"location":"InvalidFlag/#what-can-i-do","title":"What can I do?","text":"<p>If this happens to you, and the option is benign, you should do two things: 1. Set the environment variable <code>CGO_CFLAGS_ALLOW</code> (or <code>CGO_LDFLAGS_ALLOW</code>, <code>CGO_CXXFLAGS_ALLOW</code>, and so forth) to a regexp that matches the option. 2. File a bug requesting that the option be added to the safelist.  Be sure to include the complete error message and, if possible, a description of the code you are building.</p>"},{"location":"InvalidFlag/#why-not-use-an-unsafe-list","title":"Why not use an unsafe list?","text":"<p>Because if some new unsafe option is added to a compiler, all existing Go releases will become immediately vulnerable.</p>"},{"location":"InvalidFlag/#why-not-get-a-complete-list-of-compiler-options-and-safelist-all-of-them","title":"Why not get a complete list of compiler options and safelist all of them?","text":"<p>Because there are hundreds of options, and there is no clear way to get a complete list.  Many compiler and linker options are target dependent, and thus only reported on specific platforms or in specific configurations.  The documentation is known to be incomplete.</p>"},{"location":"Iota/","title":"Iota","text":""},{"location":"Iota/#summary","title":"Summary","text":"<p>Go's <code>iota</code> identifier is used in <code>const</code> declarations to simplify definitions of incrementing numbers. Because it can be used in expressions, it provides a generality beyond that of simple enumerations.</p> <p>The value of iota is reset to 0 whenever the reserved word <code>const</code> appears in the source (i.e. each const block) and incremented by one after each ConstSpec e.g. each Line.  This can be combined with the constant shorthand (leaving out everything after the constant name) to very concisely define related constants.</p> <p>Iota: https://go.dev/ref/spec#Iota</p> <p>Constant declarations: https://go.dev/ref/spec#Constant_declarations</p>"},{"location":"Iota/#examples","title":"Examples","text":"<p>The official spec has two great examples:</p> <p>https://go.dev/ref/spec#Iota</p> <p>Here's one from Effective Go:</p> <pre><code>type ByteSize float64\n\nconst (\n\t_           = iota // ignore first value by assigning to blank identifier\n\tKB ByteSize = 1 &lt;&lt; (10 * iota)\n\tMB\n\tGB\n\tTB\n\tPB\n\tEB\n\tZB\n\tYB\n)\n</code></pre> <p>Weekday enum example - How iota is calculated - From Learn Go Programming Blog:</p> <p></p>"},{"location":"Iota/#articles","title":"Articles","text":"<ul> <li>Ultimate Visual Guide to Go Enums and Iota 2017-10-09</li> </ul>"},{"location":"LUCI/","title":"LUCI","text":"<p>LUCI is the CI infrastructure for the Go project. The primary post-submit dashboard can be found at https://ci.chromium.org/p/golang.</p>"},{"location":"LUCI/#trybots","title":"TryBots","text":"<p>Voting Commit-Queue+1 asks CQ to run the CL on the TryBots.</p> <p>When the TryBots finish, CQ will reply with results,  voting either LUCI-TryBot-Result+1 (pass) or LUCI-TryBot-Result-1 (fail).  Important results (e.g. failures) will also appear as chips at the top  of the Gerrit page for the CL, under the commit message.</p> <p></p> <p>When you open failed test results for the first time, you will land on the \"Overview\" tab. You probably want to change your local config to default to the \"Test Results\" tab:</p> <p></p> <p>Back in Gerrit, more details about what was run are available at the \"Checks\" tab on the Gerrit CL page.</p> <p></p> <p>Every TryBot run includes a default set of the most common builders. SlowBots provide additional testing controls.</p>"},{"location":"LUCI/#troubleshooting","title":"Troubleshooting","text":""},{"location":"LUCI/#infra-failed--purple-failure","title":"\"infra failed\" / purple failure","text":"<p>Builders that fail with \"infra failed\" have a purple chip rather than green (passed) or red (tests failed). These failures indicate some kind of failure in the CI infrastructure itself. They are unlikely to be due to something in your CL.</p> <p>If you encounter such errors, you can reach out to golang-dev for help investigating them. You may also try rerunning the build, which may succeed on a subsequent run depending on the cause of the infra failure.</p>"},{"location":"LUCI/#build-details","title":"build details","text":"<p>The \"Steps &amp; Logs\" section on a LUCI build page enumerates steps that were executed. Each step can be expanded to get to its logs, environment variables, and command line arguments. The \"get go\" step includes the output of <code>go env</code> from the Go toolchain used in the build.</p>"},{"location":"Learn/","title":"Learn","text":"<p>In addition to the resources available at golang.org there are a range of community-driven initiatives:</p> <ul> <li>Boot.dev's \"Learn Go\" - Code in the browser exercises with answer checking</li> <li>Essential Go \u2013 a free book about Go programming language. </li> <li>Go in 5 Minutes</li> <li>The Little Go Book</li> <li>Tutorials Point</li> <li>Exercism.io - Go - Online code exercises for Go for practice and mentorship.</li> <li>EXLskills - A$AP Learn Go - Fast-paced free and open course for getting going with Go</li> <li>Learn Go in an Hour - Video 2015-02-15</li> <li>Learning to Program in Go, a multi-part video training class.</li> <li>Learn Go with Tests - An introduction to Go using a TDD approach.</li> <li>Pluralsight Classes for Go - A growing collection of (paid) online classes.</li> <li>Ardan Labs Training - Commercial, live instruction for Go programming.</li> <li>O'Reilly Go Fundamentals - Video learning path for Go programming.</li> <li>Go By Example provides a series of annotated code snippets.</li> <li>Learn Go in Y minutes is a top-to-bottom walk-through of the language.</li> <li>Workshop-Go - Startup Slam Go Workshop - examples and slides.</li> <li>Go Fragments - A collection of annotated Go code examples.</li> <li>50 Shades of Go: Traps, Gotchas, Common Mistakes for New Golang Devs</li> <li>Free Go Language Workshop Framework Training is running regular free BYOD workshops in London, UK</li> <li>Golang Tutorials - A free online class.</li> <li>Rob Pike's 2011 three day course - Day 1, Day 2, Day 3 (links are broken, use the archived links from the wayback machine. Day 1, Day 2, Day 3)</li> <li>The Go Bridge Foundry - A member of the Bridge Foundry family, offering a complete set of free Go training materials with the goal of bringing Go to under-served communities.</li> <li>Golangbot - Tutorials to get started with programming in Go.</li> <li>Master Go - A paid online video course on Go for developers</li> <li>Learn to Create Web Applications using Go - A paid online video course and book about Web programming with Go</li> <li>Learn Go Programming - Weekly visual and concise tutorials for programming in Go.</li> <li>Gophercises - coding exercises for budding gophers</li> <li>Algorithms to Go - Texts about algorithms and Go, with plenty of code examples.</li> <li>Games With Go - Video series teaching programming fundamentals with game related projects.</li> <li>Go Language Tutorials - List of popular sites, blogs and tutorials for learning Go language.</li> <li>Golang Development Video Course - A growing list of videos focused purely on Go development.</li> <li>Go: The Complete Bootcamp Course - Step by step and intuitive explanations for every aspect of Go using animations (Paid)</li> <li>Learning Golang - TutorialEdge - A growing list of articles and courses on the fundamentals of Go.</li> <li>Go Discourse - Another forum base on Go, without framework and ORM.</li> <li>\u062f\u0648\u0631\u0629 \u0644\u063a\u0629 \u063a\u0648 \u0628\u0627\u0644\u0639\u0631\u0628\u064a</li> <li>Apuntes de Golang en Espa\u00f1ol - Apuntes para aprender Go en Espa\u00f1ol desde Cero.</li> <li>Go Classes at Codecademy - Online courses introducing the basics of Go.</li> <li>Go Tutorial - W3Basic - A well organized and structured Golang Tutorials for Beginners and Professionals</li> </ul> <p>Learning resources for specific topics:   * LearnConcurrency outlines a course of study of Go's concurrency model and patterns.   * LearnErrorHandling links to resources about error handling in Go.   * LearnTesting links to resources about testing in Go.   * LearnServerProgramming links to resources about server programming in Go.   * Golang Online Courses - A collection of Go online courses from several providers at Classpert   * Hackr.io Golang Tutorials - Best Golang tutorials recommended by the programming community.</p>"},{"location":"LearnConcurrency/","title":"LearnConcurrency","text":"<p>This page links to resources for learning about concurrency in Go.  The items are presented in order, from beginner material to advanced topics.</p>"},{"location":"LearnConcurrency/#beginner","title":"Beginner","text":"<ul> <li>Read Effective Go: Concurrency</li> <li>Watch Simulating a real-world system in Go</li> <li>Study The Go Programming Language Specification, especially<ul> <li>Go statements</li> <li>Channel types</li> <li>Send statements</li> <li>Receive operator</li> <li>Select statements</li> </ul> </li> <li>Code A Tour of Go: Concurrency</li> <li>Read the Frequently Asked Questions (FAQ), especially<ul> <li>Why build concurrency on the ideas of CSP?</li> <li>Why goroutines instead of threads?</li> <li>Why are map operations not defined to be atomic?</li> <li>What operations are atomic? What about mutexes?</li> <li>Why doesn't my program run faster with more CPUs?</li> <li>How can I control the number of CPUs?</li> <li>What happens with closures running as goroutines?</li> </ul> </li> </ul>"},{"location":"LearnConcurrency/#intermediate","title":"Intermediate","text":"<ul> <li>Study Go by Example from goroutines through stateful goroutines</li> <li>Watch Go Concurrency Patterns</li> <li>Watch A Practical Guide to Preventing Deadlocks and Leaks in Go</li> <li>Read Share Memory By Communicating and do the codewalk</li> <li>Read Go Concurrency Patterns: Timing out, moving on</li> <li>Watch Concurrency is not Parallelism</li> <li>Read Go Concurrency Patterns: Pipelines and Cancellation</li> <li>Read Rethinking Classical Concurrency Patterns</li> <li>Study Package sync</li> <li>Read Introducing the Go Race Detector</li> <li>Watch Go: code that grows with grace</li> <li>Read Mutexes and Semaphores Demystified</li> </ul>"},{"location":"LearnConcurrency/#advanced","title":"Advanced","text":"<ul> <li>Watch Advanced Go Concurrency Patterns</li> <li>Read Advanced Go Concurrency Patterns</li> <li>Read Go Concurrency Patterns: Context</li> <li>Study The Go Memory Model</li> <li>Study Package atomic</li> <li>Read Principles of Designing Go APIs with Channels</li> <li>Read Advanced Go Concurrency Primitives</li> <li>Watch The Scheduler Saga</li> <li>Read The Scheduler Saga</li> <li>Watch Understanding Channels</li> <li>Read Understanding Channels</li> </ul>"},{"location":"LearnErrorHandling/","title":"LearnErrorHandling","text":"<p>This page links to resources about error handling in Go.</p>"},{"location":"LearnErrorHandling/#getting-started","title":"Getting Started","text":"<ul> <li>Read Effective Go: Errors</li> <li>Code A Tour of Go: Errors and do the exercise</li> <li>Study The Go Programming Language Specification: Errors</li> <li>Study Package errors</li> <li>Study func fmt.Errorf</li> </ul>"},{"location":"LearnErrorHandling/#standard-practice","title":"Standard Practice","text":"<ul> <li>Read Why does Go not have exceptions?</li> <li>Read Error handling and Go</li> <li>Read Go by Example: Errors</li> <li>Read Errors are values</li> <li>Read Working with Errors in Go 1.13</li> <li>Read golang/go/wiki: Errors</li> </ul>"},{"location":"LearnErrorHandling/#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Read Why is my nil error value not equal to nil?</li> <li>Read Defer, Panic, and Recover</li> </ul>"},{"location":"LearnServerProgramming/","title":"LearnServerProgramming","text":"<p>This page links to resources for learning about server programming in Go - both web services and mobile backends. The items are organized into sections by topic.</p>"},{"location":"LearnServerProgramming/#getting-started","title":"Getting Started","text":"<ul> <li>Read Writing Web Applications with the Go standard library</li> <li>Read Build a Web Application With Go from the author of the BeeGo web framework</li> <li>Read Webapps in Go the anti textbook</li> <li>Read Building Web Applications in Go from the author of the Negroni and Martini webserver toolkits. First learn the absolute basics before going to this book.</li> <li>Read Building Your Own Web Framework in Go a 5-part series.</li> <li>Watch Go: code that grows with grace</li> <li>Download a full working 3-tier application example from the Sourcegraph Team.</li> </ul>"},{"location":"LearnServerProgramming/#middleware","title":"Middleware","text":"<p>A topic you will see discussed frequently is \"middleware\". If you're not familiar with that term, we suggest you start out by reading a few of these articles:</p> <ul> <li>Middleware in Go: Best practices and examples 2014-11-13</li> <li>Custom Handlers Part 1 - Avoiding Globals, Part 2 - Error Handling 2014-07-16</li> <li>Making and Using HTTP Middleware 2014-10-21</li> <li>Writing HTTP Middleware in Go 2013-10-09</li> </ul>"},{"location":"LearnServerProgramming/#toolkits-and-frameworks","title":"Toolkits and Frameworks","text":"<p>Before you decide to adopt a third party web framework or toolkit, keep in mind that the Go standard library provides all of the tools you need to build a sophisticated, modern web application. Keeping with Go's preference for simplicity and composability over complexity and magic, we suggest you see how far the standard library can take you.</p> <p>If you decide you need a bit more infrastructure, start by looking at some of the toolkits and libraries available.</p>"},{"location":"LearnServerProgramming/#toolkits--libraries--microframeworks","title":"Toolkits &amp; Libraries &amp; Microframeworks","text":"<ul> <li>Gorilla Toolkit</li> <li>Negroni Toolkit - Idiomatic HTTP Middleware for Go</li> <li>Echo Framework - Fast and Unfancy</li> <li>Goji Web Microframework</li> <li>Go Craft Middleware</li> <li>Go RESTful - Toolkit for RESTful service APIs</li> <li>limiter - Simple rate-limiting middleware for Go</li> <li>Kite Micro-service framework</li> <li>Alice - Painless middleware chaining for Go</li> <li>YAM - Yet Another Mux</li> <li>Bone - Fast HTTP Router</li> </ul>"},{"location":"LearnServerProgramming/#frameworks","title":"Frameworks","text":"<ul> <li>BeeGo Framework</li> <li>Frodo - Go mini web framework inspired by Laravel(php), Slim(php) and ExpressJS(node.js)</li> <li>GinGonic</li> <li>Macaron - Productive, modular web framework in Go.</li> <li>Revel Web Framework</li> <li>Ringo - Lightweight MVC web framework inspired by Rails, Gin.</li> <li>Utron - Lightweight MVC framework for web applications.</li> <li>Iris - Fast MVC framework for web applications.</li> </ul>"},{"location":"LearnServerProgramming/#communication","title":"Communication","text":"<ul> <li>Package net/http provides HTTP client and server implementations.</li> <li>Package encoding/json implements encoding and decoding of JSON objects as defined in RFC 4627.</li> <li>Package net/rpc provides access to the exported methods of an object across a network or other I/O connection.</li> <li>Package os/exec runs external commands.</li> </ul>"},{"location":"LearnServerProgramming/#presentation","title":"Presentation","text":"<ul> <li>Package text/template implements data-driven templates for generating textual output.</li> <li>Package html/template implements data-driven templates for generating HTML output safe against code injection.</li> </ul>"},{"location":"LearnServerProgramming/#profiling-and-performance","title":"Profiling and Performance","text":"<ul> <li>Read Profiling Go Programs</li> <li>Read Arrays, slices (and strings): The mechanics of 'append'</li> <li>Read the Frequently Asked Questions (FAQ), especially<ul> <li>Why does Go perform badly on benchmark X?</li> <li>Why do garbage collection? Won't it be too expensive?</li> </ul> </li> <li>Package bufio implements buffered I/O.</li> <li>Package runtime/pprof writes runtime profiling data in the format expected by the pprof visualization tool.</li> <li>Package net/http/pprof serves via its HTTP server runtime profiling data in the format expected by the pprof visualization tool.</li> </ul>"},{"location":"LearnServerProgramming/#tracing-monitoring-logging-and-configuration","title":"Tracing, Monitoring, Logging, and Configuration","text":"<ul> <li>Package expvar provides a standardized interface to public variables, such as operation counters in servers.</li> <li>Package flag implements command-line flag parsing.</li> <li>Package log implements a simple logging package.</li> <li>Package glog implements logging analogous to the Google-internal C++ INFO/ERROR/V setup.</li> </ul>"},{"location":"LearnServerProgramming/#storage","title":"Storage","text":"<ul> <li>Package os provides a platform-independent interface to operating system functionality.</li> <li>Package path/filepath implements utility routines for manipulating filename paths in a way compatible with the target operating system-defined file paths.</li> <li>Package database/sql provides a generic interface around SQL (or SQL-like) databases.</li> </ul>"},{"location":"LearnServerProgramming/#platforms","title":"Platforms","text":""},{"location":"LearnServerProgramming/#google-cloud-platform","title":"Google Cloud Platform","text":"<ul> <li>Read Go, Cloud Endpoints and App Engine, Part 1, Part 2</li> <li>Read Google Cloud Platform: Go Runtime Environment</li> <li>Watch Go and the Google Cloud Platform</li> <li>Read Go on App Engine: tools, tests, and concurrency</li> <li>Get Google Cloud Platform Go Libraries</li> <li>Read Deploying Go servers with Docker</li> <li>Search packages for Google Cloud or gcloud</li> <li>Search packages for App Engine or GAE</li> </ul>"},{"location":"LearnServerProgramming/#amazon-web-services","title":"Amazon Web Services","text":"<ul> <li>The aws-sdk-go repository provides automatically generated AWS clients in Go.  It has official support from Amazon.</li> <li>Package goamz enables Go programs to interact with the Amazon Web Services.</li> <li>Search packages for AWS or Amazon services</li> </ul>"},{"location":"LearnServerProgramming/#microsoft-azure","title":"Microsoft Azure","text":"<ul> <li>Microsoft OpenTech's azure-sdk-for-go provides a Golang package that makes it easy to consume and manage Microsoft Azure Services.</li> <li>Search packages for Azure</li> </ul>"},{"location":"LearnServerProgramming/#openstack--rackspace","title":"Openstack / Rackspace","text":"<ul> <li>Gophercloud is a Golang SDK for working with OpenStack clouds.</li> <li>Search packages for Openstack or Rackspace</li> </ul>"},{"location":"LearnServerProgramming/#ibm-bluemix","title":"IBM BlueMix","text":"<ul> <li>Write your first Golang app on BlueMix</li> </ul>"},{"location":"LearnTesting/","title":"LearnTesting","text":"<p>This page links to resources about testing in Go.</p> <ul> <li>Read How to Write Go Code, especially Testing</li> <li>Study Package testing</li> <li>Read Why does Go not have assertions?</li> <li>Read Where is my favorite helper function for testing?</li> <li>Watch Testing Techniques</li> <li>Read TableDrivenTests</li> <li>Read Using Subtests and Sub-benchmarks</li> </ul>"},{"location":"Linux/","title":"Linux","text":""},{"location":"Linux/#go-on-linux","title":"Go on Linux","text":"Kernel version Architectures Initial support version Final support version TBD mips, mipsle Go 1.8 TBD s390x Go 1.7 4.8 or above mips64le Go 1.6 TBD mips64 Go 1.6 TBD arm64, ppc64, ppc64le Go 1.5 3.1 or above arm Go 1.1 * 2.6.23 or above amd64, 386 Go 1 * 5.19 or above loong64 Go 1.19 <p>* Go 1.5 or above is recommended.</p>"},{"location":"LinuxKernelSignalVectorBug/","title":"LinuxKernelSignalVectorBug","text":""},{"location":"LinuxKernelSignalVectorBug/#introduction","title":"Introduction","text":"<p>If you reached this page because of a message like this printed by a Go program:</p> <pre><code>runtime: note: your Linux kernel may be buggy\nruntime: note: see https://go.dev/wiki/LinuxKernelSignalVectorBug\nruntime: note: mlock workaround for kernel bug failed with errno &lt;number&gt;\n</code></pre> <p>then you are using a Linux kernel that may have a bug. This kernel bug may have caused memory corruption in your Go program, and may have caused your Go program to crash.</p> <p>If you understand why your program crashed, then you can ignore this page.</p> <p>Otherwise, this page will explain what the kernel bug is, and includes a C program that you can use to check whether your kernel has the bug.</p>"},{"location":"LinuxKernelSignalVectorBug/#bug-description","title":"Bug description","text":"<p>A bug was introduced in Linux kernel version 5.2: if a signal is delivered to a thread, and delivering the signal requires faulting in pages of the thread signal stack, then AVX YMM registers may be corrupted upon returning from the signal to the program. If the program was executing some function that uses the YMM registers, that function can behave unpredictably.</p> <p>The bug only happens on systems with an x86 processor. The bug affects programs written in any language. The bug only affects programs that receive signals. Among programs that receive signals, the bug is more likely to affect programs that use an alternate signal stack. The bug only affects programs that use the YMM registers. In Go programs in particular the bug will normally cause memory corruption, as Go programs primarily use the YMM registers to implement copying one memory buffer to another.</p> <p>The bug was reported to the Linux kernel developers. It was quickly fixed. The bug fix was not ported back to the Linux kernel 5.2 series. The bug was fixed in Linux kernel versions 5.3.15, 5.4.2, and 5.5 and later.</p> <p>The bug is only present if the kernel was compiled with GCC 9 or later.</p> <p>The bug is present in vanilla Linux kernel versions 5.2.x for any x, 5.3.0 through 5.3.14, and 5.4.0 and 5.4.1. However, many distros that are shipping those kernel versions have in fact backported the patch (which is very small). And, some distros are still compiling their kernel with GCC 8, in which case the kernel does not have the bug.</p> <p>In other words, even if your kernel is in the vulnerable range, there is a good chance that it is not vulnerable to the bug.</p>"},{"location":"LinuxKernelSignalVectorBug/#bug-test","title":"Bug test","text":"<p>To test whether your kernel has the bug, you can run the following C program (click on \"Details\" to see the program). On a buggy kernel, it will fail almost immediately. On a kernel without the bug, it will run for 60 seconds and then exit with a 0 status.</p> <pre><code>// Build with: gcc -pthread test.c\n//\n// This demonstrates an issue where AVX state becomes corrupted when a\n// signal is delivered where the signal stack pages aren't faulted in.\n//\n// There appear to be three necessary ingredients, which are marked\n// with \"!!!\" below:\n//\n// 1. A thread doing AVX operations using YMM registers.\n//\n// 2. A signal where the kernel must fault in stack pages to write the\n//    signal context.\n//\n// 3. Context switches. Having a single task isn't sufficient.\n\n##include &lt;errno.h&gt;\n##include &lt;signal.h&gt;\n##include &lt;stdio.h&gt;\n##include &lt;stdlib.h&gt;\n##include &lt;string.h&gt;\n##include &lt;unistd.h&gt;\n##include &lt;pthread.h&gt;\n##include &lt;sys/mman.h&gt;\n##include &lt;sys/prctl.h&gt;\n##include &lt;sys/wait.h&gt;\n\nstatic int sigs;\n\nstatic stack_t altstack;\nstatic pthread_t tid;\n\nstatic void die(const char* msg, int err) {\n  if (err != 0) {\n    fprintf(stderr, \"%s: %s\\n\", msg, strerror(err));\n  } else {\n    fprintf(stderr, \"%s\\n\", msg);\n  }\n  exit(EXIT_FAILURE);\n}\n\nvoid handler(int sig __attribute__((unused)),\n             siginfo_t* info __attribute__((unused)),\n             void* context __attribute__((unused))) {\n  sigs++;\n}\n\nvoid* sender(void *arg) {\n  int err;\n\n  for (;;) {\n    usleep(100);\n    err = pthread_kill(tid, SIGWINCH);\n    if (err != 0)\n      die(\"pthread_kill\", err);\n  }\n  return NULL;\n}\n\nvoid dump(const char *label, unsigned char *data) {\n  printf(\"%s =\", label);\n  for (int i = 0; i &lt; 32; i++)\n    printf(\" %02x\", data[i]);\n  printf(\"\\n\");\n}\n\nvoid doAVX(void) {\n  unsigned char input[32];\n  unsigned char output[32];\n\n  // Set input to a known pattern.\n  for (int i = 0; i &lt; sizeof input; i++)\n    input[i] = i;\n  // Mix our PID in so we detect cross-process leakage, though this\n  // doesn't appear to be what's happening.\n  pid_t pid = getpid();\n  memcpy(input, &amp;pid, sizeof pid);\n\n  while (1) {\n    for (int i = 0; i &lt; 1000; i++) {\n      // !!! Do some computation we can check using YMM registers.\n      asm volatile(\n        \"vmovdqu %1, %%ymm0;\"\n        \"vmovdqa %%ymm0, %%ymm1;\"\n        \"vmovdqa %%ymm1, %%ymm2;\"\n        \"vmovdqa %%ymm2, %%ymm3;\"\n        \"vmovdqu %%ymm3, %0;\"\n        : \"=m\" (output)\n        : \"m\" (input)\n        : \"memory\", \"ymm0\", \"ymm1\", \"ymm2\", \"ymm3\");\n      // Check that input == output.\n      if (memcmp(input, output, sizeof input) != 0) {\n        dump(\"input \", input);\n        dump(\"output\", output);\n        die(\"mismatch\", 0);\n      }\n    }\n\n    // !!! Release the pages of the signal stack. This is necessary\n    // because the error happens when copy_fpstate_to_sigframe enters\n    // the failure path that handles faulting in the stack pages.\n    // (mmap with MMAP_FIXED also works.)\n    //\n    // (We do this here to ensure it doesn't race with the signal\n    // itself.)\n    if (madvise(altstack.ss_sp, altstack.ss_size, MADV_DONTNEED) != 0)\n      die(\"madvise\", errno);\n  }\n}\n\nvoid doTest() {\n  // Create an alternate signal stack so we can release its pages.\n  void *altSigstack = mmap(NULL, SIGSTKSZ, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0);\n  if (altSigstack == MAP_FAILED)\n    die(\"mmap failed\", errno);\n  altstack.ss_sp = altSigstack;\n  altstack.ss_size = SIGSTKSZ;\n  if (sigaltstack(&amp;altstack, NULL) &lt; 0)\n    die(\"sigaltstack\", errno);\n\n  // Install SIGWINCH handler.\n  struct sigaction sa = {\n    .sa_sigaction = handler,\n    .sa_flags = SA_ONSTACK | SA_RESTART,\n  };\n  sigfillset(&amp;sa.sa_mask);\n  if (sigaction(SIGWINCH, &amp;sa, NULL) &lt; 0)\n    die(\"sigaction\", errno);\n\n  // Start thread to send SIGWINCH.\n  int err;\n  pthread_t ctid;\n  tid = pthread_self();\n  if ((err = pthread_create(&amp;ctid, NULL, sender, NULL)) != 0)\n    die(\"pthread_create sender\", err);\n\n  // Run test.\n  doAVX();\n}\n\nvoid *exiter(void *arg) {\n  sleep(60);\n  exit(0);\n}\n\nint main() {\n  int err;\n  pthread_t ctid;\n\n  // !!! We need several processes to cause context switches. Threads\n  // probably also work. I don't know if the other tasks also need to\n  // be doing AVX operations, but here we do.\n  int nproc = sysconf(_SC_NPROCESSORS_ONLN);\n  for (int i = 0; i &lt; 2 * nproc; i++) {\n    pid_t child = fork();\n    if (child &lt; 0) {\n      die(\"fork failed\", errno);\n    } else if (child == 0) {\n      // Exit if the parent dies.\n      prctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0);\n      doTest();\n    }\n  }\n\n  // Exit after a while.\n  if ((err = pthread_create(&amp;ctid, NULL, exiter, NULL)) != 0)\n    die(\"pthread_create exiter\", err);\n\n  // Wait for a failure.\n  int status;\n  if (wait(&amp;status) &lt; 0)\n    die(\"wait\", errno);\n  if (status == 0)\n    die(\"child unexpectedly exited with success\", 0);\n  fprintf(stderr, \"child process failed\\n\");\n  exit(1);\n}\n</code></pre>"},{"location":"LinuxKernelSignalVectorBug/#what-to-do","title":"What to do","text":"<p>If your kernel version is in the range that may contain the bug, run the C program above to see if it fails. If it fails, your kernel is buggy. You should upgrade to a newer kernel. There is no workaround for this bug.</p> <p>Go programs built with 1.14 will attempt to mitigate the bug by using the <code>mlock</code> system call to lock the signal stack page into memory. This works because the bug only occurs if the signal stack page has to be faulted in. However, this use of <code>mlock</code> can fail. If you see the message</p> <pre><code>runtime: note: mlock workaround for kernel bug failed with errno 12\n</code></pre> <p>the <code>errno 12</code> (also known as <code>ENOMEM</code>) means that <code>mlock</code> failed because the system set a limit on the amount of memory that a program can lock. If you can increase the limit, the program may succeed. This is done using <code>ulimit -l</code>. When running a program in a docker container, you can increase the limit by invoking docker with the option <code>-ulimit memlock=67108864</code>.</p> <p>If you cannot increase the <code>mlock</code> limit, then you can make the bug less likely to interfere with your program by setting the environment variable <code>GODEBUG=asyncpreemptoff=1</code> when running a Go program. However, this just makes your program less likely to suffer memory corruption (because it reduces the number of signals that your program will receive). The bug is still present, and memory corruption may still occur.</p>"},{"location":"LinuxKernelSignalVectorBug/#questions","title":"Questions?","text":"<p>Ask on the mailing list golang-nuts@googlegroups.com, or on any Go forum as described at Questions.</p>"},{"location":"LinuxKernelSignalVectorBug/#details","title":"Details","text":"<p>To see more details on how the bug affects Go programs and how it was detected and understood, see #35777 and #35326.</p>"},{"location":"Livestreams/","title":"Livestreams","text":"<p>This table attempts to collect all known regular livestreams centered around Go. Please keep each table sorted alphabetically by name.</p> <p>Note that conferences and podcasts have their own wiki pages already, and should not be included here. Similarly, meetups are already collected here.</p>"},{"location":"Livestreams/#in-english","title":"In English","text":"Name Topic (short) Frequency Link Ashley Jeffs Working on Benthos and OSS Twice per week https://www.youtube.com/c/Jeffail Chewxy Hacking around. Usually machine learning / deep neural networks related Weekly https://www.youtube.com/chewxy Jordan Lewis CockroachDB internals Twice per week https://www.twitch.tv/large__data__bank Matt Layher Linux networking/syscalls in Go Twice per month https://www.twitch.tv/mdlayher Matthew Dempsky Hacking on the Go compiler Three times per week https://www.twitch.tv/mdempsky Michael Stapelberg Hacking on OSS projects Aiming for 1x/month https://www.twitch.tv/stapelberg Travis Jeffery Distributed systems and data streaming Twice a month https://www.twitch.tv/travisjeffery"},{"location":"Livestreams/#in-russian","title":"In Russian","text":"Name Topic (short) Frequency Link Good reviewer - Bad reviewer Code review and commentary for open source projects Weekly YouTube Generic Talks Podcast about Go and systems programming Weekly YouTube"},{"location":"Livestreams/#in-chinese","title":"In Chinese","text":"Name Topic (short) Frequency Link Go \u591c\u8bfb - TalkGo Weekly Go Online Meetup Weekly YouTube, Bilibili, GitHub"},{"location":"LockOSThread/","title":"LockOSThread","text":""},{"location":"LockOSThread/#introduction","title":"Introduction","text":"<p>Some libraries\u2014especially graphical frameworks and libraries like Cocoa, OpenGL, and libSDL\u2014use thread-local state and can require functions to be called only from a specific OS thread, typically the 'main' thread. Go provides the <code>runtime.LockOSThread</code> function for this, but it's notoriously difficult to use correctly.</p>"},{"location":"LockOSThread/#solutions","title":"Solutions","text":"<p>Russ Cox presented a good solution for this problem in this thread.</p> <pre><code>package sdl\n\n// Arrange that main.main runs on main thread.\nfunc init() {\n\truntime.LockOSThread()\n}\n\n// Main runs the main SDL service loop.\n// The binary's main.main must call sdl.Main() to run this loop.\n// Main does not return. If the binary needs to do other work, it\n// must do it in separate goroutines.\nfunc Main() {\n\tfor f := range mainfunc {\n\t\tf()\n\t}\n}\n\n// queue of work to run in main thread.\nvar mainfunc = make(chan func())\n\n// do runs f on the main thread.\nfunc do(f func()) {\n\tdone := make(chan bool, 1)\n\tmainfunc &lt;- func() {\n\t\tf()\n\t\tdone &lt;- true\n\t}\n\t&lt;-done\n}\n</code></pre> <p>And then other functions you write in package sdl can be like</p> <pre><code>func Beep() {\n\tdo(func() {\n\t\t// whatever must run in main thread\n\t})\n}\n</code></pre>"},{"location":"LoopvarExperiment/","title":"LoopvarExperiment","text":"<p>In Go 1.22 Go changed the semantics of for loop variables to prevent unintended sharing in per-iteration closures and goroutines.</p> <p>The new semantics were also available in Go 1.21 in a preliminary implementation of the change, enabled by setting <code>GOEXPERIMENT=loopvar</code> when building your program.</p> <p>This page answers frequently asked questions about the change.</p>"},{"location":"LoopvarExperiment/#how-do-i-try-the-change","title":"How do I try the change?","text":"<p>In Go 1.22 and later the change is controlled by the language version in the module's go.mod file. If the language version is go1.22 or later, the module will use the new loop variable semantics.</p> <p>Using Go 1.21, build your program using <code>GOEXPERIMENT=loopvar</code>, as in </p> <pre><code>GOEXPERIMENT=loopvar go install my/program\nGOEXPERIMENT=loopvar go build my/program\nGOEXPERIMENT=loopvar go test my/program\nGOEXPERIMENT=loopvar go test my/program -bench=.\n...\n</code></pre>"},{"location":"LoopvarExperiment/#what-is-the-problem-this-solves","title":"What is the problem this solves?","text":"<p>Consider a loop like:</p> <pre><code>\tfunc TestAllEvenBuggy(t *testing.T) {\n\t\ttestCases := []int{1, 2, 4, 6}\n\t\tfor _, v := range testCases {\n\t\t\tt.Run(\"sub\", func(t *testing.T) {\n\t\t\t\tt.Parallel()\n\t\t\t\tif v&amp;1 != 0 {\n\t\t\t\t\tt.Fatal(\"odd v\", v)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n</code></pre> <p>This test aims to check that all the test cases are even (they are not!), but it passes with the old semantics. The problem is that t.Parallel stops the closure and lets the loop continue, and then it runs all the closures in parallel when <code>TestAllEvenBuggy</code> returns. By the time the if statement in the closure executes, the loop is done, and v has its final iteration value, 6. All four subtests now continue executing in parallel, and they all check that 6 is even, instead of checking each of the test cases.</p> <p>Another variant of this problem is</p> <pre><code>\tfunc TestAllEven(t *testing.T) {\n\t\ttestCases := []int{0, 2, 4, 6}\n\t\tfor _, v := range testCases {\n\t\t\tt.Run(\"sub\", func(t *testing.T) {\n\t\t\t\tt.Parallel()\n\t\t\t\tif v&amp;1 != 0 {\n\t\t\t\t\tt.Fatal(\"odd v\", v)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n</code></pre> <p>This test is not incorrectly passing, since 0, 2, 4, and 6 are all even, but it is also not testing whether it handles 0, 2, and 4 correctly. Like <code>TestAllEvenBuggy</code>, it tests 6 four times.</p> <p>Another less common but still frequent form of this bug is capturing the loop variable in a 3-clause for loop:</p> <pre><code>\tfunc Print123() {\n\t\tvar prints []func()\n\t\tfor i := 1; i &lt;= 3; i++ {\n\t\t\tprints = append(prints, func() { fmt.Println(i) })\n\t\t}\n\t\tfor _, print := range prints {\n\t\t\tprint()\n\t\t}\n\t}\n</code></pre> <p>This program looks like it will print 1, 2, 3, but in fact prints 4, 4, 4.</p> <p>This kind of unintended sharing bug hits all Go programmers, whether they are just starting to learn Go or have been using it for a decade. Discussion of this problem is one of the earliest entries in the Go FAQ.</p> <p>Here is a public example of a production problem caused by this kind of bug, from Let's Encrypt. The code in question said:</p> <pre><code>// authz2ModelMapToPB converts a mapping of domain name to authz2Models into a\n// protobuf authorizations map\nfunc authz2ModelMapToPB(m map[string]authz2Model) (*sapb.Authorizations, error) {\n\tresp := &amp;sapb.Authorizations{}\n\tfor k, v := range m {\n\t\t// Make a copy of k because it will be reassigned with each loop.\n\t\tkCopy := k\n\t\tauthzPB, err := modelToAuthzPB(&amp;v)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tresp.Authz = append(resp.Authz, &amp;sapb.Authorizations_MapElement{Domain: &amp;kCopy, Authz: authzPB})\n\t}\n\treturn resp, nil\n}\n</code></pre> <p>Note the <code>kCopy := k</code> guarding against the <code>&amp;kCopy</code> used at the end of the loop body. Unfortunately, it turns out that <code>modelToAuthzPB</code> kept a pointer to a couple fields in <code>v</code>, which is impossible to know when reading this loop.</p> <p>The initial impact of this bug was that Let's Encrypt needed to revoke over 3 million improperly-issued certificates. They ended up not doing that because of the negative impact it would have had on internet security, instead arguing for an exception, but that gives you a sense of the kind of impact. </p> <p>The code in question was carefully reviewed when written, and the author was clearly aware of the potential problem, since they wrote <code>kCopy := k</code>, and yet it still had a major bug, one that is not visible unless you also know exactly what <code>modelToAuthzPB</code> does.</p>"},{"location":"LoopvarExperiment/#what-is-the-solution","title":"What is the solution?","text":"<p>The solution is to make loop variables declared in for loops using <code>:=</code> be a different instance of the variable on each iteration. This way, if the value is captured in a closure or goroutine or otherwise outlasts the iteration, later references to it will see the value it had during that iteration, not a value overwritten by a later iteration.</p> <p>For range loops, the effect is as if each loop body starts with <code>k := k</code> and <code>v := v</code> for each range variable. In the Let's Encrypt example above, the <code>kCopy := k</code> would not be necessary, and the bug caused by not having <code>v := v</code>  would have been avoided.</p> <p>For 3-clause for loops, the effect is as if each loop body starts with <code>i := i</code> and then the reverse assignment happens at the end of the loop body, copying the per-iteration <code>i</code> back out to the <code>i</code> that will be used to prepare for the next iteration. This sounds complex, but in practice all common for loop idioms continue to work exactly as they always have. The only time the loop behavior changes is when <code>i</code> is captured and shared with something else. For example, this code runs as it always has:</p> <pre><code>\tfor i := 0;; i++ {\n\t\tif i &gt;= len(s) || s[i] == '\"' {\n\t\t\treturn s[:i]\n\t\t}\n\t\tif s[i] == '\\\\' { // skip escaped char, potentially a quote\n\t\t\ti++\n\t\t}\n\t}\n</code></pre> <p>For full details, see the design document.</p>"},{"location":"LoopvarExperiment/#can-this-change-break-programs","title":"Can this change break programs?","text":"<p>Yes, it is possible to write programs that this change would break. For example, here is a surprising way to add the values in a list using a single-element map:</p> <pre><code>func sum(list []int) int {\n\tm := make(map[*int]int)\n\tfor _, x := range list {\n\t\tm[&amp;x] += x\n\t}\n\tfor _, sum := range m {\n\t\treturn sum\n\t}\n\treturn 0\n}\n</code></pre> <p>It depends on the fact that there is only one <code>x</code> in the loop, so that <code>&amp;x</code> is the same in each iteration. With the new semantics, <code>x</code> escapes the iteration, so <code>&amp;x</code> is different on each iteration, and the map now has multiple entries instead of a single entry.</p> <p>And here is a surprising way to print the values 0 through 9:</p> <pre><code>\tvar f func()\n\tfor i := 0; i &lt; 10; i++ {\n\t\tif i == 0 {\n\t\t\tf = func() { print(i) }\n\t\t}\n\t\tf()\n\t}\n</code></pre> <p>It depends on the fact that the <code>f</code> initialized on the first iteration \u201csees\u201d the new value of <code>i</code> each time it is called. With the new semantics, it prints 0 ten times.</p> <p>Although it is possible to construct artificial programs that break using the new semantics, we have yet to see any real programs that execute incorrectly.</p> <p>C# made a similar change in C# 5.0 and they also reported having very few problems caused by the change.</p> <p>More breaking or surprising cases are shown in here and here.</p>"},{"location":"LoopvarExperiment/#how-often-does-the-change-break-real-programs","title":"How often does the change break real programs?","text":"<p>Empirically, almost never. Testing on Google's codebase found many tests were fixed. It also identified some buggy tests incorrectly passing due to bad interactions between loop variables and <code>t.Parallel</code>, like in <code>TestAllEvenBuggy</code> above. We rewrote those tests to correct them.</p> <p>Our experience suggests that the new semantics fixes buggy code far more often than it breaks correct code. The new semantics only caused test failures in about 1 of every 8,000 test packages (all of them incorrectly passing tests), but running the updated Go 1.20 <code>loopclosure</code> vet check over our entire code base flagged tests at a much higher rate: 1 in 400 (20 in 8,000). The <code>loopclosure</code> checker has no false positives: all the reports are buggy uses of <code>t.Parallel</code> in our source tree. That is, about 5% of the flagged tests were like <code>TestAllEvenBuggy</code>; the other 95% were like <code>TestAllEven</code>: not (yet) testing what it intended, but a correct test of correct code even with the loop variable bug fixed.</p> <p>Google has been running with the new loop semantics applied to all for loops in the standard production toolchain since early May 2023 with not a single reported problem (and many cheers).</p> <p>For more details about our experience at Google, see this writeup.</p> <p>We also tried the new loop semantics in Kubernetes. It identified two newly failing tests due to latent loop variable scoping-related bugs in the underlying code. For comparison, updating Kubernetes from Go 1.20 to Go 1.21 identified three newly failing tests due to reliance on undocumented behaviors in Go itself. The two tests failing due to loop variable changes are not a significant new burden compared to an ordinary release update.</p>"},{"location":"LoopvarExperiment/#will-the-change-make-programs-slower-by-causing-more-allocations","title":"Will the change make programs slower by causing more allocations?","text":"<p>The vast majority of loops are unaffected. A loop only compiles differently if the loop variable has its address taken (<code>&amp;i</code>) or is captured by a closure. </p> <p>Even for affected loops, the compiler's escape analysis may determine that the loop variable can still be stack-allocated, meaning no new allocations. </p> <p>However, in some cases, an extra allocation will be added. Sometimes, the extra allocation is inherent to fixing a latent bug. For example, Print123 is now allocating three separate ints (inside the closures, it turns out) instead of one, which is necessary to print the three different values after the loop finishes. In rare other cases, the loop may be correct with a shared variable and still correct with separate variables but is now allocating N different variables instead of one. In very hot loops, this might cause slowdowns. Such problems should be obvious in memory allocation profiles (using <code>pprof --alloc_objects</code>).</p> <p>Benchmarking of the public \u201cbent\u201d bench suite showed no statistically significant performance difference over all, and we've observed no performance problems in Google's internal production use either. We expect most programs to be unaffected.</p>"},{"location":"LoopvarExperiment/#how-is-the-change-deployed","title":"How is the change deployed?","text":"<p>Consistent with Go's general approach to compatibility, the new for loop semantics will only apply when the package being compiled is from a module that contains a <code>go</code> line declaring Go 1.22 or later, like <code>go 1.22</code> or <code>go 1.23</code>. This conservative approach ensures that no programs will change behavior due to simply adopting the new Go toolchain. Instead, each module author controls when their module changes to the new semantics.</p> <p>The <code>GOEXPERIMENT=loopvar</code> trial mechanism did not use the declared Go language version: it applied the new semantics to every for loop in the program unconditionally. This gave a worst case behavior to help identify the maximum possible impact of the change.</p>"},{"location":"LoopvarExperiment/#can-i-see-a-list-of-places-in-my-code-affected-by-the-change","title":"Can I see a list of places in my code affected by the change?","text":"<p>Yes. You can build with <code>-gcflags=all=-d=loopvar=2</code> on the command line. That will print a warning-style output line for every loop that is compiling differently, like:</p> <pre><code>$ go build -gcflags=all=-d=loopvar=2 cmd/go\n...\nmodload/import.go:676:7: loop variable d now per-iteration, stack-allocated\nmodload/query.go:742:10: loop variable r now per-iteration, heap-allocated\n</code></pre> <p>The <code>all=</code> prints about changes to all packages in your build. If you omit the <code>all=</code>, as in <code>-gcflags=-d=loopvar=2</code>, only the packages you name on the command line (or the package in the current directory) will emit the diagnostic.</p>"},{"location":"LoopvarExperiment/#my-test-fails-with-the-change-how-can-i-debug-it","title":"My test fails with the change. How can I debug it?","text":"<p>A new tool called <code>bisect</code> enables the change on different subsets of a program to identify which specific loops trigger a test failure when compiled with the change. If you have a failing test, <code>bisect</code> will identify the specific loop that is causing the problem. Use:</p> <pre><code>go install golang.org/x/tools/cmd/bisect@latest\nbisect -compile=loopvar go test\n</code></pre> <p>See the bisect transcript section of this comment for a real-world example, and the bisect documentation for more details.</p>"},{"location":"LoopvarExperiment/#does-this-mean-i-dont-have-to-write-x--x-in-my-loops-anymore","title":"Does this mean I don\u2019t have to write x := x in my loops anymore?","text":"<p>After you update your module to use go1.22 or a later version, yes.</p>"},{"location":"MacOS12BSDThreadRegisterIssue/","title":"MacOS12BSDThreadRegisterIssue","text":""},{"location":"MacOS12BSDThreadRegisterIssue/#introduction","title":"Introduction","text":"<p>If you reached this page because you saw an error message like the following printed by a Go program running on macOS 12 Monterey: <pre><code>fatal error: runtime: bsdthread_register error\n\nruntime stack:\nruntime.throw(0x20594e0, 0x21)\n\t/usr/local/go/src/runtime/panic.go:619 +0x81 fp=0x7ff7bfeff878 sp=0x7ff7bfeff858 pc=0x1029751\nruntime.goenvs()\n\t/usr/local/go/src/runtime/os_darwin.go:129 +0x83 fp=0x7ff7bfeff8a8 sp=0x7ff7bfeff878 pc=0x10272d3\nruntime.schedinit()\n\t/usr/local/go/src/runtime/proc.go:496 +0xa4 fp=0x7ff7bfeff900 sp=0x7ff7bfeff8a8 pc=0x102c014\nruntime.rt0_go(0x7ff7bfeff930, 0x3, 0x7ff7bfeff930, 0x1000000, 0x3, 0x7ff7bfeffab0, 0x7ff7bfeffabf, 0x7ff7bfeffac3, 0x0, 0x7ff7bfeffacc, ...)\n\t/usr/local/go/src/runtime/asm_amd64.s:252 +0x1f4 fp=0x7ff7bfeff908 sp=0x7ff7bfeff900 pc=0x1052c64\n</code></pre> then you are running a program built with an old version of Go (Go 1.10 or before). You will need to update your program or rebuild it with a newer version of Go.</p>"},{"location":"MacOS12BSDThreadRegisterIssue/#details","title":"Details","text":"<p>Programs built with Go 1.10 or before use a way of issuing system calls that is no longer supported by the kernel on macOS 12 Monterey. In Go 1.11 and later, system calls are issued via <code>libSystem.dylib</code>, which is supported by the OS.</p>"},{"location":"MacOS12BSDThreadRegisterIssue/#what-to-do","title":"What to do","text":"<p>If this is a program you downloaded or installed (for example, using Homebrew), you will need to download or install a newer version of it that is built with a newer version of Go.</p> <p>If this is a program you built from source, you will need to rebuild it with a newer version of Go.</p> <p>You might want to check your $PATH and manually clean up <code>$GOPATH/bin</code> and other old relevant Go binaries you've installed.</p> <p>If you're trying to compile Go, <code>go tool dist clean</code> might help.</p>"},{"location":"MethodSets/","title":"Table of Contents","text":"<ul> <li>Introduction</li> <li>The Spec</li> <li>Usage</li> <li>Variables</li> <li>Slice Elements</li> <li>Map Elements</li> <li>Interfaces</li> </ul>"},{"location":"MethodSets/#introduction","title":"Introduction","text":"<p>Method sets of a particular type or value are of particular importance in Go, where the method set determines what interfaces a value implements.</p>"},{"location":"MethodSets/#the-spec","title":"The Spec","text":"<p>There are two important clauses in the Go Language Specification about method sets.  They are as follows:</p> <p>Method Sets: A type may have a method set associated with it. The method set of an interface type is its interface. The method set of any other named <code>type T</code> consists of all methods with receiver type <code>T</code>. The method set of the corresponding pointer type <code>*T</code> is the set of all methods with receiver <code>*T</code> or <code>T</code> (that is, it also contains the method set of <code>T</code>). Any other type has an empty method set. In a method set, each method must have a unique name.</p> <p>Calls: A method call <code>x.m()</code> is valid if the method set of (the type of) <code>x</code> contains <code>m</code> and the argument list can be assigned to the parameter list of <code>m</code>. If <code>x</code> is addressable and <code>&amp;x</code>'s method set contains <code>m</code>, <code>x.m()</code> is shorthand for <code>(&amp;x).m()</code>.</p>"},{"location":"MethodSets/#usage","title":"Usage","text":"<p>There are many different cases during which a method set crops up in day-to-day programming.  Some of the main ones are when calling methods on variables, calling methods on slice elements, calling methods on map elements, and storing values in interfaces.</p>"},{"location":"MethodSets/#variables","title":"Variables","text":"<p>In general, when you have a variable of a type, you can pretty much call whatever you want on it.  When you combine the two rules above together, the following is valid:</p> <pre><code>type List []int\n\nfunc (l List) Len() int        { return len(l) }\nfunc (l *List) Append(val int) { *l = append(*l, val) }\n\nfunc main() {\n\t// A bare value\n\tvar lst List\n\tlst.Append(1)\n\tfmt.Printf(\"%v (len: %d)\\n\", lst, lst.Len())\n\n\t// A pointer value\n\tplst := new(List)\n\tplst.Append(2)\n\tfmt.Printf(\"%v (len: %d)\\n\", plst, plst.Len())\n}\n</code></pre> <p>Note that both pointer and value methods can both be called on both pointer and non-pointer values.  To understand why, let's examine the method sets of both types, directly from the spec:</p> <pre><code>List\n- Len() int\n\n*List\n- Len() int\n- Append(int) \n</code></pre> <p>Notice that the method set for <code>List</code> does not actually contain <code>Append(int)</code> even though you can see from the above program that you can call the method without a problem.  This is a result of the second spec section above.  It implicitly translates the first line below into the second:</p> <pre><code>lst.Append(1)\n(&amp;lst).Append(1)\n</code></pre> <p>Now that the value before the dot is a <code>*List</code>, its method set includes Append, and the call is legal.</p> <p>To make it easier to remember these rules, it may be helpful to simply consider the pointer- and value-receiver methods separately from the method set.  It is legal to call a pointer-valued method on anything that is already a pointer or whose address can be taken (as is the case in the above example).  It is legal to call a value method on anything which is a value or whose value can be dereferenced (as is the case with any pointer; this case is specified explicitly in the spec).</p>"},{"location":"MethodSets/#slice-elements","title":"Slice Elements","text":"<p>Slice elements are almost identical to variables.  Because they are addressable, both pointer- and value-receiver methods can be called on both pointer- and value-element slices.</p>"},{"location":"MethodSets/#map-elements","title":"Map Elements","text":"<p>Map elements are not addressable.  Therefore, the following is an illegal operation:</p> <pre><code>lists := map[string]List{}\nlists[\"primes\"].Append(7) // cannot be rewritten as (&amp;lists[\"primes\"]).Append(7)\n</code></pre> <p>However, the following is still valid (and is the far more common case):</p> <pre><code>lists := map[string]*List{}\nlists[\"primes\"] = new(List)\nlists[\"primes\"].Append(7)\ncount := lists[\"primes\"].Len() // can be rewritten as (*lists[\"primes\"]).Len()\n</code></pre> <p>Thus, both pointer- and value-receiver methods can be called on pointer-element maps, but only value-receiver methods can be called on value-element maps.  This is the reason that maps with struct elements are almost always made with pointer elements.</p>"},{"location":"MethodSets/#interfaces","title":"Interfaces","text":"<p>The concrete value stored in an interface is not addressable, in the same way that a map element is not addressable.  Therefore, when you call a method on an interface, it must either have an identical receiver type or it must be directly discernible from the concrete type: pointer- and value-receiver methods can be called with pointers and values respectively, as you would expect.  Value-receiver methods can be called with pointer values because they can be dereferenced first.  Pointer-receiver methods cannot be called with values, however, because the value stored inside an interface has no address.  When assigning a value to an interface, the compiler ensures that all possible interface methods can actually be called on that value, and thus trying to make an improper assignment will fail on compilation.  To extend the earlier example, the following describes what is valid and what is not:</p> <pre><code>type List []int\n\nfunc (l List) Len() int        { return len(l) }\nfunc (l *List) Append(val int) { *l = append(*l, val) }\n\ntype Appender interface {\n\tAppend(int)\n}\n\nfunc CountInto(a Appender, start, end int) {\n\tfor i := start; i &lt;= end; i++ {\n\t\ta.Append(i)\n\t}\n}\n\ntype Lener interface {\n\tLen() int\n}\n\nfunc LongEnough(l Lener) bool {\n\treturn l.Len()*10 &gt; 42\n}\n\nfunc main() {\n\t// A bare value\n\tvar lst List\n\tCountInto(lst, 1, 10) // INVALID: Append has a pointer receiver\n\tif LongEnough(lst) {  // VALID: Identical receiver type\n\t\tfmt.Printf(\" - lst is long enough\")\n\t}\n\n\t// A pointer value\n\tplst := new(List)\n\tCountInto(plst, 1, 10) // VALID: Identical receiver type\n\tif LongEnough(plst) {  // VALID: a *List can be dereferenced for the receiver\n\t\tfmt.Printf(\" - plst is long enough\")\n\t}\n}\n</code></pre>"},{"location":"MinimumRequirements/","title":"Minimum Requirements","text":""},{"location":"MinimumRequirements/#operating-systems","title":"Operating Systems","text":""},{"location":"MinimumRequirements/#linux","title":"Linux","text":"<p>For Go 1.23: Kernel version 2.6.32 or later. [This depends on architecture though, we need to have specific builder for this.] Linux/ARMv5 requires much newer kernels, at least v3.1 (for <code>__kuser_cmpxchg64</code>).</p> <p>For Go 1.24 and later: Kernel 3.2 or later.</p> <p>We don't support CentOS 5. The kernel is too old (2.6.18).</p> <p>For little-endian MIPS64, kernel version 4.1 is known to fail, and 4.8 works. </p> <p>For loong64, kernel 5.19 and later versions work fine.</p> <p>If you are using tinyconfig (e.g. make tinyconfig) for embedded systems, you will also almost certainly enable printk in the kernel as well as a console; we will not include those generic options here. For Go, you must also enable CONFIG_FUTEX and CONFIG_EPOLL.</p> <p>On arm64, an out of date (lower than version 2.33) ld.gold may cause shared library tests to fail (see issue 28334).</p>"},{"location":"MinimumRequirements/#windows","title":"Windows","text":"<p>For Go 1.10: Windows XP (w/ Service Pack 3) or higher.</p> <p>For Go 1.11 and later: Windows 7 and higher or Windows Server 2008 R2 and higher. We test on Windows Server 2008 R2, 2012 R2, and 2016, which are roughly Windows 7, Windows 8.1, and Windows 10.</p> <p>For Go 1.21 and later: Windows 10 and higher or Windows Server 2016 and higher.</p>"},{"location":"MinimumRequirements/#macos-n\u00e9e-os-x-aka-darwin","title":"macOS (n\u00e9e OS X, aka Darwin)","text":"<p>macOS Sierra 10.12 or higher requires Go 1.7.1 or above.</p> <p>macOS Monterey 12 or higher requires Go 1.11 or above.</p> <p>Go 1.15 and later only support macOS Sierra 10.12 or newer; see https://go.dev/doc/go1.15#darwin.</p> <p>Go 1.17 and later only support macOS High Sierra 10.13 or newer; see https://go.dev/doc/go1.17#darwin.</p> <p>Go 1.21 and later only support macOS Catalina 10.15 or newer; see https://go.dev/doc/go1.20#darwin.</p> <p>Go 1.23 and later only support macOS Big Sur 11 or newer; see https://go.dev/doc/go1.23#darwin.</p> <p>We have builders for macOS 10.14 through macOS 13 as of 2023-05-31.</p>"},{"location":"MinimumRequirements/#openbsd","title":"OpenBSD","text":"<p>The current officially supported -stable versions only.</p>"},{"location":"MinimumRequirements/#dragonfly-bsd","title":"DragonFly BSD","text":"<p>Generally only the latest release version only. We have a builder, but it's not the most stable of our ports.</p>"},{"location":"MinimumRequirements/#freebsd","title":"FreeBSD","text":"<p>See Go on FreeBSD for supported FreeBSD/Architecture/Go versions matrix.</p>"},{"location":"MinimumRequirements/#netbsd","title":"NetBSD","text":"<p>There are known NetBSD bugs (including kernel crashes) up to the current NetBSD 7.1. There is a reported fix in NetBSD 7.1.1 but it's unverified as of 2017-07-10, as we're not running builders again yet.  See https://tip.golang.org/doc/go1.9#known_issues and golang/go#20852</p>"},{"location":"MinimumRequirements/#solaris","title":"Solaris","text":"<p>illumos (former OpenSolaris 10) based distributions or Oracle Solaris 11+.</p>"},{"location":"MinimumRequirements/#ios","title":"iOS","text":"<p>iOS 12 or later.</p>"},{"location":"MinimumRequirements/#architectures","title":"Architectures","text":""},{"location":"MinimumRequirements/#microarchitecture-support","title":"Microarchitecture support","text":"<p>For some architectures, Go supports compiling to specific microarchitectures using environment variables, e.g. GOAMD64 for go1.18 and later. Binaries will check at startup whether the requested microarchitecture level is supported. For example, a binary built with <code>GOAMD64=v3</code> will fail on a CPU that doesn't have LZCNT support.</p> <p>Various microarchitecture levels and the environment variables used to select them are described with each architecture.</p> <p>The build cache understands the microarchitecture environment variables and does not require any cleaning if you change them.</p> <p>While performance is expected to improve when a higher minimum microarchitecture is requested, this might not be true in all cases. Benchmark your performance-critical code to verify performance improvements.</p>"},{"location":"MinimumRequirements/#amd64","title":"amd64","text":"<p>Until Go 1.17, the Go compiler always generated x86 binaries that could be executed by any 64-bit x86 processor.</p> <p>Go 1.18 introduced 4 architectural levels for AMD64. Each level differs in the set of x86 instructions that the compiler can include in the generated binaries:</p> <ul> <li>GOAMD64=v1 (default): The baseline. Exclusively generates instructions that all 64-bit x86 processors can execute.</li> <li>GOAMD64=v2: all v1 instructions, plus CMPXCHG16B, LAHF, SAHF, POPCNT, SSE3, SSE4.1, SSE4.2, SSSE3.</li> <li>GOAMD64=v3: all v2 instructions, plus AVX, AVX2, BMI1, BMI2, F16C, FMA, LZCNT, MOVBE, OSXSAVE.</li> <li>GOAMD64=v4: all v3 instructions, plus AVX512F, AVX512BW, AVX512CD, AVX512DQ, AVX512VL.</li> </ul> <p>Setting, for example, GOAMD64=v3, will allow the Go compiler to use AVX2 instructions in the generated binaries (which may improve performance in some cases); but these binaries will not run on older x86 processors that don't support AVX2.</p> <p>The Go toolchain may also generate newer instructions, but guarded by dynamic checks to ensure they're only executed on capable processors. For example, with GOAMD64=v1, math/bits.OnesCount will still use the POPCNT instruction if CPUID reports that it's available. Otherwise, it falls back to a generic implementation.</p> <p>The Go toolchain does not currently generate any AVX512 instructions.</p> <p>The race detector is not supported on platforms that do not provide SSE3.</p> <p>Note that processor is a simplification in this context. In practice, support from the entire system (firmware, hypervisor, kernel) is needed.</p> <p>See section Microarchitecture support for hints on how to use microarchitecture environment variables like GOAMD64.</p>"},{"location":"MinimumRequirements/#386","title":"386","text":"<p>See https://go.dev/doc/install/source#environment</p> <ul> <li>GO386=sse2 (default): Any processor with at least SSE2</li> <li>GO386=softfloat: All Pentium MMX or later processors (uses software floating point emulation)</li> </ul>"},{"location":"MinimumRequirements/#arm","title":"arm","text":"<p>See https://go.dev/doc/install/source#environment</p> <ul> <li>GOARM=5: use software floating point; when CPU doesn't have VFP co-processor</li> <li>GOARM=6: use VFPv1 only; default if cross compiling; usually ARM11 or better cores (VFPv2 or better is also supported)</li> <li>GOARM=7: use VFPv3; usually Cortex-A cores</li> </ul>"},{"location":"MinimumRequirements/#arm64","title":"arm64","text":"<p>Until Go 1.23, the Go compiler always generated ARM64 binaries that could be executed by any ARMv8-A processor.</p> <p>Go 1.23 introduced a new <code>GOARM64</code> environment variable, which specifies the minimum target version of the ARM64 architecture at compile time. Allowed values are <code>v8.{0-9}</code> and <code>v9.{0-5}</code>. This may be followed by an option specifying extensions implemented by target hardware. Valid options are <code>,lse</code> and <code>,crypto</code>.</p> <p>Setting, for example, <code>GOARM64=v8.0,lse</code>, will allow the Go compiler to use LSE instructions in the generated binaries (which may improve performance in some cases); but these binaries will not run on older ARM64 processors that don\u2019t support LSE.</p> <p>The Go toolchain may also generate newer instructions, but guarded by dynamic checks to ensure they\u2019re only executed on capable processors.</p> <p>The <code>GOARM64</code> environment variable defaults to <code>v8.0</code>.</p>"},{"location":"MinimumRequirements/#ppc64-big-endian","title":"ppc64 (big endian)","text":"<p>POWER5 and above. Starting with Go 1.9, only POWER8 and above are supported.</p>"},{"location":"MinimumRequirements/#ppc64le-little-endian","title":"ppc64le (little endian)","text":"<p>POWER8 and above.</p>"},{"location":"MinimumRequirements/#mips64-big-endian","title":"mips64 (big endian)","text":"<p>MIPS III or higher. Builder is using MIPS64r2.</p>"},{"location":"MinimumRequirements/#mips64le-little-endian","title":"mips64le (little endian)","text":"<p>MIPS III or higher in little endian mode.</p>"},{"location":"MinimumRequirements/#s390x","title":"s390x","text":"<p>z13</p>"},{"location":"MinimumRequirements/#mips-big-endian-and-mipsle-little-endian","title":"mips (big endian) and mipsle (little endian)","text":"<p>MIPS32r1</p>"},{"location":"MinimumRequirements/#riscv64","title":"riscv64","text":"<p>rv64g (rv64imafd). Starting from Go 1.23, RVA20U64 mandatory extensions is required.</p>"},{"location":"MinimumRequirements/#loong64","title":"loong64","text":"<p>Go 1.19 or above. the Go compiler always generated Loong64 binaries that could be executed any processor cored by LA364, LA464, LA664 or later.</p> <ul> <li>LA364: Supports unaligned memory access, 128-bit SIMD, typical processors include loongson-2K2000/2K3000, etc.</li> <li>LA464: Supports unaligned memory access, 128/256-bit SIMD, typical processors include loongson-3A5000/3C5000/3D5000, etc.</li> <li>LA664: Supports unaligned memory access, 128/256-bit SIMD, typical processors include loongson-3A6000/3C6000, etc.</li> </ul>"},{"location":"MinimumRequirements/#cgo","title":"cgo","text":"<p>For programs using cgo, gcc 4.6 or newer is required.</p> <p>Starting with Go 1.25, use of CGO on Windows requires a C compiler that incorpoates support for DWARF 5. For those using GCC, this requirement translates to selecting a version of GCC built with binutils version 2.37 or later. Programs built with older versions of GCC (those using binutils 2.36 and earlier) will produce non-working executables, see issue 75077 for details.</p>"},{"location":"MinorReleases/","title":"MinorReleases","text":"<p>Our default decision should always be to not backport, but fixes for security issues, serious problems with no workaround, and documentation fixes are backported to the most recent two release branches, if applicable to that branch. (for example, the most current two release branches are <code>release-branch.go1.16</code> and <code>release-branch.go1.17</code>, from which new <code>Go 1.16.x</code> and <code>Go 1.17.x</code> releases are cut) Fixes for experimental ports are generally not backported.</p> <p>A \u201cserious\u201d problem is one that prevents a program from working at all.</p> <p>As soon as an interested party thinks an issue should be considered for backport, they open one or two \u201cchild\u201d issues titled like <code>package: title [1.17 backport]</code>. The issue should include a link to the original issue and a short rationale about why the backport might be needed.</p> <p>GopherBot is capable of opening the backport issues automatically in response to comments like the following on the main issue. (The keywords are <code>@gopherbot</code>, <code>backport</code>, <code>please</code> and optionally the release. The entire message is quoted in the new issue.)</p> <p>@gopherbot please consider this for backport to 1.17, it's a regression.</p> <p>@gopherbot please open the backport tracking issues. This is a severe compiler bug.</p> <p>The fix is developed for the main issue, which is closed when the fix is merged to the master branch.</p> <p>The child issue is assigned to the minor release milestone and labeled CherryPickCandidate, and its candidacy is discussed there. Once it is approved it transitions to CherryPickApproved. Release managers (a subset of the Go team that handles the release process) and/or code owners approve cherry-picks via an informal process.</p> <p>When the child issue is labeled CherryPickApproved, the original author of the change fixing that issue should immediately create and mail a cherry-pick change against the release branch, which can be merged as soon as it is ready, closing the child issue.</p> <p>At release time, any open backport issue which is not release-blocker is pushed to the next minor release milestone, and a minor release is minted with the already merged changes.</p>"},{"location":"MinorReleases/#making-cherry-pick-cls","title":"Making cherry-pick CLs","text":"<p>Note that only the authors of the original CL and approvers have the ability to create the cherry-pick.</p> <p>Once the main fix has been submitted to master, please make a cherry-pick CL to the applicable release branch.</p> <p>You can use the Gerrit UI to make a cherry-pick if there are no merge conflicts:</p> <p></p> <p>In the popup enter the branch name (like <code>release-branch.go1.10</code>), add the commit message prefix (like <code>[release-branch.go1.10]</code>), update the \"Fixes\" line and do not change any of the other automated lines.</p> <p>To cherry-pick from the command line or to resolve a merge conflict, take note of the final commit hash, then use <code>git codereview</code> and <code>git cherry-pick</code> to prepare a cherry-pick CL:</p> <pre><code>git checkout release-branch.go1.17\ngit codereview change cherry-pick-NNNN\ngit cherry-pick $COMMIT_HASH\ngit commit --amend # add message prefix and change Fixes line\ngit codereview mail\n</code></pre> <p>The cherry-pick CL must include a message prefix like <code>[release-branch.go1.10]</code>, and update the \"Fixes\" line to the child issue. Do not change or remove the \"Change-Id\" line nor the other Gerrit lines.</p> <p>The code review process is otherwise the same as regular CLs. Permission to submit to the release branches is more restricted. If you do not have submit permissions then once your CL is otherwise ready release managers will submit it for you. If you do have permission, be sure to not submit the CL until the corresponding issue is marked CherryPickApproved.</p> <p>At this time, it's not possible to make a cherry-pick CL by sending a pull request. Only Gerrit is supported. See golang.org/issue/30037.</p>"},{"location":"MinorReleases/#cherry-pick-cls-for-vendored-golangorgx-packages","title":"Cherry-pick CLs for vendored golang.org/x packages","text":"<p>The Go standard library includes some generated files whose source of truth is outside the main repository, in golang.org/x repositories. For example, a copy of the <code>golang.org/x/sys/unix</code> package is vendored into the Go tree, and a copy of the <code>golang.org/x/net/http2</code> package is bundled. That means a fix to a golang.org/x package that needs to be backported to a Go release will need two corresponding CLs:</p> <ol> <li> <p>In the golang.org/x repository, cherry-pick the fix from the <code>master</code> branch to the <code>internal-branch.go1.x-vendor</code> branch.</p> <p>The commit message should include \"Updates golang/go#nnn\" to mention the backport issue.</p> </li> <li> <p>In the main repository on the <code>release-branch.go1.x</code> branch, create a CL that pulls in the fix from the golang.org/x internal branch:</p> <pre><code>go get golang.org/x/repo@internal-branch.go1.x-vendor\ngo mod tidy\ngo mod vendor\ngo generate -run=bundle std  # If a bundled package needs regeneration.\n</code></pre> <p>The commit message should include \"Fixes #nnn\" to close the backport issue.</p> </li> </ol> <p>(As of Go 1.16, the golang.org/x branch name is always <code>internal-branch.go1.x-vendor</code>. In Go 1.15, the name of the golang.org/x branch is <code>release-branch.go1.x</code> or <code>release-branch.go1.x-bundle</code> in special cases.)</p>"},{"location":"Mobile/","title":"Mobile","text":"<p>The Go mobile subrepository adds support for mobile platforms (Android and iOS) and provides tools to build mobile applications.</p> <p>There are two strategies you can follow to include Go into your mobile stack:</p> <ul> <li>Writing all-Go native mobile applications.</li> <li>Writing SDK applications by generating bindings from a Go package and invoke them from Java (on Android) and Objective-C (on iOS).</li> </ul> <p>This article will contain step-by-step guides to explain how to achieve these strategies.</p> <ul> <li>Tools</li> <li>Native applications</li> <li>Building and deploying to Android</li> <li>Building and deploying to iOS</li> <li>App icon</li> <li>SDK applications</li> <li>Building and deploying to Android</li> <li>Building and deploying to iOS</li> <li>iOS Simulator</li> </ul>"},{"location":"Mobile/#tools","title":"Tools","text":"<p>You need to have Go 1.16 or above to install mobile tools.</p> <p>Go Mobile introduces a tool, <code>gomobile</code>, to help you with the build and the binding process.</p> <p><code>gomobile</code> also supports Go Modules, e.g. using</p> <pre><code>$ gomobile bind -v -o android.aar -target=android ./package\n</code></pre> <p>under a project directory.</p> <p>On macOS, you will need to have Xcode Command Line Tools installed.</p> <p>To install <code>gomobile</code> tools:</p> <pre><code>$ go install golang.org/x/mobile/cmd/gomobile@latest\n$ gomobile init\n</code></pre> <p>The following sections will help you how to use the <code>gomobile</code> tool.</p>"},{"location":"Mobile/#native-applications","title":"Native applications","text":"<p>The native category includes applications entirely written in Go. Currently, the golang.org/x/mobile contains only a small set of packages that focus on:</p> <ul> <li>App control and configuration</li> <li>OpenGL ES 2 and ES 3 bindings</li> <li>Asset management</li> <li>Event management</li> <li>Experimental packages include OpenAL bindings, audio, font, sprite and motion sensors</li> </ul> <p>There are various example native applications under golang.org/x/mobile/example. We will build and deploy the basic example both to an Android and iOS device.</p> <p>Grab the application.</p> <pre><code>$ go get -d golang.org/x/mobile/example/basic\n</code></pre>"},{"location":"Mobile/#building-and-deploying-to-android","title":"Building and deploying to Android","text":"<p>Run <code>gomobile build</code> to build an Android APK.</p> <pre><code>$ gomobile build -target=android -androidapi 19 golang.org/x/mobile/example/basic\n</code></pre> <p>Build command will build an APK named basic.apk.</p> <p>If an AndroidManifest.xml is defined in the package directory, it is added to the APK output. Otherwise, a default manifest is generated.</p> <p>If you have the adb command installed on your machine, you can use <code>gomobile install</code> to build and push the APK to your mobile device.</p> <pre><code>$ gomobile install golang.org/x/mobile/example/basic\n</code></pre>"},{"location":"Mobile/#building-and-deploying-to-ios","title":"Building and deploying to iOS","text":"<p>Run <code>gomobile build</code> to build the package as an iOS application.</p> <p>Note: target=ios requires the host machine running macOS. You need to obtain a signing identity and download provisioning profiles in order to continue.</p> <pre><code>$ gomobile build -target=ios golang.org/x/mobile/example/basic\n</code></pre> <p>The build command will build an application bundle, named <code>basic.app</code>.</p> <p>You can deploy .app files by dragging and dropping them to the device.</p> <ul> <li>In Xcode, open Window &gt; Devices.</li> <li>Select the physical device from the left pane.</li> <li>Drag and drop the .app file to \"Installed Apps\" section.</li> <li>Check the \"Copy items if needed\" option</li> </ul> <p></p> <p>Alternatively, you can deploy application bundles to your iOS device by using the ios-deploy utility command line tool. Use ios-deploy to push the application to your device.</p> <pre><code>$ ios-deploy -b basic.app\n</code></pre>"},{"location":"Mobile/#app-icon","title":"App icon","text":"<p>It is possible to set an app icon by creating <code>assets/icon.png</code>.</p>"},{"location":"Mobile/#sdk-applications-and-generating-bindings","title":"SDK applications and generating bindings","text":"<p>In this category, we will show you how you can use a Go package in your existing Android or iOS application.</p> <p>The advantages to following this strategy:</p> <ul> <li>You can reuse a Go package from a mobile app without making significant changes to your existing application.</li> <li>In cases where you want to share a common code base between your Android and iOS application, you can write the common functionality once in Go and glue them to the platform-specific code by invoking the Go package through bindings.</li> </ul> <p>Current limitations are listed below.</p> <ul> <li>Only a subset of Go types are currently supported.</li> <li>Language bindings have a performance overhead.</li> <li>There are a few limitations on how the exported APIs should look due to the limitations of the target language.</li> </ul> <p>We will use the example package under golang.org/x/mobile/example/bind/hello to generate bindings and invoke Greetings function from Java and Objective-C.</p> <p>Grab the example by running the command below.</p> <pre><code>$ go get -d golang.org/x/mobile/example/bind/...\n</code></pre>"},{"location":"Mobile/#building-and-deploying-to-android_1","title":"Building and deploying to Android","text":"<p>Note: Go Mobile runs on the same architectures as Go, which currently means ARM, ARM64, 386 and amd64 devices and emulators. Notably, Android on MIPS devices is not yet supported.</p> <ul> <li>Run the following command to generate the aar file that is suitable for importing into Android projects:</li> </ul> <pre><code>$ gomobile bind -o app/hello.aar -target=android golang.org/x/mobile/example/bind/hello\n</code></pre> <p>Tips: From 1.16, it is recommended to execute <code>go get -d golang.org/x/mobile/cmd/gomobile</code> before each execution of <code>gomobile bind ...</code>. go get will automatically add indirect references to go.mod. These indirect references maybe automatically deleted by ide or go mod tidy, but they are required! <pre><code>require (\n\tgolang.org/x/mobile v0.0.0-20210716004757-34ab1303b554 // indirect\n\tgolang.org/x/mod v0.4.2 // indirect\n\tgolang.org/x/sys v0.0.0-20210510120138-977fb7262007 // indirect\n\tgolang.org/x/tools v0.1.2 // indirect\n\tgolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 // indirect\n)\n</code></pre></p> <ul> <li>Launch Android Studio.</li> <li>File &gt; Import Project\u2026 to import the reference project from $GOPATH/src/golang.org/x/mobile/example/bind/android.</li> </ul> <p></p> <ul> <li>Build and deploy the application to the device.</li> </ul> <p>The app module contains the main application that invokes the <code>hello.Greetings</code>. When the application is launched the text view is updated with the string returned value.</p> <p>If you are not using Android Studio, in order to work with bindings for Android, you need to have Android SDK installed and ANDROID_HOME environment variable set to the SDK path. You also need the NDK installed; the easiest way is to run the SDK command <code>sdkmanager ndk-bundle</code>.</p> <p>Alternatively, if you are not familiar with android development, and you do not wish to set up all the required environment (Android SDK, Gradle, etc), you can use this docker image to build the application in docker instead.</p> <p>Besides, if you try to add yourmodule.aar into your own project, after copy the yourmodule.aar file and yourmodule.jar file to \"androidapp\" folder, below editing in \"androidappbuild.gradle\" file should be done in order to make your module imported correctly.</p> <pre><code>+ repositories {\n+    flatDir {\n+        dirs '.'\n+    }\n+ }\n</code></pre> <pre><code>dependencies {\n...\n+    implementation (name:'yourmodulename', ext:'aar')\n}\n</code></pre>"},{"location":"Mobile/#building-and-deploying-to-ios_1","title":"Building and deploying to iOS","text":"<p>Note: target=ios requires the host machine to be running macOS.</p> <pre><code>$ cd $GOPATH/src/golang.org/x/mobile/example/bind\n$ gomobile bind -target=ios golang.org/x/mobile/example/bind/hello\n</code></pre> <p>Gomobile bind will generate a framework bundle called <code>Hello.framework</code>. Open the sample Xcode project by running the command below.</p> <p><pre><code>$ open ios/bind.xcodeproj\n</code></pre> Drag and drop the <code>Hello.framework</code> bundle to the Xcode project. Check \"Copy items if needed\" if you need a different copy of the framework bundle within the Xcode otherwise. Otherwise, modifying the Go package source code and rerunning <code>gomobile bind</code> will update the hello.framework.</p> <p></p> <p>If you decide to keep <code>Hello.framework</code> in the main directory you have to add the main directory to the <code>Framework Search Paths</code> in the the targets Build Settings.</p> <p></p> <p>Your project layout should look like what's shown below.</p> <p></p> <p>Build and run it on the simulator or an actual device (Cmd+R). When the application launches, the label on the main view will be modified with the string returned from <code>GoHelloGreetings</code> which invokes the <code>hello.Greetings</code> function.</p> <p>Note that you can also invoke <code>GoHelloGreetings</code> from Swift by importing Hello.</p> <pre><code>@import Hello\n// ...\nlet msg = Hello.GoHelloGreetings(\"gopher\")\n</code></pre>"},{"location":"Mobile/#ios-simulator","title":"iOS Simulator","text":"<p>As of Go 1.5, only darwin/amd64 works on the iOS simulator. To use the simulator, you need to configure Xcode to only try to run 64-bit binaries.</p> <p>Xcode matches the bit width of the ARM binaries when running on the X86 simulator. That is, if you configure Xcode to build both 32-bit and 64-bit ARM binaries (the default), it will attempt to run 32-bit X86 binaries on the simulator, which will not work with Go today. Modify the Xcode build settings to only build 64-bit ARM binaries, and the simulator will run the amd64 binary.</p>"},{"location":"Modules/","title":"Go Modules","text":"<p>This wiki page serves as a usage and troubleshooting guide. * For tutorial blog posts, see Using Go Modules. * For a technical reference, see the Go Modules Reference (under development).</p> <p>Go has included support for versioned modules as proposed here since 1.11. The initial prototype  <code>vgo</code> was announced in February 2018. In July 2018, versioned modules landed in the main Go repository.</p> <p>Since Go 1.14, module support is considered ready for production use, and all users are encouraged to migrate to modules from other dependency management systems. If you are unable to migrate due to a problem in the Go toolchain, please ensure that the problem has an open issue filed. (If the issue is not on the Go1.16 milestone, please comment on why it prevents you from migrating so it can be prioritized appropriately). You can also provide an experience report for more detailed feedback.</p>"},{"location":"Modules/#recent-changes","title":"Recent Changes","text":""},{"location":"Modules/#go-116","title":"Go 1.16","text":"<p>See the Go 1.16 release notes for details.</p> <ul> <li>Module mode (<code>GO111MODULE=on</code>) is the default in all cases</li> <li>Commands no longer modify <code>go.mod</code> / <code>go.sum</code> by default (<code>-mod=readonly</code>)</li> <li><code>go install pkg@version</code> is the recommended way to globally install packages / executables</li> <li><code>retract</code> is available in <code>go.mod</code> </li> </ul>"},{"location":"Modules/#go-115","title":"Go 1.15","text":"<p>See the Go 1.15 release notes for details.</p> <ul> <li>The location of the module cache may now be set with the <code>GOMODCACHE</code> environment variable. The default value of <code>GOMODCACHE</code> is <code>GOPATH[0]/pkg/mod</code>, the location of the module cache before this change.</li> <li>A workaround is now available for Windows \"Access is denied\" errors in go commands that access the module cache, caused by external programs concurrently scanning the file system (see issue #36568). The workaround is not enabled by default because it is not safe to use when Go versions lower than 1.14.2 and 1.13.10 are running concurrently with the same module cache. It can be enabled by explicitly setting the environment variable <code>GODEBUG=modcacheunzipinplace=1</code>.</li> </ul>"},{"location":"Modules/#go-114","title":"Go 1.14","text":"<p>See the Go 1.14 release notes for details.</p> <ul> <li>When the main module contains a top-level vendor directory and its <code>go.mod file</code> specifies <code>go 1.14</code> or higher, the go command now defaults to <code>-mod=vendor</code> for operations that accept that flag.</li> <li><code>-mod=readonly</code> is now set by default when the go.mod file is read-only and no top-level vendor directory is present.</li> <li><code>-modcacherw</code> is a new flag that instructs the go command to leave newly-created directories in the module cache at their default permissions rather than making them read-only.</li> <li><code>-modfile=file</code> is a new flag that instructs the go command to read (and possibly write) an alternate <code>go.mod</code> file instead of the one in the module root directory.</li> <li>When module-aware mode is enabled explicitly (by setting <code>GO111MODULE=on</code>), most module commands have more limited functionality if no <code>go.mod</code> file is present.</li> <li>The go command now supports Subversion repositories in module mode.</li> </ul>"},{"location":"Modules/#go-113","title":"Go 1.13","text":"<p>See the Go 1.13 release notes for details.</p> <ul> <li>The <code>go</code> tool now defaults to downloading modules from the public Go module mirror at https://proxy.golang.org, and also defaults to validating downloaded modules (regardless of source) against the public Go checksum database at https://sum.golang.org.<ul> <li>If you have private code, you most likely should configure the <code>GOPRIVATE</code> setting (such as <code>go env -w GOPRIVATE=*.corp.com,github.com/secret/repo</code>), or the more fine-grained variants <code>GONOPROXY</code> or <code>GONOSUMDB</code> that support less frequent use cases. See the documentation for more details.</li> </ul> </li> <li><code>GO111MODULE=auto</code> enables module-mode if any go.mod is found, even inside GOPATH. (Prior to Go 1.13, <code>GO111MODULE=auto</code> would never enable module-mode inside GOPATH).</li> <li><code>go get</code> arguments have changed:<ul> <li><code>go get -u</code> (without any arguments) now only upgrades the direct and indirect dependencies of your current package, and no longer examines your entire module.</li> <li><code>go get -u ./...</code> from your module root upgrades all the direct and indirect dependencies of your module, and now excludes test dependencies.</li> <li><code>go get -u -t ./...</code> is similar, but also upgrades test dependencies.</li> <li><code>go get</code> no longer supports <code>-m</code> (because it would have largely overlapped with <code>go get -d</code> due to other changes;  you can usually replace <code>go get -m foo</code> with <code>go get -d foo</code>).</li> </ul> </li> </ul>"},{"location":"Modules/#table-of-contents","title":"Table of Contents","text":"<p>The \"Quick Start\" and \"New Concepts\" sections are particularly important for someone who is starting to work with modules. The \"How to\u2026\" sections cover more details on mechanics. The largest quantity of content on this page is in the FAQs answering more specific questions; it can be worthwhile to at least skim the FAQ one-liners listed here.</p> <ul> <li>Quick Start</li> <li>Example</li> <li>Daily Workflow</li> <li>New Concepts</li> <li>Modules</li> <li>go.mod</li> <li>Version Selection</li> <li>Semantic Import Versioning</li> <li>How to Use Modules</li> <li>How to Install and Activate Module Support</li> <li>How to Define a Module</li> <li>How to Upgrade and Downgrade Dependencies</li> <li>How to Prepare for a Release (All Versions)</li> <li>How to Prepare for a Release (v2 or Higher)</li> <li>Publishing a Release</li> <li>Migrating to Modules</li> <li>Additional Resources</li> <li>Changes Since the Initial Vgo Proposal</li> <li>GitHub Issues</li> <li>FAQs</li> <li>How are versions marked as incompatible?</li> <li>When do I get old behavior vs. new module-based behavior?</li> <li>Why does installing a tool via 'go get' fail with error 'cannot find main module'?</li> <li>How can I track tool dependencies for a module?</li> <li>What is the status of module support in IDEs, editors and standard tools like goimports, gorename, etc.?</li> <li>FAQs \u2014 Additional Control</li> <li>What community tooling exists for working with modules?</li> <li>When should I use the 'replace' directive?</li> <li>Can I work entirely outside of VCS on my local filesystem?</li> <li>How do I use vendoring with modules? Is vendoring going away?</li> <li>Are there \"always on\" module repositories and enterprise proxies?</li> <li>Can I control when go.mod gets updated and when the go tools use the network to satisfy dependencies?</li> <li>How do I use modules with CI systems such as Travis or CircleCI?</li> <li>How do I download modules needed to build specific packages or tests?</li> <li>FAQs \u2014 go.mod and go.sum</li> <li>Why does 'go mod tidy' record indirect and test dependencies in my 'go.mod'?</li> <li>Is 'go.sum' a lock file? Why does 'go.sum' include information for module versions I am no longer using?</li> <li>Should I still add a 'go.mod' file if I do not have any dependencies?</li> <li>Should I commit my 'go.sum' file as well as my 'go.mod' file?</li> <li>FAQs \u2014 Semantic Import Versioning</li> <li>Why must major version numbers appear in import paths?</li> <li>Why are major versions v0, v1 omitted from import paths?</li> <li>What are some implications of tagging my project with major version v0, v1, or making breaking changes with v2+?</li> <li>Can a module consume a package that has not opted in to modules?</li> <li>Can a module consume a v2+ package that has not opted into modules? What does '+incompatible' mean?</li> <li>How are v2+ modules treated in a build if modules support is not enabled? How does \"minimal module compatibility\" work in 1.9.7+, 1.10.3+, and 1.11?</li> <li>What happens if I create a go.mod but do not apply semver tags to my repository?</li> <li>Can a module depend on a different version of itself?</li> <li>FAQs \u2014 Multi-Module Repositories</li> <li>What are multi-module repositories?</li> <li>Should I have multiple modules in a single repository?</li> <li>Is it possible to add a module to a multi-module repository?</li> <li>Is it possible to remove a module from a multi-module repository?</li> <li>Can a module depend on an internal/ in another?</li> <li>Can an additional go.mod exclude unnecessary content? Do modules have the equivalent of a .gitignore file?</li> <li>FAQs \u2014 Minimal Version Selection</li> <li>Won't minimal version selection keep developers from getting important updates?</li> <li>FAQs \u2014 Possible Problems</li> <li>What are some general things I can spot check if I am seeing a problem?</li> <li>What can I check if I am not seeing the expected version of a dependency?</li> <li>Why am I getting an error 'cannot find module providing package foo'?</li> <li>Why does 'go mod init' give the error 'cannot determine module path for source directory'?</li> <li>I have a problem with a complex dependency that has not opted in to modules. Can I use information from its current dependency manager?</li> <li>How can I resolve \"parsing go.mod: unexpected module path\" and \"error loading module requirements\" errors caused by a mismatch between import paths vs. declared module identity?</li> <li>Why does 'go build' require gcc, and why are prebuilt packages such as net/http not used?</li> <li>Do modules work with relative imports like <code>import \"./subdir\"</code>?</li> <li>Some needed files may not be present in populated vendor directory</li> </ul>"},{"location":"Modules/#quick-start","title":"Quick Start","text":""},{"location":"Modules/#example","title":"Example","text":"<p>The details are covered in the remainder of this page, but here is a simple example of creating a module from scratch.</p> <p>Create a directory outside of your GOPATH, and optionally initialize VCS: <pre><code>$ mkdir -p /tmp/scratchpad/repo\n$ cd /tmp/scratchpad/repo\n$ git init -q\n$ git remote add origin https://github.com/my/repo\n</code></pre></p> <p>Initialize a new module: <pre><code>$ go mod init github.com/my/repo\n\ngo: creating new go.mod: module github.com/my/repo\n</code></pre></p> <p>Write your code: <pre><code>$ cat &lt;&lt;EOF &gt; hello.go\npackage main\n\nimport (\n    \"fmt\"\n    \"rsc.io/quote\"\n)\n\nfunc main() {\n    fmt.Println(quote.Hello())\n}\nEOF\n</code></pre></p> <p>Build and run: <pre><code>$ go mod tidy\ngo: finding module for package rsc.io/quote\ngo: found rsc.io/quote in rsc.io/quote v1.5.2\n$ go build -o hello\n$ ./hello\nHello, world.\n</code></pre></p> <p>The <code>go.mod</code> file was updated to include explicit versions for your dependencies, where <code>v1.5.2</code> here is a semver tag: <pre><code>$ cat go.mod\nmodule github.com/my/repo\n\ngo 1.16\n\nrequire rsc.io/quote v1.5.2\n</code></pre></p>"},{"location":"Modules/#daily-workflow","title":"Daily Workflow","text":"<p>Prior to 1.16, no <code>go get</code> or <code>go mod tidy</code> was required prior to running <code>go build -o hello</code>. Implicit modification of <code>go.mod</code> and <code>go.sum</code> files was disabled by default in 1.16.</p> <p>Your typical day-to-day workflow can be:</p> <ul> <li>Add import statements to your <code>.go</code> code as needed.</li> <li>Standard commands like <code>go build</code> or <code>go test</code> will automatically add new dependencies as needed to satisfy imports (updating <code>go.mod</code> and downloading the new dependencies).</li> <li>When needed, more specific versions of dependencies can be chosen with commands such as <code>go get foo@v1.2.3</code>, <code>go get foo@master</code> (<code>foo@default</code> with mercurial), <code>go get foo@e3702bed2</code>, or by editing <code>go.mod</code> directly.</li> </ul> <p>A brief tour of other common functionality you might use:</p> <ul> <li><code>go list -m all</code> \u2014 View final versions that will be used in a build for all direct and indirect dependencies (details)</li> <li><code>go list -u -m all</code> \u2014 View available minor and patch upgrades for all direct and indirect dependencies (details)</li> <li><code>go get -u ./...</code> or <code>go get -u=patch ./...</code> (from module root directory) \u2014 Update all direct and indirect dependencies to latest minor or patch upgrades (pre-releases are ignored) (details)</li> <li><code>go build ./...</code> or <code>go test ./...</code> (from module root directory) \u2014 Build or test all packages in the module (details)</li> <li><code>go mod tidy</code> \u2014 Prune any no-longer-needed dependencies from <code>go.mod</code> and add any dependencies needed for other combinations of OS, architecture, and build tags (details)</li> <li><code>replace</code> directive or <code>gohack</code> \u2014 Use a fork, local copy or exact version of a dependency (details)</li> <li><code>go mod vendor</code> \u2014 Optional step to create a <code>vendor</code> directory (details)</li> </ul> <p>After reading the next four sections on \"New Concepts\", you will have enough information to get started with modules for most projects. It is also useful to review the Table of Contents above (including the FAQ one-liners there) to familiarize yourself with the list of more detailed topics. </p>"},{"location":"Modules/#new-concepts","title":"New Concepts","text":"<p>These sections provide a high-level introduction to the main new concepts. For more details and rationale, please see  this 40-minute introductory video by Russ Cox describing the philosophy behind the design, the official proposal document, or the more detailed initial vgo blog series.</p>"},{"location":"Modules/#modules","title":"Modules","text":"<p>A module is a collection of related Go packages that are versioned together as a single unit. </p> <p>Modules record precise dependency requirements and create reproducible builds. </p> <p>Most often, a version control repository contains exactly one module defined in the repository root. (Multiple modules are supported in a single repository, but typically that would result in more work on an on-going basis than a single module per repository).</p> <p>Summarizing the relationship between repositories, modules, and packages:  * A repository contains one or more Go modules.  * Each module contains one or more Go packages.  * Each package consists of one or more Go source files in a single directory.   </p> <p>Modules must be semantically versioned according to semver, usually in the form <code>v(major).(minor).(patch)</code>, such as  <code>v0.1.0</code>, <code>v1.2.3</code>, or <code>v1.5.0-rc.1</code>. The leading <code>v</code> is required. If using Git, tag released commits with their versions. Public and private module repositories and proxies are becoming available (see FAQ below).</p>"},{"location":"Modules/#gomod","title":"go.mod","text":"<p>A module is defined by a tree of Go source files with a <code>go.mod</code> file in the tree's root directory. Module source code may be located outside of GOPATH. There are four directives: <code>module</code>, <code>require</code>, <code>replace</code>, <code>exclude</code>. </p> <p>Here is an example <code>go.mod</code> file defining the module <code>github.com/my/thing</code>:</p> <pre><code>module github.com/my/thing\n\nrequire (\n    github.com/some/dependency v1.2.3\n    github.com/another/dependency/v4 v4.0.0\n)\n</code></pre> <p>A module declares its identity in its <code>go.mod</code> via the <code>module</code> directive, which provides the module path. The import paths for all packages in a module share the module path as a common prefix. The module path and the relative path from the <code>go.mod</code> to a package's directory together determine a package's import path.</p> <p>For example, if you are creating a module for a repository <code>github.com/user/mymod</code> that will contain two packages with import paths <code>github.com/user/mymod/foo</code> and <code>github.com/user/mymod/bar</code>, then the first line in your <code>go.mod</code> file typically would declare your module path as <code>module github.com/user/mymod</code>, and the corresponding on-disk structure could be:</p> <pre><code>mymod\n|-- bar\n|   `-- bar.go\n|-- foo\n|   `-- foo.go\n`-- go.mod\n</code></pre> <p>In Go source code, packages are imported using the full path including the module path. For example, if in our example above, we declared the module identity in <code>go.mod</code> as <code>module github.com/user/mymod</code>, a consumer could do: <pre><code>import \"github.com/user/mymod/bar\"\n</code></pre> This imports package <code>bar</code> from the module <code>github.com/user/mymod</code>.</p> <p><code>exclude</code> and <code>replace</code> directives only operate on the current (\u201cmain\u201d) module. <code>exclude</code> and <code>replace</code> directives in modules other than the main module are ignored when building the main module. The <code>replace</code> and <code>exclude</code> statements, therefore, allow the main module complete control over its own build, without also being subject to complete control by dependencies.  (See FAQ below for a discussion of when to use a <code>replace</code> directive).</p>"},{"location":"Modules/#version-selection","title":"Version Selection","text":"<p>If you add a new import to your source code that is not yet covered by a <code>require</code> in <code>go.mod</code>, most go commands like 'go build' and 'go test' will automatically look up the proper module and add the highest version of that new direct dependency to your module's <code>go.mod</code> as a <code>require</code> directive. For example, if your new import corresponds to dependency M whose latest tagged release version is <code>v1.2.3</code>, your module's <code>go.mod</code> will end up with <code>require M v1.2.3</code>, which indicates module M is a dependency with allowed version &gt;= v1.2.3 (and &lt; v2, given v2 is considered incompatible with v1).</p> <p>The minimal version selection algorithm is used to select the versions of all modules used in a build. For each module in a build, the version selected by minimal version selection is always the semantically highest of the versions explicitly listed by a <code>require</code> directive in the main module or one of its dependencies. </p> <p>As an example, if your module depends on module A which has a <code>require D v1.0.0</code>, and your module also depends on module B which has a <code>require D v1.1.1</code>, then minimal version selection would choose <code>v1.1.1</code> of D to include in the build (given it is the highest listed <code>require</code> version). This selection of <code>v1.1.1</code> remains consistent even if sometime later a <code>v1.2.0</code> of D becomes available. This is an example of how the modules system provides 100% reproducible builds. When ready, the module author or user might choose to upgrade to the latest available version of D or choose an explicit version for D. </p> <p>For a brief rationale and overview of the minimal version selection algorithm, see the \"High Fidelity Builds\" section of the official proposal, or see the more detailed <code>vgo</code> blog series.</p> <p>To see a list of the selected module versions (including indirect dependencies), use <code>go list -m all</code>.</p> <p>See also the \"How to Upgrade and Downgrade Dependencies\" section below and the \"How are versions marked as incompatible?\" FAQ below.</p>"},{"location":"Modules/#semantic-import-versioning","title":"Semantic Import Versioning","text":"<p>For many years, the official Go FAQ has included this advice on package versioning:</p> <p>\"Packages intended for public use should try to maintain backward compatibility as they evolve. The Go 1 compatibility guidelines are a good reference here: don't remove exported names, encourage tagged composite literals, and so on. If different functionality is required, add a new name instead of changing an old one. If a complete break is required, create a new package with a new import path.\"</p> <p>The last sentence is especially important \u2014 if you break compatibility, you should change the import path of your package. With Go 1.11 modules, that advice is formalized into the import compatibility rule:</p> <p>\"If an old package and a new package have the same import path, the new package must be backwards compatible with the old package.\"</p> <p>Recall semver requires a major version change when a v1 or higher package makes a backwards-incompatible change. The result of following both the import compatibility rule and semver is called Semantic Import Versioning, where the major version is included in the import path \u2014 this ensures the import path changes any time the major version increments due to a compatibility break.</p> <p>As a result of Semantic Import Versioning, code opting in to Go modules must comply with these rules:  * Follow semver. (An example VCS tag is <code>v1.2.3</code>). * If the module is version v2 or higher, the major version of the module must be included as a <code>/vN</code> at the end of the module paths used in <code>go.mod</code> files (e.g., <code>module github.com/my/mod/v2</code>, <code>require github.com/my/mod/v2 v2.0.1</code>) and in the package import path (e.g., <code>import \"github.com/my/mod/v2/mypkg\"</code>). This includes the paths used in <code>go get</code> commands (e.g., <code>go get github.com/my/mod/v2@v2.0.1</code>. Note there is both a <code>/v2</code> and a <code>@v2.0.1</code> in that example. One way to think about it is that the module name now includes the <code>/v2</code>, so include <code>/v2</code> whenever you are using the module name). * If the module is version v0 or v1, do not include the major version in either the module path or the import path.</p> <p>In general, packages with different import paths are different packages. For example, <code>math/rand</code> is a different package than <code>crypto/rand</code>. This is also true if different import paths are due to different major versions appearing in the import path. Thus <code>example.com/my/mod/mypkg</code> is a different package than <code>example.com/my/mod/v2/mypkg</code>, and both may be imported in a single build, which among other benefits helps with diamond dependency problems and also allows a v1 module to be implemented in terms of its v2 replacement or vice versa.</p> <p>See the \"Module compatibility and semantic versioning\" section of the <code>go</code> command documentation for more details on Semantic Import Versioning, and see https://semver.org for more about semantic versioning.</p> <p>This section so far has been focused on code that has opted in to modules and imports other modules. However, putting major versions in import paths for v2+ modules could create incompatibilities with older versions of Go, or with code that has not yet opted in to modules. To help with this, there are three important transitional special cases or exceptions to the behavior and rules described above. These transitional exceptions will become less important over time as more packages opt in to modules. </p> <p>Three Transitional Exceptions</p> <ol> <li> <p>gopkg.in</p> <p>Existing code that uses import paths starting with <code>gopkg.in</code> (such as <code>gopkg.in/yaml.v1</code> and <code>gopkg.in/yaml.v2</code>) can continue to use those forms for their module paths and import paths even after opting in to modules.</p> </li> <li> <p>'+incompatible' when importing non-module v2+ packages</p> <p>A module can import a v2+ package that has not opted in to modules itself. A non-module v2+ package that has a valid v2+ semver tag will be recorded with a <code>+incompatible</code> suffix in the importing module's <code>go.mod</code> file. The <code>+incompatible</code> suffix indicates that even though the v2+ package has a valid v2+ semver tag such as <code>v2.0.0</code>, the v2+ package has not actively opted in to modules and hence that v2+ package is assumed to have not been created with an understanding of the implications of Semantic Import Versioning and how to use major versions in import paths. Therefore, when operating in module mode, the <code>go</code> tool will treat a non-module v2+ package as an (incompatible) extension of the v1 version series of the package and assume the package has no awareness of Semantic Import Versioning, and the <code>+incompatible</code> suffix is an indication that the <code>go</code> tool is doing so. </p> </li> <li> <p>\"Minimal module compatibility\" when module mode is not enabled</p> <p>To help with backwards-compatibility, Go versions 1.9.7+, 1.10.3+ and 1.11 have been updated to make it easier for code built with those releases to be able to properly consume v2+ modules without requiring modification of pre-existing code. This behavior is called \"minimal module compatibility\", and it only takes effect when full module mode is disabled for the <code>go</code> tool, such as if such as you have set <code>GO111MODULE=off</code> in Go 1.11, or are using Go versions 1.9.7+ or 1.10.3+. When relying on this \"minimal module compatibility\" mechanism in Go 1.9.7+, 1.10.3+ and 1.11, a package that has not opted in to modules would not include the major version in the import path for any imported v2+ modules. In contrast, a package that has opted in to modules must include the major version in the import path to import any v2+ modules (in order to properly import the v2+ module when the <code>go</code> tool is operating in full module mode with full awareness of Semantic Import Versioning).</p> </li> </ol> <p>For the exact mechanics required to release a v2+ module, please see the \"Releasing Modules (v2 or Higher)\" section below.</p>"},{"location":"Modules/#how-to-use-modules","title":"How to Use Modules","text":""},{"location":"Modules/#how-to-install-and-activate-module-support","title":"How to Install and Activate Module Support","text":"<p>To use modules, two install options are: * Install the latest Go 1.11 release. * Install the Go toolchain from source on the <code>master</code> branch.</p> <p>Once installed, you can then activate module support in one of two ways: * Invoke the <code>go</code> command in a directory outside of the <code>$GOPATH/src</code> tree, with a valid <code>go.mod</code> file in the current directory or any parent of it and the environment variable <code>GO111MODULE</code> unset (or explicitly set to <code>auto</code>). * Invoke the <code>go</code> command with <code>GO111MODULE=on</code> environment variable set.</p>"},{"location":"Modules/#how-to-define-a-module","title":"How to Define a Module","text":"<p>To create a <code>go.mod</code> for an existing project:</p> <ol> <li>Navigate to the root of the module's source tree outside of GOPATH:</li> </ol> <p><pre><code>$ cd &lt;project path outside $GOPATH/src&gt;         # e.g., cd ~/projects/hello\n</code></pre>    Note that outside of GOPATH, you do not need to set <code>GO111MODULE</code> to activate module mode.</p> <p>Alternatively, if you want to work in your GOPATH:</p> <pre><code>$ export GO111MODULE=on                         # manually active module mode\n$ cd $GOPATH/src/&lt;project path&gt;                 # e.g., cd $GOPATH/src/you/hello\n</code></pre> <ol> <li>Create the initial module definition and write it to the <code>go.mod</code> file:</li> </ol> <pre><code>$ go mod init\n</code></pre> <p><code>go mod init</code> will often be able to use auxiliary data (such as VCS meta-data) to automatically determine the appropriate module path, but if <code>go mod init</code> states it can not automatically determine the module path, or if you need to otherwise override that path, you can supply the module path as an optional argument to <code>go mod init</code>, for example:</p> <pre><code>$ go mod init github.com/my/repo\n</code></pre> <p>Note that if your dependencies include v2+ modules, or if you are initializing a v2+ module, then after running <code>go mod init</code> you might also need to edit your <code>go.mod</code> and <code>.go</code> code to add <code>/vN</code> to import paths and module paths as described in the \"Semantic Import Versioning\" section above. This applies even if <code>go mod init</code> automatically converted your dependency information from <code>dep</code> or other dependency managers. (Because of this, after running <code>go mod init</code>, you typically should not run <code>go mod tidy</code> until you have successfully run <code>go build ./...</code> or similar, which is the sequence shown in this section).</p> <p>If used with go 1.21.13 or older, this step also converts from any existing <code>dep</code> <code>Gopkg.lock</code> file or any of the other nine total supported dependency formats, adding require statements to match the existing configuration.</p> <ol> <li>Build the module. When executed from the root directory of a module, the <code>./...</code> pattern matches all the packages within the current module.  <code>go build</code> will automatically add missing or unconverted dependencies as needed to satisfy imports for this particular build invocation:</li> </ol> <p><pre><code>$ go build ./...\n</code></pre> 4. Test the module as configured to ensure that it works with the selected versions:</p> <pre><code>$ go test ./...\n</code></pre> <ol> <li>(Optional) Run the tests for your module plus the tests for all direct and indirect dependencies to check for incompatibilities:</li> </ol> <pre><code>$ go test all\n</code></pre> <p>Prior to tagging a release, see the \"How to Prepare for a Release\" section below.</p> <p>For more information on all of these topics, the primary entry point to the official modules documentation is available on golang.org.</p>"},{"location":"Modules/#how-to-upgrade-and-downgrade-dependencies","title":"How to Upgrade and Downgrade Dependencies","text":"<p>Day-to-day upgrading and downgrading of dependencies should be done using 'go get', which will automatically update the <code>go.mod</code> file. Alternatively, you can edit <code>go.mod</code> directly.</p> <p>In addition, go commands like 'go build', 'go test', or even 'go list' will automatically add new dependencies as needed to satisfy imports (updating <code>go.mod</code> and downloading the new dependencies).</p> <p>To upgrade a dependency to the latest version: <pre><code>go get example.com/package\n</code></pre></p> <p>To upgrade a dependency and all its dependencies to the latest version: <pre><code>go get -u example.com/package\n</code></pre></p> <p>To view available minor and patch upgrades for all direct and indirect dependencies:</p> <pre><code>go list -u -m all\n</code></pre> <p>To view available minor and patch upgrades only for the direct dependencies, run: <pre><code>go list -u -f '{{if (and (not (or .Main .Indirect)) .Update)}}{{.Path}}: {{.Version}} -&gt; {{.Update.Version}}{{end}}' -m all 2&gt; /dev/null\n</code></pre></p> <p>To upgrade to the latest version for all direct and indirect dependencies of the current module, the following can be run from the module root directory:  * <code>go get -u ./...</code> to use the latest minor or patch releases (and add <code>-t</code> to also upgrade test dependencies)  * <code>go get -u=patch ./...</code> to use the latest patch releases (and add <code>-t</code> to also upgrade test dependencies)</p> <p><code>go get foo</code> updates to the latest version of <code>foo</code>. <code>go get foo</code> is equivalent to <code>go get foo@latest</code> \u2014 in other words, <code>@latest</code> is the default if no <code>@</code> version is specified.</p> <p>In this section, \"latest\" is the latest version with a semver tag, or the latest known commit if there are no semver tags. Prerelease tags are not selected as \"latest\" unless there are no other semver tags on the repository (details).</p> <p>A common mistake is thinking <code>go get -u foo</code> solely gets the latest version of <code>foo</code>. In actuality, the <code>-u</code> in <code>go get -u foo</code> or <code>go get -u foo@latest</code> means to also get the latest versions for all of the direct and indirect dependencies of <code>foo</code>. A common starting point when upgrading <code>foo</code> is instead to do <code>go get foo</code> or <code>go get foo@latest</code> without a <code>-u</code> (and after things are working, consider <code>go get -u=patch foo</code>, <code>go get -u=patch</code>, <code>go get -u foo</code>, or <code>go get -u</code>).</p> <p>To upgrade or downgrade to a more specific version, 'go get' allows version selection to be overridden by adding an @version suffix or \"module query\" to the package argument, such as <code>go get foo@v1.6.2</code>, <code>go get foo@e3702bed2</code>, or <code>go get foo@'&lt;v1.6.2'</code>. </p> <p>Using a branch name such as <code>go get foo@master</code> (<code>foo@default</code> with mercurial) is one way to obtain the latest commit regardless of whether or not it has a semver tag.</p> <p>In general, module queries that do not resolve to a semver tag will be recorded as pseudo-versions in the <code>go.mod</code> file.</p> <p>See the \"Module-aware go get\" and \"Module queries\" sections of the <code>go</code> command documentation for more information on the topics here.</p> <p>Modules are capable of consuming packages that have not yet opted into modules, including recording any available semver tags in <code>go.mod</code> and using those semver tags to upgrade or downgrade. Modules can also consume packages that do not yet have any proper semver tags (in which case they will be recorded using pseudo-versions in <code>go.mod</code>).</p> <p>After upgrading or downgrading any dependencies, you may then want to run the tests again for all packages in your build (including direct and indirect dependencies) to check for incompatibilities:</p> <pre><code>$ go test all\n</code></pre>"},{"location":"Modules/#how-to-prepare-for-a-release","title":"How to Prepare for a Release","text":""},{"location":"Modules/#releasing-modules-all-versions","title":"Releasing Modules (All Versions)","text":"<p>Best practices for creating a release of a module are expected to emerge as part of the initial modules experiment. Many of these might end up being automated by a future 'go release' tool.</p> <p>Some current suggested best practices to consider prior to tagging a release:</p> <ul> <li>Run <code>go mod tidy</code> to possibly prune any extraneous requirements (as described here) and also ensure your current go.mod reflects all possible build tags/OS/architecture combinations (as described here). </li> <li> <p>In contrast, other commands like <code>go build</code> and <code>go test</code> will not remove dependencies from <code>go.mod</code> that are no longer required and only update <code>go.mod</code> based on the current build invocation's tags/OS/architecture.</p> </li> <li> <p>Run <code>go test all</code> to test your module (including running the tests for your direct and indirect dependencies) as a way of validating that the currently selected package versions are compatible. </p> </li> <li>The number of possible version combinations is exponential in the number of modules, so in general, you cannot expect your dependencies to have tested against all possible combinations of their dependencies.</li> <li> <p>As part of the modules work, <code>go test all</code> has been re-defined to be more useful: to include all the packages in the current module plus all the packages they depend on through a sequence of one or more imports while excluding packages that don't matter in the current module.</p> </li> <li> <p>Ensure your <code>go.sum</code> file is committed along with your <code>go.mod</code> file. See FAQ below for more details and rationale. </p> </li> </ul>"},{"location":"Modules/#releasing-modules-v2-or-higher","title":"Releasing Modules (v2 or Higher)","text":"<p>If you are releasing a v2 or higher module, please first review the discussion in the \"Semantic Import Versioning\"  section above, which includes why major versions are included in the module path and import path for v2+ modules, as well as how Go versions 1.9.7+ and 1.10.3+ have been updated to simplify that transition.</p> <p>Note that if you are adopting modules for the first time for a pre-existing repository or set of packages that have already been tagged <code>v2.0.0</code> or higher before adopting modules, then the recommended best practice is to increment the major version when first adopting modules. For example, if you are the author of <code>foo</code>, and the latest tag for the <code>foo</code> repository is <code>v2.2.2</code>, and <code>foo</code> has not yet adopted modules, then the best practice would be to use <code>v3.0.0</code> for the first release of <code>foo</code> to adopt modules (and hence the first release of <code>foo</code> to contain a <code>go.mod</code> file). Incrementing the major version in this case provides greater clarity to consumers of <code>foo</code>, allows for additional non-module patches or minor releases on the v2 series of <code>foo</code> if needed, and provides a strong signal for a module-based consumer of <code>foo</code> that different major versions result if you do <code>import \"foo\"</code> and a corresponding <code>require foo v2.2.2+incompatible</code>, vs. <code>import \"foo/v3\"</code> and a corresponding <code>require foo/v3 v3.0.0</code>. (Note that this advice regarding incrementing the major version when first adopting modules does not apply to pre-existing repos or packages whose latest versions are v0.x.x or v1.x.x).</p> <p>There are two alternative mechanisms to release a v2 or higher module. Note that with both techniques, the new module release becomes available to consumers when the module author pushes the new tags. Using the example of creating a <code>v3.0.0</code> release, the two options are:</p> <ol> <li>Major branch: Update the <code>go.mod</code> file to include a <code>/v3</code> at the end of the module path in the <code>module</code> directive (e.g., <code>module github.com/my/module/v3</code>). Update import statements within the module to also use <code>/v3</code> (e.g., <code>import \"github.com/my/module/v3/mypkg\"</code>). Tag the release with <code>v3.0.0</code>. </li> <li>Go versions 1.9.7+, 1.10.3+, and 1.11 are able to properly consume and build a v2+ module created using this approach without requiring updates to consumer code that has not yet opted in to modules (as described in the \"Semantic Import Versioning\" section above). </li> <li>A community tool github.com/marwan-at-work/mod helps automate this procedure. See the repository or the community tooling FAQ below for an overview.</li> <li>To avoid confusion with this approach, consider putting the <code>v3.*.*</code> commits for the module on a separate v3 branch.</li> <li>Note: creating a new branch is not required. If instead you have been previously releasing on master and would prefer to tag <code>v3.0.0</code> on master, that is a viable option. (However, be aware that introducing an incompatible API change in <code>master</code> can cause issues for non-modules users who issue a <code>go get -u</code> given the <code>go</code> tool is not aware of semver prior to Go 1.11 or when module mode is not enabled in Go 1.11+).</li> <li> <p>Pre-existing dependency management solutions such as <code>dep</code> currently can have problems consuming a v2+ module created in this way. See for example dep#1962.</p> </li> <li> <p>Major subdirectory: Create a new <code>v3</code> subdirectory (e.g., <code>my/module/v3</code>) and place a new <code>go.mod</code> file in that subdirectory. The module path must end with <code>/v3</code>. Copy or move the code into the <code>v3</code> subdirectory. Update import statements within the module to also use <code>/v3</code> (e.g., <code>import \"github.com/my/module/v3/mypkg\"</code>). Tag the release with <code>v3.0.0</code>.</p> </li> <li>This provides greater backwards-compatibility. In particular, Go versions older than 1.9.7 and 1.10.3 are also able to properly consume and build a v2+ module created using this approach.</li> <li>A more sophisticated approach here could exploit type aliases (introduced in Go 1.9) and forwarding shims between major versions residing in different subdirectories.  This can provide additional compatibility and allow one major version to be implemented in terms of another major version but would entail more work for a module author. An in-progress tool to automate this is <code>goforward</code>. Please see here for more details and rationale, along with a functioning initial version of <code>goforward</code>.</li> <li>Pre-existing dependency management solutions such as <code>dep</code> should be able to consume a v2+ module created in this way. </li> </ol> <p>See https://research.swtch.com/vgo-module for a more in-depth discussion of these alternatives.</p>"},{"location":"Modules/#publishing-a-release","title":"Publishing a release","text":"<p>A new module version may be published by pushing a tag to the repository that contains the module source code. The tag is formed by concatenating two strings: a prefix and a version.</p> <p>The version is the semantic import version for the release. It should be chosen by following the rules of semantic import versioning.</p> <p>The prefix indicates where a module is defined within a repository. If the module is defined at the root of the repository, the prefix is empty, and the tag is just the version. However, in multi-module repositories, the prefix distinguishes versions for different modules. The prefix is the directory within the repository where the module is defined. If the repository follows the major subdirectory pattern described above, the prefix does not include the major version suffix.</p> <p>For example, suppose we have a module <code>example.com/repo/sub/v2</code>, and we want to publish version <code>v2.1.6</code>. The repository root corresponds to <code>example.com/repo</code>, and the module is defined in <code>sub/v2/go.mod</code> within the repository. The prefix for this module is <code>sub/</code>. The full tag for this release should be <code>sub/v2.1.6</code>.</p>"},{"location":"Modules/#migrating-to-modules","title":"Migrating to Modules","text":"<p>This section attempts to briefly enumerate the major decisions to be made when migrating to modules as well as list other migration-related topics. References are generally provided to other sections for more details.</p> <p>This material is primarily based on best practices that have emerged from the community as part of the modules experiment; this is, therefore, a work-in-progress section that will improve as the community gains more experience.</p> <p>Summary:</p> <ul> <li>The modules system is designed to allow different packages in the overall Go ecosystem to opt-in at different rates.</li> <li>Packages that are already on version v2 or higher have more migration considerations, primarily due to the implications of Semantic Import versioning. </li> <li>New packages and packages on v0 or v1 have substantially fewer considerations when adopting modules.</li> <li>Modules defined with Go 1.11 can be used by older Go versions (although the exact Go versions depend on the strategy used by the main module and its dependencies, as outlined below).</li> </ul> <p>Migration topics:</p>"},{"location":"Modules/#automatic-migration-from-prior-dependency-managers","title":"Automatic Migration from Prior Dependency Managers","text":"<ul> <li>With go 1.21.13 or older, <code>go mod init</code> automatically translates the required information from dep, glide, govendor, godep, and 5 other pre-existing dependency managers into a <code>go.mod</code>file that produces the equivalent build.</li> <li>If you are creating a v2+ module, be sure your <code>module</code> directive in the converted <code>go.mod</code> includes the appropriate <code>/vN</code> (e.g., <code>module foo/v3</code>).</li> <li>Note that if you are importing v2+ modules, you might need to do some manual adjustments after an initial conversion in order to add <code>/vN</code> to the <code>require</code> statements that <code>go mod init</code> generates after translating from a prior dependency manager. See the \"How to Define a Module\" section above for more details.</li> <li>In addition, <code>go mod init</code> will not edit your <code>.go</code> code to add any required <code>/vN</code> to import statements. See the \"Semantic Import versioning\" and \"Releasing Modules (v2 or Higher)\" sections above for the required steps, including some options around community tools to automate the conversion.</li> </ul>"},{"location":"Modules/#providing-dependency-information-to-older-versions-of-go-and-non-module-consumers","title":"Providing Dependency Information to Older Versions of Go and Non-Module Consumers","text":"<ul> <li>Older versions of Go understand how to consume a vendor directory created by <code>go mod vendor</code>, as do Go 1.11 and 1.12+ when module mode is disabled. Therefore, vendoring is one way for a module to provide dependencies to older versions of Go that do not fully understand modules, as well as to consumers that have not enabled modules themselves. See the vendoring FAQ and the <code>go</code> command documentation for more details.</li> </ul>"},{"location":"Modules/#updating-pre-existing-install-instructions","title":"Updating Pre-Existing Install Instructions","text":"<ul> <li>Pre-modules, it is common for install instructions to include <code>go get -u foo</code>. If you are publishing a module <code>foo</code>, consider dropping the <code>-u</code> in instructions for modules-based consumers.<ul> <li><code>-u</code> asks the <code>go</code> tool to upgrade all the direct and indirect dependencies of <code>foo</code>. </li> <li>A module consumer might choose to run <code>go get -u foo</code> later, but there are more benefits of \"High Fidelity Builds\" if <code>-u</code> is not part of the initial install instructions. See \"How to Upgrade and Downgrade Dependencies\" for more details.</li> <li><code>go get -u foo</code> does still work, and can still be a valid choice for install instructions.</li> </ul> </li> <li>In addition, <code>go get foo</code> is not strictly needed for a module-based consumer. <ul> <li>Simply adding an import statement <code>import \"foo\"</code> is sufficient. (Subsequent commands like <code>go build</code> or <code>go test</code> will automatically download <code>foo</code> and update <code>go.mod</code> as needed).</li> </ul> </li> <li>Module-based consumers will not use a <code>vendor</code> directory by default. <ul> <li>When module mode is enabled in the <code>go</code> tool, <code>vendor</code> is not strictly required when consuming a module (given the information contained in <code>go.mod</code> and the cryptographic checksums in <code>go.sum</code>), but some pre-existing install instructions assume the <code>go</code> tool will use <code>vendor</code> by default. See the vendoring FAQ for more details.</li> </ul> </li> <li>Install instructions that include <code>go get foo/...</code> might have issues in some cases (see discussion in #27215).</li> </ul>"},{"location":"Modules/#avoid-breaking-existing-import-paths","title":"Avoid Breaking Existing Import Paths","text":"<p>A module declares its identity in its <code>go.mod</code> via the <code>module</code> directive, such as <code>module github.com/my/module</code>. All packages within the module must be imported by any module-aware consumer with import paths that match the module's declared module path (either exactly for a root package, or with the module path as a prefix of the import path). The <code>go</code> command reports an <code>unexpected module path</code> error if there is a mismatch between an import path vs. the corresponding module's declared module path.</p> <p>When adopting modules for a pre-existing set of packages, care should be taken to avoid breaking existing import paths used by existing consumers, unless you are incrementing your major version when adopting modules. </p> <p>For example, if your pre-existing README has been telling consumers to use <code>import \"gopkg.in/foo.v1\"</code>, and if you then adopt modules with a v1 release, your initial <code>go.mod</code> should almost certainly read <code>module gopkg.in/foo.v1</code>.  If you wanted to move away from using <code>gopkg.in</code>, that would be a breaking change for your current consumers. One approach would be to change to something like <code>module github.com/repo/foo/v2</code> if you later move to v2.</p> <p>Note that module paths and import paths are case-sensitive. Changing a module from <code>github.com/Sirupsen/logrus</code> to <code>github.com/sirupsen/logrus</code>, for example, is a breaking change for consumers, even if GitHub automatically forwards from one repository name to the new repository name.</p> <p>After you have adopted modules, changing your module path in your <code>go.mod</code> is a breaking change.</p> <p>Overall, this is similar to the pre-modules enforcement of a canonical import path via \"import path comments\", which are also sometimes called \"import pragmas\" or \"import path enforcement\".  As an example, the package <code>go.uber.org/zap</code> is currently hosted at <code>github.com/uber-go/zap</code>, but uses an import path comment next to the package declaration that triggers an error for any pre-modules consumer using the wrong github-based import path:</p> <p><code>package zap // import \"go.uber.org/zap\"</code></p> <p>Import path comments are obsoleted by the go.mod file's module statement.</p>"},{"location":"Modules/#incrementing-the-major-version-when-first-adopting-modules-with-v2-packages","title":"Incrementing the Major Version When First Adopting Modules with v2+ Packages","text":"<ul> <li>If you have packages that have already been tagged v2.0.0 or higher before adopting modules, then the recommended best practice is to increment the major version when first adopting modules. For example, if you are on <code>v2.0.1</code> and have not yet adopted modules, then you would use <code>v3.0.0</code> for the first release that adopts modules. See the \"Releasing Modules (v2 or Higher)\" section above for more details.</li> </ul>"},{"location":"Modules/#v2-modules-allow-multiple-major-versions-within-a-single-build","title":"v2+ Modules Allow Multiple Major Versions Within a Single Build","text":"<ul> <li>If a module is on v2 or higher, an implication is that multiple major versions can be in a single build (e.g., <code>foo</code> and <code>foo/v3</code> might end up in a single build).</li> <li>This flows naturally from the rule that \"packages with different import paths are different packages\".</li> <li>When this happens, there will be multiple copies of package-level state (e.g., package-level state for <code>foo</code> and package-level state for <code>foo/v3</code>) as well as each major version will run its own <code>init</code> function.</li> <li>This approach helps with multiple aspects of the modules system, including helping with diamond dependency problems, gradual migration to new versions within large codebases, and allowing a major version to be implemented as a shim around a different major version.</li> <li>See the \"Avoiding Singleton Problems\" section of https://research.swtch.com/vgo-import or #27514 for some related discussion.</li> </ul>"},{"location":"Modules/#modules-consuming-non-module-code","title":"Modules Consuming Non-Module Code","text":"<ul> <li>Modules are capable of consuming packages that have not yet opted into modules, with the appropriate package version information recorded in the importing module's <code>go.mod</code>.  Modules can consume packages that do not yet have any proper semver tags. See FAQ below for more details.</li> <li>Modules can also import a v2+ package that has not opted into modules. It will be recorded with a <code>+incompatible</code> suffix if the imported v2+ package has valid semver tags. See FAQ below for more details.</li> </ul>"},{"location":"Modules/#non-module-code-consuming-modules","title":"Non-Module Code Consuming Modules","text":"<ul> <li> <p>Non-module code consuming v0 and v1 modules:  </p> <ul> <li>Code that has not yet opted in to modules can consume and build v0 and v1 modules (without any requirement related to the Go version used).</li> </ul> </li> <li> <p>Non-module code consuming v2+ modules:</p> <ul> <li> <p>Go versions 1.9.7+, 1.10.3+ and 1.11 have been updated so that code built with those releases can properly consume v2+ modules without requiring modification of pre-existing code as described in the \"Semantic Import versioning\" and \"Releasing Modules (v2 or Higher)\" sections above.</p> </li> <li> <p>Go versions prior to 1.9.7 and 1.10.3 can consume v2+ modules if the v2+ module was created following the \"Major subdirectory\" approach outlined in the \"Releasing Modules (v2 or Higher)\" section.</p> </li> </ul> </li> </ul>"},{"location":"Modules/#strategies-for-authors-of-pre-existing-v2-packages","title":"Strategies for Authors of Pre-Existing v2+ Packages","text":"<p>For authors of pre-existing v2+ packages considering opting in to modules, one way to summarize the alternative approaches is as a choice between three top-level strategies. Each choice then has follow-on decisions and variations (as outlined above). These alternative top-level strategies are:</p> <ol> <li> <p>Require clients to use Go versions 1.9.7+, 1.10.3+, or 1.11+. </p> <p>The approach uses the \"Major Branch\" approach and relies on the \"minimal module awareness\" that was backported to 1.9.7 and 1.10.3. See the \"Semantic Import versioning\" and \"Releasing Modules (v2 or Higher)\" sections above for more details.</p> </li> <li> <p>Allow clients to use even older Go versions like Go 1.8. </p> <p>This approach uses the \"Major Subdirectory\" approach and involves creating a subdirectory such as <code>/v2</code> or <code>/v3</code>. See the \"Semantic Import versioning\" and \"Releasing Modules (v2 or Higher)\" sections above for more details.</p> </li> <li> <p>Wait on opting into modules.  </p> <p>In this strategy, things continue to work with client code that has opted into modules as well as with client code that has not opted into modules. As time goes by, Go versions 1.9.7+, 1.10.3+, and 1.11+ will be out for an increasingly longer time period, and at some point in the future, it becomes more natural or client-friendly to require Go versions 1.9.7+/1.10.3+/1.11+, and at that point in time, you can implement strategy 1 above (requiring Go versions 1.9.7+, 1.10.3+, or 1.11+) or even strategy 2 above (though if you are ultimately going to go with strategy 2 above in order to support older Go versions like 1.8, then that is something you can do now).</p> </li> </ol>"},{"location":"Modules/#additional-resources","title":"Additional Resources","text":""},{"location":"Modules/#documentation-and-proposal","title":"Documentation and Proposal","text":"<ul> <li>Official documentation:</li> <li>Latest HTML documentation for modules on golang.org</li> <li>Run <code>go help modules</code> for more about modules. (This is the main entry point for modules topics via <code>go help</code>)</li> <li>Run <code>go help mod</code> for more about the <code>go mod</code> command.</li> <li>Run <code>go help module-get</code> for more about the behavior of <code>go get</code> when in module-aware mode.</li> <li>Run <code>go help goproxy</code> for more about the module proxy, including a pure file-based option via a <code>file:///</code> URL.</li> <li>The initial \"Go &amp; Versioning\" series of blog posts on <code>vgo</code> by Russ Cox (first posted February 20, 2018)</li> <li>Official golang.org blog post introducing the proposal (March 26, 2018)</li> <li>This provides a more succinct overview of the proposal than the full <code>vgo</code> blog series, along with some of the history and process behind the proposal</li> <li>Official Versioned Go Modules Proposal (last updated March 20, 2018)</li> </ul>"},{"location":"Modules/#introductory-material","title":"Introductory Material","text":"<ul> <li>Introductory 40-minute video \"The Principles of Versions in Go\" from GopherCon Singapore by Russ Cox (May 2, 2018)</li> <li>Succinctly covers the philosophy behind the design of versioned Go modules, including the three core principles of \"Compatibility\", \"Repeatability\", and \"Cooperation\"</li> <li>Example based 35-minute introductory video \"What are Go modules and how do I use them?\" (slides) by Paul Jolly (August 15, 2018)</li> <li>Introductory blog post \"Taking Go Modules for a Spin\" by Dave Cheney (July 14, 2018)</li> <li>Introductory Go Meetup slides on modules by Chris Hines (July 16, 2018)</li> <li>Introductory 30-minute video \"Intro to Go Modules and SemVer\" by Francesc Campoy (Nov 15, 2018)</li> </ul>"},{"location":"Modules/#additional-material","title":"Additional Material","text":"<ul> <li>Blog post \"Using Go modules with vendor support on Travis CI\" by Fatih Arslan (August 26, 2018)</li> <li>Blog post \"Go Modules and CircleCI\" by Todd Keech (July 30, 2018)</li> <li>Blog post \"The vgo proposal is accepted. Now what?\" by Russ Cox (May 29, 2018)</li> <li>Includes a summary of what it means that versioned modules are currently an experimental opt-in feature</li> <li>Blog post on how to build go from tip and start using go modules by Carolyn Van Slyck (July 16, 2018)</li> </ul>"},{"location":"Modules/#changes-since-the-initial-vgo-proposal","title":"Changes Since the Initial Vgo Proposal","text":"<p>As part of the proposal, prototype, and beta processes, there have been over 400 issues created by the overall community. Please continue to supply feedback. </p> <p>Here is a partial list of some of the larger changes and improvements, almost all of which were primarily based on feedback from the community:</p> <ul> <li>Top-level vendor support was retained rather than vgo-based builds ignoring vendor directories entirely (discussion, CL)</li> <li>Backported minimal module-awareness to allow older Go versions 1.9.7+ and 1.10.3+ to more easily consume modules for v2+ projects (discussion,  CL)</li> <li>Allowed vgo to use v2+ tags by default for pre-existing packages did not yet have a go.mod (recent update in related behavior described here)</li> <li>Added support via command <code>go get -u=patch</code> to update all transitive dependencies to the latest available patch-level versions on the same minor version (discussion, documentation)</li> <li>Additional control via environmental variables (e.g., GOFLAGS in #26585, CL)</li> <li>Finer grain control on whether or not go.mod is allowed to be updated, how vendor directory is used, and whether or not network access is allowed (e.g., -mod=readonly, -mod=vendor, GOPROXY=off; related CL for a recent change)</li> <li>Added more flexible replace directives (CL)</li> <li>Added additional ways to interrogate modules (for human consumption, as well as for better editor / IDE integration)</li> <li>The UX of the go CLI has continued to be refined based on experiences so far (e.g., #26581, CL)</li> <li>Additional support for warming caches for use cases such as CI or docker builds via <code>go mod download</code> (#26610)</li> <li>Most likely: better support for installing specific versions of programs to GOBIN (#24250)</li> </ul>"},{"location":"Modules/#github-issues","title":"GitHub Issues","text":"<ul> <li>Currently open module issues</li> <li>Closed module issues</li> <li>Closed vgo issues</li> <li>Submit a new module issue using 'cmd/go:' as the prefix</li> </ul>"},{"location":"Modules/#faqs","title":"FAQs","text":""},{"location":"Modules/#how-are-versions-marked-as-incompatible","title":"How are versions marked as incompatible?","text":"<p>The <code>require</code> directive allows any module to declare that it should be built with version &gt;= x.y.z of a dependency D (which may be specified due to  incompatibilities with version &lt; x.y.z of module D). Empirical data suggests this is the dominant form of constraints used in <code>dep</code> and <code>cargo</code>. In addition, the top-level module in the build can <code>exclude</code> specific versions of dependencies or <code>replace</code> other modules with different code. See the full proposal for more details and rationale.</p> <p>One of the key goals of the versioned modules proposal is to add a common vocabulary and semantics around versions of Go code for both tools and developers. This lays a foundation for future capabilities to declare additional forms of incompatibilities, such as possibly: * declaring deprecated versions as described in the initial <code>vgo</code> blog series * declaring pair-wise incompatibility between modules in an external system as discussed for example here during the proposal process * declaring pair-wise incompatible versions or insecure versions of a module after a release has been published. See for example the on-going discussion in #24031 and #26829</p>"},{"location":"Modules/#when-do-i-get-old-behavior-vs-new-module-based-behavior","title":"When do I get old behavior vs. new module-based behavior?","text":"<p>In general, modules are opt-in for Go 1.11, so by design old behavior is preserved by default.</p> <p>Summarizing when you get the old 1.10 status quo behavior vs. the new opt-in modules-based behavior:</p> <ul> <li>Inside GOPATH \u2014 defaults to old 1.10 behavior (ignoring modules)</li> <li>Outside GOPATH while inside a file tree with a <code>go.mod</code> \u2014 defaults to modules behavior</li> <li>GO111MODULE environment variable:</li> <li>unset or <code>auto</code> \u2014  default behavior above</li> <li><code>on</code> \u2014  force module support on regardless of directory location</li> <li><code>off</code> \u2014 force module support off regardless of directory location</li> </ul>"},{"location":"Modules/#why-does-installing-a-tool-via-go-get-fail-with-error-cannot-find-main-module","title":"Why does installing a tool via <code>go get</code> fail with error <code>cannot find main module</code>?","text":"<p>This occurs when you have set <code>GO111MODULE=on</code>, but are not inside of a file tree with a <code>go.mod</code> when you run <code>go get</code>.</p> <p>The simplest solution is to leave <code>GO111MODULE</code> unset (or equivalently explicitly set to <code>GO111MODULE=auto</code>), which avoids this error.</p> <p>Recall one of the primary reason modules exist is to record precise dependency information. This dependency information is written to your current <code>go.mod</code>.  If you are not inside of a file tree with a <code>go.mod</code> but you have told the <code>go get</code> command to operate in module mode by setting <code>GO111MODULE=on</code>, then running <code>go get</code> will result in the error <code>cannot find main module</code> because there is no <code>go.mod</code> available to record dependency information.</p> <p>Solution alternatives include:</p> <ol> <li> <p>Leave <code>GO111MODULE</code> unset (the default, or explicitly set <code>GO111MODULE=auto</code>), which results in friendlier behavior. This will give you Go 1.10 behavior when you are outside of a module and hence will avoid <code>go get</code> reporting <code>cannot find main module</code>.</p> </li> <li> <p>Leave <code>GO111MODULE=on</code>, but as needed disable modules temporarily and enable Go 1.10 behavior during <code>go get</code>, such as via <code>GO111MODULE=off go get example.com/cmd</code>. This can be turned into a simple script or shell alias such as <code>alias oldget='GO111MODULE=off go get'</code></p> </li> <li> <p>Create a temporary <code>go.mod</code> file that is then discarded. This has been automated by a simple shell script by @rogpeppe. This script allows version information to optionally be supplied via <code>vgoget example.com/cmd[@version]</code>. (This can be a solution for avoiding the error <code>cannot use path@version syntax in GOPATH mode</code>).</p> </li> <li> <p><code>gobin</code> is a module-aware command to install and run main packages. By default, <code>gobin</code> installs/runs main packages without first needing to manually create a module, but with the <code>-m</code> flag it can be told to use an existing module to resolve dependencies. Please see the <code>gobin</code> README and FAQ for details and additional use cases.</p> </li> <li> <p>Create a <code>go.mod</code> you use to track your globally installed tools, such as in <code>~/global-tools/go.mod</code>, and <code>cd</code> to that directory prior to running <code>go get</code> or <code>go install</code> for any globally installed tools. </p> </li> <li> <p>Create a <code>go.mod</code> for each tool in separate directories, such as <code>~/tools/gorename/go.mod</code> and <code>~/tools/goimports/go.mod</code>, and <code>cd</code> to that appropriate directory prior to running <code>go get</code> or <code>go install</code> for the tool. </p> </li> </ol> <p>This current limitation will be resolved. However, the primary issue is that modules are currently opt-in, and a full solution will likely wait until GO111MODULE=on becomes the default behavior. See #24250 for more discussion, including this comment:</p> <p>This clearly must work eventually. The thing I'm not sure about is exactly what this does as far as the version is concerned: does it create a temporary module root and go.mod, do the install, and then throw it away? Probably. But I'm not completely sure, and for now, I didn't want to confuse people by making vgo do things outside go.mod trees. Certainly, the eventual go command integration has to support this.</p> <p>This FAQ has been discussing tracking globally installed tools.</p> <p>If instead, you want to track the tools required by a specific module, see the next FAQ.</p>"},{"location":"Modules/#how-can-i-track-tool-dependencies-for-a-module","title":"How can I track tool dependencies for a module?","text":"<p>If you:  *  want to use a go-based tool (e.g. <code>stringer</code>) while working on a module, and  *  want to ensure that everyone is using the same version of that tool while tracking the tool's version in your module's <code>go.mod</code> file</p> <p>then in Go 1.24 and above, you can add a <code>tool</code> directive to your go.mod: <pre><code>go 1.24\n\n...\n\ntool golang.org/x/tools/cmd/stringer\n</code></pre></p> <p>Before Go 1.24 the recommended approach was to add a <code>tools.go</code> file to your module that includes import statements for the tools of interest (such as <code>import _ \"golang.org/x/tools/cmd/stringer\"</code>), along with a <code>//go:build tools</code> build constraint. The import statements allow the <code>go</code> command to precisely record the version information for your tools in your module's <code>go.mod</code>, while the <code>//go:build tools</code> build constraint prevents your normal builds from actually importing your tools.</p> <p>For a concrete example of how to do this, please see this \"Go Modules by Example\" walkthrough.</p> <p>You can also (since go 1.16) use <code>go install tool@version</code>, which will install a specific version, or (since go 1.17) <code>go run tool@version</code>, which will run the tool without installing, as implemented in #42088 and #40276, which can eliminate the need for tools.go.</p>"},{"location":"Modules/#what-is-the-status-of-module-support-in-ides-editors-and-standard-tools-like-goimports-gorename-etc","title":"What is the status of module support in IDEs, editors and standard tools like goimports, gorename, etc?","text":"<p>Support for modules is starting to land in editors and IDEs. </p> <p>For example:  * GoLand: currently has full support for modules outside and inside GOPATH, including completion, syntax analysis, refactoring, navigation as described here. * VS Code: work is complete, MS recommending modules over GOPATH, the former tracking issue (#1532) has been closed. Documentation is available in the VS Code module repository. * Atom with go-plus: tracking issue is #761. * vim with vim-go: initial support for syntax highlighting and formatting <code>go.mod</code> has landed. Broader support tracked in #1906. * emacs with go-mode.el: tracking issue in #237.</p> <p>The status of other tools such as goimports, guru, gorename and similar tools is being tracked in an umbrella issue #24661. Please see that umbrella issue for latest status.</p> <p>Some tracking issues for particular tools include: * gocode: tracking issue in mdempsky/gocode/#46. Note that <code>nsf/gocode</code> is recommending people migrate off of <code>nsf/gocode</code> to <code>mdempsky/gocode</code>. * go-tools (tools by dominikh such as staticcheck, megacheck, gosimple): sample tracking issue dominikh/go-tools#328.</p> <p>In general, even if your editor, IDE or other tools have not yet been made module aware, much of their functionality should work with modules if you are using modules inside GOPATH and do <code>go mod vendor</code> (because then the proper dependencies should be picked up via GOPATH).</p> <p>The full fix is to move programs that load packages off of <code>go/build</code> and onto <code>golang.org/x/tools/go/packages</code>, which understands how to locate packages in a module-aware manner. This will likely eventually become <code>go/packages</code>.</p>"},{"location":"Modules/#faqs--additional-control","title":"FAQs \u2014 Additional Control","text":""},{"location":"Modules/#what-community-tooling-exists-for-working-with-modules","title":"What community tooling exists for working with modules?","text":"<p>The community is starting to build tooling on top of modules. For example:</p> <ul> <li>github.com/rogpeppe/gohack</li> <li>A new community tool to automate and greatly simplify <code>replace</code> and multi-module workflows, including allowing you to easily modify one of your dependencies </li> <li>For example, <code>gohack example.com/some/dependency</code> automatically clones the appropriate repository and adds the necessary <code>replace</code> directives to your <code>go.mod</code></li> <li>Remove all gohack replace statements with <code>gohack undo</code></li> <li>The project is continuing to expand to make other module-related workflows easier</li> <li>github.com/marwan-at-work/mod</li> <li>Command line tool to automatically upgrade/downgrade major versions for modules</li> <li>Automatically adjusts <code>go.mod</code> files and related import statements in go source code</li> <li>Helps with upgrades, or when first opting into modules with a v2+ package</li> <li>github.com/akyoto/mgit</li> <li>Lets you view &amp; control semver tags of all of your local projects</li> <li>Shows untagged commits and lets you tag them all at once (<code>mgit -tag +0.0.1</code>)</li> <li>github.com/goware/modvendor</li> <li>Helps copy additional files into the <code>vendor/</code> folder, such as shell scripts, .cpp files, .proto files, etc.</li> <li>github.com/psampaz/go-mod-outdated</li> <li>Displays outdated dependencies in a human friendly way </li> <li>Provides a way to filter indirect dependencies and dependencies without updates</li> <li>Provides a way to break CI pipelines in case of outdated dependencies</li> <li>github.com/oligot/go-mod-upgrade</li> <li>Update outdated Go dependencies interactively</li> </ul>"},{"location":"Modules/#when-should-i-use-the-replace-directive","title":"When should I use the replace directive?","text":"<p>As described in the 'go.mod' concepts section above, <code>replace</code> directives provide additional control in the top-level <code>go.mod</code> for what is actually used to satisfy a dependency found in the Go source or go.mod files, while <code>replace</code> directives in modules other than the main module are ignored when building the main module.</p> <p>The <code>replace</code> directive allows you to supply another import path that might be another module located in VCS (GitHub or elsewhere), or on your local filesystem with a relative or absolute file path. The new import path from the <code>replace</code> directive is used without needing to update the import paths in the actual source code.</p> <p><code>replace</code> allows the top-level module control over the exact version used for a dependency, such as:   * <code>replace example.com/some/dependency =&gt; example.com/some/dependency v1.2.3</code></p> <p><code>replace</code> also allows the use of a forked dependency, such as:   * <code>replace example.com/some/dependency =&gt; example.com/some/dependency-fork v1.2.3</code></p> <p>You can also reference branches, for example:   * <code>replace example.com/some/dependency =&gt; example.com/some/dependency-fork master</code></p> <p>One sample use case is if you need to fix or investigate something in a dependency, you can have a local fork and add something like the following in your top-level <code>go.mod</code>:   * <code>replace example.com/original/import/path =&gt; /your/forked/import/path</code></p> <p><code>replace</code> also can be used to inform the go tooling of the relative or absolute on-disk location of modules in a multi-module project, such as:   * <code>replace example.com/project/foo =&gt; ../foo</code></p> <p>Note: if the right-hand side of a <code>replace</code> directive is a filesystem path, then the target must have a <code>go.mod</code> file at that location. If the <code>go.mod</code> file is not present, you can create one with <code>go mod init</code>.</p> <p>In general, you have the option of specifying a version to the left of the <code>=&gt;</code> in a replace directive, but typically it is less sensitive to change if you omit that (e.g., as done in all of the <code>replace</code> examples above).</p> <p>A <code>require</code> directive is needed for each <code>replace</code> directive of a direct dependency. When replacing a dependency from a filesystem path, the version of the corresponding require directive is essentially ignored; in this case, the pseudoversion <code>v0.0.0</code> is a good choice to make this clear, e.g. <code>require example.com/module v0.0.0</code>. </p> <p>You can confirm you are getting your expected versions by running <code>go list -m all</code>, which shows you the actual final versions that will be used in your build including taking into account <code>replace</code> statements.</p> <p>See the 'go mod edit' documentation for more details.</p> <p>github.com/rogpeppe/gohack makes these types of workflows much easier, especially if your goal is to have mutable checkouts of dependencies of a module.  See the repository or the immediately prior FAQ for an overview.</p> <p>See the next FAQ for the details of using <code>replace</code> to work entirely outside of VCS.</p>"},{"location":"Modules/#can-i-work-entirely-outside-of-vcs-on-my-local-filesystem","title":"Can I work entirely outside of VCS on my local filesystem?","text":"<p>Yes. VCS is not required. </p> <p>This is very simple if you have a single module you want to edit at a time outside of VCS (and you either have only one module in total, or if the other modules reside in VCS). In this case, you can place the file tree containing the single <code>go.mod</code> in a convenient location. Your <code>go build</code>, <code>go test</code> and similar commands will work even if your single module is outside of VCS (without requiring any use of <code>replace</code> in your <code>go.mod</code>).</p> <p>If you want to have multiple inter-related modules on your local disk that you want to edit at the same time, then <code>replace</code> directives are one approach. Here is a sample <code>go.mod</code> that uses a <code>replace</code> with a relative path to point the <code>hello</code> module at the on-disk location of the <code>goodbye</code> module (without relying on any VCS):</p> <pre><code>module example.com/me/hello\n\nrequire (\n  example.com/me/goodbye v0.0.0\n)\n\nreplace example.com/me/goodbye =&gt; ../goodbye\n</code></pre> <p>A small runnable example is shown in this thread.</p>"},{"location":"Modules/#how-do-i-use-vendoring-with-modules-is-vendoring-going-away","title":"How do I use vendoring with modules? Is vendoring going away?","text":"<p>The initial series of <code>vgo</code> blog posts did propose dropping vendoring entirely, but feedback from the community resulted in retaining support for vendoring.</p> <p>In brief, to use vendoring with modules: * <code>go mod vendor</code> resets the main module's vendor directory to include all packages needed to build and test all of the module's packages based on the state of the go.mod files and Go source code. * By default, go commands like <code>go build</code> ignore the vendor directory when in module mode. * The <code>-mod=vendor</code> flag (e.g., <code>go build -mod=vendor</code>) instructs the go commands to use the main module's top-level vendor directory to satisfy dependencies. The go commands in this mode therefore ignore the dependency descriptions in go.mod and assume that the vendor directory holds the correct copies of dependencies. Note that only the main module's top-level vendor directory is used; vendor directories in other locations are still ignored. * Some people will want to routinely opt-in to vendoring by setting a <code>GOFLAGS=-mod=vendor</code> environment variable.</p> <p>Older versions of Go such as 1.10 understand how to consume a vendor directory created by <code>go mod vendor</code>, as do Go 1.11 and 1.12+ when module mode is disabled. Therefore, vendoring is one way for a module to provide dependencies to older versions of Go that do not fully understand modules, as well as to consumers that have not enabled modules themselves. </p> <p>If you are considering using vendoring, it is worthwhile to read the \"Modules and vendoring\" and \"Make vendored copy of dependencies\" sections of the tip documentation.</p>"},{"location":"Modules/#are-there-always-on-module-repositories-and-enterprise-proxies","title":"Are there \"always on\" module repositories and enterprise proxies?","text":"<p>Publicly hosted \"always on\" immutable module repositories and optional privately hosted proxies and repositories are becoming available.</p> <p>For example: * proxy.golang.org - Official project - Run by Google - The default Go module proxy built by the Go team. * proxy.golang.com.cn - China proxy project - Run by China Golang Contributor Club - China Go module proxy. * mirrors.tencent.com/go - Commercial project - Run by Tencent Cloud - A Go module proxy alternate. * mirrors.aliyun.com/goproxy - Commercial project - Run by Alibaba Cloud - A Go module proxy alternate. * goproxy.cn - Open source project - Run by Qiniu Cloud - The most trusted Go module proxy in China. * goproxy.io - Open source project - Run by China Golang Contributor Club - A global proxy for Go modules. * Athens - Open source project - Self-hosted - A Go module datastore and proxy. * Goproxy - Open source project - Self-hosted - A minimalist Go module proxy handler. * THUMBAI - Open source project - Self-hosted - Go mod proxy server and Go vanity import path server.</p> <p>Note that you are not required to run a proxy. Rather, the go tooling in 1.11 has added optional proxy support via GOPROXY to enable more enterprise use cases (such as greater control), and also to better handle situations such as \"GitHub is down\" or people deleting GitHub repositories.</p>"},{"location":"Modules/#can-i-control-when-gomod-gets-updated-and-when-the-go-tools-use-the-network-to-satisfy-dependencies","title":"Can I control when go.mod gets updated and when the go tools use the network to satisfy dependencies?","text":"<p>By default, a command like <code>go build</code> will reach out to the network as needed to satisfy imports.</p> <p>Some teams will want to disallow the go tooling from touching the network at certain points, or will want greater control regarding when the go tooling updates <code>go.mod</code>, how dependencies are obtained, and how vendoring is used.</p> <p>The go tooling provides a fair amount of flexibility to adjust or disable these default behaviors, including via <code>-mod=readonly</code>, <code>-mod=vendor</code>, <code>GOFLAGS</code>, <code>GOPROXY=off</code>, <code>GOPROXY=file:///filesystem/path</code>, <code>go mod vendor</code>, and <code>go mod download</code>.</p> <p>The details on these options are spread throughout the official documentation. One community attempt at a consolidated overview of knobs related to these behaviors is here, which includes links to the official documentation for more information.</p>"},{"location":"Modules/#how-do-i-use-modules-with-ci-systems-such-as-travis-or-circleci","title":"How do I use modules with CI systems such as Travis or CircleCI?","text":"<p>The simplest approach is likely just setting the environment variable <code>GO111MODULE=on</code>, which should work with most CI systems.</p> <p>However, it can be valuable to run tests in CI on Go 1.11 with modules enabled as well as disabled, given some of your users will not have yet opted in to modules themselves. Vendoring is also a topic to consider.</p> <p>The following two blog posts cover these topics more concretely:</p> <ul> <li>\"Using Go modules with vendor support on Travis CI\" by Fatih Arslan </li> <li>\"Go Modules and CircleCI\" by Todd Keech </li> </ul>"},{"location":"Modules/#how-do-i-download-modules-needed-to-build-specific-packages-or-tests","title":"How do I download modules needed to build specific packages or tests?","text":"<p>The <code>go mod download</code> command (or equivalently, <code>go mod download all</code>) downloads all modules in the build list (as reported by <code>go list -m all</code>). Many of these modules aren't needed to build packages in the main module, since the full build list contains things like test dependencies and tool dependencies for other modules. Consequently, Docker images prepared with <code>go mod download</code> may be larger than necessary.</p> <p>Instead, consider using <code>go list</code>. For example, <code>go list ./...</code> will download the modules needed to build the packages <code>./...</code> (the set of packages in the main module, when run from the module root directory).</p> <p>To download test dependencies as well, use <code>go list -test ./...</code>.</p> <p>By default, <code>go list</code> will only consider dependencies needed for the current platform. You can set <code>GOOS</code> and <code>GOARCH</code> to make <code>go list</code> consider another platform, for example, <code>GOOS=linux GOARCH=amd64 go list ./...</code>. The <code>-tags</code> flag may also be used to select packages with specific build tags.</p> <p>This technique may be less necessary in the future when lazy module loading is implemented (see #36460), since the module pattern <code>all</code> will include fewer modules.</p>"},{"location":"Modules/#faqs--gomod-and-gosum","title":"FAQs \u2014 go.mod and go.sum","text":""},{"location":"Modules/#why-does-go-mod-tidy-record-indirect-and-test-dependencies-in-my-gomod","title":"Why does 'go mod tidy' record indirect and test dependencies in my 'go.mod'?","text":"<p>The modules system records precise dependency requirements in your <code>go.mod</code>. (For more details, see the go.mod concepts section above or the go.mod tip documentation).</p> <p><code>go mod tidy</code> updates your current <code>go.mod</code> to include the dependencies needed for tests in your module \u2014 if a test fails, we must know which dependencies were used in order to reproduce the failure.</p> <p><code>go mod tidy</code> also ensures your current <code>go.mod</code> reflects the dependency requirements for all possible combinations of OS, architecture, and build tags (as described here). In contrast, other commands like <code>go build</code> and <code>go test</code> only update <code>go.mod</code> to provide the packages imported by the requested packages under the current <code>GOOS</code>, <code>GOARCH</code>, and build tags (which is one reason <code>go mod tidy</code> might add requirements that were not added by <code>go build</code> or similar).</p> <p>If a dependency of your module does not itself have a <code>go.mod</code> (e.g., because the dependency has not yet opted in to modules itself), or if its <code>go.mod</code> file is missing one or more of its dependencies (e.g., because the module author did not run <code>go mod tidy</code>), then the missing transitive dependencies will be added to your module's requirements, along with an <code>// indirect</code> comment to indicate that the dependency is not from a direct import within your module.  </p> <p>Note that this also means that any missing test dependencies from your direct or indirect dependencies will also be recorded in your <code>go.mod</code>. (An example of when this is important: <code>go test all</code> runs the tests of all direct and indirect dependencies of your module, which is one way to validate that your current combination of versions work together. If a test fails in one of your dependencies when you run <code>go test all</code>, it is important to have a complete set of test dependency information recorded so that you have reproducible <code>go test all</code> behavior).</p> <p>Another reason you might have <code>// indirect</code> dependencies in your <code>go.mod</code> file is if you have upgraded (or downgraded) one of your indirect dependencies beyond what is required by your direct dependencies, such as if you ran <code>go get -u</code> or <code>go get foo@1.2.3</code>. The go tooling needs a place to record those new versions, and it does so in your <code>go.mod</code> file (and it does not reach down into your dependencies to modify their <code>go.mod</code> files).</p> <p>In general, the behaviors described above are part of how modules provide 100% reproducible builds and tests by recording precise dependency information.</p> <p>If you are curious as to why a particular module is showing up in your <code>go.mod</code>, you can run <code>go mod why -m &lt;module&gt;</code> to answer that question.  Other useful tools for inspecting requirements and versions include <code>go mod graph</code> and <code>go list -m all</code>.</p>"},{"location":"Modules/#is-gosum-a-lock-file-why-does-gosum-include-information-for-module-versions-i-am-no-longer-using","title":"Is 'go.sum' a lock file? Why does 'go.sum' include information for module versions I am no longer using?","text":"<p>No, <code>go.sum</code> is not a lock file. The <code>go.mod</code> files in a build provide enough information for 100% reproducible builds.</p> <p>For validation purposes, <code>go.sum</code> contains the expected cryptographic checksums of the content of specific module versions. See the FAQ below for more details on <code>go.sum</code> (including why you typically should check in <code>go.sum</code>) as well as the \"Module downloading and verification\" section in the tip documentation.</p> <p>In addition, your module's <code>go.sum</code> records checksums for all direct and indirect dependencies used in a build (and hence your <code>go.sum</code> will frequently have more modules listed than your <code>go.mod</code>).</p>"},{"location":"Modules/#should-i-commit-my-gosum-file-as-well-as-my-gomod-file","title":"Should I commit my 'go.sum' file as well as my 'go.mod' file?","text":"<p>Typically your module's <code>go.sum</code> file should be committed along with your <code>go.mod</code> file. </p> <ul> <li><code>go.sum</code> contains the expected cryptographic checksums of the content of specific module versions.</li> <li>If someone clones your repository and downloads your dependencies using the go command, they will receive an error if there is any mismatch between their downloaded copies of your dependencies and the corresponding entries in your <code>go.sum</code>.</li> <li>In addition, <code>go mod verify</code> checks that the on-disk cached copies of module downloads still match the entries in <code>go.sum</code>.</li> <li>Note that <code>go.sum</code> is not a lock file as used in some alternative dependency management systems. (<code>go.mod</code> provides enough information for reproducible builds).</li> <li>See very brief rationale here from Filippo Valsorda on why you should check in your <code>go.sum</code>. See the \"Module downloading and verification\" section of the tip documentation for more details. See possible future extensions being discussed for example in #24117 and #25530.</li> </ul>"},{"location":"Modules/#should-i-still-add-a-gomod-file-if-i-do-not-have-any-dependencies","title":"Should I still add a 'go.mod' file if I do not have any dependencies?","text":"<p>Yes. This supports working outside of GOPATH, helps communicate to the ecosystem that you are opting in to modules, and in addition the <code>module</code> directive in your <code>go.mod</code> serves as a definitive declaration of the identity of your code (which is one reason why import comments might eventually be deprecated). Of course, modules are purely an opt-in capability in Go 1.11.</p>"},{"location":"Modules/#faqs--semantic-import-versioning","title":"FAQs \u2014 Semantic Import Versioning","text":""},{"location":"Modules/#why-must-major-version-numbers-appear-in-import-paths","title":"Why must major version numbers appear in import paths?","text":"<p>Please see the discussion on the Semantic Import Versioning and the import compatibility rule in the \"Semantic Import Versioning\" concepts section above. See also the blog post announcing the proposal, which talks more about the motivation and justification for the import compatibility rule.</p>"},{"location":"Modules/#why-are-major-versions-v0-v1-omitted-from-import-paths","title":"Why are major versions v0, v1 omitted from import paths?\"","text":"<p>Please see the question \"Why are major versions v0, v1 omitted from import paths?\" in the earlier FAQ from the official proposal discussion.</p>"},{"location":"Modules/#what-are-some-implications-of-tagging-my-project-with-major-version-v0-v1-or-making-breaking-changes-with-v2","title":"What are some implications of tagging my project with major version v0, v1, or making breaking changes with v2+?","text":"<p>In response to a comment about \"k8s does minor releases but changes the Go API in each minor release\", Russ Cox made the following response that highlights some implications for picking v0, v1, vs. frequently making breaking changes with v2, v3, v4, etc. with your project:</p> <p>I don't fully understand the k8s dev cycle etc, but I think generally the k8s team needs to decide/confirm what they intend to guarantee to users about stability and then apply version numbers accordingly to express that.</p> <ul> <li>To make a promise about API compatibility (which seems like the best user experience!) then start doing that and use 1.X.Y.</li> <li>To have the flexibility to make backwards-incompatible changes in every release but allow different parts of a large program to upgrade their code on different schedules, meaning different parts can use different major versions of the API in one program, then use X.Y.0, along with import paths like k8s.io/client/vX/foo.</li> <li>To make no promises about API compatible and also require every build to have only one copy of the k8s libraries no matter what, with the implied forcing of all parts of a build to use the same version even if not all of them are ready for it, then use 0.X.Y.</li> </ul> <p>On a related note, Kubernetes has some atypical build approaches (currently including custom wrapper scripts on top of godep), and hence Kubernetes is an imperfect example for many other projects, but it will likely be an interesting example as Kubernetes moves towards adopting Go 1.11 modules. </p>"},{"location":"Modules/#can-a-module-consume-a-package-that-has-not-opted-in-to-modules","title":"Can a module consume a package that has not opted in to modules?","text":"<p>Yes.</p> <p>If a repository has not opted in to modules but has been tagged with valid semver tags (including the required leading <code>v</code>), then those semver tags can be used in a <code>go get</code>, and a corresponding semver version will be record in the importing module's <code>go.mod</code> file. If the repository does not have any valid semver tags, then the repository's version will be recorded with a \"pseudo-version\" such as <code>v0.0.0-20171006230638-a6e239ea1c69</code> (which includes a timestamp and a commit hash, and which are designed to allow a total ordering across versions recorded in <code>go.mod</code> and to make it easier to reason about which recorded versions are \"later\" than another recorded version).</p> <p>For example, if the latest version of package <code>foo</code> is tagged <code>v1.2.3</code> but <code>foo</code> has not itself opted in to modules, then running <code>go get foo</code> or <code>go get foo@v1.2.3</code> from inside module M will be recorded in module M's <code>go.mod</code> file as:</p> <pre><code>require  foo  v1.2.3\n</code></pre> <p>The <code>go</code> tool will also use available semver tags for a non-module package in additional workflows (such as <code>go list -u=patch</code>, which upgrades the dependencies of a module to available patch releases, or <code>go list -u -m all</code>, which shows available upgrades, etc.).</p> <p>Please see the next FAQs for additional details related to v2+ packages that have not opted in to modules.</p>"},{"location":"Modules/#can-a-module-consume-a-v2-package-that-has-not-opted-into-modules-what-does-incompatible-mean","title":"Can a module consume a v2+ package that has not opted into modules? What does '+incompatible' mean?","text":"<p>Yes, a module can import a v2+ package that has not opted into modules, and if the imported v2+ package has a valid semver tag, it will be recorded with a <code>+incompatible</code> suffix.</p> <p>Additional Details</p> <p>Please be familiar with the material in the \"Semantic Import Versioning\" section above.</p> <p>It is helpful to first review some core principles that are generally useful but particularly important to keep in mind when thinking about the behavior described in this FAQ.</p> <p>The following core principles are always true when the <code>go</code> tool is operating in module mode (e.g., <code>GO111MODULE=on</code>):</p> <ol> <li>A package's import path defines the identity of the package.</li> <li>Packages with different import paths are treated as different packages.</li> <li>Packages with the same import path are treated as the same package (and this is true even if the VCS tags say the packages have different major versions).</li> <li>An import path without a <code>/vN</code> is treated as a v1 or v0 module (and this is true even if the imported package has not opted in to modules and has VCS tags that say the major version is greater than 1).</li> <li>The module path (such as <code>module foo/v2</code>) declared at the start of a module's <code>go.mod</code> file is both:</li> <li>the definitive declaration of that module's identity</li> <li>the definitive declaration of how that module must be imported by consuming code</li> </ol> <p>As we will see in the next FAQ, these principles are not always true when the <code>go</code> tool is not in module mode, but these principles are always true when the <code>go</code> tool is in module mode.</p> <p>In short, the <code>+incompatible</code> suffix indicates that principle 2 above is in effect when the following are true: * an imported package has not opted in to modules, and * its VCS tags say the major version is greater than 1, and * principle 2 is overriding the VCS tags \u2013 the import path without a <code>/vN</code> is treated as a v1 or v0 module (even though the VCS tags say otherwise)</p> <p>When the <code>go</code> tool is in module mode, it will assume a non-module v2+ package has no awareness of Semantic Import Versioning and treat it as an (incompatible) extension of the v1 version series of the package (and the <code>+incompatible</code> suffix is an indication that the <code>go</code> tool is doing so).</p> <p>Example</p> <p>Suppose: * <code>oldpackage</code> is a package that predates the introduction of modules * <code>oldpackage</code> has never opted in to modules (and hence does not have a <code>go.mod</code> itself) * <code>oldpackage</code> has a valid semver tag <code>v3.0.1</code>, which is its latest tag</p> <p>In this case, running for example <code>go get oldpackage@latest</code> from inside module M will record the following in module M's <code>go.mod</code> file:</p> <pre><code>require  oldpackage  v3.0.1+incompatible\n</code></pre> <p>Note that there is no <code>/v3</code> used at the end of <code>oldpackage</code> in the <code>go get</code> command above or in the recorded <code>require</code> directive \u2013 using <code>/vN</code> in module paths and import paths is a feature of Semantic Import Versioning, and <code>oldpackage</code> has not signaled its acceptance and understanding of Semantic Import Versioning given <code>oldpackage</code> has not opted into modules by having a <code>go.mod</code> file within <code>oldpackage</code> itself. In other words, even though <code>oldpackage</code> has a semver tag of <code>v3.0.1</code>, <code>oldpackage</code> is not granted the rights and responsibilities of Semantic Import Versioning (such as using <code>/vN</code> in import paths) because <code>oldpackage</code> has not yet stated its desire to do so.</p> <p>The <code>+incompatible</code> suffix indicates that the <code>v3.0.1</code> version of <code>oldpackage</code> has not actively opted in to modules, and hence the <code>v3.0.1</code> version of <code>oldpackage</code> is assumed to not understand Semantic Import Versioning or how to use major versions in import paths. Therefore, when operating in module mode, the <code>go</code> tool will treat the non-module <code>v3.0.1</code> version of <code>oldpackage</code> as an (incompatible) extension of the v1 version series of <code>oldpackage</code> and assume that the <code>v3.0.1</code> version of <code>oldpackage</code> has no awareness of Semantic Import Versioning, and the <code>+incompatible</code> suffix is an indication that the <code>go</code> tool is doing so. </p> <p>The fact that the <code>v3.0.1</code> version of <code>oldpackage</code> is considered to be part of the v1 release series according to Semantic Import Versioning means for example that versions <code>v1.0.0</code>, <code>v2.0.0</code>, and <code>v3.0.1</code> are all always imported using the same import path:</p> <pre><code>import  \"oldpackage\"\n</code></pre> <p>Note again that there is no <code>/v3</code> used at the end of <code>oldpackage</code>.</p> <p>In general, packages with different import paths are different packages. In this example, given versions <code>v1.0.0</code>, <code>v2.0.0</code>, and <code>v3.0.1</code> of <code>oldpackage</code> would all be imported using the same import path, they are therefore treated by a build as the same package (again because <code>oldpackage</code> has not yet opted in to Semantic Import Versioning), with a single copy of <code>oldpackage</code> ending up in any given build. (The version used will be the semantically highest of the versions listed in any <code>require</code> directives; see \"Version Selection\").</p> <p>If we suppose that later a new <code>v4.0.0</code> release of <code>oldpackage</code> is created that adopts modules and hence contains a <code>go.mod</code> file, that is the signal that <code>oldpackage</code> now understands the rights and responsibilities of Semantic Import Versioning, and hence a module-based consumer would now import using <code>/v4</code> in the import path:</p> <pre><code>import  \"oldpackage/v4\"\n</code></pre> <p>and the version would be recorded as:</p> <pre><code>require  oldpackage/v4  v4.0.0\n</code></pre> <p><code>oldpackage/v4</code> is now a different import path than <code>oldpackage</code>, and hence a different package.  Two copies (one for each import path) would end up in a module-aware build if some consumers in the build have <code>import \"oldpackage/v4\"</code> while other consumers in the same build have <code>import \"oldpackage\"</code>. This is desirable as part of the strategy to allow gradual adoption of modules. In addition, even after modules are out of their current transitional phase, this behavior is also desirable to allow gradual code evolution over time with different consumers upgrading at different rates to newer versions (e.g., allowing different consumers in a large build to choose to upgrade at different rates from <code>oldpackage/v4</code> to some future <code>oldpackage/v5</code>).</p>"},{"location":"Modules/#how-are-v2-modules-treated-in-a-build-if-modules-support-is-not-enabled-how-does-minimal-module-compatibility-work-in-197-1103-and-111","title":"How are v2+ modules treated in a build if modules support is not enabled? How does \"minimal module compatibility\" work in 1.9.7+, 1.10.3+, and 1.11?","text":"<p>When considering older Go versions or Go code that has not yet opted in to modules, Semantic Import Versioning has significant backwards-compatibility implications related to v2+ modules.</p> <p>As described in the \"Semantic Import Versioning\" section above: * a module that is version v2 or higher must include a <code>/vN</code> in its own module path declared in its <code>go.mod</code>. * a module-based consumer (that is, code that has opted in to modules) must include a <code>/vN</code> in the import path to import a v2+ module. </p> <p>However, the ecosystem is expected to proceed at varying paces of adoption for modules and Semantic Import Versioning.</p> <p>As described in more detail in the \"How to Release a v2+ Module\" section, in the \"Major Subdirectory\" approach, the author of a v2+ module creates subdirectories such as <code>mymodule/v2</code> or <code>mymodule/v3</code> and moves or copies the appropriate packages underneath those subdirectories. This means the traditional import path logic (even in older Go releases such as Go 1.8 or 1.7) will find the appropriate packages upon seeing an import statement such as <code>import \"mymodule/v2/mypkg\"</code>. Hence, packages residing in a \"Major Subdirectory\" v2+ module will be found and used even if modules support is not enabled (whether that is because you are running Go 1.11 and have not enabled modules, or because you are running a older version like Go 1.7, 1.8, 1.9 or 1.10 that does not have full module support).  Please see the \"How to Release a v2+ Module\" section for more details on the \"Major Subdirectory\" approach.</p> <p>The remainder of this FAQ is focused on the \"Major Branch\" approach described in the \"How to Release a v2+ Module\" section. In the \"Major Branch\" approach, no <code>/vN</code> subdirectories are created and instead the module version information is communicated by the <code>go.mod</code> file and by applying semver tags to commits (which often will be on <code>master</code>, but could be on different branches).</p> <p>In order to help during the current transitional period, \"minimal module compatibility\" was introduced to Go 1.11 to provide greater compatibility for Go code that has not yet opted in to modules, and that \"minimal module compatibility\" was also backported to Go 1.9.7 and 1.10.3 (where those versions are effectively always operating with full module mode disabled given those older Go versions do not have full module support).</p> <p>The primary goals of \"minimal module compatibility\" are:</p> <ol> <li> <p>Allow older Go versions 1.9.7+ and 1.10.3+ to be able to more easily compile modules that are using Semantic Import Versioning with <code>/vN</code> in import paths, and provide that same behavior when module mode is disabled in Go 1.11.</p> </li> <li> <p>Allow old code to be able to consume a v2+ module without requiring that old consumer code to immediately change to using a new <code>/vN</code> import path when consuming a v2+ module.  </p> </li> <li> <p>Do so without relying on the module author to create <code>/vN</code> subdirectories.</p> </li> </ol> <p>Additional Details \u2013 \"Minimal Module Compatibility\"</p> <p>\"Minimal module compatibility\" only takes effect when full module mode is disabled for the <code>go</code> tool, such as if you have set <code>GO111MODULE=off</code> in Go 1.11, or are using Go versions 1.9.7+ or 1.10.3+.</p> <p>When a v2+ module author has not created <code>/v2</code> or <code>/vN</code> subdirectories and you are instead relying on the \"minimal module compatibility\" mechanism in Go 1.9.7+, 1.10.3+ and 1.11:</p> <ul> <li>A package that has not opted in to modules would not include the major version in the import path for any imported v2+ modules. </li> <li>In contrast, a package that has opted in to modules must include the major version in the import path to import any v2+ modules. </li> <li>If a package has opted in to modules, but does not include the major version in the import path when importing a v2+ modules, it will not import a v2+ version of that module when the <code>go</code> tool is operating in full module mode. (A package that has opted in to modules is assumed to \"speak\" Semantic Import Versioning. If <code>foo</code> is a module with v2+ versions, then under Semantic Import Versioning saying <code>import \"foo\"</code> means import the v1 Semantic Import Versioning series of <code>foo</code>). </li> <li>The mechanism used to implement \"minimal module compatibility\" is intentionally very narrow:</li> <li>The entirety of the logic is \u2013 when operating in GOPATH mode, an unresolvable import statement containing a <code>/vN</code> will be tried again after removing the <code>/vN</code> if the import statement is inside code that has opted in to modules (that is, import statements in <code>.go</code> files within a tree with a valid <code>go.mod</code> file). </li> <li>The net effect is that an import statement such as <code>import \"foo/v2\"</code> within code that lives inside of a module will still compile correctly in GOPATH mode in 1.9.7+, 1.10.3+ and 1.11, and it will resolve as if it said <code>import \"foo\"</code> (without the <code>/v2</code>), which means it will use the version of <code>foo</code> that resides in your GOPATH without being confused by the extra <code>/v2</code>.</li> <li>\"Minimal module compatibility\" does not affect anything else, including it does not the affect paths used in the <code>go</code> command line (such as arguments to <code>go get</code> or <code>go list</code>).</li> <li>This transitional \"minimal module awareness\" mechanism purposefully breaks the rule of \"packages with different import paths are treated as different packages\" in pursuit a very specific backwards-compatibility goal \u2013 to allow old code to compile unmodified when it is consuming a v2+ module. In slightly more detail:</li> <li>It would be a more burdensome for the overall ecosystem if the only way for old code to consume a v2+ module was to first change the old code. </li> <li>If we are not modifying old code, then that old code must work with pre-module import paths for v2+ modules.</li> <li>On the other hand, new or updated code opting in to modules must use the new <code>/vN</code> import for v2+ modules.</li> <li>The new import path is not equal to old import path, yet both are allowed to work in a single build, and therefore we have two different functioning import paths that resolve to the same package.</li> <li>For example, when operating in GOPATH mode, <code>import \"foo/v2\"</code> appearing in module-based code resolves to the same code residing in your GOPATH as <code>import \"foo\"</code>, and the build ends up with one copy of <code>foo</code> \u2013 in particular, whatever version is on disk in GOPATH. This allows module-based code with  <code>import \"foo/v2\"</code> to compile even in GOPATH mode in 1.9.7+, 1.10.3+ and 1.11.</li> <li>In contrast, when the <code>go</code> tool is operating in full module mode:</li> <li>There are no exceptions to the rule \"packages with different import paths are different packages\" (including vendoring has been refined in full module mode to also adhere to this rule).</li> <li>For example, if the <code>go</code> tool is in full module mode and <code>foo</code> is a v2+ module, then <code>import \"foo\"</code> is asking for a v1 version of <code>foo</code> vs. <code>import \"foo/v2\"</code> is asking for a v2 version of <code>foo</code>.</li> </ul>"},{"location":"Modules/#what-happens-if-i-create-a-gomod-but-do-not-apply-semver-tags-to-my-repository","title":"What happens if I create a go.mod but do not apply semver tags to my repository?","text":"<p>semver is a foundation of the modules system. In order to provide the best experience for consumers, module authors are encouraged to apply semver VCS tags (e.g., <code>v0.1.0</code> or <code>v1.2.3-rc.1</code>), but semver VCS tags are not strictly required:</p> <ol> <li> <p>Modules are required to follow the semver specification in order for the <code>go</code> command to behave as documented. This includes following the semver specification regarding how and when breaking changes are allowed.</p> </li> <li> <p>Modules that do not have semver VCS tags are recorded by consumers using a semver version in the form of a pseudo-version. Typically this will be a v0 major version, unless the module author constructed a v2+ module following the \"Major Subdirectory\" approach.</p> </li> <li> <p>Therefore, modules that do not apply semver VCS tags and have not created a \"Major Subdirectory\" are effectively declaring themselves to be in the semver v0 major version series, and a module-based consumer will treat them as having a semver v0 major version.</p> </li> </ol>"},{"location":"Modules/#can-a-module-depend-on-a-different-version-of-itself","title":"Can a module depend on a different version of itself?","text":"<p>A module can depend on a different major version of itself: by-and-large, this is comparable to depending on a different module. This can be useful for different reasons, including to allow a major version of a module to be implemented as a shim around a different major version.</p> <p>In addition, a module can depend on a different major version of itself in a cycle, just as two completely different modules can depend on each other in a cycle.</p> <p>However, if you are not expecting a module to depend on a different version of itself, it can be a sign of a mistake. For example, .go code intending to import a package from a v3 module might be missing the required <code>/v3</code> in the import statement. That mistake can manifest as a v3 module depending on the v1 version of itself. </p> <p>If you are surprised to see a module to depend on a different version of itself, it can be worthwhile to review the \"Semantic Import Versioning\" section above along with the FAQ \"What can I check if I am not seeing the expected version of a dependency?\".</p> <p>It continues to be a constraint that two packages may not depend on each other in a cycle.</p>"},{"location":"Modules/#faqs--multi-module-repositories","title":"FAQS \u2014 Multi-Module Repositories","text":""},{"location":"Modules/#what-are-multi-module-repositories","title":"What are multi-module repositories?","text":"<p>A multi-module repository is a repository that contains multiple modules, each with its own go.mod file. Each module starts at the directory containing its go.mod file, and contains all packages from that directory and its subdirectories recursively, excluding any subtree that contains another go.mod file.</p> <p>Each module has its own version information. Version tags for modules below the root of the repository must include the relative directory as a prefix. For example, consider the following repository:</p> <pre><code>my-repo\n`-- foo\n    `-- rop\n        `-- go.mod\n</code></pre> <p>The tag for version 1.2.3 of module \"my-repo/foo/rop\" is \"foo/rop/v1.2.3\".</p> <p>Typically, the path for one module in the repository will be a prefix of the others. For example, consider this repository:</p> <p><pre><code>my-repo\n|-- bar\n|-- foo\n|   |-- rop\n|   `-- yut\n|-- go.mod\n`-- mig\n    |-- go.mod\n    `-- vub\n</code></pre> </p> <p>Fig. A top-level module's path is a prefix of another module's path.</p> <p>This repository contains two modules. However, the module \"my-repo\" is a prefix of the path of the module \"my-repo/mig\".</p>"},{"location":"Modules/#should-i-have-multiple-modules-in-a-single-repository","title":"Should I have multiple modules in a single repository?","text":"<p>Adding modules, removing modules, and versioning modules in such a configuration require considerable care and deliberation, so it is almost always easier and simpler to manage a single-module repository rather than multiple modules in an existing repository.</p> <p>Russ Cox commented in #26664:</p> <p>For all but power users, you probably want to adopt the usual convention that one repo = one module. It's important for long-term evolution of code storage options that a repo can contain multiple modules, but it's almost certainly not something you want to do by default.</p> <p>Two examples of how multi-modules can be more work:   * <code>go test ./...</code> from the repository root will no longer test everything in the repository  * you might need to routinely manage the relationship between the modules via <code>replace</code> directives.</p> <p>However, there is additional nuance beyond those two examples. Please read the FAQs in this sub-section carefully if you are considering having multiple modules in a single repository.</p> <p>Two example scenarios where it can make sense to have more than one <code>go.mod</code> in a repository:</p> <ol> <li> <p>if you have usage examples where the examples themselves have a complex set of dependencies (e.g., perhaps you have a small package but include an example of using your package with kubernetes). In that case, it can make sense for your repository to have an <code>example</code> or <code>_example</code> directory with its own <code>go.mod</code>, such as shown here.</p> </li> <li> <p>if you have a repository with a complex set of dependencies, but you have a client API with a smaller set of dependencies. In some cases, it might make sense to have an <code>api</code> or <code>clientapi</code> or similar directory with its own <code>go.mod</code>, or to separate out that <code>clientapi</code> into its own repository. </p> </li> </ol> <p>However, for both of those cases, if you are considering creating a multi-module repository for performance or download size for a large set of indirect dependencies, you are strongly encouraged to first try with a GOPROXY, which will be enabled by default in Go 1.13.  Using a GOPROXY mostly equals any performance benefits or dependency download size benefits that might otherwise come from creating a multi-module repository.</p>"},{"location":"Modules/#is-it-possible-to-add-a-module-to-a-multi-module-repository","title":"Is it possible to add a module to a multi-module repository?","text":"<p>Yes. However, there are two classes of this problem:</p> <p>The first class: the package to which the module is being added to is not in version control yet (a new package). This case is straightforward: add the package and the go.mod in the same commit, tag the commit, and push.</p> <p>The second class: the path at which the module is being added is in version control and contains one or more existing packages. This case requires a considerable amount of care. To illustrate, consider again the following repository (now in a github.com location to simulate the real-world better):</p> <pre><code>github.com/my-repo\n|-- bar\n|-- foo\n|   |-- rop\n|   `-- yut\n|-- go.mod\n`-- mig\n    `-- vub\n</code></pre> <p>Consider adding module \"github.com/my-repo/mig\". If one were to follow the same approach as above, the package /my-repo/mig could be provided by two different modules: the old version of \"github.com/my-repo\", and the new, standalone module \"github.com/my-repo/mig. If both modules are active, importing \"github.com/my-repo/mig\" would cause an \u201cambiguous import\u201d error at compile time.</p> <p>The way to get around this is to make the newly-added module depend on the module it was \"carved out\" from, at a version after which it was carved out.</p> <p>Let's step through this with the above repository, assuming that \"github.com/my-repo\" is currently at v1.2.3:</p> <ol> <li> <p>Add github.com/my-repo/mig/go.mod:</p> <pre><code>cd path-to/github.com/my-repo/mig\ngo mod init github.com/my-repo/mig\n\n# Note: if \"my-repo/mig\" does not actually depend on \"my-repo\", add a blank\n# import.\n# Note: version must be at or after the carve-out.\ngo mod edit -require github.com/myrepo@v1.3\n</code></pre> </li> <li> <p><code>git commit</code></p> </li> <li><code>git tag v1.3.0</code></li> <li><code>git tag mig/v1.0.0</code></li> <li> <p>Next, let's test these. We can't <code>go build</code> or <code>go test</code> naively, since the go commands would try to fetch each dependent module from the module cache. So, we need to use replace rules to cause <code>go</code> commands to use the local copies:</p> <pre><code>cd path-to/github.com/my-repo/mig\ngo mod edit -replace github.com/my-repo@v1.3.0=../\ngo test ./...\ngo mod edit -dropreplace github.com/my-repo@v1.3.0\n</code></pre> </li> <li> <p><code>git push origin master v1.3.0 mig/v1.0.0</code> push the commit and both tags</p> </li> </ol> <p>Note that in the future golang.org/issue/28835 should make the testing step a more straightforward experience.</p> <p>Note also that code was removed from module \"github.com/my-repo\" between minor versions. It may seem strange to not consider this a major change, but in this instance the transitive dependencies continue to provide compatible implementations of the removed packages at their original import paths.</p>"},{"location":"Modules/#is-it-possible-to-remove-a-module-from-a-multi-module-repository","title":"Is it possible to remove a module from a multi-module repository?","text":"<p>Yes, with the same two cases and similar steps as above. </p>"},{"location":"Modules/#can-a-module-depend-on-an-internal-in-another","title":"Can a module depend on an internal/ in another?","text":"<p>Yes. Packages in one module are allowed to import internal packages from another module as long as they share the same path prefix up to the internal/ path component. For example, consider the following repository:</p> <pre><code>my-repo\n|-- foo\n|   `-- go.mod\n|-- go.mod\n`-- internal\n</code></pre> <p>Here, package foo can import /my-repo/internal as long as module \"my-repo/foo\" depends on module \"my-repo\". Similarly, in the following repository:</p> <pre><code>my-repo\n|-- foo\n|   `-- go.mod\n`-- internal\n    `-- go.mod\n</code></pre> <p>Here, package foo can import my-repo/internal as long as module \"my-repo/foo\" depends on module \"my-repo/internal\". The semantics are the same in both: since my-repo is a shared path prefix between my-repo/internal and my-repo/foo, package foo is allowed to import package internal.</p>"},{"location":"Modules/#can-an-additional-gomod-exclude-unnecessary-content-do-modules-have-the-equivalent-of-a-gitignore-file","title":"Can an additional go.mod exclude unnecessary content? Do modules have the equivalent of a .gitignore file?","text":"<p>One additional use case for having multiple <code>go.mod</code> files in a single repository is if the repository has files that should be pruned from a module. For example, a repository might have very large files that are not needed for the Go module, or a multi-language repository might have many non-Go files. </p> <p>An empty <code>go.mod</code> in a directory will cause that directory and all of its subdirectories to be excluded from the top-level Go module.</p> <p>If the excluded directory does not contain any <code>.go</code> files, no additional steps are needed beyond placing the empty <code>go.mod</code> file. If the excluded directory does contain <code>.go</code> files, please first carefully review the other FAQs in this multi-module repository section.</p>"},{"location":"Modules/#faqs--minimal-version-selection","title":"FAQs \u2014 Minimal Version Selection","text":""},{"location":"Modules/#wont-minimal-version-selection-keep-developers-from-getting-important-updates","title":"Won't minimal version selection keep developers from getting important updates?","text":"<p>Please see the question \"Won't minimal version selection keep developers from getting important updates?\" in the earlier FAQ from the official proposal discussion.</p>"},{"location":"Modules/#faqs--possible-problems","title":"FAQs \u2014 Possible Problems","text":""},{"location":"Modules/#what-are-some-general-things-i-can-spot-check-if-i-am-seeing-a-problem","title":"What are some general things I can spot check if I am seeing a problem?","text":"<ul> <li>Double-check that modules are enabled by running <code>go env</code> to confirm it does not show an empty value for the read-only <code>GOMOD</code> variable.</li> <li>Note: you never set <code>GOMOD</code> as a variable because it is effectively read-only debug output that <code>go env</code> outputs.  </li> <li>If you are setting <code>GO111MODULE=on</code> to enable modules, double-check that it is not accidentally the plural <code>GO111MODULES=on</code>. (People sometimes naturally include the <code>S</code> because the feature is often called \"modules\").</li> <li>If vendoring is expected to be used, check that the <code>-mod=vendor</code> flag is being passed to <code>go build</code>or similar, or that <code>GOFLAGS=-mod=vendor</code> is set. </li> <li>Modules by default ignore the <code>vendor</code> directory unless you ask the <code>go</code> tool to use <code>vendor</code>.</li> <li>It is frequently helpful to check <code>go list -m all</code> to see the list of actual versions selected for your build</li> <li><code>go list -m all</code> usually gives you more detail compared to if you were to instead just look a <code>go.mod</code> file. </li> <li>If running <code>go get foo</code> fails in some way, or if <code>go build</code> is failing on a particular package <code>foo</code>, it often can be helpful to check the output from <code>go get -v foo</code> or <code>go get -v -x foo</code>:</li> <li>In general, <code>go get</code> will often provide more a detailed error message than <code>go build</code>.</li> <li>The <code>-v</code> flag to <code>go get</code> asks to print more verbose details, though be mindful that certain \"errors\" such as 404 errors might be expected based on how a remote repository was configured.</li> <li>If the nature of the problem is still not clear, you can also try the more verbose <code>go get -v -x foo</code>, which also shows the git or other VCS commands being issued.  (If warranted, you can often execute the same git commands outside of the context of the <code>go</code> tool for troubleshooting purposes).</li> <li>You can check to see if you are using a particularly old git version</li> <li>Older versions of git were a common source of problems for the <code>vgo</code> prototype and Go 1.11 beta, but much less frequently in the GA 1.11. </li> <li>The module cache in Go 1.11 can sometimes cause various errors, primarily if there were previously network issues or multiple <code>go</code> commands executing in parallel (see #26794, which is addressed for Go 1.12).  As a troubleshooting step, you can copy $GOPATH/pkg/mod to a backup directory (in case further investigation is warranted later), run <code>go clean -modcache</code>, and then see whether the original problem persists.</li> <li>If you are using Docker, it can be helpful to check if you can reproduce the behavior outside of Docker (and if the behavior only occurs in Docker, the list of bullets above can be used as a starting point to compare results between inside Docker vs. outside).</li> </ul> <p>The error you are currently examining might be a secondary issue caused by not having the expected version of a particular module or package in your build. Therefore, if the cause of a particular error is not obvious, it can be helpful to spot check your versions as described in the next FAQ.</p>"},{"location":"Modules/#what-can-i-check-if-i-am-not-seeing-the-expected-version-of-a-dependency","title":"What can I check if I am not seeing the expected version of a dependency?","text":"<ol> <li> <p>A good first step is to run <code>go mod tidy</code>. There is some chance this might resolve the issue, but it will also help put your <code>go.mod</code> file into a consistent state with respect to your <code>.go</code> source code, which will help make any subsequent investigation easier. (If <code>go mod tidy</code> itself changes the versions of a dependency in a way you don't expect, first read this FAQ on 'go mod tidy'. If that does not explain it, you can try resetting your <code>go.mod</code> and then run <code>go list -mod=readonly all</code>, which might give a more specific message about whatever was requiring a change to its version).</p> </li> <li> <p>The second step usually should be to check <code>go list -m all</code> to see the list of actual versions selected for your build.  <code>go list -m all</code> shows you the final selected versions, including for indirect dependencies and after resolving versions for any shared dependencies. It also shows the outcome of any <code>replace</code> and <code>exclude</code> directives.</p> </li> <li> <p>A good next step can be to examine the output of <code>go mod graph</code> or <code>go mod graph | grep &lt;module-of-interest&gt;</code>.  <code>go mod graph</code> prints the module requirement graph (including taking into account replacements). Each line in the output has two fields: the first column is a consuming module, and the second column is one of that module's requirements (including the version required by that consuming module).  This can be a quick way to see which modules are requiring a particular dependency, including when your build has a dependency that has different required versions from different consumers in your build (and if that is the case, it is important to be familiar with the behavior described in the \"Version Selection\" section above).</p> </li> </ol> <p><code>go mod why -m &lt;module&gt;</code> can also be useful here, although it is typically more useful for seeing why a dependency is included at all (rather than why a dependency ends up with a particular version).</p> <p><code>go list</code> provides many more variations of queries that can be useful to interrogate your modules if needed. One example is the following, which will show the exact versions used in your build excluding test-only dependencies: <pre><code>go list -deps -f '{{with .Module}}{{.Path}} {{.Version}}{{end}}' ./... | sort -u\n</code></pre></p> <p>A more detailed set of commands and examples for interrogating your modules can be seen in a runnable \"Go Modules by Example\" walkthough.</p> <p>One cause of unexpected versions can be due to someone having created an invalid or unexpected <code>go.mod</code> file that was not intended, or a related mistake (for example: a <code>v2.0.1</code> version of module might have incorrectly declared itself to be <code>module foo</code> in its <code>go.mod</code> without the required <code>/v2</code>; an import statement in <code>.go</code> code intended to import a v3 module might be be missing the required <code>/v3</code>; a <code>require</code> statement in a <code>go.mod</code> for a v4 module might be be missing the required <code>/v4</code>). Therefore, if the cause of a particular issue you are seeing is not obvious, it can be worthwhile to first re-read the material in the \"go.mod\" and \"Semantic Import Versioning\" sections above (given these include important rules that modules must follow) and then take a few minutes to spot check the most relevant <code>go.mod</code> files and import statements.</p>"},{"location":"Modules/#why-am-i-getting-an-error-cannot-find-module-providing-package-foo","title":"Why am I getting an error 'cannot find module providing package foo'?","text":"<p>This is a general error message that can occur for several different underlying causes.</p> <p>In some cases, this error is simply due to a mistyped path, so the first step likely should be to double-check for incorrect paths based on the details listed in the error message.</p> <p>If you have not already done so, a good next step is often to try <code>go get -v foo</code> or <code>go get -v -x foo</code>: * In general, <code>go get</code> will often provide more a detailed error message than <code>go build</code>. * See the first troubleshooting FAQ in this section above for more details.</p> <p>Some other possible causes:</p> <ul> <li> <p>You might see the error <code>cannot find module providing package foo</code> if you have issued <code>go build</code> or <code>go build .</code> but do not have any <code>.go</code> source files in the current directory. If this is what you are encountering, the solution might be an alternative invocation such as <code>go build ./...</code> (where the <code>./...</code> expands out to match all the packages within the current module). See #27122.</p> </li> <li> <p>The module cache in Go 1.11 can cause this error, including in the face of network issues or multiple <code>go</code> commands executing in parallel. This is resolved in Go 1.12. See the first troubleshooting FAQ in this section above for more details and possible corrective steps.</p> </li> </ul>"},{"location":"Modules/#why-does-go-mod-init-give-the-error-cannot-determine-module-path-for-source-directory","title":"Why does 'go mod init' give the error 'cannot determine module path for source directory'?","text":"<p><code>go mod init</code> without any arguments will attempt to guess the proper module path based on different hints such as VCS meta data. However, it is not expected that <code>go mod init</code> will always be able to guess the proper module path.</p> <p>If <code>go mod init</code> gives you this error, those heuristics were not able to guess, and you must supply the module path yourself (such as <code>go mod init github.com/you/hello</code>).</p>"},{"location":"Modules/#i-have-a-problem-with-a-complex-dependency-that-has-not-opted-in-to-modules-can-i-use-information-from-its-current-dependency-manager","title":"I have a problem with a complex dependency that has not opted in to modules. Can I use information from its current dependency manager?","text":"<p>Yes. This requires some manual steps, but can be helpful in some more complex cases.</p> <p>Go versions 1.21 and older attempted to convert a prior dependency manager formats to <code>go.mod</code> formats. The following instructions thus need 1.21.13 or older; you need to run the following with <code>GOTOOLCHAIN=go1.21.13</code>, or install an older version of go manually.</p> <p>When you run <code>go mod init</code> when initializing your own module, it will automatically convert from a prior dependency manager by translating configuration files like <code>Gopkg.lock</code>, <code>glide.lock</code>, or <code>vendor.json</code> into a <code>go.mod</code> file that contains corresponding <code>require</code> directives. The information in a pre-existing <code>Gopkg.lock</code> file for example usually describes version information for all of your direct and indirect dependencies.</p> <p>However, if instead you are adding a new dependency that has not yet opted in to modules itself, there is not a similar automatic conversion process from any prior dependency manager that your new dependency might have been using. If that new dependency itself has non-module dependencies that have had breaking changes, then in some cases that can cause incompatibility problems. In other words, a prior dependency manager of your new dependency is not automatically used, and that can cause problems with your indirect dependencies in some cases.</p> <p>One approach is to run <code>go mod init</code> on your problematic non-module direct dependency to convert from its current dependency manager, and then use the <code>require</code> directives from the resulting temporary <code>go.mod</code> to populate or update the <code>go.mod</code> in your module.</p> <p>For example, if <code>github.com/some/nonmodule</code> is a problematic direct dependency of your module that is currently using another dependency manager, you can do something similar to:</p> <pre><code>$ git clone -b v1.2.3 https://github.com/some/nonmodule /tmp/scratchpad/nonmodule\n$ cd /tmp/scratchpad/nonmodule\n$ go mod init\n$ cat go.mod\n</code></pre> <p>The resulting <code>require</code> information from the temporary <code>go.mod</code> can be manually moved into the actual <code>go.mod</code> for your module, or you can consider using rogpeppe/gomodmerge, which is a community tool targeting this use case. In addition, you will want to add a <code>require github.com/some/nonmodule v1.2.3</code> to your actual <code>go.mod</code> to match the version that you manually cloned.</p> <p>A concrete example of following this technique for docker is in this #28489 comment, which illustrates getting a consistent set of versions of docker dependencies to avoid case sensitive issues between <code>github.com/sirupsen/logrus</code> vs. <code>github.com/Sirupsen/logrus</code>.</p>"},{"location":"Modules/#how-can-i-resolve-parsing-gomod-unexpected-module-path-and-error-loading-module-requirements-errors-caused-by-a-mismatch-between-import-paths-vs-declared-module-identity","title":"How can I resolve \"parsing go.mod: unexpected module path\" and \"error loading module requirements\" errors caused by a mismatch between import paths vs. declared module identity?","text":""},{"location":"Modules/#why-does-this-error-occur","title":"Why does this error occur?","text":"<p>In general, a module declares its identity in its <code>go.mod</code> via the <code>module</code> directive, such as <code>module example.com/m</code>. This is the \"module path\" for that module, and the <code>go</code> tool enforces consistency between that declared module path and the import paths used by any consumer. If a module's <code>go.mod</code> file reads <code>module example.com/m</code>, then a consumer must import packages from that module using import paths that start with that module path (e.g., <code>import \"example.com/m\"</code> or <code>import \"example.com/m/sub/pkg\"</code>).</p> <p>The <code>go</code> command reports a <code>parsing go.mod: unexpected module path</code> fatal error if there is a mismatch between an import path used by a consumer vs. the corresponding declared module path. In addition, in some cases the <code>go</code> command will then report a more generic <code>error loading module requirements</code> error afterwards.</p> <p>The most common cause of this error is if there was a name change (e.g., <code>github.com/Sirupsen/logrus</code> to <code>github.com/sirupsen/logrus</code>), or if a module was sometimes used via two different names prior to modules due to a vanity import path (e.g., <code>github.com/golang/sync</code> vs. the recommended <code>golang.org/x/sync</code>).</p> <p>This can then cause problems if you have a dependency that is still being imported via an older name (e.g., <code>github.com/Sirupsen/logrus</code>) or a non-canonical name (e.g., <code>github.com/golang/sync</code>) but that dependency has subsequently adopted modules and now declares its canonical name in its <code>go.mod</code>. The error here can then trigger during an upgrade when the upgraded version of the module is found declaring a canonical module path that no longer matches the older import path.</p>"},{"location":"Modules/#example-problem-scenario","title":"Example problem scenario","text":"<ul> <li>You are indirectly depending on <code>github.com/Quasilyte/go-consistent</code>.</li> <li>The project adopts modules, and then later changes its name to <code>github.com/quasilyte/go-consistent</code> (changing <code>Q</code> to lowercase <code>q</code>), which is a breaking change. GitHub forwards from the old name to the new name.</li> <li>You run <code>go get -u</code>, which attempts to upgrade all of your direct and indirect dependencies.</li> <li><code>github.com/Quasilyte/go-consistent</code> is attempted to be upgraded, but the latest <code>go.mod</code> found now reads <code>module github.com/quasilyte/go-consistent</code>.</li> <li>The overall upgrade operation fails to complete, with error:</li> </ul> <p>go: github.com/Quasilyte/go-consistent@v0.0.0-20190521200055-c6f3937de18c: parsing go.mod: unexpected module path \"github.com/quasilyte/go-consistent\" go get: error loading module requirements</p>"},{"location":"Modules/#resolving","title":"Resolving","text":"<p>The most common form of the error is:</p> <p>go: example.com/some/OLD/name@vX.Y.Z: parsing go.mod: unexpected module path \"example.com/some/NEW/name\"</p> <p>If you visit the repository for <code>example.com/some/NEW/name</code> (from the right-side of the error), you can check the <code>go.mod</code> file for the latest release or <code>master</code> to see if it declares itself on the first line of the <code>go.mod</code> as <code>module example.com/some/NEW/name</code>. If so, that is a hint that you are seeing an \"old module name\" vs. \"new module name\" problem.</p> <p>This remainder of this section focuses on resolving the \"old name\" vs. \"new name\" form of this the error by following these steps in sequence:</p> <ol> <li> <p>Check your own code to see if you are importing using <code>example.com/some/OLD/name</code>. If so, update your code to import using <code>example.com/some/NEW/name</code>.</p> </li> <li> <p>If you received this error during an upgrade, you should try upgrading using the tip version of Go, which has more targeted upgrade logic (#26902) that can often sidestep this problem and also often has a better error message for this situation. Note that the <code>go get</code> arguments in tip / 1.13 are different than in 1.12. Example of obtaining tip and using it to upgrade your dependencies:  <pre><code>go get golang.org/dl/gotip &amp;&amp; gotip download\ngotip get -u all\ngotip mod tidy\n</code></pre> Because the problematic old import is often in an indirect dependency, upgrading with tip and then running <code>go mod tidy</code> can frequently upgrade you past the problematic version and then also remove the problematic version from your <code>go.mod</code> as no longer needed, which then puts you into a functioning state when you return to using Go 1.12 or 1.11 for day-to-day use. For example, see that approach work here to upgrade past <code>github.com/golang/lint</code> vs. <code>golang.org/x/lint</code> problems.</p> </li> <li> <p>If you received this error while doing <code>go get -u foo</code> or <code>go get -u foo@latest</code>, try removing the <code>-u</code>. This will give you the set of dependencies used by <code>foo@latest</code> without upgrading the dependencies of <code>foo</code> past the versions that the author of <code>foo</code> likely verified as working when releasing <code>foo</code>. This can be important especially during this transitional time when some of the direct and indirect dependencies of <code>foo</code> might not yet have  adopted semver or modules. (A common mistake is thinking <code>go get -u foo</code> solely gets the latest version of <code>foo</code>. In actuality, the <code>-u</code> in <code>go get -u foo</code> or <code>go get -u foo@latest</code> means to also get the latest versions for all of the direct and indirect dependencies of <code>foo</code>; that might be what you want, but it might not be especially if it is otherwise failing due to deep indirect dependencies). </p> </li> <li> <p>If the steps above have not resolved the error, the next approach is slightly more complicated, but most often should work to resolve an \"old name\" vs. \"new name\" form of this error. This uses just information solely from the error message itself, plus some brief looking at some VCS history.</p> </li> </ol> <p>4.1. Go to the <code>example.com/some/NEW/name</code> repository</p> <p>4.2. Determine when the <code>go.mod</code> file was introduced there (e.g., by looking at the blame or history view for the <code>go.mod</code>).</p> <p>4.3. Pick the release or commit from just before the <code>go.mod</code> file was introduced there.</p> <p>4.4. In your <code>go.mod</code> file, add a <code>replace</code> statement using the old name on both sides of the <code>replace</code> statement:        <pre><code>replace example.com/some/OLD/name =&gt; example.com/some/OLD/name &lt;version-just-before-go.mod&gt;\n</code></pre> Using our prior example where <code>github.com/Quasilyte/go-consistent</code> is the old name and <code>github.com/quasilyte/go-consistent</code> is the new name, we can see that the <code>go.mod</code> was first introduced there in commit 00c5b0cf371a. That repository is not using semver tags, so we will take the immediately prior commit 00dd7fb039e and add it to the replace using the old uppercase Quasilyte name on both sides of the <code>replace</code>:</p> <pre><code>replace github.com/Quasilyte/go-consistent =&gt; github.com/Quasilyte/go-consistent 00dd7fb039e\n</code></pre> <p>This <code>replace</code> statement then enables us to upgrade past the problematic \"old name\" vs. \"new name\" mismatch by effectively preventing the old name from being upgraded to the new name in the presence of a <code>go.mod</code>. Usually, an upgrade via <code>go get -u</code> or similar can now avoid the error. If the upgrade completes, you can check to see if anyone is still importing the old name (e.g., <code>go mod graph | grep github.com/Quasilyte/go-consistent</code>) and if not, the <code>replace</code> can then be removed. (The reason this often works is because the upgrade itself can otherwise fail if an old problematic import path is used even though it might not be used in the final result if the upgrade had completed, which is tracked in #30831).</p> <ol> <li>If the above steps have not resolved the problem, it might be because the problematic old import path is still in use by the latest version of one or more of your dependencies. In this case, it is important to identify who is still using the problematic old import path, and find or open an issue asking that the problematic importer change to using the now canonical import path. Using <code>gotip</code> in step 2. above might identify the problematic importer, but it does not do so in all cases, especially for upgrades (#30661). If it is unclear who is importing using the problematic old import path, you can usually find out by creating a clean module cache, performing the operation or operations that trigger the error, and then grepping for the old problematic import path within the module cache. For example:</li> </ol> <pre><code>export GOPATH=$(mktemp -d)\ngo get -u foo               # perform operation that generates the error of interest\ncd $GOPATH/pkg/mod\ngrep -R --include=\"*.go\" github.com/Quasilyte/go-consistent\n</code></pre> <ol> <li>If these steps are not sufficient to resolve the issue, or if you are a maintainer of a project that seems unable to remove references to an older problematic import path due to circular references, please see a much more detailed write-up of the problem on a separate wiki page.</li> </ol> <p>Finally, the above steps focus on how to resolve an underlying \"old name\" vs. \"new name\" problem. However, the same error message can also appear if a <code>go.mod</code> was placed in the wrong location or simply has the wrong module path. If that is the case, the importing that module should always fail. If you are importing a new module that you just created and has never been successfully imported before, you should check that the <code>go.mod</code> file is located correctly and that it has the proper module path that corresponds to that location. (The most common approach is a single <code>go.mod</code> per repository, with the single <code>go.mod</code> file placed in the repository root, and using the repository name as the module path declared in the <code>module</code> directive). See the \"go.mod\" section for more details.</p>"},{"location":"Modules/#why-does-go-build-require-gcc-and-why-are-prebuilt-packages-such-as-nethttp-not-used","title":"Why does 'go build' require gcc, and why are prebuilt packages such as net/http not used?","text":"<p>In short:</p> <p>Because the pre-built packages are non-module builds and can\u2019t be reused. Sorry. Disable cgo for now or install gcc.</p> <p>This is only an issue when opting in to modules (e.g., via <code>GO111MODULE=on</code>). See #26988 for additional discussion.</p>"},{"location":"Modules/#do-modules-work-with-relative-imports-like-import-subdir","title":"Do modules work with relative imports like <code>import \"./subdir\"</code>?","text":"<p>No. See #26645, which includes:</p> <p>In modules, there finally is a name for the subdirectory. If the parent directory says \"module m\" then the subdirectory is imported as \"m/subdir\", no longer \"./subdir\".</p>"},{"location":"Modules/#some-needed-files-may-not-be-present-in-populated-vendor-directory","title":"Some needed files may not be present in populated vendor directory","text":"<p>Directories without <code>.go</code> files are not copied inside the <code>vendor</code> directory by <code>go mod vendor</code>. This is by design. </p> <p>In short, setting aside any particular vendoring behavior \u2013 the overall model for go builds is that the files needed to build a package should be in the directory with the <code>.go</code> files.</p> <p>Using the example of cgo \u2013 modifying C source code in other directories will not trigger a rebuild, and instead your build will use stale cache entries. The cgo documentation now includes:</p> <p>Note that changes to files in other directories do not cause the package to be recompiled, so all non-Go source code for the package should be stored in the package directory, not in subdirectories.</p> <p>A community tool goware/modvendor allows you to easily copy a complete set of .c, .h, .s, .proto or other files from a module into the <code>vendor</code> directory. Although this can be helpful, some care must be taken to make sure your go build is being handled properly in general (regardless of vendoring) if you have files needed to build a package that are outside of the directory with the <code>.go</code> files.</p> <p>See additional discussion in #26366.</p> <p>An alternative approach to traditional vendoring is to check in the module cache. It can end up with similar benefits as traditional vendoring and in some ways ends up with a higher fidelity copy. This approach is explained as a \"Go Modules by Example\" walkthrough.</p>"},{"location":"MutexOrChannel/","title":"Use a sync.Mutex or a channel?","text":"<p>One of Go's mottos is \"Share memory by communicating, don't communicate by sharing memory.\"</p> <p>That said, Go does provide traditional locking mechanisms in the sync package.  Most locking issues can be solved using either channels or traditional locks.</p> <p>So which should you use?</p> <p>Use whichever is most expressive and/or most simple.</p> <p>A common Go newbie mistake is to over-use channels and goroutines just because it's possible, and/or because it's fun. Don't be afraid to use a <code>sync.Mutex</code> if that fits your problem best. Go is pragmatic in letting you use the tools that solve your problem best and not forcing you into one style of code.</p> <p>As a general guide, though:</p> ChannelMutex  passing ownership of data,  distributing units of work,  communicating async results     caches,  state  <p>If you ever find your sync.Mutex locking rules are getting too complex, ask yourself whether using channel(s) might be simpler.</p>"},{"location":"MutexOrChannel/#wait-group","title":"Wait Group","text":"<p>Another important synchronisation primitive is sync.WaitGroup. These allow co-operating goroutines to collectively wait for a threshold event before proceeding independently again. This is useful typically in two cases.</p> <p>Firstly, when 'cleaning up', a sync.WaitGroup can be used to ensure that all goroutines - including the main one - wait before all terminating cleanly.</p> <p>The second more general case is of a cyclic algorithm that involves a set of goroutines that all work independently for a while, then all wait on a barrier, before proceeding independently again. This pattern might be repeated many times. Data might be exchanged at the barrier event. This strategy is the basis of Bulk Synchronous Parallelism (BSP).</p> <p>Channel communication, mutexes and wait-groups are complementary and can be combined.</p>"},{"location":"MutexOrChannel/#more-info","title":"More Info","text":"<ul> <li>Channels in Effective Go: https://go.dev/doc/effective_go#channels</li> <li>The sync package: https://pkg.go.dev/sync/</li> </ul>"},{"location":"NetBSD/","title":"Go on NetBSD","text":"<p>Go on NetBSD is fairly stable on the architectures below. However, some bugs remain; see the issue tracker for details.</p> Kernel version Architectures Initial support version Final support version 8.0 or above amd64, arm, 386 7.0 through 7.1 amd64, arm, 386 Go 1.3 * 6.0 through 6.1 amd64, arm, 386 Go 1.3 * Go 1.9.7 5.0 through 5.2 (EOL) amd64, 386 Go 1 Go 1.2.2 <p>* Go 1.5 or above is recommended.</p> <p>Support for the arm64 architecture is a work in progress, see https://go.dev/issue/30824.</p>"},{"location":"NetBSD/#go-packages-in-pkgsrc","title":"Go packages in pkgsrc","text":"<p>pkgsrc, the NetBSD package collection, contains up-to-date packages for released Go versions. The packages contain the version in the name (e.g. <code>lang/go113</code>) so that multiple versions can be installed in parallel. <code>lang/go</code> is a meta-package that always depends on the default go version.</p> <p>Note that the <code>go</code> binary name is also installed with a version suffix. Install the <code>pkgtools/pkg_alternatives</code> package to get a <code>go</code> command symlink in your PATH.</p> <p>There are a number of packages for software written in Go in pkgsrc. At the moment, module-based builds are experimental, and packages are built using a GOPATH layout.</p>"},{"location":"NetBSD/#preparing-netbsd-for-go","title":"Preparing NetBSD for Go","text":"<ul> <li>install NetBSD (remember to install pkgsrc in the last step)</li> <li>install shells/bash and devel/git (do <code>make package-install clean</code> in <code>/usr/pkgsrc/shells/bash</code> and <code>/usr/pkgsrc/devel/git</code>.<ul> <li>Using binary packages: <code>pkgin install bash git</code></li> </ul> </li> </ul>"},{"location":"NewSpeakers/","title":"Resources for New Speakers","text":"<p>Go needs everyone's help. We want to see more new speakers with new perspectives at Go conferences, especially more women and others underrepresented in the Go community.</p> <p>The process of applying to speak at a tech conference can be a bit opaque and confusing  for first-time speakers. In general, please remember that, first and foremost, conferences organizers want to find great talks; there is no single format or recipe for a great talk; and you need not be a Go expert to give a great talk. All that you need to be is excited about sharing something you've observed or learned about using Go.</p> <p>Here are some good blog posts with tips for writing conference talk proposals:</p> <ul> <li>\u201cHow to write a successful conference proposal\u201d by Dave Cheney</li> <li>\u201cHow to write a successful conference proposal\u201d by Karolina Szczur</li> <li>\u201cIs your conference proposal good enough?\u201d by Raquel V\u00e9lez (rockbot)</li> <li>\u201cWhat your conference proposal is missing\u201d by Sarah Mei</li> </ul> <p>Elsewhere on the wiki, we maintain a list of upcoming conferences with links to CFPs. The same page also lists past conferences with links to talk videos. These conferences welcome speakers of all experience levels and backgrounds!</p>"},{"location":"NewSpeakers/#contact-us","title":"Contact Us","text":"<p>We, the Go community members listed below, are happy to discuss or review talk proposals and answer other questions about the overall speaking process. Feel free to contact any of us directly.</p> <ul> <li>Russ Cox, rsc@golang.org, @_rsc</li> <li>Steve Francia, spf@golang.org, @spf13</li> <li>William Kennedy, bill@ardanlabs.com, @goinggodotnet</li> <li>Cassandra Salisbury, cassandra@golangbridge.org, @cassandraoid</li> <li>Ashley McNamara, ashmc@microsoft.com, @ashleymcnamara</li> <li>Brian Ketelsen, bjk@microsoft.com, @bketelsen</li> <li>Natalie Pistunovich natalie@golangbridge.org, @nataliepis</li> <li>Erik St. Martin, erikstm@microsoft.com, @erikstmartin</li> <li>Francesc Campoy, campoy@golang.org, @francesc</li> <li>Sameer Ajmani, sameer@google.com, @Sajma</li> <li>Florin P\u0103\u021ban, florinpatan@gmail.com, @dlsniper</li> <li>Aaron Schlesinger, arschles@gmail.com, @arschles</li> <li>Paul Jolly, paul@myitcv.io @_myitcv</li> <li>Alexey Palazhchenko, alexey.palazhchenko@gmail.com @paaleksey (English, Russian)</li> <li>Carmen Andoh, candoh@google.com, @carmatrocity</li> </ul> <p>(Experienced speakers, feel free to add your contact information to the list, or email rsc@golang.org if you don't have wiki edit permission.)</p>"},{"location":"NoPlusOne/","title":"NoPlusOne","text":"<p>When contributing to the Go issue tracker, please do not make comments like this:</p> <p>+1</p> <p>or</p> <p> </p> <p>or</p> <p>Me too.</p> <p>or</p> <p>I too would like to see this issue fixed.</p> <p>or</p> <p>When is this issue going to be fixed?</p> <p>Such comments do not help fix issues. In fact, they make it harder by cluttering the discussion. The project admins will delete such comments as a matter of procedure (please don't be offended if we delete yours).</p> <p>Instead of commenting, you may add a  reaction to the comment or issue.</p> <p>Of course, please do comment if your \"me too\" comment includes information that might help resolve the issue. This includes reports like this:</p> <p>This issue also affects me on Windows 10 when running all.bat at revision c0ff33.</p> <p>(Although there's no need to make such a comment if an identical comment already exists.)</p> <p>Thanks!</p>"},{"location":"NonEnglish/","title":"NonEnglish","text":"<p>Some of this documentation may be out of date.</p>"},{"location":"NonEnglish/#belarusian---\u0431\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f","title":"Belarusian - \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f","text":"<ul> <li>faq-be - Frequently Asked Questions.</li> </ul>"},{"location":"NonEnglish/#brazilian-portuguese---portugu\u00eas-brasileiro","title":"Brazilian Portuguese - Portugu\u00eas brasileiro","text":"<ul> <li>A Tour of Go</li> <li>Go Project - Go documentation and related pages.</li> <li>golangbr.org - Go documentation and news.</li> </ul>"},{"location":"NonEnglish/#chinese---\u4e2d\u6587","title":"Chinese - \u4e2d\u6587","text":"<ul> <li>Go \u8bed\u8a00\u4e4b\u65c5</li> <li>Go \u7f16\u7a0b\u8bed\u8a00 - Chinese Translation of tip.golang.org</li> <li>Effective Go and (old) Tutorial (Deprecated)</li> </ul>"},{"location":"NonEnglish/#czech---\u010de\u0161tina","title":"Czech - \u010ce\u0161tina","text":"<ul> <li>Pravidla reflexe - a translation of The Laws of Reflection.</li> </ul>"},{"location":"NonEnglish/#french---fran\u00e7ais","title":"French - Fran\u00e7ais","text":"<ul> <li>golang-france - Go documentation.</li> </ul>"},{"location":"NonEnglish/#german---deutsch","title":"German - Deutsch","text":"<ul> <li>Deutschsprachige Go Themenseite - German Go resource page</li> <li>Deutschsprachiges Diskussionsforum - German discussion forum on MeWe     (Invitation link) (requires free registration on MeWe.com).</li> </ul>"},{"location":"NonEnglish/#indonesia","title":"Indonesia","text":"<ul> <li>Komunitas Pengguna Go Indonesia</li> </ul>"},{"location":"NonEnglish/#japanese---\u65e5\u672c\u8a9e","title":"Japanese - \u65e5\u672c\u8a9e","text":"<ul> <li>A Tour of Go</li> <li>CodeReviewComments</li> </ul>"},{"location":"NonEnglish/#korean---\ud55c\uad6d\uc5b4","title":"Korean - \ud55c\uad6d\uc5b4","text":"<ul> <li>A Tour of Go</li> <li>golang-kr wiki - Korean Translation of golang.org/doc</li> </ul>"},{"location":"NonEnglish/#russian---\u0440\u0443\u0441\u0441\u043a\u0438\u0439-\u044f\u0437\u044b\u043a","title":"Russian - \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a","text":"<ul> <li>Effective Go</li> <li>Contribution Guide</li> </ul>"},{"location":"NonEnglish/#spanish---espa\u00f1ol","title":"Spanish - espa\u00f1ol","text":"<ul> <li>Video course: Go Course from 0 to 100</li> <li>Workshop video: Creating a wiki with Go</li> <li>Sitio web: Go con ejemplos</li> <li>Apuntes: Aprender de Go desde Cero</li> </ul>"},{"location":"NonEnglish/#thai---\u0e44\u0e17\u0e22","title":"Thai - \u0e44\u0e17\u0e22","text":"<ul> <li>A Tour of Go</li> </ul>"},{"location":"NonEnglish/#turkish---t\u00fcrk\u00e7e","title":"Turkish - T\u00fcrk\u00e7e","text":"<ul> <li>A Tour of Go</li> </ul>"},{"location":"NonEnglish/#vietnamese---ti\u1ebfng-vi\u1ec7t","title":"Vietnamese - Ti\u1ebfng Vi\u1ec7t","text":"<ul> <li>A Tour of Go</li> </ul>"},{"location":"NonEnglish/#uzbek--\u045e\u0437\u0431\u0435\u043a\u0447\u0430","title":"Uzbek \u2014 \u040e\u0437\u0431\u0435\u043a\u0447\u0430","text":"<ul> <li>A Tour of Go</li> </ul>"},{"location":"OpenBSD/","title":"Go on OpenBSD","text":"<p>Go is available within the OpenBSD ports tree collection since OpenBSD 5.2.  It is marked as i386- and amd64- only.  See <code>ports/lang/go</code> for details.</p> OpenBSD release Go in ports 6.8 (Oct 18, 2020) go-1.15.2 6.7 (May 19, 2020) go-1.13.9 6.6 (Oct 17, 2019) go-1.13.1 6.5 (Apr 4, 2019) go-1.12.1 6.4 (Oct 18, 2018) go-1.11 6.3 (Apr 2, 2018) go-1.10 6.2 (Oct 9, 2017) go-1.9 6.1 (Apr 11, 2017) go-1.8 6.0 (Sep 1, 2016) go-1.6.3 5.9 (Mar 29, 2016) go-1.5.4 5.8 (Oct 18, 2015) go-1.4.2 5.7 (May 1, 2015) go-1.4.1 5.6 (Nov 1, 2014) go-1.3p0"},{"location":"OpenBSD/#building-from-source","title":"Building from source","text":"Kernel version Architectures Initial support version Final support version 6.4 amd64, arm, 386 Go 1.11 6.2 through 6.3 amd64, arm, 386 Go 1.9 Go 1.15.x 6.1 amd64, arm, 386 Go 1.8 Go 1.10.8 6.0 amd64, 386 Go 1.4.1 * Go 1.10.8 6.0 arm Go 1.5 Go 1.10.8 5.9 amd64, 386 Go 1.4.1 * Go 1.8.7 5.9 arm Go 1.5 Go 1.8.7 5.6 through 5.8 amd64, 386 Go 1.4.1 * Go 1.7.6 5.5 amd64, 386 Go 1.3 * Go 1.7.6 5.0 through 5.4 amd64, 386 Go 1 Go 1.2.2 <p>* Go 1.5 or above is recommended.</p>"},{"location":"OpenBSD/#longterm-support","title":"Longterm support","text":"<p>Go aims to support the two most recent OpenBSD releases, because OpenBSD officially supports only the two most recent releases, and makes a best-effort attempt to maintain ABI support in consecutive releases.</p>"},{"location":"OpenBSD/#ulimits-etcloginconf","title":"ulimits (<code>/etc/login.conf</code>)","text":"<p>Edit <code>/etc/login.conf</code> so that the staff class has the proper settings. The following is a working example of the staff class: <pre><code>staff:\\\n       :datasize-cur=infinity:\\\n       :datasize-max=infinity:\\\n       :datasize=infinity:\\\n       :openfiles-cur=4096:\\\n       :maxproc-max=512:\\\n       :maxproc-cur=512:\\\n       :ignorenologin:\\\n       :requirehome@:\\\n       :tc=default:\n</code></pre></p> <p>If the database file <code>/etc/login.conf.db</code> exists, you need to rebuild it with: <pre><code># cap_mkdb /etc/login.conf\n</code></pre></p> <p>Ensure that the user you intend to build Go with is in the <code>staff</code> login class: <pre><code># usermod -L staff your_username_here\n</code></pre></p>"},{"location":"PGO-Tools/","title":"PGO Tools","text":"<p>Profile-guided optimization (PGO) in the Go toolchain uses CPU pprof profiles as the PGO profile format. Though pprof is a widely-used format across many tools, Go's PGO imposes specific requirements on the contents of profiles, which many tools across the ecosystem may not be compatible with.</p> <p>This (non-exhaustive) page lists tools for collecting and working with profiles that are known to be compatible with PGO.</p>"},{"location":"PGO-Tools/#collecting-profiles","title":"Collecting profiles","text":"<ul> <li><code>runtime/pprof</code>, <code>net/http/pprof</code>: The Go standard library profiling functionality always provides PGO-compatible profiles.</li> <li>Parca Agent produces PGO-compatible profiles when paired with a symbolizer that produces metadata that includes function start lines, such as Polar Signals Cloud or Parca starting at version <code>v0.19.0</code>.</li> </ul>"},{"location":"PGO-Tools/#working-with-profiles","title":"Working with profiles","text":"<ul> <li><code>go tool pprof</code>/standalone <code>pprof</code> CLI, <code>github.com/google/pprof/profile</code>: The official <code>pprof</code> CLI and Go packages can perform various operations on profiles (filtering, merging multiple profiles, etc). These tools/packages generally leave metadata (e.g., symbolization, function start lines) intact across operations. Thus given a PGO-compatible input, they should produce a PGO-compatible output.</li> <li>Parca and Polar Signals Cloud provide various mechanisms to query and filter profiling data and download any query as a pprof file that will contain function start line metadata to be PGO-compatible.</li> </ul>"},{"location":"PackagePublishing/","title":"PackagePublishing","text":""},{"location":"PackagePublishing/#introduction","title":"Introduction","text":"<p>Now that you've spent many hours writing your package and debugging it and testing it (you did test it, didn't you?), you want to publish it so other people can go get your package.</p> <p>First, you will need to host it online somewhere.  Three major code hosting sites are bitbucket (hg/git), GitHub (git) and launchpad (bzr).  I recommend choosing whichever version control system you are familiar with or which your code is versioned locally on your machine.  Git (git) is the version control system used by the central Go repository, so it is the closest to a guarantee as you can get that a developer wanting to use your project will have the right software. If you have never used version control before, these websites have some nice HOWTOs and you can find many great tutorials by searching Google for \"{name} tutorial\" where {name} is the name of the version control system you would like to learn.</p>"},{"location":"PackagePublishing/#package-setup","title":"Package Setup","text":""},{"location":"PackagePublishing/#choosing-the-import","title":"Choosing the Import","text":"<p>The full import of your package often has something identifying its author (particularly on hosting sites like GitHub, where \"github.com/kylelemons/\u2026\" is the full import), should always have the project name, and should end with the name of the package you've developed if it is different from the project name.  For instance, the go-gypsy project provides a yaml package, and is written by Kyle Lemons, and thus has the following import path: <pre><code>import \"github.com/kylelemons/go-gypsy/yaml\"\n             ^         ^          ^     ^\n             |         |          |     `-- Package name\n             |         |          `-------- Project name\n             |         `------------------- Author's handle\n             `----------------------------- Hosting site\n</code></pre></p> <p>Go &gt;= version 1 supports subdirectories of package repositories.</p>"},{"location":"PackagePublishing/#subdirectories","title":"Subdirectories","text":"<p>Frequently, the name that you use for your package will include the name \"Go\" as a prefix, suffix, or part of its acronym, and you may or may not want this to be a part of the actual command or package name in a go source file.  Often, you may have both libraries and commands as a part of your package, and these cannot coexist in the same directory.  When these things happen, you will want to structure your repository with subdirectories.</p> <p>For example, consider a project \"Go-PublishingExample\" that provides an \"epub\" package and a \"publish\" command.  The directory structure could be: <pre><code>./epub/      # Package source, all files package \"epub\"\n./publish/   # Command source\n./doc/       # Documentation which won't be downloaded\n./examples/  # Example code which won't be downloaded\n</code></pre></p> <p>The import statement for the package would look like: <pre><code>import \"codesite.tld/authorName/Go-PublishingExample/epub\"\n</code></pre></p> <p>It is often a good idea to make sure the last directory path (in this case, \"epub\") matches the name of the package used by the source files in the directory.  In this case, no go get-able files were included in the base directory because neither the binary nor the package were to be named \"Go-PublishingExample\".</p>"},{"location":"PackagePublishing/#branches-and-tags","title":"Branches and Tags","text":"<p>Please note that this section is out of date. The pseudo version numbers below were applicable to Go &lt; version 1; also the Go repository itself uses Git instead of Mercurial now. Maybe we should remove this section.</p> <p>You can get up to date information on go get using \"go help get\" and \"go help importpath\".</p> <p>In general, the Go source tree can exist in three basic states.  It can be checked out at a Go Release branch (r60 (on Google Code) at the time of this writing \u2013 this is where most users should be), or it can be checked out at a Go Weekly (a new tag for which is made roughly once per week), or at tip (the Mercurial term for the latest change).  The last two are primarily for developers of the Go language itself or developers who need features or fixes which have not been introduced into the latest Release.</p> <p>Due to the lielihood that you might continue collaborating on your project with your team on code that is not ready for general consumption, it is recommended that you utilize the tagging or branching functionality of your version control system.  The go get tool understands some special tags and branches, which you may want to use to ensure users get a compatible version of your package: <pre><code>  go.r60               -- A \"go.r##\" tag will be checked out if the user has that Go release installed\n  go.weekly.2011-07-19 -- A \"go.weekly.YYYY-MM-DD\" tag will be checked out if the user has that weekly installed\n</code></pre></p> <p>Go get will attempt to fall back to the previous tag if the installed one has no matches, and if none are found, will default to installing tip.</p> <p>To create and maintain your release tag in mercurial: <pre><code>## Create or update a release tag\nhg tag myProj-v0.0 # tag an easy-to-remember version number if you wish\nhg tag go.r60 # tag this as being go release.r60 compatible\n</code></pre></p> <p>To create and maintain a release branch in git: <pre><code>## Create a release branch\ngit tag myProj-v0.0     # Tag an easy-to-remember version number if you wish\ngit checkout -b go.r60  # create a release branch\ngit checkout master     # to switch back to your master branch\n\n## Update the release branch\ngit checkout go.r60  # switch to the release branch\ngit merge master     # merge in changes from the master branch since last release\ngit checkout master  # switch back to master branch\n</code></pre> If you are using other branch names, substitute those names where necessary.</p> <p>It will typically not be necessary to maintain weekly tags or branches, but it can be very useful to maintain the release branch or tag, as this will ensure the widest audience for your project.</p>"},{"location":"PackagePublishing/#commands-vs-packages","title":"Commands vs Packages","text":"<p>Since go get does not use your project's Makefiles, it is important to understand how it will actually build your project.</p> <p>All files in the same directory should always share the same package name.  Any files named with a <code>_test</code> or an <code>_os</code> and/or <code>_arch</code> suffix will be ignored (unless the os/arch match).  If the package name is \"main\", go get will build an executable from the source files and name it according to the directory name (using the last path segment only).  If the package name is anything else, go get will build it as a package and the import path will be the web-accessible URL for your project's root followed by the subdirectory.  See the go get documentation for how to make import paths for code hosting sites other than the main four.</p> <p>Dependencies between packages in the same project are common.  In the case where one package or command in your project depends upon another, you must use the full import path in order for go get to recognize the dependency and make sure it is built.  Third-party packages which are imported from source files in your project will also be automatically downloaded and installed by go get if it is not already present.</p> <p>To reuse the example above, the file <code>./publish/main.go</code> may look something like this: <pre><code>package main\n\nimport (\n\t\"flag\"\n)\n\nimport \"codesite.tld/authorName/Go-PublishingExample/epub\"\n\nvar dir = flag.String(\"dir\", \".\", \"Directory to publish\")\n\nfunc main() {\n\tflag.Parse()\n\tepub.Publish(*dir)\n}\n</code></pre></p> <p>A user wishing to install this executable would execute: <pre><code>go get codesite.tld/authorName/Go-PublishingExample/publish\n</code></pre> which would also install the <code>\".../epub\"</code> package because of the dependency.  A developer simply wishing to install the library could execute: <pre><code>go get codesite.tld/authorName/Go-PublishingExample/epub\n</code></pre> and (if they had not already installed <code>publish</code>) would only download and install the package.  Note that in none of these cases are the examples or documentation downloaded; in most cases these would be available to browse via the code site.</p>"},{"location":"PackagePublishing/#documentation","title":"Documentation","text":""},{"location":"PackagePublishing/#godoc","title":"godoc","text":"<p>When you are preparing to publish a package, you should make sure that the documentation looks correct by running a local copy of godoc.  If your package is installed to the go package tree, you can use the following command: <pre><code>  godoc -http=:6060 &amp;\n</code></pre></p> <p>Then browse to http://localhost:6060/pkg/ and find your package.</p>"},{"location":"PackagePublishing/#dashboard","title":"Dashboard","text":"<p>The Go Dashboard will use the first line of your package-level comment (also using the normal godoc format) as the \"info\" text, so make sure this is set.  For instance:</p> <pre><code>// Package epub is an example publishing library.\npackage epub\n</code></pre> <p>For more information on godoc, see the Documenting Go Code blog post.</p>"},{"location":"PanicAndRecover/","title":"Table of Contents","text":"<ul> <li>Panic</li> <li>Usage in a Package</li> <li>References</li> </ul>"},{"location":"PanicAndRecover/#panic","title":"Panic","text":"<p>The <code>panic</code> and <code>recover</code> functions behave similarly to exceptions and try/catch in some other languages in that a <code>panic</code> causes the program stack to begin unwinding and <code>recover</code> can stop it. Deferred functions are still executed as the stack unwinds. If <code>recover</code> is called inside such a deferred function, the stack stops unwinding and <code>recover</code> returns the value (as an <code>interface{}</code>) that was passed to <code>panic</code>. The runtime will also panic in extraordinary circumstances, such as indexing an array or slice out-of-bounds.  If a <code>panic</code> causes the stack to unwind outside of any executing goroutine (e.g. <code>main</code> or the top-level function given to <code>go</code> fail to recover from it), the program exits with a stack trace of all executing goroutines. A <code>panic</code> cannot be <code>recover</code>ed by a different goroutine.</p>"},{"location":"PanicAndRecover/#usage-in-a-package","title":"Usage in a Package","text":"<p>By convention, no explicit <code>panic()</code> should be allowed to cross a package boundary. Indicating error conditions to callers should be done by returning error value. Within a package, however, especially if there are deeply nested calls to non-exported functions, it can be useful (and improve readability) to use panic to indicate error conditions which should be translated into error for the calling function. Below is an admittedly contrived example of a way in which a nested function and an exported function may interact via this panic-on-error relationship.</p> <pre><code>// A ParseError indicates an error in converting a word into an integer.\ntype ParseError struct {\n\tIndex int    // The index into the space-separated list of words.\n\tWord  string // The word that generated the parse error.\n\tError error  // The raw error that precipitated this error, if any.\n}\n\n// String returns a human-readable error message.\nfunc (e *ParseError) String() string {\n\treturn fmt.Sprintf(\"pkg: error parsing %q as int\", e.Word)\n}\n\n// Parse parses the space-separated words in input as integers.\nfunc Parse(input string) (numbers []int, err error) {\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tvar ok bool\n\t\t\terr, ok = r.(error)\n\t\t\tif !ok {\n\t\t\t\terr = fmt.Errorf(\"pkg: %v\", r)\n\t\t\t}\n\t\t}\n\t}()\n\n\tfields := strings.Fields(input)\n\tnumbers = fields2numbers(fields)\n\treturn\n}\n\nfunc fields2numbers(fields []string) (numbers []int) {\n\tif len(fields) == 0 {\n\t\tpanic(\"no words to parse\")\n\t}\n\tfor idx, field := range fields {\n\t\tnum, err := strconv.Atoi(field)\n\t\tif err != nil {\n\t\t\tpanic(&amp;ParseError{idx, field, err})\n\t\t}\n\t\tnumbers = append(numbers, num)\n\t}\n\treturn\n}\n</code></pre> <p>To demonstrate the behavior, consider the following main function: <pre><code>func main() {\n\tvar examples = []string{\n\t\t\"1 2 3 4 5\",\n\t\t\"100 50 25 12.5 6.25\",\n\t\t\"2 + 2 = 4\",\n\t\t\"1st class\",\n\t\t\"\",\n\t}\n\n\tfor _, ex := range examples {\n\t\tfmt.Printf(\"Parsing %q:\\n  \", ex)\n\t\tnums, err := Parse(ex)\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\tcontinue\n\t\t}\n\t\tfmt.Println(nums)\n\t}\n}\n</code></pre></p>"},{"location":"PanicAndRecover/#references","title":"References","text":"<p>Defer, Panic and Recover</p> <p>https://go.dev/ref/spec#Handling_panics</p> <p>https://go.dev/ref/spec#Run_time_panics</p>"},{"location":"Performance/","title":"Debugging performance issues in Go programs","text":"<p>\u2013 originally written by Dmitry Vyukov</p> <p>Let's assume you have a Go program and want to improve its performance. There are several tools available that can help with this task. These tools can help you to identify various types of hotspots (CPU, IO, memory), hotspots are the places that you need to concentrate on in order to significantly improve performance. However, another outcome is possible \u2013 the tools can help you identify obvious performance defects in the program. For example, you prepare an SQL statement before each query while you could prepare it once at program startup. Another example is if an O(N^2) algorithm somehow slipped into where an obvious O(N) exists and is expected. In order to identify such cases you need to sanity check what you see in profiles. For example for the first case significant time spent in SQL statement preparation would be the red flag.</p> <p>It's also important to understand various bounding factors for performance. For example, if the program communicates via 100 Mbps network link and it is already utilizes &gt;90Mbps, there is not much you can do with the program to improve its performance. There are similar bounding factors for disk IO, memory consumption and computational tasks. With that in mind we can look at the available tools.</p> <p>Note: The tools can interfere with each other. For example, precise memory profiling skews CPU profiles, goroutine blocking profiling affects scheduler trace, etc. Use tools in isolation to get more precise info.</p>"},{"location":"Performance/#cpu-profiler","title":"CPU Profiler","text":"<p>Go runtime contains built-in CPU profiler, which shows what functions consume what percent of CPU time. There are 3 ways you can get access to it:</p> <ol> <li> <p>The simplest one is -cpuprofile flag of 'go test'     (https://pkg.go.dev/cmd/go/#hdr-Description_of_testing_flags) command. For     example, the following command:</p> <pre><code>$ go test -run=none -bench=ClientServerParallel4 -cpuprofile=cprof net/http\n</code></pre> <p>will profile the given benchmark and write CPU profile into 'cprof' file. Then:</p> <pre><code>$ go tool pprof --text http.test cprof\n</code></pre> <p>will print a list of the hottest functions.</p> <p>There are several output types available, the most useful ones are: <code>--text</code>, <code>--web</code> and <code>--list</code>. Run <code>go tool pprof</code> to get the complete list. The obvious drawback of this option is that it works only for tests.</p> </li> <li> <p>net/http/pprof: This is the ideal     solution for network servers. You merely need to import <code>net/http/pprof</code>,     and collect profiles with:</p> <pre><code>$ go tool pprof --text mybin  http://myserver:6060:/debug/pprof/profile\n</code></pre> </li> <li> <p>Manual profile collection. You need to import     runtime/pprof and add the following     code to main function:</p> <pre><code>if *flagCpuprofile != \"\" {\n    f, err := os.Create(*flagCpuprofile)\n    if err != nil {\n        log.Fatal(err)\n    }\n    pprof.StartCPUProfile(f)\n    defer pprof.StopCPUProfile()\n}\n</code></pre> <p>The profile will be written to the specified file, visualize it the same way as in the first option.</p> </li> </ol> <p>Here is an example of a profile visualized with <code>--web</code> option: [cpu_profile.png]</p> <p>You can investigate a single function with <code>--list=funcname</code> option. For example, the following profile shows that the time was spent in the <code>append</code> function:</p> <pre><code> .      .   93: func (bp *buffer) WriteRune(r rune) error {\n .      .   94:     if r &lt; utf8.RuneSelf {\n 5      5   95:         *bp = append(*bp, byte(r))\n .      .   96:         return nil\n .      .   97:     }\n .      .   98:\n .      .   99:     b := *bp\n .      .  100:     n := len(b)\n .      .  101:     for n+utf8.UTFMax &gt; cap(b) {\n .      .  102:         b = append(b, 0)\n .      .  103:     }\n .      .  104:     w := utf8.EncodeRune(b[n:n+utf8.UTFMax], r)\n .      .  105:     *bp = b[:n+w]\n .      .  106:     return nil\n .      .  107: }\n</code></pre> <p>There are also 3 special entries that the profiler uses when it can't unwind stack: GC, System and ExternalCode. GC means time spent during garbage collection, see Memory Profiler and Garbage Collector Trace sections below for optimization suggestions. System means time spent in goroutine scheduler, stack management code and other auxiliary runtime code. ExternalCode means time spent in native dynamic libraries.</p> <p>Here are some hints with respect to how to interpret what you see in the profile.</p> <p>If you see lots of time spent in <code>runtime.mallocgc</code> function, the program potentially makes excessive amount of small memory allocations. The profile will tell you where the allocations are coming from. See the memory profiler section for suggestions on how to optimize this case.</p> <p>If lots of time is spent in channel operations, sync.Mutex code and other synchronization primitives or System component, the program probably suffers from contention. Consider to restructure program to eliminate frequently accessed shared resources. Common techniques for this include sharding/partitioning, local buffering/batching and copy-on-write technique.</p> <p>If lots of time is spent in <code>syscall.Read/Write</code>, the program potentially makes excessive amount of small reads and writes. Bufio wrappers around os.File or net.Conn can help in this case.</p> <p>If lots of time is spent in GC component, the program either allocates too many transient objects or heap size is very small so garbage collections happen too frequently. See Garbage Collector Tracer and Memory Profiler sections for optimization suggestions.</p> <p>Note: For darwin CPU profiler currently only works on El Capitan or newer.</p> <p>Note: On windows you need to install Cygwin, Perl and Graphviz to generate svg/web profiles.</p>"},{"location":"Performance/#memory-profiler","title":"Memory Profiler","text":"<p>Memory profiler shows what functions allocate heap memory. You can collect it in similar ways as CPU profile: with <code>go test --memprofile</code> (https://pkg.go.dev/cmd/go/#hdr-Description_of_testing_flags), with net/http/pprof via http://myserver:6060:/debug/pprof/heap or by calling runtime/pprof.WriteHeapProfile.</p> <p>You can visualize only allocations live at the time of profile collection (<code>--inuse_space flag to pprof</code>, default), or all allocations happened since program start (<code>--alloc_space</code> flag to <code>pprof</code>). The former is useful for profiles collected with net/http/pprof on live applications, the latter is useful for profiles collected at program end (otherwise you will see almost empty profile).</p> <p>Note: the memory profiler is sampling, that is, it collects information only about some subset of memory allocations. Probability of sampling an object is proportional to its size. You can change the sampling rate with go test <code>--memprofilerate</code> flag, or by setting <code>runtime.MemProfileRate</code> variable at program startup. The rate of 1 will lead to collection of information about all allocations, but it can slow down execution. The default sampling rate is 1 sample per 512KB of allocated memory.</p> <p>You can also visualize number of bytes allocated or number of objects allocated (<code>--inuse/alloc_space</code> and <code>--inuse/alloc_objects</code> flags, respectively). The profiler tends to sample larger objects during profiling more. But it's important to understand that large objects affect memory consumption and GC time, while large number of tiny allocations affects execution speed (and GC time to some degree as well). So it may be useful to look at both.</p> <p>Objects can be persistent or transient. If you have several large persistent objects allocated at program start, they will be most likely sampled by the profiler (because they are large). Such objects do affect memory consumption and GC time, but they do not affect normal execution speed (no memory management operations happen on them). On the other hand if you have large number of objects with very short life durations, they can be barely represented in the profile (if you use the default <code>--inuse_space mode</code>). But they do significantly affect execution speed, because they are constantly allocated and freed. So, once again, it may be useful to look at both types of objects. So, generally, if you want to reduce memory consumption, you need to look at <code>--inuse_space</code> profile collected during normal program operation. If you want to improve execution speed, look at <code>--alloc_objects</code> profile collected after significant running time or at program end.</p> <p>There are several flags that control reporting granularity. <code>--functions</code> makes pprof report on function level (default). <code>--lines</code> makes pprof report on source line level, which is useful if hot functions allocate on different lines. And there are also <code>--addresses</code> and <code>--files</code> for exact instruction address and file level, respectively.</p> <p>There is a useful option for the memory profile \u2013 you can look at it right in the browser (provided that you imported <code>net/http/pprof</code>). If you open http://myserver:6060/debug/pprof/heap?debug=1 you must see the heap profile along the lines of:</p> <pre><code>heap profile: 4: 266528 [123: 11284472] @ heap/1048576\n1: 262144 [4: 376832] @ 0x28d9f 0x2a201 0x2a28a 0x2624d 0x26188 0x94ca3 0x94a0b 0x17add6 0x17ae9f 0x1069d3 0xfe911 0xf0a3e 0xf0d22 0x21a70\n#   0x2a201 cnew+0xc1   runtime/malloc.goc:718\n#   0x2a28a runtime.cnewarray+0x3a          runtime/malloc.goc:731\n#   0x2624d makeslice1+0x4d             runtime/slice.c:57\n#   0x26188 runtime.makeslice+0x98          runtime/slice.c:38\n#   0x94ca3 bytes.makeSlice+0x63            bytes/buffer.go:191\n#   0x94a0b bytes.(*Buffer).ReadFrom+0xcb       bytes/buffer.go:163\n#   0x17add6    io/ioutil.readAll+0x156         io/ioutil/ioutil.go:32\n#   0x17ae9f    io/ioutil.ReadAll+0x3f          io/ioutil/ioutil.go:41\n#   0x1069d3    godoc/vfs.ReadFile+0x133            godoc/vfs/vfs.go:44\n#   0xfe911 godoc.func\u00b7023+0x471            godoc/meta.go:80\n#   0xf0a3e godoc.(*Corpus).updateMetadata+0x9e     godoc/meta.go:101\n#   0xf0d22 godoc.(*Corpus).refreshMetadataLoop+0x42    godoc/meta.go:141\n\n2: 4096 [2: 4096] @ 0x28d9f 0x29059 0x1d252 0x1d450 0x106993 0xf1225 0xe1489 0xfbcad 0x21a70\n#   0x1d252 newdefer+0x112              runtime/panic.c:49\n#   0x1d450 runtime.deferproc+0x10          runtime/panic.c:132\n#   0x106993    godoc/vfs.ReadFile+0xf3         godoc/vfs/vfs.go:43\n#   0xf1225 godoc.(*Corpus).parseFile+0x75      godoc/parser.go:20\n#   0xe1489 godoc.(*treeBuilder).newDirTree+0x8e9   godoc/dirtrees.go:108\n#   0xfbcad godoc.func\u00b7002+0x15d            godoc/dirtrees.go:100\n</code></pre> <p>The numbers in the beginning of each entry <code>(\"1: 262144 [4: 376832]\")</code> represent number of currently live objects, amount of memory occupied by live objects, total number of allocations and amount of memory occupied by all allocations, respectively.</p> <p>Optimizations are usually application-specific, but here are some common suggestions.</p> <ol> <li> <p>Combine objects into larger objects. For example, replace <code>*bytes.Buffer</code>     struct member with <code>bytes.Buffer</code> (you can preallocate buffer for writing by     calling <code>bytes.Buffer.Grow</code> later). This will reduce number of memory     allocations (faster) and also reduce pressure on garbage collector (faster     garbage collections).</p> </li> <li> <p>Local variables that escape from their declaration scope get promoted into     heap allocations. Compiler generally can't prove that several variables have     the same life time, so it allocates each such variable separately. So you     can use the above advise for local variables as well. For example, replace:</p> <pre><code>for k, v := range m {\n    k, v := k, v   // copy for capturing by the goroutine\n    go func() {\n        // use k and v\n    }()\n}\n</code></pre> <p>with:</p> <pre><code>for k, v := range m {\n    x := struct{ k, v string }{k, v}   // copy for capturing by the goroutine\n    go func() {\n        // use x.k and x.v\n    }()\n}\n</code></pre> <p>This replaces two memory allocations with a single allocation. However, this optimization usually negatively affects code readability, so use it reasonably.</p> </li> <li> <p>A special case of allocation combining is slice array preallocation. If you     know a typical size of the slice, you can preallocate a backing array for it     as follows:</p> <pre><code>type X struct {\n    buf      []byte\n    bufArray [16]byte // Buf usually does not grow beyond 16 bytes.\n}\n\nfunc MakeX() *X {\n    x := &amp;X{}\n    // Preinitialize buf with the backing array.\n    x.buf = x.bufArray[:0]\n    return x\n}\n</code></pre> </li> <li> <p>If possible use smaller data types. For example, use <code>int8</code> instead of     <code>int</code>.</p> </li> <li> <p>Objects that do not contain any pointers (note that strings, slices, maps     and chans contain implicit pointers), are not scanned by garbage collector.     For example, a 1GB byte slice virtually does not affect garbage collection     time. So if you remove pointers from actively used objects, it can     positively impact garbage collection time. Some possibilities are: replace     pointers with indices, split object into two parts one of which does not     contain pointers.</p> </li> <li> <p>Use freelists to reuse transient objects and reduce number of allocations.     Standard library contains sync.Pool     type that allows to reuse the same object several times in between garbage     collections. However, be aware that, as any manual memory management scheme,     incorrect use of sync.Pool can lead to use-after-free bugs.</p> </li> </ol> <p>You can also use the Garbage Collector Trace (see below) to get some insights into memory issues.</p> <p>TODO(dvyukov): mention that stats are updated in a deferred way: \"Memprof stats are updated in a deferred way. This is required in order to present a consistent picture in the situation when allocs are coming continuously and frees are coming in batches afterwards. Several consecutive GCs push the update pipeline forward. That's what you observe. So if you profile a live server then any sample will give you a consistent snapshot. However, if the program completes some activity and you want to collect the snapshot after this activity, then you need to execute 2 or 3 GCs before the collection.\"</p>"},{"location":"Performance/#blocking-profiler","title":"Blocking Profiler","text":"<p>The blocking profiler shows where goroutine block waiting on synchronization primitives (including timer channels). You can collect it in similar ways as CPU profile: with <code>go test --blockprofile</code> (https://pkg.go.dev/cmd/go/#hdr-Description_of_testing_flags), with net/http/pprof via http://myserver:6060:/debug/pprof/block or by calling runtime/pprof.Lookup(\"block\").WriteTo.</p> <p>But there is significant caveat \u2013 the blocking profiler is not enabled by default. <code>go test --blockprofile</code> will enable it for you automatically. However, if you use <code>net/http/pprof</code> or <code>runtime/pprof</code>, you need to enable it manually (otherwise the profile will be empty). To enable the blocking profiler call runtime.SetBlockProfileRate. SetBlockProfileRate controls the fraction of goroutine blocking events that are reported in the blocking profile. The profiler aims to sample an average of one blocking event per the specified amount of nanoseconds spent blocked. To include every blocking event in the profile, set the rate to 1.</p> <p>If a function contains several blocking operations and it's not obvious which one leads to blocking, use <code>--lines</code> flag to pprof.</p> <p>Note that not all blocking is bad. When a goroutine blocks, the underlying worker thread simply switches to another goroutine. So blocking in the cooperative Go environment is very different from blocking on a mutex in a non-cooperative systems (e.g. typical C++ or Java threading libraries, where blocking leads to thread idling and expensive thread context switches). To give you some feeling, let's consider some examples.</p> <p>Blocking on a time.Ticker is usually OK. If a goroutine blocks on a Ticker for 10 seconds, you will see 10 seconds of blocking in the profile, which is perfectly fine. Blocking on <code>sync.WaitGroup</code> is frequently OK. For example, is a task takes 10 seconds, the goroutine waiting on a WaitGroup for completion will account for 10 seconds of blocking in the profile. Blocking on sync.Cond may or may not be OK, depending on the situation. Consumer blocking on a channel suggests slow producers or lack of work. Producer blocking on a channel suggests that consumers are slower, but this is frequently OK. Blocking on a channel-based semaphore shows how much goroutines are gated on the semaphore. Blocking on a sync.Mutex or sync.RWMutex is usually bad. You can use <code>--ignore</code> flag to pprof to exclude known uninteresting blocking from a profile during visualization.</p> <p>Blocking of goroutines can lead to two negative consequences:</p> <ol> <li> <p>Program does not scale with processors due to lack of work. Scheduler Trace     can help to identify this case.</p> </li> <li> <p>Excessive goroutine blocking/unblocking consumes CPU time. CPU Profiler can     help to identify this case (look at the System component).</p> </li> </ol> <p>Here are some common suggestions that can help to reduce goroutine blocking:</p> <ol> <li> <p>Use sufficiently buffered channels in producer-consumer scenarios.     Unbuffered channels substantially limit available parallelism in the     program.</p> </li> <li> <p>Use <code>sync.RWMutex</code> instead of <code>sync.Mutex</code> for read-mostly workloads.     Readers never block other readers in <code>sync.RWMutex</code>, even on implementation     level.</p> </li> <li> <p>In some cases it's possible to remove mutexes entirely by using     copy-on-write technique. If the protected data structure is modified     infrequently and it's feasible to make copies of it, then it can be updated     as follows:</p> <pre><code>type Config struct {\n    Routes   map[string]net.Addr\n    Backends []net.Addr\n}\n\nvar config atomic.Value  // actual type is *Config\n\n// Worker goroutines use this function to obtain the current config.\n  // UpdateConfig must be called at least once before this func.\nfunc CurrentConfig() *Config {\n    return config.Load().(*Config)\n}\n\n// Background goroutine periodically creates a new Config object\n// as sets it as current using this function.\nfunc UpdateConfig(cfg *Config) {\n  config.Store(cfg)\n}\n</code></pre> <p>This pattern prevents the writer from blocking readers during update.</p> </li> <li> <p>Partitioning is another general technique for reducing contention/blocking     on shared mutable data structures. Below is an example of how to partition a     hashmap:</p> <pre><code>type Partition struct {\n    sync.RWMutex\n    m map[string]string\n}\n\nconst partCount = 64\nvar m [partCount]Partition\n\nfunc Find(k string) string {\n    idx := hash(k) % partCount\n    part := &amp;m[idx]\n    part.RLock()\n    v := part.m[k]\n    part.RUnlock()\n    return v\n}\n</code></pre> </li> <li> <p>Local caching and batching of updates can help to reduce contention on     un-partitionable data structures. Below you can see how to batch sends to a     channel:</p> <pre><code>const CacheSize = 16\n\ntype Cache struct {\n    buf [CacheSize]int\n    pos int\n}\n\nfunc Send(c chan [CacheSize]int, cache *Cache, value int) {\n    cache.buf[cache.pos] = value\n    cache.pos++\n    if cache.pos == CacheSize {\n        c &lt;- cache.buf\n        cache.pos = 0\n    }\n}\n</code></pre> <p>This technique is not limited to channels. It can be used to batch updates to a map, batch allocations, etc.</p> </li> <li> <p>Use sync.Pool for freelists instead     of chan-based or mutex-protected freelists. sync.Pool uses smart techniques     internally to reduce blocking.</p> </li> </ol>"},{"location":"Performance/#goroutine-profiler","title":"Goroutine Profiler","text":"<p>The goroutine profiler simply gives you current stacks of all live goroutines in the process. It can be handy to debug load balancing issues (see Scheduler Trace section below), or to debug deadlocks. The profile makes sense only for a running app, so go test does not expose it. You can collect the profile with net/http/pprof via http://myserver:6060:/debug/pprof/goroutine, and visualize it to svg/pdf or by calling runtime/pprof.Lookup(\"goroutine\").WriteTo. But the most useful way is to type http://myserver:6060:/debug/pprof/goroutine?debug=2 in your browser, which will give you symbolized stacks similar to what you see when a program crashes. Note that goroutines in \"syscall\" state consume an OS thread, other goroutines do not (except for goroutines that called runtime.LockOSThread, which is, unfortunately, not visible in the profile). Note that goroutines in \"IO wait\" state also do not consume threads, they are parked on non-blocking network poller (which uses epoll/kqueue/GetQueuedCompletionStatus to unpark goroutines later).</p>"},{"location":"Performance/#garbage-collector-trace","title":"Garbage Collector Trace","text":"<p>Aside from the profiling tools, there is another kind of tools available \u2013 tracers. They allow to trace garbage collections, memory allocator and goroutine scheduler state. To enable the garbage collector (GC) trace, run the program with <code>GODEBUG=gctrace=1</code> environment variable:</p> <pre><code>$ GODEBUG=gctrace=1 ./myserver\n</code></pre> <p>Then the program will print output similar to the following during execution:</p> <pre><code>gc9(2): 12+1+744+8 us, 2 -&gt; 10 MB, 108615 (593983-485368) objects, 4825/3620/0 sweeps, 0(0) handoff, 6(91) steal, 16/1/0 yields\ngc10(2): 12+6769+767+3 us, 1 -&gt; 1 MB, 4222 (593983-589761) objects, 4825/0/1898 sweeps, 0(0) handoff, 6(93) steal, 16/10/2 yields\ngc11(2): 799+3+2050+3 us, 1 -&gt; 69 MB, 831819 (1484009-652190) objects, 4825/691/0 sweeps, 0(0) handoff, 5(105) steal, 16/1/0 yields\n</code></pre> <p>Let's consider the meaning of these numbers. One line per GC is printed. The first number (\"gc9\") is the number of GC (this is the 9-th GC since program start). The number in parens (\"(2)\") is the number of worker threads participated in the GC. The next 4 numbers (\"12+1+744+8 us\") mean stop-the-world, sweeping, marking and waiting for worker threads to finish, in microseconds, respectively. The next 2 numbers (\"2 -&gt; 10 MB\") mean size of live heap after the previous GC and full heap size (including garbage) before the current GC. The next 3 numbers (\"108615 (593983-485368) objects\") are total number of objects in heap (including garbage) and total number of memory allocation and free operations. The next 3 numbers (\"4825/3620/0 sweeps\") characterize sweep phase (of the previous GC): there were total 4825 memory spans, 3620 were swept on demand or in background, 0 were swept during stop-the-world phase (the rest were unused spans). The next 4 numbers (\"0(0) handoff, 6(91) steal\") characterize load balancing during parallel mark phase: there were 0 object handoff operations (0 objects were handoff), and 6 steal operations (91 objects were stolen). The last 3 numbers (\"16/1/0 yields\") characterize effectiveness of parallel mark phase: there were total of 17 yield operations during waiting for another thread.</p> <p>The GC is mark-and-sweep type. Total GC can be expressed as:</p> <pre><code>Tgc = Tseq + Tmark + Tsweep\n</code></pre> <p>where Tseq is time to stop user goroutines and some preparation activities (usually small); Tmark is heap marking time, marking happens when all user goroutines are stopped, and thus can significantly affect latency of processing; Tsweep is heap sweeping time, sweeping generally happens concurrently with normal program execution, and so is not so critical for latency.</p> <p>Marking time can be approximately expressed as:</p> <pre><code>Tmark = C1*Nlive + C2*MEMlive_ptr + C3*Nlive_ptr\n</code></pre> <p>where Nlive is the number of live objects in the heap during GC, <code>MEMlive_ptr</code> is the amount of memory occupied by live objects with pointers, <code>Nlive_ptr</code> is the number of pointers in live objects.</p> <p>Sweeping time can be approximately expressed as:</p> <pre><code>Tsweep = C4*MEMtotal + C5*MEMgarbage\n</code></pre> <p>where <code>MEMtotal</code> is the total amount of heap memory, <code>MEMgarbage</code> is the amount of garbage in the heap.</p> <p>Next GC happens after the program has allocated an extra amount of memory proportional to the amount already in use. The proportion is controlled by GOGC environment variable (100 by default). If GOGC=100 and the program is using 4M of heap memory, runtime will trigger GC again when the program gets to 8M. This keeps the GC cost in linear proportion to the allocation cost. Adjusting GOGC changes the linear constant and also the amount of extra memory used.</p> <p>Only sweeping depends on total size of the heap, and sweeping happens concurrently with normal program execution. So it can make sense to set GOGC to a higher value (200, 300, 500, etc) if you can afford extra memory consumption. For example, GOGC=300 can reduce garbage collection overhead by up to 2 times while keeping latencies the same (at the cost of 2 times larger heap).</p> <p>GC is parallel and generally scales well with hardware parallelism. So it can make sense to set GOMAXPROCS to higher value even for sequential programs just to speed up garbage collections. However, note that number of garbage collector threads is currently bounded by 8.</p>"},{"location":"Performance/#memory-allocator-trace","title":"Memory Allocator Trace","text":"<p>Memory allocator traces simply dumps all memory allocation and free operations onto console. It's enabled with GODEBUG=allocfreetrace=1 environment variable. The output looks along the lines of:</p> <pre><code>tracealloc(0xc208062500, 0x100, array of parse.Node)\ngoroutine 16 [running]:\nruntime.mallocgc(0x100, 0x3eb7c1, 0x0)\n    runtime/malloc.goc:190 +0x145 fp=0xc2080b39f8\nruntime.growslice(0x31f840, 0xc208060700, 0x8, 0x8, 0x1, 0x0, 0x0, 0x0)\n    runtime/slice.goc:76 +0xbb fp=0xc2080b3a90\ntext/template/parse.(*Tree).parse(0xc2080820e0, 0xc208023620, 0x0, 0x0)\n    text/template/parse/parse.go:289 +0x549 fp=0xc2080b3c50\n...\n\ntracefree(0xc208002d80, 0x120)\ngoroutine 16 [running]:\nruntime.MSpan_Sweep(0x73b080)\n        runtime/mgc0.c:1880 +0x514 fp=0xc20804b8f0\nruntime.MCentral_CacheSpan(0x69c858)\n        runtime/mcentral.c:48 +0x2b5 fp=0xc20804b920\nruntime.MCache_Refill(0x737000, 0xc200000012)\n        runtime/mcache.c:78 +0x119 fp=0xc20804b950\n...\n</code></pre> <p>The trace contains address of the memory block, size, type, goroutine id and the stack trace. It's probably more useful for debugging, but can give very fine-grained info for allocation optimizations as well.</p>"},{"location":"Performance/#scheduler-trace","title":"Scheduler Trace","text":"<p>Scheduler trace can provide insights into dynamic behavior of the goroutine scheduler and allow to debug load balancing and scalability issues. To enable the scheduler trace trace, run the program with GODEBUG=schedtrace=1000 environment variable (the value means period of output, in ms, in this case it's once per second):</p> <pre><code>$ GODEBUG=schedtrace=1000 ./myserver\n</code></pre> <p>Then the program will print output similar to the following during execution:</p> <pre><code>SCHED 1004ms: gomaxprocs=4 idleprocs=0 threads=11 idlethreads=4 runqueue=8 [0 1 0 3]\nSCHED 2005ms: gomaxprocs=4 idleprocs=0 threads=11 idlethreads=5 runqueue=6 [1 5 4 0]\nSCHED 3008ms: gomaxprocs=4 idleprocs=0 threads=11 idlethreads=4 runqueue=10 [2 2 2 1]\n</code></pre> <p>The first number (\"1004ms\") is time since program start. Gomaxprocs is the current value of GOMAXPROCS. Idleprocs is the number of idling processors (the rest are executing Go code). Threads is the total number of worker threads created by the scheduler (threads can be in 3 states: execute Go code (gomaxprocs-idleprocs), execute syscalls/cgocalls or idle). Idlethreads is the number of idling worker threads. Runqueue is the length of global queue with runnable goroutines. The numbers in square brackets (\"[0 1 0 3]\") are lengths of per-processor queues with runnable goroutines. Sum of lengths of global and local queues represents the total number of goroutines available for execution.</p> <p>Note: You can combine any of the tracers as GODEBUG=gctrace=1,allocfreetrace=1,schedtrace=1000.</p> <p>Note: There is also detailed scheduler trace, which you can enable with GODEBUG=schedtrace=1000,scheddetail=1. It prints detailed info about every goroutine, worker thread and processor. We won't describe its format here as it's mainly useful for scheduler developers; but you can find details in src/pkg/runtime/proc.c.</p> <p>The scheduler trace is useful when a program does not scale linearly with GOMAXPROCS and/or does not consume 100% of CPU time. The ideal situation is when all processors are busy executing Go code, number of threads is reasonable, there is plenty of work in all queues and the work is reasonably evenly distributed:</p> <pre><code>gomaxprocs=8 idleprocs=0 threads=40 idlethreads=5 runqueue=10 [20 20 20 20 20 20 20 20]\n</code></pre> <p>A bad situation is when something of the above does not hold. For example the following sample demonstrates shortage of work to keep all processors busy:</p> <pre><code>gomaxprocs=8 idleprocs=6 threads=40 idlethreads=30 runqueue=0 [0 2 0 0 0 1 0 0]\n</code></pre> <p>Note: use OS-provided means to measure actual CPU utilization as the ultimate characteristic. On Unix family of operating system it is top command; on Windows it is Task Manager.</p> <p>You can use the goroutine profiler to understand where goroutines block in the case of work shortage. Note that load imbalance is not ultimately bad as long as all processors are busy, it will just cause some moderate load balancing overheads.</p>"},{"location":"Performance/#memory-statistics","title":"Memory Statistics","text":"<p>Go runtime exposes coarse-grained memory statistics via runtime.ReadMemStats function. The statistics are also exposed via net/http/pprof at the bottom of http://myserver:6060/debug/pprof/heap?debug=1. The statistics are described here. Some of the interesting fields are:</p> <ol> <li>HeapAlloc - current heap size.</li> <li>HeapSys - total heap size.</li> <li>HeapObjects - total number of objects in the heap.</li> <li>HeapReleased - amount of memory released to the OS; runtime releases to the     OS memory unused for 5 minutes, you can force this process with     runtime/debug.FreeOSMemory.</li> <li>Sys - total amount of memory allocated from OS.</li> <li>Sys-HeapReleased - effective memory consumption of the program.</li> <li>StackSys - memory consumed for goroutine stacks (note that some stacks are     allocated from heap and are not accounted here, unfortunately there is no     way to get total size of stacks     (https://code.google.com/p/go/issues/detail?id=7468)).</li> <li>MSpanSys/MCacheSys/BuckHashSys/GCSys/OtherSys - amount of memory allocated     by runtime for various auxiliary purposes; they are generally not     interesting, unless they are too high.</li> <li>PauseNs - durations of last garbage collections.</li> </ol>"},{"location":"Performance/#heap-dumper","title":"Heap Dumper","text":"<p>The last available tool is heap dumper, it can write state of the whole heap into a file for future exploration. It can be useful for identifying memory leaks and getting insights into program memory consumption.</p> <p>First, you need to write the dump using runtime/debug.WriteHeapDump function:</p> <pre><code>    f, err := os.Create(\"heapdump\")\n    if err != nil { ... }\n    debug.WriteHeapDump(f.Fd())\n</code></pre> <p>Then you can either render it to a dot file with graphical representation of the heap or convert it to hprof format. To render it to a dot file:</p> <pre><code>$ go get github.com/randall77/hprof/dumptodot\n$ dumptodot heapdump mybinary &gt; heap.dot\n</code></pre> <p>and open <code>heap.dot</code> with Graphviz.</p> <p>To convert it to <code>hprof</code> format:</p> <pre><code>$ go get github.com/randall77/hprof/dumptohprof\n$ dumptohprof heapdump heap.hprof\n$ jhat heap.hprof\n</code></pre> <p>and navigate your browser to http://myserver:7000.</p>"},{"location":"Performance/#concluding-remarks","title":"Concluding Remarks","text":"<p>Optimization is an open problem, there are simple recipes that you can use to improve performance. Sometimes optimization requires complete re-architecture of the program. But we hope that the tools will be a valuable addition to your toolbox, that you can use to at least analyze and understand what happens. Profiling Go Programs is a good tutorial on usage of CPU and memory profilers to optimize a simple program.</p>"},{"location":"PerformanceMonitoring/","title":"PerformanceMonitoring","text":"<p>The Go project monitors the performance characteristics of the Go implementation as well as that of subrepositories like golang.org/x/tools.</p>"},{"location":"PerformanceMonitoring/#benchmarks","title":"Benchmarks","text":"<p><code>golang.org/x/benchmarks/cmd/bench</code> is the entrypoint for our performance tests. For Go implementations, this runs both the Sweet (end-to-end benchmarks) and bent (microbenchmarks) benchmarking suites.</p> <p>For the <code>golang.org/x/tools</code> project, it runs the repository's benchmarks.</p> <p>These benchmarks can all be invoked manually, as can <code>cmd/bench</code>, but using both Sweet and bent directly will likely offer a better user experience. See their documentation for more details.</p>"},{"location":"PerformanceMonitoring/#performance-testing-principles","title":"Performance testing principles","text":""},{"location":"PerformanceMonitoring/#change-with-the-times","title":"Change with the times","text":"<p>Our set of benchmarks is curated. It is allowed to change over time. Sticking to a single benchmark set over a long period of time can easily land us in a situation where we're optimizing for the wrong thing.</p>"},{"location":"PerformanceMonitoring/#always-perform-a-comparison","title":"Always perform a comparison","text":"<p>We never report performance numbers in isolation, and only relative to some baseline. This strategy comes from the fact that comparing performance data taken far apart in time, even on the same hardware, can result in a lot of noise that goes unaccounted for. The state of a machine or VM on one day is likely to be very different than the state of a machine or VM on the next day.</p> <p>We refer to the tested version of source code as the \"experiment\" and the baseline version of source code as the \"baseline.\"</p>"},{"location":"PerformanceMonitoring/#presubmit","title":"Presubmit","text":"<p>Do you have a Gerrit change that you want to run against our benchmarks?</p> <p>Select a builder containing the word <code>perf</code> in the \"Choose Tryjobs\" dialog that appears when selecting a SlowBot.</p> <p>There are two kinds of presubmit builders for performance testing: - <code>perf_vs_parent</code>, which measures the performance delta of a change in isolation. - <code>perf_vs_tip</code>, which measures the performance delta versus the current   tip-of-tree for whichever repository the change is for.   (Remember to rebase your change(s) before using this one!)</p> <p>There's a third special presubmit builder for the tools repository as well which contains the string <code>perf_vs_gopls_0_11</code>. This measures the performance delta versus the <code>release-branch-gopls.0.11</code> branch of the tools repository.</p>"},{"location":"PerformanceMonitoring/#postsubmit","title":"Postsubmit","text":"<p>The performance dashboard provides continuous monitoring of benchmark performance for every commit that is made to the main Go repository and other subrepositories. The dashboard, more specifically, displays graphs showing the change in certain performance metrics (also called \"units\") over time for different benchmarks. Use the navigation interface at the top of the page to explore further.</p> <p>The regressions page displays all benchmarks in order of biggest regression to biggest improvement, followed by all benchmarks for which there is no statistically clear answer.</p> <p>On the graphs, red means regression, blue means improvement.</p>"},{"location":"PerformanceMonitoring/#baselines","title":"Baselines","text":"<p>In post-submit, the baseline version for Go repository performance tests is automatically determined. For performance tests against changes on release branches, the baseline is always the latest release for that branch (for example, the latest minor release for Go 1.21 on <code>release-branch.go1.21</code>). For performance tests against tip-of-tree, the baseline is always the latest overall release of Go. This is indicated by the name of the builder that produces these benchmark esults, which contains the string <code>perf_vs_release</code>. What this means is that on every minor release of Go, the baseline shifts. These baseline shifts can be observed in the per-metric view.</p> <p>Performance tests on subrepositories typically operate against some known long-term fixed baseline. For the tools repository, it's the tip of the <code>release-branch-gopls.0.11</code> branch.</p>"},{"location":"PerformanceMonitoring/#per-metric-view","title":"Per-metric view","text":"<p>Click on any graph's performance metric name to view a more detailed timeline of the performance deltas for that metric.</p> <p></p> <p>This view is particularly useful for identifying the culprit behind a regression and for pinpointing the source of an improvement.</p> <p>Sometimes, a performance change happens because a benchmark has changed or because the baseline version being used as changed. This view also displays information about the baseline versions and the version of <code>golang.org/x/benchmarks</code> that was used to produce the results to help identify when this happens.</p>"},{"location":"Plan9/","title":"Go on Plan 9","text":""},{"location":"Plan9/#introduction","title":"Introduction","text":"<p>An experimental port of Go is available for the Plan 9 from Bell Labs operating system.</p>"},{"location":"Plan9/#supported-architectures","title":"Supported architectures","text":"<p>The Plan 9 port of Go is available for the following architectures:</p> <ul> <li>386</li> <li>amd64</li> <li>arm</li> </ul>"},{"location":"Plan9/#supported-kernels","title":"Supported kernels","text":"<p>The current Go distribution has been tested successfully on:</p> <ul> <li>Plan 9 from Bell Labs (386 and arm) kernel</li> <li>9front amd64 kernel</li> <li>Bell Labs 9k (amd64) kernel</li> </ul>"},{"location":"Plan9/#requirements","title":"Requirements","text":"<p>Go on Plan 9 requires a kernel providing the following system calls:</p> <ul> <li>tsemacquire (available since 2012-06-30)</li> <li>nsec (available since 2014-05-15)</li> </ul> <p>A fix to the pread system call is required, so pread will not update the channel offset when reading a file:</p> <ul> <li>9-pread-offset</li> </ul> <p>The TCP connection control file must handle the \"close\" message to be able close a TCP connection gracefully, while waking up the readers:</p> <ul> <li>9-tcp-close</li> </ul> <p>A fix to Fossil is required to increment Qid.vers after a wstat, so a truncate followed by a read will return the content of the new file instead of the cached content.</p> <ul> <li>fossil-wstat-qid</li> </ul> <p>You will need support for SHA-2 signatures in X.509 certificates, so you could download sources from repositories hosted on GoogleSource, GitHub and so on.</p> <ul> <li>libsec-x509-sha2</li> </ul> <p>If you're running Plan 9 on Raspberry Pi, you'll require the latest bcm kernel from Richard Miller.</p> <p>CA certificates for <code>crypto/x509</code> package needs to be installed at <code>/sys/lib/tls/ca.pem</code>. You can download it from <code>https://curl.haxx.se/ca/cacert.pem</code> or copy from another system.</p> <p>For 9front, you may need to configure loopback addresses for standard library tests:</p> <pre><code>ip/ipconfig -P loopback /dev/null 127.1\nip/ipconfig -P loopback /dev/null ::1\n</code></pre>"},{"location":"Plan9/#installation","title":"Installation","text":"<p>Since Go is written in Go, you may want to bootstrap Go with Go 1.4.3, which is the latest release of Go written in C.</p> <p>However, since the Go 1.4 runtime wasn't mature enough on Plan 9, we recommend you to bootstrap from a more recent version of Go, using another operating system.</p>"},{"location":"Plan9/#bootstrapping-from-plan-9","title":"Bootstrapping from Plan 9","text":"<p>First, install Go 1.4:</p> <pre><code>cd /tmp\ngit clone -b go1.4.3 https://go.googlesource.com/go go1.4\ncd go1.4/src\nhget http://9legacy.org/go/patch/syscall-exec.diff | ape/patch -p2\nmake.rc\n</code></pre> <p>The syscall-exec patch is required if you're running a machine with SMP enabled.</p> <p>Then, set the <code>GOROOT_BOOTSTRAP</code> environment variable:</p> <pre><code>GOROOT_BOOTSTRAP=/tmp/go1.4\n</code></pre> <p>Finally, install the latest version of Go:</p> <p><pre><code>cd /tmp\ngit clone https://go.googlesource.com/go\ncd go/src\nall.rc\nbind -a /tmp/go/bin /bin\n</code></pre> Go is now ready to use.</p>"},{"location":"Plan9/#bootstrapping-from-another-operating-system","title":"Bootstrapping from another operating system","text":"<p>First, you must have installed Go on this operating system, following the Go installation instructions.</p> <p>Then, you can cross-compile a Go toolchain for Plan 9:</p> <pre><code>cd $GOROOT/src\nGOOS=plan9 GOARCH=386 ./bootstrap.bash\n</code></pre> <p>Then, the bootstrap toolchain will be available in <code>../../go-plan9-386-bootstrap.tbz</code>.</p> <p>Finally, you can extract this archive to your Plan 9 machine.</p> <p>For example:</p> <pre><code>cd /tmp\ntar xzf go-plan9-386-bootstrap.tbz\nbind -a /tmp/go-plan9-386-bootstrap/bin /bin\n</code></pre> <p>Go is now ready to use.</p> <p>You'll be able to use this installation of Go to bootstrap future Go releases, by setting the <code>GOROOT_BOOTSTRAP</code> environment variable:</p> <pre><code>GOROOT_BOOTSTRAP=/tmp/go-plan9-386-bootstrap\n</code></pre>"},{"location":"Plan9/#bootstrapping-from-binaries","title":"Bootstrapping from binaries","text":"<p>A binary package for plan9/386 is available.</p> <p>This binary package is used to bootstrap Go on the plan9/386 builder.</p> <pre><code>cd /tmp\nhget -o gobootstrap-plan9-386.tar.gz https://storage.googleapis.com/go-builder-data/gobootstrap-plan9-386.tar.gz\nmkdir gobootstrap-plan9-386\ncd  gobootstrap-plan9-386\ntar xzf ../gobootstrap-plan9-386.tar.gz\n</code></pre> <p>You'll be able to use this binary package of Go to bootstrap Go, by setting the <code>GOROOT_BOOTSTRAP</code> environment variable:</p> <pre><code>GOROOT_BOOTSTRAP=/tmp/gobootstrap-plan9-386\n</code></pre> <p>Other binary packages are available here and here.</p>"},{"location":"Plan9/#git","title":"Git","text":"<p>Git is not available on Plan 9. However a Git wrapper is available as a simple rc script. It includes everything you need to use the go tool.</p>"},{"location":"Plan9/#builders","title":"Builders","text":"<p>Three Plan 9 builders are currently running and reporting the results to the Go Dashboard:</p> <ul> <li>plan9-386 is running Plan 9 from Bell Labs (386 kernel) on a virtual machine</li> <li>plan9-amd64-9front is running Plan 9 from Bell Labs (amd64 kernel) on a virtual machine</li> <li>plan9-arm is running Plan 9 from Bell Labs (arm kernel) on a Raspberry Pi 3</li> </ul>"},{"location":"Plan9/#status","title":"Status","text":"<p>The Plan 9 port of Go is considered experimental and is still a work-in-progress. There is a number of known issues available on the Go issue tracker.</p>"},{"location":"Plan9/#issues","title":"Issues","text":"<p>Many issues are currently open on the Go issue tracker with the OS-Plan9 label.</p>"},{"location":"Plan9/#help","title":"Help","text":"<p>The Plan 9 port of Go is a community-driven port. Any help to improve the Go port on Plan 9 would be highly appreciated.</p>"},{"location":"Plan9/#maintainer","title":"Maintainer","text":"<p>Many people have contributed to the Plan 9 port of Go. Since December 2013, the Plan 9 port of Go is maintained by David du Colombier.</p>"},{"location":"Plan9/#trivia","title":"Trivia","text":"<p>Many parts of Go are directly influenced by the Plan 9 system, as two of its three main designers worked on Plan 9 at Bell labs. Some of these connections are: * The Gopher is designed by Ren\u00e9e French, who also designed Glenda, the Plan 9 bunny. * The Gc compiler hosted in this repository uses a Plan 9-style loader. * Go's Assembler is based on Plan 9's syntax. The Go 1.x stack-based ABI is borrowed from Plan 9. * Although not recommended, there was also some support for Plan 9 C, with the original standard library being descended from Plan 9's libc. The self-hosting design document talks about this history.</p>"},{"location":"Podcasts/","title":"Podcasts","text":""},{"location":"Podcasts/#active-podcast-shows","title":"Active podcast shows","text":"<ul> <li>go podcast() - Dominic St-Pierre, recorded bi-weekly, ~15 minutes, topic based.</li> <li>Cup o' Go - Stay up to date with the Go community in about 15 minutes per week.</li> </ul>"},{"location":"Podcasts/#inactive-podcast-shows","title":"Inactive podcast shows","text":"<ul> <li>GolangShow \u2013 Weekly podcast since June 2015, in English and Russian languages.</li> <li>Go Gab - A podcast about everything Go. Episodes are short: about 3 minutes each.</li> <li>GoFr \u2013 by Arnaud Assad, Sebastien Friess, Thomas Perez, Lucille Tachet in French.</li> <li>Go Time - Erik St. Martin, Carlisia Campos, Brian Ketelsen</li> </ul>"},{"location":"Podcasts/#podcast-episodes","title":"Podcast episodes","text":"<p>A collection of podcast episodes that cover Go programming. Please keep items in reverse chronological order (most recent first) * Working in the Go ecosystem - Dot Tech by Form3 2021-02-19 * Making an Open Source Go project a full time job - Dot Tech by Form3 2020-11-25 * How and why you should move to Go - Dot Tech by Form3 2020-11-03 * The Go Language - Hipsters #67 (in portuguese) 2017-10-24 * The Go Programming Language 2 - Cast\u00e1lio Podcast #87 (in portuguese) 2017-02-13 * The Go Programming Language 1 - Cast\u00e1lio Podcast #86 (in portuguese) 2017-02-06 * Little chat about Go Lang (in portuguese) 2016-03-27 * Programming in Go with Michael Van Sickle 2015-10-13 * Go on the Web 2015-08-05 * Fatherhood with Andrew Gerrand 2015-05-15 * Talking with Go Developers at GopherCon India 2015 2015-04-01 * Interview with CC4CS talking about Security in Go 2015-03-06 * Golang Best Practices 2014-09-08 * An Introduction to the Go Programming Language with Andrew Gerrand 2014-03-28 * FLOSS Weekly #284: The Go Language 2014-02-19 * Series: The Go Language - GrokPodcast (in portuguese) 2013-07-17</p>"},{"location":"PortingPolicy/","title":"PortingPolicy","text":""},{"location":"PortingPolicy/#introduction","title":"Introduction","text":"<p>This document is about the policy for adding a new port to the main Go repository. By port we mean an operating system + architecture combination, such as linux/386.</p> <p>The goal of this policy is to clarify what the Go project tries to promise for ports and to avoid the accumulation of incomplete or broken ports.</p>"},{"location":"PortingPolicy/#requirements-for-a-new-port","title":"Requirements for a new port","text":"<p>Before any code relating to a port can be added to the main Go repository, the following must all be done:</p> <ul> <li> <p>A proposal must be filed and accepted in which the Go team accepts overall responsibility for having the new port in the core Go tree. In general, each new port carries an upkeep cost separate from the direct maintenance. That cost varies by port, depending on how similar a new port is to existing ones. The cost must be balanced by an overall benefit in the form of potential new users or use cases for Go.</p> </li> <li> <p>At least two developers must be named (and agree) to maintain the port, by making required updates in a timely manner as architecture or operating system requirements change.</p> <ul> <li>Port maintainers are listed in the subteams of @golang/port-maintainers. To be added or removed as a maintainer for an existing port, please file an issue.</li> <li>Changes that are specific to a particular port should normally be reviewed first by one of the port maintainers (though not the one who wrote the change, of course).  We currently require two reviews for each change, so changes will still typically be reviewed by someone who is not a port maintainer, but ideally that can be a more casual review by someone less familiar with the port details.</li> </ul> </li> <li> <p>A developer must be named (and agree) to maintain the builder, the machine trying each git revision and providing data for https://build.golang.org.</p> <ul> <li>Builder maintainers are listed in <code>x/build/dashboard/builders.go</code>. To update the owners for a builder, please send a change to that file.</li> </ul> </li> <li> <p>The builder must already be running (and failing, because the code is not yet in the main repository).</p> </li> <li> <p>All CLs necessary to run all.bash successfully must have been sent for review. Typically this will be a handful of CLs split by the part of the tree they change.</p> </li> </ul> <p>Once those conditions are satisfied, the Go team can accept the port and begin to merge the CLs. Once the CLs are all submitted, all.bash must pass, so that the builder reports \"ok\" in the dashboard.</p>"},{"location":"PortingPolicy/#other-repositories","title":"Other repositories","text":"<p>Although it is not part of the core repository, the x/sys repository should add support for the new port before the release happens because it is the official place to add new system calls.  It's OK to add support for a new port in the x/sys repository before working on the main repository.</p>"},{"location":"PortingPolicy/#first-class-ports","title":"First class ports","text":"<p>Some ports are considered \"first class\". The distinction is mostly about releases.</p> <p>A first class port has these properties:</p> <ul> <li>Broken builds block releases<ul> <li>All contributors are effectively responsible for these ports (You break it, you fix it, or find someone who can.)</li> <li>Requires Google's Go team to own the builder machine</li> </ul> </li> <li>Installation is documented at https://go.dev/doc/install</li> </ul> <p>Graduating a port to \"first class\" is at the discretion of the Go team at Google, and requires an accepted proposal.</p> <p>The current first class ports are:</p> <ul> <li>darwin/amd64</li> <li>darwin/arm64</li> <li>linux/386</li> <li>linux/amd64</li> <li>linux/arm</li> <li>linux/arm64</li> <li>windows/386</li> <li>windows/amd64</li> </ul> <p>All Linux first class ports are for systems using glibc only.  Linux systems using other C libraries are not fully supported and are not treated as first class.</p>"},{"location":"PortingPolicy/#maintaining-a-port","title":"Maintaining a port","text":"<p>In general, people changing the Go tools and standard library must not break any of the first class ports listed above.  A change that breaks a first class port must be fixed or rolled back.</p> <p>A change that breaks a secondary port will not necessarily be rolled back.  If there is some reasonable possibility of breaking a secondary port developers are encouraged to make sure that the ports continue to work (for example, by running port-specific trybots).  Developers are also encouraged to notify secondary port maintainers of any possible port-specific problems, which they can do by reaching out to the appropriate GitHub team(s).  That said, ultimately the port maintainers are responsible for keeping their ports working.</p>"},{"location":"PortingPolicy/#broken-ports","title":"Broken ports","text":"<ul> <li>If a port stops working, including the case where a builder stops working, we can decide to mark the port as broken.</li> <li>Or in some cases we can roll back the change that broke it; this is a judgement call.</li> <li>In general, a port can be considered broken if its builder has failed multiple times in a development cycle with a failure mode that does not occur for first class ports, and that failure mode is not believed to have been fixed or suppressed by a change in either a Go repository or the builder's configuration, and maintainers are not actively working on a solution.</li> <li>Any approver can declare that a port that meets these criteria is broken.</li> <li>If a port is broken in release 1.N, then the core Go team can choose to remove the port from release 1.N+1.</li> <li>This is not obligatory and will depend on whether anybody is willing and able to maintain the port going forward.</li> </ul> <p>The goal here is not to get ports out of the tree; if people are actively working on the port they should have as much as latitude as possible to fix it.  Removing a formerly working port should be a last resort.  Finding a new maintainer is always preferable.</p>"},{"location":"PortingPolicy/#removing-old-operating-system-and-architecture-versions","title":"Removing old operating system and architecture versions","text":"<p>To allow development effort to focus on systems that are widely available to Go users,  over time we may remove support for older operating systems and architectures,  especially older operating system versions and architecture revisions.</p> <p>The important considerations when deciding whether to remove support for an old operating system or architecture version are:</p> <ul> <li>Availability. If the operating system is no longer distributed or the hardware is no longer manufactured, for example, there's not a clear need to keep it going. For example, Go's ppc64 port no longer supports the IBM POWER5 architecture.</li> <li>Manufacturer support. If the operating system or architecture is no longer supported by its manufacturer, that is a strong signal that a future version of Go can remove support as well. For example, each year, Apple typically issues one new version of macOS and deprecates one old version. Go typically deprecates old macOS versions at the same rate.</li> <li>Actual or expected user base. If there are relatively few users, significant effort to maintain a port may not be worthwhile.</li> <li>Ongoing costs. Ports that require significant ongoing debugging or implementation efforts will be scrutinized more than ports that don't.</li> </ul> <p>When the considerations weigh in favor of removing a port and a proposal is accepted, Go 1.N's release notes will announce that support for a given operating system or architecture will be dropped in Go 1.(N+1).</p>"},{"location":"PortingPolicy/#getting-started","title":"Getting started","text":"<p>See https://groups.google.com/forum/#!topic/golang-dev/SRUK7yJVA0c for some discussion on how to go about writing a new port.</p>"},{"location":"PortingPolicy/#comments-and-questions","title":"Comments and Questions","text":"<p>Comments or questions about the policy should be sent to golang-dev.</p>"},{"location":"PriorDiscussion/","title":"Prior Discussion","text":""},{"location":"PriorDiscussion/#background","title":"Background","text":"<p>This page links to prior discussion on various topics.</p> <p>The page complements the official FAQ. While the official FAQ contains things which are frequently asked and contains answers, this page contains things that have been repeatedly asked, but maybe not frequently, and only needs to link to one or more previous threads.  Over time, these entries may graduate to entries in the official FAQ.</p> <p>Editors: When editing this page, please don't change the titles of sections, as that breaks the #anchors in URLs. You can rearrange, though. Feel free to add entries at will. There is no requirement for code or English review here.</p>"},{"location":"PriorDiscussion/#asked-questions--prior-discussion","title":"Asked Questions &amp; Prior Discussion","text":""},{"location":"PriorDiscussion/#panics-on-sends-or-closes-of-closed-channel","title":"Panics on sends or closes of closed channel","text":"<p>See https://github.com/golang/go/issues/11344#issuecomment-117862884</p>"},{"location":"PriorDiscussion/#thread-local-goroutine-local-storage","title":"Thread-local, Goroutine-local storage","text":"<p>TODO</p>"},{"location":"PriorDiscussion/#add-explicit-int-to-bool-conversions","title":"Add explicit int-to-bool conversions","text":"<p>Rejected, see  https://github.com/golang/go/issues/9367#issuecomment-143128337</p>"},{"location":"PriorDiscussion/#add-mechanism-to-silence-vet-warnings","title":"Add mechanism to silence vet warnings","text":"<p>Rejected, see discussion in golang/go#17058</p>"},{"location":"PriorDiscussion/#add-vet-warning-for-unused-function-arguments","title":"Add vet warning for unused function arguments","text":"<p>Rejected, see https://github.com/golang/go/issues/7892#issuecomment-66094282</p>"},{"location":"PriorDiscussion/#make-go-get-more-verbose--add-a-progress-bar","title":"Make go get more verbose / add a progress bar","text":"<p>Rejected, see golang/go#17959 https://github.com/golang/go/issues/18388#issuecomment-268315634</p>"},{"location":"PriorDiscussion/#shorten-error-handling--return-sugar","title":"Shorten error handling / return sugar","text":"<p>Rejected, see golang/go#16225</p>"},{"location":"PriorDiscussion/#support-symlinks-in-go-toolchain--environment-variables","title":"Support symlinks in go toolchain / environment variables","text":"<p>Rejected, see golang/go#15507</p>"},{"location":"PriorDiscussion/#make-unused-importsvariables-a-warning-not-an-error","title":"Make unused imports/variables a warning, not an error","text":"<p>Rejected.</p>"},{"location":"PriorDiscussion/#add-warnings-to-the-go-compiler","title":"Add warnings to the Go compiler","text":"<p>Experience in large projects has shown that warnings pile up until people ignore all warnings, so warnings only add noise and no value (or are actively harmful in that they hide bugs). See https://go.dev/doc/faq#unused_variables_and_imports </p>"},{"location":"PriorDiscussion/#weak-references","title":"Weak references","text":"<p>Unlikely to be added. See discussion at https://groups.google.com/forum/#!topic/golang-nuts/PYWxjT2v6ps, and https://groups.google.com/forum/?pli=1#!topic/golang-nuts/MMWXRANh0-g which points out that <code>sync.Pool</code> is a specific form of weak reference.</p>"},{"location":"Projects/","title":"Projects","text":"<p>This page previously contained a list of projects built in Go. Projects can now be found via:</p> <ul> <li>pkg.go.dev - A documentation browser for any Go open source package.</li> <li>Awesome Go - A community maintained, categorized list of projects built in Go.</li> </ul>"},{"location":"Proposals/","title":"Proposals","text":"<p>See golang/proposal#readme</p>"},{"location":"ProviderIntegration/","title":"ProviderIntegration","text":""},{"location":"ProviderIntegration/#introduction","title":"Introduction","text":"<p>A number of Platform-as-a-Service (PaaS) providers allow you to use Go applications on their clouds.</p>"},{"location":"ProviderIntegration/#details","title":"Details","text":"PaaS Repository Quickstart Guide Google App Engine GoogleCloudPlatform/appengine-plus-go https://developers.google.com/appengine/training/go-plus-appengine/ Azure wadewegner/azure-website-go-builder http://www.wadewegner.com/2015/01/creating-a-go-site-extension-and-resource-template-for-azure/ IBM BlueMix http://www.ibm.com/developerworks/cloud/library/cl-bluemix-go-app/ CloudBees CloudBees-community/golang-clickstart Cloud Foundry kr/heroku-buildpack-go http://catdevrandom.me/blog/2013/05/16/buildpacks-in-cloud-foundry-v2/ dotCloud kencochrane/golang-on-dotcloud AWS Elastic Beanstalk sqs/go-elasticbeanstalk Heroku kr/heroku-buildpack-go http://mmcgrana.github.com/2012/09/getting-started-with-go-on-heroku.html OpenShift gcmurphy/golang-openshift Stackato kr/heroku-buildpack-go http://docs.stackato.com/user/deploy/languages/go.html Tsuru http://docs.tsuru.io/en/latest/apps/quickstart/go.html Cocaine http://github.com/cocaine 3Hren/cocaine-core 3Hren/cocaine-plugins cocaine/cocaine-framework-go cocaine/cocaine-vagrant and 3Hren/cocaine-core GE Predix geaviation/goboot-starter https://www.predix.io/resources/tutorials/journey.html Tencent Cloud TencentCloud/tencentcloud-sdk-go https://intl.cloud.tencent.com/document/product/436/30601"},{"location":"Questions/","title":"Asking Questions","text":"<p>Unlike many projects, the Go project does not use GitHub Issues for general discussion or asking questions. GitHub Issues are used for tracking bugs and proposals only.</p> <p>For asking questions, see:</p> <ul> <li> <p>Stack Overflow with questions tagged \"go\" or \"golang\"</p> </li> <li> <p>The Go Forum, a web-based forum</p> </li> <li> <p>Gophers Discord \"Get live support and talk with other gophers on the Go Discord\"</p> </li> <li> <p>Gophers Slack, use the invite app for access. The <code>#general</code> channel is a good starting point.</p> </li> <li> <p>Go Community on Hashnode with questions and posts tagged with \"go\"</p> </li> <li> <p>The golang-nuts mailing list</p> </li> <li> <p>Subreddit for Go</p> </li> <li> <p>IRC channel #go-nuts on Libera</p> </li> </ul> <p>If we closed your issue as a question with a link to this wiki, we apologize. Please ask the question on one of the above forums.</p> <p>Please do not write your question on a wiki page.  Please use one of the above forums.</p> <p>As with any open source project, sometimes you can answer your own question by reading the source, if you know where to start. The search bar at cs.opensource.google/go can help.</p>"},{"location":"Quiet-Weeks/","title":"Quiet Weeks","text":"<p>Periodically throughout the year, the Go team holds \u201cquiet weeks\u201d, with no important conversations happening, to give people time for focus on deep work. </p> <p>We aim to do about four single weeks per year, toward the middle of each change window and the middle of each freeze. When we do this, we pre-announce the quiet week on golang-dev@ and post a pinned issue on the issue tracker during the quiet week.</p> <p>Quiet weeks have two goals:</p> <ol> <li> <p>Create time for people to disconnect, take a real break, and recharge, without worrying that they will need to catch up on what they missed when they return.</p> </li> <li> <p>Create time for people who keep working to do deep work, without all the usual interruptions, including online discussions.</p> </li> </ol> <p>Quiet weeks can mean vacation. If you're not on vacation, they don't mean not working. Getting work done quietly is great, and we don't want to stop that. We've used an example that if a couple people agree beforehand that the deep work they want to do next week is some kind of collaboration, like meeting to talk through a thorny design doc they are drafting, or pair programming sessions, that's totally fine, as long as that's how they both want to use the week and as long as no one else who would have wanted to be involved will feel like they missed it.</p> <p>It's also definitely fine to file most issues and mail most CLs: we don't want everyone to have to queue up a whole bunch of things to send at the end of the quiet week. On the other hand, if you have an issue or a CL that you think might spark a discussion that people will regret having missed or need to catch up on when they return, then we'd appreciate it if you can hold those and wait to post them until the quiet is over.</p>"},{"location":"Range/","title":"Range Clauses","text":"<p>Spec: https://go.dev/ref/spec#For_statements</p>"},{"location":"Range/#summary","title":"Summary","text":"<p>A range clause provides a way to iterate over an array, slice, string, map, or channel.</p>"},{"location":"Range/#example","title":"Example","text":"<pre><code>for k, v := range myMap {\n\tlog.Printf(\"key=%v, value=%v\", k, v)\n}\n\nfor v := range myChannel {\n\tlog.Printf(\"value=%v\", v)\n}\n\nfor i, v := range myArray {\n\tlog.Printf(\"array value at [%d]=%v\", i, v)\n}\n</code></pre>"},{"location":"Range/#reference","title":"Reference","text":"<p>If only one value is used on the left of a range expression, it is the 1<sup>st</sup> value in this table.</p> Range expression 1<sup>st</sup> value 2<sup>nd</sup> value (optional) notes array or slice  a  <code>[n]E</code>, <code>*[n]E</code>, or <code>[]E</code> index    <code>i  int</code> <code>a[i]</code>       E string          s  string type index    <code>i  int</code> rune  <code>int</code> range iterates over Unicode code points, not bytes map             m  <code>map[K]V</code> key      <code>k  K</code> value  <code>m[k]</code>       V channel         c  chan E element  <code>e  E</code> none"},{"location":"Range/#gotchas","title":"Gotchas","text":"<p>When iterating over a slice or map of values, one might try this:</p> <pre><code>items := make([]map[int]int, 10)\nfor _, item := range items {\n\titem = make(map[int]int, 1) // Oops! item is only a copy of the slice element.\n\titem[1] = 2                 // This 'item' will be lost on the next iteration.\n}\n</code></pre> <p>The <code>make</code> and assignment look like they might work, but the value property of <code>range</code> (stored here as <code>item</code>) is a copy of the value from <code>items</code>, not a pointer to the value in <code>items</code>. The following will work:</p> <pre><code>items := make([]map[int]int, 10)\nfor i := range items {\n\titems[i] = make(map[int]int, 1)\n\titems[i][1] = 2\n}\n</code></pre>"},{"location":"RangefuncExperiment/","title":"Rangefunc Experiment","text":"<p>This page originally described an experimental range-over-function language feature. The feature was added to Go 1.23. There is a blog post describing it.</p> <p>This page answers a few frequently asked questions about the change.</p>"},{"location":"RangefuncExperiment/#what-is-a-simple-example-of-how-range-over-function-runs","title":"What is a simple example of how range over function runs?","text":"<p>Consider this function for iterating a slice backwards:</p> <pre><code>package slices\n\nfunc Backward[E any](s []E) func(func(int, E) bool) {\n    return func(yield func(int, E) bool) {\n        for i := len(s)-1; i &gt;= 0; i-- {\n            if !yield(i, s[i]) {\n                return\n            }\n        }\n    }\n}\n</code></pre> <p>It can be invoked as:</p> <pre><code>s := []string{\"hello\", \"world\"}\nfor i, x := range slices.Backward(s) {\n    fmt.Println(i, x)\n}\n</code></pre> <p>This program would translate inside the compiler to a program more like:</p> <pre><code>slices.Backward(s)(func(i int, x string) bool {\n    fmt.Println(i, x)\n    return true\n})\n</code></pre> <p>The <code>return true</code> at the end of the body is the implicit <code>continue</code> at the end of the loop body. An explicit continue would translate to <code>return true</code> as well. A break statement would translate to <code>return false</code> instead. Other control structures are more complicated but still possible.</p>"},{"location":"RangefuncExperiment/#what-will-idiomatic-apis-with-range-functions-look-like","title":"What will idiomatic APIs with range functions look like?","text":"<p>We don't know yet, and that's really part of the eventual standard library proposal. One convention we've adopted is that a container's <code>All</code> method should return an iterator:</p> <pre><code>func (t *Tree[V]) All() iter.Seq[V]\n</code></pre> <p>Specific containers might provide other iterator methods as well. Maybe a list would provide backward iteration too:</p> <pre><code>func (l *List[V]) All() iter.Seq[V]\nfunc (l *List[V]) Backward() iter.Seq[V]\n</code></pre> <p>These examples are meant to show that the library can be written in a way that should make these kinds of functions readable and understandable.</p>"},{"location":"RangefuncExperiment/#how-are-more-complicated-loops-implemented","title":"How are more complicated loops implemented?","text":"<p>Beyond simple break and continue, other control flow (labeled break, continue, goto out of the loop, return) requires setting a variable that the code outside the loop can consult when the loop breaks. For example a <code>return</code> might turn into something like <code>doReturn = true; return false</code> where the <code>return false</code> is the <code>break</code> implementation, and then when the loop finishes, other generated code would do <code>if (doReturn) return</code>.</p> <p>The full rewrite is explained at the top of cmd/compile/internal/rangefunc/rewrite.go in the implementation.</p>"},{"location":"RangefuncExperiment/#what-if-the-iterator-function-ignores-yield-returning-false","title":"What if the iterator function ignores yield returning false?","text":"<p>For range-over-function loops, the yield function generated for the body checks if it is called after it has returned false or after the loop itself has exited. In either case, it will panic.</p>"},{"location":"RangefuncExperiment/#why-are-yield-functions-limited-to-at-most-two-arguments","title":"Why are yield functions limited to at most two arguments?","text":"<p>There has to be a limit; otherwise people file bugs against the compiler when it rejects ridiculous programs. If we were designing in a vacuum, perhaps we would say it was unlimited but that implementations only had to allow up to 1000, or something like that.</p> <p>However, we are not designing in a vacuum: go/ast and go/parser exist, and they can only represent and parse up to two range values. We clearly need to support two values to simulate existing range usages. If it were important to support three or more values, we could change those packages, but there does not appear to be a terribly strong reason to support three or more, so the simplest choice is to stop at two and leave those packages unchanged. If we find a strong reason for more in the future, we can revisit that limit.</p> <p>Another reason to stop at two is to have a more limited number of function signatures for general code to define. Today the iter package can easily define names for iterators:</p> <pre><code>package iter\n\ntype Seq[V any] func(yield func(V) bool) bool\ntype Seq2[K, V any] func(yield func(K, V) bool) bool\n</code></pre>"},{"location":"RangefuncExperiment/#what-do-stack-traces-look-like-in-the-loop-body","title":"What do stack traces look like in the loop body?","text":"<p>The loop body is called from the iterator function, which is called from the function in which the loop body appears. The stack trace will show that reality. This will be important for debugging iterators, aligning with stack traces in debuggers, and so on.</p>"},{"location":"RangefuncExperiment/#what-happens-if-the-loop-body-defers-a-call-or-if-the-iterator-function-defers-a-call","title":"What happens if the loop body defers a call? Or if the iterator function defers a call?","text":"<p>If a range-over-func loop body defers a call, it runs when the outer function containing the loop returns, just as it would for any other kind of range loop. That is, the semantics of defer do not depend on what kind of value is being ranged over. It would be quite confusing if they did. That kind of dependence seems unworkable from a design perspective. Some people have proposed disallowing defer in a range-over-func loop body, but this would be a semantic change based on the kind of value being ranged over and seems similarly unworkable.</p> <p>The loop body's defer runs exactly when it looks like it would if you didn't know anything special was happening in range-over-func.</p> <p>If an iterator function defers a call, the call runs when the iterator function returns. The iterator function returns when it runs out of values or is told to stop by the loop body (because the loop body hit a <code>break</code> statement which translated to <code>return false</code>). This is exactly what you want for most iterator functions. For example an iterator that returns lines from a file can open the file, defer closing the file, and then yield lines.</p> <p>The iterator function's defer runs exactly when it looks like it would if you didn't know the function was being used in a range loop at all.</p> <p>This pair of answers can mean the calls run in a different time order than the defer statements executed, and here the goroutine analogy is useful. Think of the main function running in one goroutine and the iterator running in another, sending values over a channel. In that case, the defers can run in a different order than they were created because the iterator returns before the outer function does, even if the outer function loop body defers a call after the iterator does.</p>"},{"location":"RangefuncExperiment/#what-happens-if-the-loop-body-panics-or-if-the-iterator-function-panics","title":"What happens if the loop body panics? Or if the iterator function panics?","text":"<p>The deferred calls run in the same order for panic that they would in an ordinary return: first the calls deferred by the iterator, then the calls deferred by the loop body and attached to the outer function. It would be very surprising if ordinary returns and panics ran deferred calls in different orders.</p> <p>Again there is an analogy to having the iterator in its own goroutine. If before the loop started the main function deferred a cleanup of the iterator, then a panic in the loop body would run the deferred cleanup call, which would switch over to the iterator, run its deferred calls, and then switch back to continue the panic on the main goroutine. That's the same order the deferred calls run in an ordinary iterator, even without the extra goroutine.</p> <p>See this comment for a more detailed rationale for these defer and panic semantics.</p>"},{"location":"RangefuncExperiment/#what-happens-if-the-iterator-function-recovers-a-panic-in-the-loop-body","title":"What happens if the iterator function recovers a panic in the loop body?","text":"<p>The compiler and runtime will detect this case and trigger a run-time panic.</p>"},{"location":"RangefuncExperiment/#can-range-over-a-function-perform-as-well-as-hand-written-loops","title":"Can range over a function perform as well as hand-written loops?","text":"<p>In principle, yes.</p> <p>Consider the slices.Backward example again, which first translates to:</p> <pre><code>slices.Backward(s)(func(i int, x string) bool {\n    fmt.Println(i, x)\n    return true\n})\n</code></pre> <p>The compiler can recognize that slices.Backward is trivial and inline it, producing:</p> <pre><code>func(yield func(int, E) bool) bool {\n    for i := len(s)-1; i &gt;= 0; i-- {\n        if !yield(i, s[i]) {\n            return false\n        }\n    }\n    return true\n}(func(i int, x string) bool {\n    fmt.Println(i, x)\n    return true\n})\n</code></pre> <p>Then it can recognize a function literal being immediately called and inline that:</p> <pre><code>{\n    yield := func(i int, x string) bool {\n        fmt.Println(i, x)\n        return true\n    }\n    for i := len(s)-1; i &gt;= 0; i-- {\n        if !yield(i, s[i]) {\n            goto End\n        }\n    }\nEnd:\n}\n</code></pre> <p>Then it can devirtualize yield:</p> <pre><code>{\n    for i := len(s)-1; i &gt;= 0; i-- {\n        if !(func(i int, x string) bool {\n            fmt.Println(i, x)\n            return true\n        })(i, s[i]) {\n            goto End\n        }\n    }\nEnd:\n}\n</code></pre> <p>Then it can inline that func literal:</p> <pre><code>{\n    for i := len(s)-1; i &gt;= 0; i-- {\n        var ret bool\n        {\n            i := i\n            x := s[i]\n            fmt.Println(i, x)\n            ret = true\n        }\n        if !ret {\n            goto End\n        }\n    }\nEnd:\n}\n</code></pre> <p>From that point the SSA backend can see through all the unnecessary variables and treats that code the same as</p> <pre><code>for i := len(s)-1; i &gt;= 0; i-- {\n    fmt.Println(i, s[i])\n}\n</code></pre> <p>This looks like a fair amount of work, but it only runs for simple bodies and simple iterators, below the inlining threshold, so the work involved is small. For more complex bodies or iterators, the overhead of the function calls is insignificant.</p> <p>In any given release the compiler may or may not implement this series of optimizations. We continue to improve the compiler with every release.</p>"},{"location":"RangefuncExperiment/#can-you-provide-more-motivation-for-range-over-functions","title":"Can you provide more motivation for range over functions?","text":"<p>The most recent motivation is the addition of generics, which we expect will lead to custom containers such as ordered maps, and it would be good for those custom containers to work well with range loops.</p> <p>Another equally good motivation is to provide a better answer for the many functions in the standard library that collect a sequence of results and return the whole thing as a slice. If the results can be generated one at a time, then a representation that allows iterating over them scales better than returning an entire slice. We do not have a standard signature for functions that represent this iteration. Adding support for functions in range would both define a standard signature and provide a real benefit that would encourage its use.</p> <p>For example, here are a few functions from the standard library that return slices but probably merit forms that return iterators instead:</p> <ul> <li>strings.Split</li> <li>strings.Fields</li> <li>bytes variants of the above</li> <li>regexp.Regexp.FindAll and friends</li> </ul> <p>There are also functions we were reluctant to provide in slices form that probably deserve to be added in iterator form. For example, there should be a strings.Lines(text) that iterates over the lines in a text.</p> <p>Similarly, iteration over lines in a bufio.Reader or bufio.Scanner is possible, but you have to know the pattern, and the pattern is different for those two and tends to be different for each type. Establishing a standard way to express iteration will help converge the many different approaches that exist today.</p> <p>For additional motivation for iterators, see #54245. For additional motivation specifically for range over functions, see #56413.</p>"},{"location":"RangefuncExperiment/#will-go-programs-using-range-over-functions-be-readable","title":"Will Go programs using range over functions be readable?","text":"<p>We think they can be. For example using slices.Backward instead of the explicit count-down loop should be easier to understand, especially for developers who don't see count-down loops every day and have to think carefully through the boundary conditions to make sure they are correct.</p> <p>It is true that the possibility of range over a function means that when you see range x, if you don't know what x is, you don't know exactly what code it will run or how efficient it will be. But slice and map iteration are already fairly different as far as the code that runs and how fast it is, not to mention channels. Ordinary function calls have this problem too - in general we have no idea what the called function will do - and yet we find ways to write readable, understandable code, and even to build an intuition for performance.</p> <p>The same will certainly happen with range over functions. We will build up useful patterns over time, and people will recognize the most common iterators and know what they do.</p>"},{"location":"RangefuncExperiment/#why-are-the-semantics-not-exactly-like-if-the-iterator-function-ran-in-a-coroutine-or-goroutine","title":"Why are the semantics not exactly like if the iterator function ran in a coroutine or goroutine?","text":"<p>Running the iterator in a separate coroutine or goroutine is more expensive and harder to debug than having everything on one stack. Since we're going to have everything on one stack, that fact will change certain visible details. We saw the first above: stack traces show the calling function and the iterator function interleaved, as well as showing the explicit yield function that does not exist on the page in the program.</p> <p>It can be helpful to think about running the iterator function in its own coroutine or goroutine as an analogy or mental model, but in some cases the mental model doesn't give the best answer, because it uses two stacks, and the real implementation is defined to use one.</p>"},{"location":"RateLimiting/","title":"Rate Limiting","text":"<p>To limit the rate of operations per unit time, use a time.Ticker. This works well for rates up to tens of operations per second. For higher rates, prefer a token bucket rate limiter such as golang.org/x/time/rate.Limiter (also search pkg.go.dev for rate limit).</p> <pre><code>import \"time\"\n\nconst rateLimit = time.Second / 10  // 10 calls per second\n\n// Client is an interface that calls something with a payload.\ntype Client interface {\n  Call(*Payload)\n}\n\n// Payload is some payload a Client would send in a call.\ntype Payload struct {}\n\n// RateLimitCall rate limits client calls with the payloads.\nfunc RateLimitCall(client Client, payloads []*Payload) {\n  throttle := time.Tick(rateLimit)\n\n  for _, payload := range payloads {\n    &lt;-throttle  // rate limit our client calls\n    go client.Call(payload)\n  }\n}\n</code></pre> <p>To allow some bursts, add a buffer to the throttle: <pre><code>import \"time\"\n\nconst rateLimit = time.Second / 10  // 10 calls per second\n\n// Client is an interface that calls something with a payload.\ntype Client interface {\n  Call(*Payload)\n}\n\n// Payload is some payload a Client would send in a call.\ntype Payload struct {}\n\n// BurstRateLimitCall allows burst rate limiting client calls with the\n// payloads.\nfunc BurstRateLimitCall(ctx context.Context, client Client, payloads []*Payload, burstLimit int) {\n  throttle := make(chan time.Time, burstLimit)\n\n  ctx, cancel := context.WithCancel(ctx)\n  defer cancel()\n\n  go func() {\n    ticker := time.NewTicker(rateLimit)\n    defer ticker.Stop()\n    for t := range ticker.C {\n        select {\n        case throttle &lt;- t:\n        case &lt;-ctx.Done():\n            return // exit goroutine when surrounding function returns\n        }\n    }\n  }()\n\n  for _, payload := range payloads {\n    &lt;-throttle  // rate limit our client calls\n    go client.Call(payload)\n  }\n}\n</code></pre></p>"},{"location":"ResearchPapers/","title":"Research Papers","text":"<p>This page lists academic and industry research papers about Go or using Go as the implementation language.</p>"},{"location":"ResearchPapers/#2021","title":"2021","text":"<ul> <li>Gobra: Modular Specification and Verification of Go Programs (F. A. Wolf, L. Arquint, M. Clochard, W. Oortwijn, J. C. Pereira, P. M\u00fcller)</li> <li>CAV'21</li> <li>web-page</li> </ul>"},{"location":"ResearchPapers/#2020","title":"2020","text":"<ul> <li>Uncovering the Hidden Dangers: Finding Unsafe Go Code in the Wild (J. Lauinger, L. Baumg\u00e4rtner, A. Wickert, M. Mezini) </li> <li>arxiv</li> <li>go-geiger</li> <li>go-safer</li> <li>Study results</li> <li>Go unsafe.Pointer vulnerability POCs</li> <li>Conference talk</li> <li>Lightweight Preemptible Functions (S. Boucher, A. Kalia, D. Andersen, M. Kaminsky)</li> <li>Usenix'20</li> <li>From Folklore to Fact: Comparing Implementations of Stacks and Continuations (K. Farvadin, J. Reppy)</li> <li>PLDI'20</li> <li>Featherweight Go (R. Griesemer, R. Hu, W. Kokke, J. Lange, I. Taylor, B. Toninho, P. Wadler, N. Yoshida)</li> <li>arxiv</li> <li>GoPi: Compiling linear and static channels in Go (M. Giunti)</li> <li>pdf</li> <li>github </li> <li>Fencing off Go: Liveness and Safety for Channel-Based Programming</li> <li>pdf</li> <li>Breaking Type-Safety in Go: An Empirical Study on the Usage of the unsafe Package (D. Costa, S. Mujahid, R. Abdalkareem, E. Shihab)</li> <li>arxiv</li> <li>Static Race Detection and Mutex Safety and Liveness for Go Programs (J. Gabet, N. Yoshida)</li> <li>arxiv</li> <li>github</li> <li>EdgeKV: Decentralized, scalable, and consistent storage for the edge (K. Sonbol, \u00d6. \u00d6zkasap, I. Al-Oqily, M. Aloqaily)</li> <li>arxiv</li> <li>Bypassing memory safety mechanisms through speculative control flow hijacks (A. Mambretti, A. Sandulescu, A. Sorniotti, W. Robertson, E. Kirda, A. Kurmus)</li> <li>arxiv</li> <li>CL</li> <li>Bounded verification of message-passing concurrency in Go using Promela and Spin (N. Dilley, J. Lange)</li> <li>arxiv</li> <li>github</li> </ul>"},{"location":"ResearchPapers/#2019","title":"2019","text":"<ul> <li>Software Microbenchmarking in the Cloud. How Bad is it Really?. Laaber, Scheuner, and Leitner. In: Empirical Software Engineering.</li> <li>preprint</li> <li>DOI</li> <li> <p>replication package</p> </li> <li> <p>Understanding Real-World Concurrency Bugs in Go (Tu, Liu, Song, Zhang)</p> </li> <li>ASPLOS'19 preprint</li> <li> <p>web</p> </li> <li> <p>An empirical study of messaging passing concurrency in Go projects (N. Dilley, J. Lange)</p> </li> <li>SANER'19 pre-print</li> <li> <p>web-page</p> </li> <li> <p>A comparison of three programming languages for a full-fledged next-generation sequencing tool (Costanza, Herzeel, Verachtert)</p> </li> <li> <p>biorvix</p> </li> <li> <p>Exploring polyglot software frameworks in ALICE with FairMQ and fer</p> </li> <li>arxiv</li> <li> <p>sbinet-alice/fer</p> </li> <li> <p>Flash: Efficient Dynamic Routing for Offchain Networks</p> </li> <li> <p>arxiv</p> </li> <li> <p>RepChain: A Reputation based Secure, Fast and High Incentive Blockchain System via Sharding</p> </li> <li> <p>arxiv</p> </li> <li> <p>Drynx: Decentralized, Secure, Verifiable System for Statistical Queries and Machine Learning on Distributed Datasets</p> </li> <li> <p>arxiv</p> </li> <li> <p>STYLE-ANALYZER: fixing code style inconsistencies with interpretable unsupervised algorithms</p> </li> <li> <p>arxiv</p> </li> <li> <p>Linear-Time Inference for Pairwise Comparisons with Gaussian-Process Dynamics</p> </li> <li>arxiv</li> </ul>"},{"location":"ResearchPapers/#2018","title":"2018","text":"<ul> <li>An Evaluation of Open-Source Software Microbenchmark Suites for Continuous Performance Assessment. Laaber and Leitner. In: MSR \u201918: 15<sup>th</sup> International Conference on Mining Software Repositories.</li> <li>preprint</li> <li>DOI</li> <li> <p>replication package</p> </li> <li> <p>An Analysis of Quorum-based Abstractions: A Case Study using Gorums to Implement Raft. Sebastian Pedersen, Hein Meling, and Leander Jehl. In: Proceedings of the 2018 Workshop on Advanced Tools, Programming Languages, and PLatforms for Implementing and Evaluating Algorithms for Distributed systems, ApPLIED@PODC 2018, Egham, United Kingdom, July 27, 2018. ACM, 2018.</p> </li> <li>doi:10.1145/3231104.3231957</li> <li> <p>Raft implementation in Gorums</p> </li> <li> <p>Implementation and evaluation of secure and scalable anomaly-based network intrusion detection (P. Mieden)</p> </li> <li>pdf</li> <li>code</li> <li> <p>presentation</p> </li> <li> <p>ProIO: An Event-Based I/O Stream Format for Protobuf Messages (D. Blyth, J. Alcaraz, S. Binet, S.V. Chekanov)</p> </li> <li>arXiv:1812.03967</li> <li> <p>proio-org/go-proio</p> </li> <li> <p>The latest gossip on BFT consensus (Buchman, Kwon, Milosevic)</p> </li> <li> <p>pdf</p> </li> <li> <p>Distributed Programming using Role-Parametric Session Types in Go (Castro, Hu, Jongmans, NG, Yoshida)</p> </li> <li> <p>pdf</p> </li> <li> <p>Observing the Evolution of QUIC Implementations, (Piraux, De Coninck, Bonaventure)</p> </li> <li> <p>pdf</p> </li> <li> <p>Cody Cutler, M. Frans Kaashoek, and Robert T. Morris, \"The benefits and costs of writing a POSIX kernel in a high-level language\"</p> </li> <li>presentation</li> <li> <p>code</p> </li> <li> <p>Voit, Sebastian Peter Johann. \"Writing Network Drivers in Go.\"</p> </li> <li> <p>pdf</p> </li> <li> <p>\"MoonShine: Optimizing OS Fuzzer Seed Selection with Trace Distillation\" (Shankara Pailoor, Andrew Aday, Suman Jana) USENIX Security 2018</p> </li> <li> <p>pdf</p> </li> <li> <p>\"Process-Local Static Analysis of Synchronous Processes\" (Jan Midtgaard, Flemming Nielson, Hanne Riis Nielson) SAS 2018</p> </li> <li>full version PDF</li> <li> <p>prototype</p> </li> <li> <p>\"Inferring and Asserting Distributed System Invariants\" (Stewart Grant, Hendrik Cech, Ivan Beschastnikh) ICSE 2018 Technical Papers</p> </li> <li>pdf</li> <li> <p>bitbucket.org/bestchai/dinv/ \"DInv is a distributed system data invariant detector\"  ; \"DInv is written in go lang\" </p> </li> <li> <p>\"Revisiting the Vector Space Model: Sparse Weighted Nearest-Neighbor Method for Extreme Multi-Label Classification.\" (Tatsuhiro Aoshima, Kei Kobayashi, Mihoko Minami)  arXiv:1802.03938 stat.ML,</p> </li> <li>PDF:arXiv:1802.03938-stat.ML</li> <li>github.com/hiro4bbh/sticker  \"\u2026We have published our implementation sticker (Aoshima, 2018) written in Golang (Golang, 2009)\u2026\"</li> <li> <p>keywords: sticker, machine-learning, classification</p> </li> <li> <p>A Static Verification Framework for Message Passing in Go using Behavioural Types (J. Lange, N. Ng, B. Toninho, N. Yoshida)</p> </li> <li>accepted draft at ICSE 2018</li> <li> <p>Tool page, sources: godel-checker and Go frontend</p> </li> <li> <p>Finding The Greedy, Prodigal, and Suicidal Contracts at Scale (Ivica Nikolic, Aashish Kolluri, Ilya Sergey, Prateek Saxena, Aquinas Hobor)</p> </li> <li> <p>pdf \"To implement the validating framework, we added a new functionality to the official go-ethereum package [20] which allows us to fork the Ethereum main chain at a block height of our choice.\"</p> </li> <li> <p>State of Mutation Testing at Google (Goran Petrovic and Marko Ivankovic)</p> </li> <li> <p>https://research.google.com/pubs/pub46584.html</p> </li> <li> <p>Index Data Structure, Functionality and Microservices in Thematic Virtual Museums (Sajarwo Anggai) (Ph.D. thesis)</p> </li> <li> <p>http://vestnik.spbu.ru/html18/s10/s10v1/04.pdf</p> </li> <li> <p>\"Two-Phase Dynamic Analysis of Message-Passing Go Programs based on Vector Clocks\" (M. Sulzmann, K. Stadtmueller)</p> </li> <li> <p>arxiv</p> </li> <li> <p>\"Revisiting the Vector Space Model: Sparse Weighted Nearest-Neighbor Method for Extreme Multi-Label Classification\" (Tatsuhiro Aoshima, Kei Kobayashi, Mihoko Minami)</p> </li> <li> <p>arxiv</p> </li> <li> <p>\"GEEC: Scalable, Efficient, and Consistent Consensus for Blockchains\" (Xusheng Chen, Shixiong Zhao, Cheng Wang, Senran Zhang, Heming Cui)</p> </li> <li> <p>arxiv</p> </li> <li> <p>\"Dependability in a Multi-tenant Multi-framework Deep Learning as-a-Service Platform\" (Scott Boag, Parijat Dube, Kaoutar El Maghraoui, Benjamin Herta, Waldemar Hummer, K. R. Jayaram, Rania Khalaf, Vinod Muthusamy, Michael Kalantar, Archit Verma)</p> </li> <li>arxiv</li> <li> <p>github</p> </li> <li> <p>DRONE: a Distributed Subgraph-Centric Framework for Processing Large Scale Power-law Graphs</p> </li> <li> <p>arxiv</p> </li> <li> <p>Reducing Metadata Leakage from Encrypted Files and Communication with PURBs</p> </li> <li>arxiv</li> </ul>"},{"location":"ResearchPapers/#2017","title":"2017","text":"<ul> <li>Gorums: Towards new abstractions for implementing quorum-based systems. Tormod Erevik Lea, Leander Jehl, and Hein Meling. In Kisung Lee and Ling Liu, editors, 37<sup>th</sup> IEEE International Conference on Distributed Computing Systems, ICDCS 2017, Atlanta, GA, USA, June 5-8, 2017, pages 2380\u20132385. IEEE Computer Society, 2017</li> <li>doi:10.1109/ICDCS.2017.166</li> <li>Gorums on GitHub</li> <li>Go-HEP: writing concurrent software with ease and Go (S. Binet)</li> <li>doi:10.1088/1742-6596/1085/5/052012</li> <li>arXiV:1808.06529</li> <li>https://go-hep.org</li> <li>RDFIO: extending Semantic MediaWiki for interoperable biomedical data management (Samuel Lampa, Egon Willighagen, Pekka Kohonen, Ali King, Denny Vrande\u010di\u0107, Roland Grafstr\u00f6m, Ola Spjuth) Journal of Biomedical Semantics ( Volume: 8, Issue: 35 )</li> <li>DOI: 10.1186/s13326-017-0136-y</li> <li>The rdf2smw commandline tool, for batch conversion from RDF to Semantic MediaWiki facts in MediaWiki XML dump format, is written in Go</li> <li>github.com/rdfio/rdf2smw</li> <li>godoc</li> <li>Keywords: Semantic MediaWiki, Semantic Web, RDF</li> <li>Construction and first tests of an in-beam PET demonstrator dedicated to the ballistic control of hadrontherapy treatments with 65 MeV protons (E Busato et al.)  IEEE Transactions on Radiation and Plasma Medical Sciences ( Volume: PP, Issue: 99 )</li> <li>DOI: 10.1109/TRPMS.2017.2780447</li> <li>Monitoring system + parts of the DAQ in Go</li> <li>Keywords: Detectors, Particle beams, Protons, Ions, Plasmas, Structural beams, Monitoring</li> <li>Let's Go: a Data-Driven Multi-Threading Support (Alberto Scionti,Somnath Mazumdar) CF'17 Proceedings of the Computing Frontiers Conference </li> <li>doi.org/10.1145/3075564.3075596 \"\u2026 This paper proposes a first attempt to map goroutines on a data-driven based PXM. \u2026\"</li> <li>Keywords:  Data-driven, Programming language, Multi-threading</li> <li>Estimating Mixture Entropy with Pairwise Distances (Artemy Kolchinsky, Brendan D. Tracey)</li> <li>arXiv</li> <li>godoc</li> <li>Towards Omnia: a Monitoring Factory for Quality-Aware DevOps (Marco Miglierina, Damian A. Tamburri)</li> <li>doi.org/10.1145/3053600.3053629 ICPE '17 Companion</li> <li>github.com/mmiglier/omnia (Go: 52.8% )</li> <li>Keywords: Monitoring, Monitoring Management, Monitoring Factory, Monitoring Interface, Monitoring Infrastructure as Code, Monitoring Configuration as Code</li> <li>Copy-on-Reference File Mechanism Extends Scope of Dynamic Reconfiguration (Jeremy Krach) thesis</li> <li>pdf</li> <li>github.com/krockpot/lazyfs \"Lazy file retrieval for process migration.\"</li> <li>An event model for phylogenetic biogeography using explicitly geographical ranges (J. Salvador Arias)</li> <li>http://onlinelibrary.wiley.com/doi/10.1111/jbi.13024/full</li> <li>Computer implementation (EVS written in Go) : github.com/js-arias/evs \"Evs is a tool for phylogenetic biogeography. \"</li> <li>Feasibility of reusable continuous thrust spacecraft for cargo resupply missions to Mars (C. B. Rabotin) thesis</li> <li>pdf</li> <li>github.com/ChristopherRabotin/smd Space Mission Design - A SPICE-enhanced continuous thrust interplanetary mission propagator and vizualizer</li> <li>Keywords: space-mission interplanetary-missions celestial-bodies astrodynamics orbit propagation spice</li> <li>Performance testing of open-source HTTP web frameworks in an API (Michael A.P. Domingues) DSIE\u201917</li> <li>https://paginas.fe.up.pt/~prodei/dsie17/DSIE17_Proceedings.pdf#page=18</li> <li> <p>Keywords: Revel, Gin and Echo, Performance testing, API, Web frameworks, Apache benchmark</p> </li> <li> <p>Method of auto-configuration for corporate proxies (Andr\u00e9s Abelardo Villarroel Acosta, Carlos Enrique Montenegro Mar\u00edn, Paulo Alonso Gaona Garc\u00eda, Yuri Vanessa Nieto Acevedo) Ingenier\u00eda solidaria, 2017 </p> </li> <li>https://revistas.ucc.edu.co/index.php/in/article/view/1723</li> <li>andresvia/udpac</li> <li>Keywords: Proxy Auto-configuration (PAC), Web Proxy Auto-Discovery Protocol (WPAD), Dynamic Host Configuration Protocol (DHCP), Standard Time.</li> <li>NucAmino: a nucleotide to amino acid alignment optimized for virus gene sequences ( Philip L. Tzou, Xiaoqiu Huang, Robert W. Shafer ) BMC Bioinformatics (2017) 18: 138. </li> <li>DOI: 10.1186/s12859-017-1555-6 \"\u2026 NucAmino is written in the computer language Go \u2026\"</li> <li>github.com/hivdb/NucAmino ( Go 94.4% )</li> <li>Keywords: Sequence alignment, Viruses, HIV-1, Drug resistance, Open source</li> <li>Idiomatic and Reproducible Software Builds using Containers for Reliable Computing (Jonas Weber) Master\u2019s Thesis</li> <li>arXiv:1702.02999v1 cs.SE 9 Feb 2017, pdf</li> <li> <p>github.com/thriqon/thesis-supplement</p> </li> <li> <p>Structured I/O streams in Clive: a toolbox approach for wide area network computing ( Francisco J. Ballesteros )</p> </li> <li>DOI: 10.1186/s13174-016-0054-8 OPEN ACCESS \" \u2026 Clive is a system written in Go \u2026\"</li> <li>Clive related research </li> <li>Clive source \"\u2026Clive is an operating system designed to work in distributed and cloud computing environments. \u2026\"</li> <li>Keywords: Streams, Input/Output, Operating system, Distributed systems, Cloud computing </li> <li>Towards Practical Default-On Multi-Core Record/Replay ( Ali Jos\u00e9 Mashtizadeh, Tal Garfinkel, David Terei, David Mazi\u00e8res, Mendel Rosenblum)  draft ,  ASPLOS 2017</li> <li>Draft \u2013 Accepted at ASPLOS 2017 - PDF \"\u2026Castor currently supports applications written in C, C++, and Go on FreeBSD...., \u2026  For Go, we evaluate, Caddy \u2026 \"</li> <li>Comparing MapReduce and Pipeline Implementations for Counting Triangles ( Edelmira Pasarella, Maria-Esther Vidal, Cristina Zoltan)</li> <li>arXiv:1701.03318 cs.DC</li> <li>pdf \"\u2026 an ad-hoc version of MapReduce are implemented in the language Go \u2026\"</li> <li>Fencing off Go: Liveness and Safety for Channel-based Programming (J. Lange, N. Ng, B. Toninho, N. Yoshida), POPL 2017</li> <li>doi: 10.1145/3009837.3009847</li> <li>Tool page, code</li> <li>Design and Implementation of Concurrent C0 (Willsey, Prabhu, Pfenning)</li> <li>https://arxiv.org/abs/1701.04929</li> <li>Automated Identification of Security Issues from Commit Messages and Bug Reports (Yagin Zhou, Asankhaya Sharma), FSE 2017</li> <li>doi: 10.1145/3106237.3117771</li> <li>Reconstructing Program Semantics from Go Binaries (Engelke)</li> <li>http://home.in.tum.de/~engelke/pubs/1709-ma.pdf</li> <li>An Attempt at Reducing Costs of Disk I/O in Go (Wilson, Mutschlechner)</li> <li>http://pages.cs.wisc.edu/~riccardo/assets/diskio.pdf</li> <li>Go-RealTime: A Lightweight Framework for Multiprocessor Real-Time System in User Space (Fang, Luo, Anwar, Zhuang, Gupta)</li> <li>http://sigbed.seas.upenn.edu/archives/2017-11/paper7.pdf</li> <li>\"Secure and Trustable Electronic Medical Records Sharing using Blockchain\" (Alevtina Dubovitskaya, Zhigang Xu, Samuel Ryu, Michael Schumacher, Fusheng Wang)</li> <li>arxiv</li> <li>\"Towards a More Reliable and Available Docker-based Container Cloud\" (Mudit Verma, Mohan Dhawan)</li> <li>arxiv</li> </ul>"},{"location":"ResearchPapers/#2016","title":"2016","text":"<ul> <li>Atom: Horizontally Scaling Strong Anonymity (Albert Kwon, Henry Corrigan-Gibbs, Srinivas Devadas, Bryan Ford)</li> <li>arXiv:1612.07841 cs.CR \"\u2026We implemented an Atom prototype in Go in approximately 3,500 lines of code, \u2026\"</li> <li>The Case for Reconfiguration without Consensus: Comparing Algorithms for Atomic Storage (Leander Jehl, Hein Meling) </li> <li>pdf </li> <li>github.com/relab/smartmerge implemented in golang</li> <li>Flower :  Workflow management and heat-aware scheduling for modern cloud infrastructures (Robert Carosi, Boris Mattijssen) bachelor thesis,</li> <li>abstract,  pdf, Keywords: container, workflow, virtualization, scheduling, flower, kubernetes</li> <li>Implementing a web-based bookingsystem using Go ( Vu, Phi-Long )  Independent thesis Basic level </li> <li>abstract, pdf ; Keywords: Booking System, Go, Golang, REST, XSS, XSRF</li> <li>Parallelization of the corpus manager\u2019s time-consuming operations (Bc. Radoslav R\u00e1bara ) Master's Thesis, Masaryk University</li> <li>pdf ; Keywords: Manatee, text corpora, Go, text compression, compression of integers, time-consuming operations, parallelization, MapReduce, Glow, distributed computing, data format, cluster, scalability</li> <li>Cyber Security Exercise Modeling &amp; Tracking (Joonas Greis) Bachelor\u2019s thesis</li> <li>pdf \"\u2026 RESTful API was written with Golang using Go-Json-Rest package \u2026\"</li> <li>Scalable Byzantine Consensus via Hardware-assisted Secret Sharing (Jian Liu, Wenting Li, Ghassan O. Karame, N. Asokan) </li> <li>arXiv:1612.04997 cs.CR ;   \"\u2026 Our implementation is based on Golang \u2026\"  ; pdf </li> <li>Fast and Reliable Byzantine Fault Tolerance (Eric Scott Freeman) Master's thesis in Computer science</li> <li>link, pdf</li> <li>Formal verification of concurrency in go (Anuchit Prasertsang, Denduang Pradubsuwun)</li> <li>DOI: 10.1109/JCSSE.2016.7748882</li> <li>Therapeutic target discovery using Boolean network attractors: updates from kali ( Arnaud Poret ) ( Quantitative Biology &gt; Molecular Networks) </li> <li>arXiv:1611.03144v1 q-bio.MN</li> <li>github.com/arnaudporet/kali [Go 100.0%]</li> <li>Information Flow Analysis for Go ( Eric Bodden, Ka I. Pun, Martin Steffen, Volker Stolz, Anna-Katharina Wickert)</li> <li>10.1007/978-3-319-47166-2_30 </li> <li>A Productivity Checker for Logic Programming (E. Komendantskaya, P. Johann, M. Schmidt )</li> <li>arXiv:1608.04415 cs.PL </li> <li>project page: http://www.macs.hw.ac.uk/~ek19/CoALP/</li> <li>A novel algorithm for detecting multiple covariance and clustering of biological sequences ( Wei Shen &amp; Yan Li)   ( Coevolution, Computational models ) </li> <li>http://www.nature.com/articles/srep30425 , doi:10.1038/srep30425</li> <li>Algorithm implementation (golang - only binary ) : http://yanlilab.github.io/fastcov/</li> <li>Architecture of the Hyperledger Blockchain Fabric (Christian Cachin)</li> <li>pdf</li> <li>code</li> <li>Reimagining the Programming Experience ( Mehrdad Afshari , dissertation) GoClr</li> <li>pdf</li> <li>MapReduce vs. Pipelining Counting Triangles (Edelmira Pasarella, Maria-Esther Vidal,and Cristina Zoltan) </li> <li>pdf</li> <li>Parametric Polymorphism in the Go Programming Language (Matthew Allen) University of Texas,  Turing Scholars honors thesis </li> <li>pdf</li> <li>code ( LLGO based ) </li> <li>Static Trace-Based Deadlock Analysis for Synchronous Mini-Go ( Kai Stadtm\u00fcller, Martin Sulzmann, and Peter Thiemann ) </li> <li>pdf</li> <li>code -  first beta implementation : gopherlyzer</li> <li>Continuous Query-Based Syndication: Distributed, Expressive Messaging for the IoT( Gabriel Fierro, Erik Krogen ) </li> <li>pdf, motivation</li> <li>code ( Go and Python implementation )</li> <li>Privacy, Discovery, and Authentication for the Internet of Things (Wu, Taly, Shankar, Boneh)</li> <li>arxiv</li> <li>code</li> <li>Static Deadlock Detection for Concurrent Go by Global Session Graph Synthesis (Ng, Yoshida)</li> <li>pdf</li> <li>code</li> <li>A Small-Step Semantics of a Concurrent Calculus with Goroutines and Deferred Functions ( Martin Steffen )</li> <li>springer link</li> <li>Butterfield, Ellis H., \"Fog Computing with Go: A Comparative Study\" (2016). CMC Senior Theses. Paper 1348.</li> <li>http://scholarship.claremont.edu/cmc_theses/1348</li> <li>An Implementation and Analysis of a Kernel Network Stack in Go with the CSP Style (Harshal Sheth, Aashish Welling) </li> <li>arXiv:1603.05636 cs.OS</li> <li>PAS-MC: Privacy-preserving Analytics Stream for the Mobile Cloud (Joy, Gerla)</li> <li>arXiv:1604.04892 cs.CR</li> <li>Developing an Ethereum Blockchain Application (Triantafyllidis)</li> <li>pdf</li> <li>Identifying and characterizing Sybils in the Tor network (Winter, Ensafi, Loesing, and Feamster)</li> <li>pdf</li> <li>code</li> <li>A Distributed Implementation of the Graph Database System: DGraph</li> <li>pdf</li> <li>Browsix: Bridging the Gap Between Unix and the Browser (Powers, Vilk, Berger)</li> <li>https://arxiv.org/abs/1611.07862</li> <li>Verification of Goroutines using Why3 (Schoolderman)</li> <li>https://www.ru.nl/publish/pages/769526/marc_schoolderman.pdf</li> <li>Detection of Bugs and Code Smells through Static Analysis of Go Source Code (Bergersen)</li> <li>https://www.duo.uio.no/bitstream/handle/10852/53050/bergersen_msc.pdf</li> <li>BTrDB: Optimizing Storage System Design for Timeseries Processing (Andersen, Culler)</li> <li>https://www.usenix.org/node/194399</li> <li>Risk Factor Disclosures: Do Managers and Markets Speak the Same Language?</li> <li>https://www.sec.gov/comments/s7-06-16/s70616-369.pdf</li> </ul>"},{"location":"ResearchPapers/#2015","title":"2015","text":"<ul> <li>Tinzenite: Encrypted Peer to Peer File Synchronization via the Tox Protocol (Tamino P.S.M. Hartmann) (Master thesis at Ulm University) </li> <li>pdf</li> <li>github.com/tinzenite</li> <li>Blade: A Data Center Garbage Collector (Terei, Levy)</li> <li>arxiv:1504.02578 cs.DC</li> <li>Flywheel: Google's Data Compression Proxy for the Mobile Web (Agababov, Buettner, Chudnovsky, Cogan, Greenstein, McDaniel, Piatek, Scott, Welsh, Yin)</li> <li>pdf</li> <li>Rewriting a large production system in Go</li> <li>A Machine Learning Strategy to Assist Turbulence Model Development (Brendan Tracey, Karthik Duraisamy, Juan J. Alonso)</li> <li>http://arc.aiaa.org/doi/abs/10.2514/6.2015-1287</li> <li>Implementing an intelligent version of the classical sliding-puzzle game for unix terminals using Golang's concurrency primitives ( Pravendra Singh )</li> <li>arxiv:1503.08345 cs.AI</li> <li>Keeping Authorities \"Honest or Bust\" with Decentralized Witness Cosigning (Syta, Tamas, Visher, Wolinsky, Jovanovic, Gasser, Gailly, Khoffi, Ford)</li> <li>arxiv:1503.08768 cs.CR</li> <li>code, code</li> <li>Message Passing for Programming Languages and Operating Systems (Martynas Pumputis ) Master\u2019s Thesis</li> <li>pdf</li> <li>Type inference for Go (Emin Gigovic, Philip Malmros )</li> <li>pdf</li> <li>Open-Source, Platform-Independent Library and Online Scripting Environment for Accessing Thermo Scientific RAW Files. (Kelchtermans, Silva, Argentini, Staes, Vandenbussche, Laukens, Valkenborg, Martens)</li> <li>https://www.ncbi.nlm.nih.gov/pubmed/26477298</li> <li>Evaluation of performance and productivity metrics of potential programming languages in the HPC environment ( Bachelor Thesis ; Florian Wilkens ) -  ( Go, Rust, C, OpenStreetMap )</li> <li>github-code , pdf</li> <li>Concurrent Processing of Text Corpus Queries (R\u00e1bara, Rychl\u00fd)</li> <li>https://www.sketchengine.co.uk/wp-content/uploads/Concurrent_Processing_2015.pdf</li> <li>Automatic Memory Management Techniques for the Go Programming Language (Davis) (Ph.D. thesis)</li> <li>https://minerva-access.unimelb.edu.au/handle/11343/58707</li> <li>Design Muntoi Web-based Framework and Search Engine Analytics for Thematic Virtual Museums (Sajarwo Anggai) (Ph.D. thesis)</li> <li>http://ieeexplore.ieee.org/document/7516334/</li> <li>A Search Engine Backed by Internet-Wide Scanning (Durumeric, Adrian, Mirian, Bailey, Halderman)</li> <li>https://censys.io/static/censys.pdf</li> <li>An Extract Function Refactoring for the Go Language (Arasu)</li> <li>https://etd.auburn.edu/bitstream/handle/10415/4835/Steffi_Gnanaprakasa_MSThesis.pdf</li> <li>Compositional Decompilation using LLVM IR (BSc thesis, Robin Eklind)</li> <li>http://uu.diva-portal.org/smash/record.jsf?pid=diva2%3A911797&amp;dswid=-6147</li> <li>code</li> <li>pdf</li> <li>\"U-root: A Go-based, Firmware Embeddable Root File System with On-demand Compilation\" (Minnich, Mirtchovski)</li> <li>pdf</li> <li>code</li> </ul>"},{"location":"ResearchPapers/#2014","title":"2014","text":"<ul> <li>PARAGON: an approach for parallelization of power system contingency analysis using Go programming language</li> <li>http://onlinelibrary.wiley.com/doi/10.1002/etep.1999/full</li> <li>A Study of Successive Over-relaxation Method Parallelization Over Modern HPC Languages (Mittal)</li> <li>arxiv:1401.0763 cs.DC</li> <li>code</li> <li>There Is More Consensus in Egalitarian Parliaments (Moraru, Andersen, Kaminsky)</li> <li>pdf</li> <li>code</li> <li>Experience with ePaxos: Systems Research using Go</li> <li>Research Problems of Implementing Go</li> <li>https://talks.golang.org/2014/research.slide  (rsc)</li> <li>https://talks.golang.org/2014/research2.slide (dvyukov)</li> <li>b\u00edogo: a simple high-performance bioinformatics toolkit for the Go language (D. Kortschak, D. Adelson)</li> <li>pdf</li> <li>P2S: A Fault-Tolerant Publish/Subscribe Infrastructure (Chang, Duan, Meling, Peisert, Zhang)</li> <li>pdf</li> <li>Generating a Google Go framework from an Uppaal model (Dekker)</li> <li>pdf</li> <li>Using the Go Programming Language in Practice (Westrup, Pettersson)</li> <li>pdf</li> <li>A Language Support for Exhaustive Fault-Injection in Message-Passing System Models (Suzuki, Watanabe)</li> <li>arXiv:1411.3793 cs.SE</li> <li>Big Learning with Bayesian Methods</li> <li>arXiv:1411.6370 cs.LG</li> <li>Be General and Don't Give Up Consistency in Geo-Replicated Transactional Systems</li> <li>PDF</li> <li>Project page: Hyflow</li> <li>The design and verification of Mumax3 (Vansteenkiste, Leliaert, Dvornik, Garcia-Sanchez, Van Waeyenberge)</li> <li>https://arxiv.org/abs/1406.7635</li> <li>mumax/3</li> <li>Building Reliable and Practical Byzantine Fault Tolerance (Duan)</li> <li>http://sduan.informationsystems.umbc.edu/files/2014-SisiDuan-dissertation.pdf</li> </ul>"},{"location":"ResearchPapers/#2013","title":"2013","text":"<ul> <li>GoPar: Automatic Loop Parallelization of Go Programs (Wetherbee)</li> <li>pdf</li> <li>code</li> <li>SCTP in Go ( Olivier Van Acker )</li> <li>Keywords: Stream Control Transmission Protocol (SCTP); Transmission Control Protocol (TCP); Go; Networking;</li> <li>pdf </li> <li>Benchmarking Usability and Performance of Multicore Languages ( Sebastian Nanz, Scott West, Kaue Soares da Silveira, Bertrand Meyer)</li> <li>arXiv:1302.2837 cs.DC</li> <li>Examining the Expert Gap in Parallel Programming (Sebastian Nanz, Scott West, Kaue Soares da Silveira)</li> <li>pdf</li> <li>Acropolis: aggregated client request ordering by Paxos (Jothen)</li> <li>https://brage.bibsys.no/xmlui//handle/11250/181825</li> <li>Implementation and experimental evaluation of live replacement and reconfiguration (Lea)</li> <li>https://brage.bibsys.no/xmlui//handle/11250/181813</li> <li>Exploiting Parallelism in Coalgebraic Logic Programming (Komendantskaya, Schmidt, Heras)</li> <li>https://arxiv.org/abs/1312.4454</li> <li>Parallel Pattern Discovery (Egon Elbre), Master's Thesis, University of Tartu</li> <li>pdf</li> <li>code</li> </ul>"},{"location":"ResearchPapers/#2012","title":"2012","text":"<ul> <li>Time Warp on the Go (D'Angelo, Ferretti, Marzolla)</li> <li>arxiv:1206.2772 cs.DC</li> <li>Can Go address the multicore issues of today and the manycore problems of tomorrow? (S. Binet)</li> <li>pdf</li> <li>GoCxx: a tool to easily leverage C++ legacy code for multicore-friendly Go libraries and frameworks (S. Binet)</li> <li>pdf</li> <li>The Buffered \u03c0-Calculus: A Model for Concurrent Languages (Deng, Zhang, Deng, Zhong)</li> <li>arxiv:1212.6183 cs.LO</li> <li>Analysis of the Go runtime scheduler (Neil Deshpande,Erica Sponsler,Nathaniel Weiss)</li> <li>pdf</li> <li>A Comparative Study of Programming Models for Concurrency ( Kaue Soares da Silveira) \u2013 Porto Alegre: COMGRAD CIC UFRGS, 2012.  Final Report (Bachelor)</li> <li>pdf</li> <li>Debian Code Search (Stapelberg)</li> <li>pdf</li> <li>Go\u2019s Concurrency Constructs on the SCC (Prell, Rauber)</li> <li>pdf</li> <li>Comparing Parallel Performance of Go and C++ TBB on a Direct Acyclic Task Graph Using a Dynamic Programming Problem (Serfass, Tang)</li> <li>http://www.ualr.edu/pxtang/papers/ACMSE12-comparing.pdf</li> </ul>"},{"location":"ResearchPapers/#2011","title":"2011","text":"<ul> <li>ng: What next-generation languages can teach us about HENP frameworks in the manycore era (S. Binet)</li> <li>pdf</li> <li>Serving Web Content with Dynamic Process Networks in Go (James Whitehead II)</li> <li>DOI: 10.3233/978-1-60750-774-1-209</li> <li>pdf</li> </ul>"},{"location":"ResearchPapers/#2010","title":"2010","text":"<ul> <li>GoHotDraw: Evaluating the Go Programming Language with Design Patterns (Schmager, Cameron, Noble)</li> <li>pdf</li> </ul>"},{"location":"Resolving-Problems-From-Modified-Module-Path/","title":"Resolving Problems From Modified Module Path","text":""},{"location":"Resolving-Problems-From-Modified-Module-Path/#unexpected-module-path","title":"Unexpected module path","text":"<p>A user working on their project, <code>my-go-project</code>, might run into an error during <code>go get -u</code> as such:</p> <pre><code>$ cd my-go-project\n$ go get -u ./...\n[...]\ngo: github.com/golang/lint@v0.0.0-20190313153728-d0100b6bd8b3: parsing go.mod: unexpected module path \"golang.org/x/lint\"\n[...]\nExit code 1\n</code></pre> <p><code>golang.org/x/lint</code> is a module whose git repository and module name used to be <code>github.com/golang/lint</code> before migrating to the git repo <code>golang.org/x/lint</code> and renaming its module name to <code>golang.org/x/lint</code>. The Go tool currently stumbles trying to understand the old module name at the new git repository: golang/go#30831.</p> <p>This was surfaced to <code>my-go-project</code> because <code>my-go-project</code> or one of its transitive dependencies has a route in the module graph to the old <code>github.com/golang/lint</code> module name.</p> <p>For example, if <code>my-go-project</code> itself relies on the old <code>github.com/golang/lint</code> module name:</p> <pre><code>$ GO111MODULE=on go mod graph\nmy-go-project github.com/golang/lint@v0.0.0-20180702182130-06c8688daad7\n</code></pre> <p>Or, perhaps <code>my-go-project</code> depends on an old version of <code>google.golang.org/grpc</code> which depends on the old <code>github.com/golang/lint</code> module name:</p> <pre><code>$ GO111MODULE=on go mod graph\nmy-go-project google.golang.org/grpc@v1.16.0\ngoogle.golang.org/grpc@v1.16.0 github.com/golang/lint@v0.0.0-20180702182130-06c8688daad7\n</code></pre> <p>Finally, perhaps <code>my-go-project</code> depends on another dependency that requires an old version of <code>google.golang.org/grpc</code>, which in turn depends on the old <code>github.com/golang/lint</code> module name:</p> <pre><code>$ GO111MODULE=on go mod graph\nmy-go-project some/dep@v1.2.3\n...\nanother/dep@v1.4.2 google.golang.org/grpc@v1.16.0\ngoogle.golang.org/grpc@v1.16.0 github.com/golang/lint@v0.0.0-20180702182130-06c8688daad7\n</code></pre>"},{"location":"Resolving-Problems-From-Modified-Module-Path/#removing-references-to-the-name","title":"Removing References To The Name","text":"<p>Until the Go tool is updated to understand a module which has changed its module path (tracking in golang/go#30831), the solution to this is to update the graph so that there are no more paths to the old module name.</p> <p>Using the examples above, we'll explore updating the graph so that there are no more paths to <code>github.com/golang/lint</code>.</p> <p>Fixing the first example is simple, the only link is from <code>my-go-project</code> - which the user controls! Replacing the old location with the new in the <code>go.mod</code> - <code>github.com/golang/lint@v0.0.0-20180702182130-06c8688daad7</code> with <code>golang.org/x/lint v0.0.0-20190301231843-5614ed5bae6f</code> - removes the link from the graph:</p> <pre><code>$ GO111MODULE=on go mod graph\nmy-go-project golang.org/x/lint@v0.0.0-20190301231843-5614ed5bae6f\n</code></pre> <p>Fixing the second example involves more steps but is essentially the same process: <code>google.golang.org/grpc@v1.16.0</code> provides the link to <code>github.com/golang/lint</code>, so <code>google.golang.org/grpc</code> should update its <code>go.mod</code> from <code>github.com/golang/lint@v0.0.0-20180702182130-06c8688daad7</code> to <code>golang.org/x/lint v0.0.0-20190301231843-5614ed5bae6f</code> (this thankfully already happened in <code>v1.17.0</code>). Then, <code>my-go-project</code> should update its <code>go.mod</code> to include the new version of <code>google.golang.org/grpc</code>, so that we now have:</p> <pre><code>$ GO111MODULE=on go mod graph\nmy-go-project google.golang.org/grpc@v1.17.0\ngoogle.golang.org/grpc@v1.17.0 golang.org/x/lint@v0.0.0-20181026193005-c67002cb31c3\n</code></pre> <p>Fixing the third example is similar to the second: update to a newer version of <code>another/dep</code> which brings in the newer version of <code>google.golang.org/grpc</code> which does not contain a reference to <code>github.com/golang/lint</code>.</p> <p>Hooray! Problems solved - there are no more paths to <code>github.com/golang/lint</code> for the Go tool to consider, so it does not trip up on this problem during <code>go get -u</code>.</p>"},{"location":"Resolving-Problems-From-Modified-Module-Path/#a-harder-problem-removing-trailing-history","title":"A Harder Problem: Removing Trailing History","text":"<p>This is all well and good, and should satisfy most user's problems.</p> <p>However, there is one situation that ends up being quite a bit more involved: when there are cycles in the module dependency graph. Consider this module dependency graph:</p> <p></p> <p>And, let's imagine that <code>some/lib</code> used to depend on <code>github.com/golang/lint</code>.</p> <p>Let's look at this module dependency graph with versions included:</p> <pre><code>$ go mod graph\nmy-go-lib some/lib@v1.7.0\nsome/lib@v1.7.0 some-other/lib@v2.5.3\nsome/lib@v1.7.0 golang.org/x/lint@v0.0.0-20181026193005-c67002cb31c3\nsome-other/lib@v2.5.3 some/lib@v1.6.0\nsome/lib@v1.6.0 some-other/lib@v2.5.0\nsome/lib@v1.6.0 golang.org/x/lint@v0.0.0-20181026193005-c67002cb31c3\nsome-other/lib@v2.5.0 some/lib@v1.3.1\nsome/lib@v1.3.1 some-other/lib@v2.4.8\nsome/lib@v1.3.1 golang.org/x/lint@v0.0.0-20181026193005-c67002cb31c3\nsome-other/lib@v2.4.8 some/lib@v1.3.0\nsome/lib@v1.3.0 some-other/lib@v2.4.7\nsome/lib@v1.3.0 github.com/golang/lint@v0.0.0-20180702182130-06c8688daad7\n</code></pre> <p>Visualized with golang.org/x/exp/cmd/modgraphviz:</p> <p></p> <p>Here we see that even though the last several versions of <code>some/lib</code> correctly depend on <code>golang.org/x/lint</code>, the fact that <code>some/lib</code> and <code>some-other/lib</code> share a cycle mean that there's very likely to be a path far back in time.</p> <p>The reason such paths occur is because the process of bumping versions is usually individually atomic: when <code>some/lib</code> bumps its version of <code>some-other/lib</code> and release a new version of itself, the latest version of <code>some-other/lib</code> still depends on the previous version of <code>some/lib</code>. That is, no individual bump of either of these libraries will be enough to remove the chain into history.</p> <p>To remove the chain into history and remove the old <code>github.com/golang/lint</code> reference from the graph for good, both libraries have to bump their versions of each other at the same time.</p>"},{"location":"Resolving-Problems-From-Modified-Module-Path/#atomically-version-bumping-two-libraries","title":"Atomically Version Bumping Two Libraries","text":"<p>The solution to removing <code>github.com/golang/lint</code> is to first make sure <code>some/lib</code> doesn't depend on <code>github.com/golang/lint</code>, and then to bump both <code>some/lib</code> and <code>some-other/lib</code> to non-existent future versions of each other. We want this kind of a graph:</p> <pre><code>my-go-lib some/lib@v1.7.1\nsome/lib@v1.7.1 some-other/lib@v2.5.4\nsome/lib@v1.7.1 golang.org/x/lint@v0.0.0-20181026193005-c67002cb31c3\nsome-other/lib@v2.5.4 some/lib@v1.7.1\n</code></pre> <p></p> <p>Since <code>some/lib</code> and <code>some-other/lib</code> depend on each other at the same version, there's no path backwards in time to a point where <code>github.com/golang/lint</code> is provided.</p> <p>Here are the steps to achieve this atomic version bump, assuming <code>some/lib</code> is at <code>v1.7.0</code> and <code>some-other/lib</code> is at <code>v2.5.3</code>:</p> <ol> <li>Verify that the error does in fact exist:<ol> <li>Run <code>GO111MODULE=on go get -u ./...</code> in <code>some/lib</code> and <code>some-other/lib</code>. </li> <li>In both repos you should observe the error go: <code>github.com/golang/lint@v0.0.0-20190313153728-d0100b6bd8b3: parsing go.mod: unexpected module path \"golang.org/x/lint\"</code>.</li> </ol> </li> <li>Verify that the latest version of <code>some/lib</code> depends on <code>golang.org/x/lint</code> instead of <code>github.com/golang/lint</code>. It would be a shame to remove the historical trails but keep the broken dependency to <code>github.com/golang/lint</code>!</li> <li>Bump both libs to non-existent future versions of each other using alpha tags (which are safer since go modules won't consider alpha versions as newer when evaluating the latest released version of a module):<ol> <li><code>some/lib</code> changes its <code>some-other/lib</code> dependency from <code>v2.5.3</code> to <code>v2.5.4-alpha</code>.</li> <li><code>some/lib</code> tags the commit <code>v1.7.1-alpha</code> and pushes the commit and tag.</li> <li><code>some-other/lib</code> changes its <code>some/lib</code> dependency from <code>v1.6.0</code> to <code>v1.7.1-alpha</code>.</li> <li><code>some-other/lib</code> tags the commit <code>v2.5.4-alpha</code> and pushes the commit and tag.</li> </ol> </li> <li>Verify results whilst things are still in an alpha state:<ol> <li><code>GO111MODULE=on go build ./...</code> &amp;&amp; <code>go test ./...</code> in <code>some/lib</code>.</li> <li><code>GO111MODULE=on go build ./...</code> &amp;&amp; <code>go test ./...</code> in <code>some-other/lib</code>.</li> <li><code>GO111MODULE=on go mod graph</code> in both repos and assert that there's no path to <code>github.com/golang/lint</code>.</li> <li>Note: <code>go get -u</code> still will not work because - as mentioned above - alpha versions aren't considered when evaluating latest versions.</li> </ol> </li> <li>If everything looks good, continue by once again bumping to non-existent future versions of each other:<ol> <li><code>some/lib</code> changes its <code>some-other/lib</code> dependency from <code>v2.5.4-alpha</code> to <code>v2.5.4</code></li> <li><code>some/lib</code> tags the commit <code>v1.7.1</code> and pushes the commit and tag.</li> <li><code>some-other/lib</code> changes its <code>some/lib</code> dependency from <code>v1.7.1-alpha</code> to <code>v1.7.1</code>.</li> <li><code>some-other/lib</code> tags the commit <code>v2.5.4</code> and pushes the commit and tag. </li> </ol> </li> <li>Verify that the error no longer exists:<ol> <li>Run <code>GO111MODULE=on go get -u ./...</code> in <code>some/lib</code> and <code>some-other/lib</code>.</li> <li>No parsing <code>go.mod: unexpected module path \"golang.org/x/lint\"</code> error should occur.</li> </ol> </li> <li>Currently, the <code>go.sum</code>s of <code>some/lib</code> and <code>some-other/lib</code> are incomplete. This is due to the fact that we depended upon future, non-existent versions of modules, so we were not able to generate go.sum entries until the process was finished. So let's fix this:<ol> <li><code>GO111MODULE=on go mod tidy</code> in <code>some/lib</code>.</li> <li>Commit, tag the commit <code>v1.7.2</code>, and push both commit and tag.</li> <li><code>GO111MODULE=on go mod tidy</code> in <code>some-other/lib</code>.</li> <li>Commit, tag the commit <code>v2.5.5</code>, and push both commit and tag.</li> </ol> </li> <li>Finally, let's make sure that <code>my-go-project</code> depends on these new versions of <code>some/lib</code> and <code>some-other/lib</code> which do not have long historical tails:<ol> <li>Change the <code>my-go-project</code> <code>go.mod</code> entry from <code>some/lib v1.7.0</code> to <code>some/lib 1.7.2</code>.</li> <li>Test by running <code>GO111MODULE=on go get -u ./...</code> in <code>my-go-project</code>. </li> </ol> </li> </ol> <p>Note that between steps 5.b and 5.d, users are broken: a version of <code>some/lib</code> has been released that depends on a non-existent version of <code>some-other/lib</code>. Therefore, this process should ideally been done real-time so that step 5.d is finished very soon after step 5.b, creating as small a window of breakage as possible.</p>"},{"location":"Resolving-Problems-From-Modified-Module-Path/#larger-cycles","title":"Larger Cycles","text":"<p>This example explained the process for removing historical trails when there exists a cycle involving two packages in a graph, but what about if there are cycles involving more packages? For example, consider the following graphs:</p> <p></p> <p></p> <p>Each of these graphs involve cycles (the latter example) or interconnected modules (the former example) involving four modules, instead of the simple two module example we saw earlier. The process is largely the same, though, but this time in step 3 and 5 we're going to bump all four modules to non-existent future versions of each other, and similarly in steps 4 and 6 we're going to test all four modules, and in step 7 fix the go.sum of all four modules.</p> <p>More generally, the process above holds for any group of interconnected modules involving any n modules: each major step just involves n modules acting in coordination. </p>"},{"location":"Resources-for-slog/","title":"Resources for slog","text":"<p>This page links to projects that use or enhance <code>slog</code>, the structured logging package for the standard library.</p>"},{"location":"Resources-for-slog/#log-formatting","title":"Log formatting","text":"<ul> <li>slog-formatter: Common formatters for slog + helpers for building your own: samber/slog-formatter</li> <li>ConsoleHandler (similar to Zap's ConsoleEncoder): https://gist.github.com/wijayaerick/de3de10c47a79d5310968ba5ff101a19</li> <li>logf (attr {key} interpolation, rich tty output): https://pkg.go.dev/github.com/AndrewHarrisSPU/logf (uses lazy Handler stores: https://go.dev/play/p/psdD7KDF5fp )</li> <li>slogd - slog with duration kaihendry/slogd with video https://youtu.be/IsPa11N5pzI</li> <li>tinted (colorized) output: https://pkg.go.dev/github.com/lmittmann/tint</li> <li>humane: a human-friendly (but still largely structured) slog Handler: telemachus/humane</li> <li>slug: a handler that prints colourful logs for humans: dotse/slug</li> <li>slogor: A colorful slog handler: greyxor/slogor</li> <li>klog: the text format used by Kubernetes. Provides klog output routing when using the main package's logger and a simpler logger that just writes to stderr. Both slog/logr and go-logr/logr APIs are supported.</li> <li>slogjson: Format using the upcoming JSON v2 library, with optional single-line pretty-printing: veqryn/slog-json</li> </ul>"},{"location":"Resources-for-slog/#logger-bridges","title":"Logger bridges","text":"<ul> <li>Zap Handler, a slog handler that uses Zap: chanchal1987/zaphandler</li> <li>zapr: starting with v1.3.0, both slog/logr and go-logr/logr APIs are supported by the same logger instance.</li> <li>A handler for GoKit: tjhop/slog-gokit.</li> </ul>"},{"location":"Resources-for-slog/#logging-middleware","title":"Logging Middleware","text":"<ul> <li>slogctx: store attributes or the logger in context, read any custom values from context: veqryn/slog-context</li> <li>slog-context/otel: automatically read and add OpenTelemetry TraceID and SpanID to logs, and can set Span error code: github.com/veqryn/slog-context/otel</li> <li>slogdedup: deduplication and sorting of attribute keys, with multiple policies, useful for json logging. Convenience methods to output for Stackdriver, Graylog, and others: veqryn/slog-dedup</li> </ul>"},{"location":"Resources-for-slog/#http-server-middleware","title":"HTTP server middleware","text":"<ul> <li>slog-gin: Gin middleware for slog logger: samber/slog-gin</li> <li>slog-echo: Echo middleware for slog logger: samber/slog-echo</li> <li>slog-fiber: Fiber middleware for slog logger: samber/slog-fiber</li> <li>slog-chi: Chi middleware for slog logger: samber/slog-chi</li> </ul>"},{"location":"Resources-for-slog/#log-sinks","title":"Log sinks","text":"<ul> <li>Experimental example using both OpenTelemetry and <code>slog</code>: justinsb/experiments-slog</li> <li>Simple slog handler with opentelemetry tracing: https://github.com/ttys3/slogsimple/tree/main</li> <li>slog-datadog: a <code>slog.Handler</code> for Datadog: samber/slog-datadog</li> <li>slog-rollbar: a <code>slog.Handler</code> for Rollbar: samber/slog-rollbar</li> <li>slog-sentry: a <code>slog.Handler</code> for Sentry: samber/slog-sentry</li> <li>slog-syslog: a <code>slog.Handler</code> for Syslog: samber/slog-syslog</li> <li>slog-logstash: a <code>slog.Handler</code> for Logstash: samber/slog-logstash</li> <li>slog-fluentd: a <code>slog.Handler</code> for Fluentd: samber/slog-fluentd</li> <li>slog-graylog: a <code>slog.Handler</code> for Graylog: samber/slog-graylog</li> <li>slog-loki: a <code>slog.Handler</code> for Loki: samber/slog-loki</li> <li>slog-slack: a <code>slog.Handler</code> for Slack: samber/slog-slack</li> <li>slog-telegram: a <code>slog.Handler</code> for Telegram: samber/slog-telegram</li> <li>slog-mattermost: a <code>slog.Handler</code> for Mattermost: samber/slog-mattermost</li> <li>slog-microsoft-teams: a <code>slog.Handler</code> for Microsoft Teams: samber/slog-microsoft-teams</li> <li>slog-webhook: a <code>slog.Handler</code> for Webhook: samber/slog-webhook</li> <li>slog-kafka: a <code>slog.Handler</code> for Kafka: samber/slog-kafka</li> <li>slogbugsnag: a <code>slog.Handler</code> for Bugsnag: veqryn/slog-bugsnag</li> <li>slogdriver: a <code>slog.Handler</code> for Stackdriver Logging / GCP Cloud Logging: jussi-kalliokoski/slogdriver</li> </ul>"},{"location":"Resources-for-slog/#handlers","title":"Handlers","text":"<ul> <li>slog-multi: chain of <code>slog.Handler</code> (pipeline, fanout, \u2026): samber/slog-multi</li> <li>various handlers: galecore/xslog</li> </ul>"},{"location":"Resources-for-slog/#other","title":"Other:","text":"<ul> <li>Additional resources written by jba: jba/slog</li> <li>slog-sampling: drop repetitive log entries: samber/slog-sampling</li> <li>slog-context: adds support to reading values from context: PumpkinSeed/slog-context</li> <li>slogassert: handle for testing slog logs emitted by code: thejerf/slogassert</li> <li>sloggen: generate various helpers for <code>log/slog</code>: go-simpler/sloggen</li> <li>sloglint: ensure consistent code style when using <code>log/slog</code>: go-simpler/sloglint</li> </ul>"},{"location":"RiskyChanges/","title":"A guide to risky changes to the standard library and toolchain","text":"<p>Please take special care when working on risky changes. As a reminder:</p> <p>A change is risky if it can cause failures that are hard to diagnose (for example, changes to the runtime, GC, compiler, linker, TLS, other low-level component, or complex changes that need soak time under production workloads), or if it requires many CLs that are hard to revert (for example, large CLs or stacks of CLs).</p> <p>If you plan on working on a change that may be risky, please do the following: 1. Unless the entire change is absolutely trivial to revert, protect the new code paths with a    boolean flag, prefixed with <code>go126</code>, that can be used to quickly toggle back to the old    implementation.    It can be a simple bool constant, for example, <code>const go126UseEvenBetterLinker = true</code>.    Such flags must be findable by a simple grep for the string <code>go126</code>.    That way we can find them without missing any, and they can be cleaned up when we get to the    Go 1.27 cycle. 2. Consider how you would answer the following questions for your change:    * How risky is the change you're planning to make?    * How will you know if it is working as intended?    * How much production testing does it need for you to be confident it is working as intended?    * When should the keep/revert decision be made? 3. Create a tracking issue in the Go 1.26 milestone with a release-blocker label.    This issue will be used to track progress on the feature and make the final decision for Go 1.26.</p>"},{"location":"SQLDrivers/","title":"SQL Database Drivers","text":"<p>The database/sql and database/sql/driver packages are designed for using databases from Go and implementing database drivers, respectively.</p> <p>See the design goals doc:</p> <p>http://golang.org/src/pkg/database/sql/doc.txt</p>"},{"location":"SQLDrivers/#drivers","title":"Drivers","text":"<p>Drivers for Go's sql package include:</p> <ul> <li>Amazon AWS Athena: uber/athenadriver</li> <li>AWS Athena: segmentio/go-athena</li> <li>AWS DynamoDB: btnguyen2k/godynamo</li> <li>Apache Avatica/Phoenix: apache/calcite-avatica-go</li> <li>Apache H2: jmrobles/h2go</li> <li>Apache Hive: sql-machine-learning/gohive</li> <li>Apache Ignite/GridGain: amsokol/ignite-go-client</li> <li>Apache Impala: bippio/go-impala</li> <li>Azure Cosmos DB: btnguyen2k/gocosmos</li> <li>ClickHouse (uses HTTP API): mailru/go-clickhouse</li> <li>ClickHouse (uses native TCP interface): ClickHouse/clickhouse-go</li> <li>CockroachDB: Use any PostgreSQL driver</li> <li>Couchbase N1QL: couchbase/go_n1ql</li> <li>DB2 LUW (uses cgo): asifjalil/cli</li> <li>DB2 LUW and DB2/Z with DB2-Connect: https://bitbucket.org/phiggins/db2cli (Last updated 2015-08)</li> <li>DB2 LUW, z/OS, iSeries and Informix: ibmdb/go_ibm_db</li> <li>Databricks: databricks/databricks-sql-go</li> <li>DuckDB: marcboeker/go-duckdb</li> <li>Exasol: (pure Go): exasol/exasol-driver-go</li> <li>Firebird SQL: nakagami/firebirdsql</li> <li>Genji (pure go): genjidb/genji</li> <li>Google Cloud BigQuery: solcates/go-sql-bigquery</li> <li>Google Cloud Spanner: googleapis/go-sql-spanner</li> <li>Google Cloud Spanner: rakyll/go-sql-driver-spanner</li> <li>MS ADODB: mattn/go-adodb</li> <li>MS SQL Server (pure go): microsoft/go-mssqldb</li> <li>MS SQL Server (uses cgo): minus5/gofreetds</li> <li>MaxCompute: sql-machine-learning/gomaxcompute</li> <li>MySQL: go-sql-driver/mysql <code>[*]</code></li> <li>MySQL: go-mysql-org/go-mysql <code>[**]</code> (also handles replication)</li> <li>MySQL: ziutek/mymysql <code>[*]</code></li> <li>ODBC: https://bitbucket.org/miquella/mgodbc (Last updated 2016-02)</li> <li>ODBC: alexbrainman/odbc</li> <li>Oracle (pure go): sijms/go-ora</li> <li>Oracle (uses cgo): godror/godror</li> <li>Oracle (uses cgo): mattn/go-oci8</li> <li>Oracle (uses cgo): https://gopkg.in/rana/ora.v4</li> <li>Postgres (pure Go): jackc/pgx <code>[*]</code></li> <li>Postgres (pure Go): lib/pq <code>[*]</code></li> <li>Postgres (uses cgo): jbarham/gopgsqldriver</li> <li>Presto: prestodb/presto-go-client</li> <li>QL: https://pkg.go.dev/modernc.org/ql</li> <li>SAP ASE (pure go): SAP/go-ase</li> <li>SAP ASE (uses cgo): SAP/cgo-ase</li> <li>SAP HANA (pure go): SAP/go-hdb</li> <li>SAP HANA (uses cgo): https://help.sap.com/viewer/0eec0d68141541d1b07893a39944924e/2.0.03/en-US/0ffbe86c9d9f44338441829c6bee15e6.html</li> <li>SQL over REST: adaptant-labs/go-sql-rest-driver</li> <li>SQLite (uses cgo): gwenn/gosqlite - Supports SQLite dynamic data typing</li> <li>SQLite (uses cgo): mattn/go-sqlite3 <code>[*]</code></li> <li>SQLite (uses cgo): mxk/go-sqlite</li> <li>SQLite: (pure go): https://modernc.org/sqlite</li> <li>SQLite: (pure go): ncruces/go-sqlite3</li> <li>SQLite: (uses cgo): rsc/sqlite</li> <li>SingleStore: Use any MySQL driver</li> <li>Snowflake (pure Go): snowflakedb/gosnowflake</li> <li>Sybase ASE (pure go): thda/tds</li> <li>Sybase SQL Anywhere: a-palchikov/sqlago</li> <li>TiDB: Use any MySQL driver</li> <li>Trino: trinodb/trino-go-client</li> <li>Vertica: vertica/vertica-sql-go</li> <li>Vitess: https://pkg.go.dev/vitess.io/vitess/go/vt/vitessdriver</li> <li>YDB (pure go): ydb-platform/ydb-go-sdk</li> <li>YQL (Yahoo! Query Language): mattn/go-yql</li> </ul> <p>Drivers marked with <code>[*]</code> are both included in and pass the compatibility test suite at bradfitz/go-sql-test. Drivers marked with <code>[**]</code> pass the compatibility test suite but are not currently included in it.</p>"},{"location":"SQLInterface/","title":"SQLInterface","text":""},{"location":"SQLInterface/#introduction","title":"Introduction","text":"<p>The <code>database/sql</code> package provides a generic interface around SQL (or SQL-like) databases. See the official documentation for details.</p> <p>This page provides example usage patterns.</p>"},{"location":"SQLInterface/#database-driver","title":"Database driver","text":"<p>The <code>database/sql</code> package must be used in conjunction with a database driver. See https://go.dev/s/sqldrivers for a list of drivers.</p> <p>The documentation below assumes a driver has been imported.</p>"},{"location":"SQLInterface/#connecting-to-a-database","title":"Connecting to a database","text":"<p><code>Open</code>  is used to create a database handle:</p> <pre><code>db, err := sql.Open(driver, dataSourceName)\n</code></pre> <p>Where driver specifies a database driver and dataSourceName specifies database-specific connection information such as database name and authentication credentials.</p> <p>Note that <code>Open</code> does not directly open a database connection: this is deferred until a query is made. To verify that a connection can be made before making a query, use the <code>PingContext</code> method:</p> <pre><code>if err := db.PingContext(ctx); err != nil {\n  log.Fatal(err)\n}\n</code></pre> <p>After use, the database is closed using <code>Close</code>.</p>"},{"location":"SQLInterface/#executing-queries","title":"Executing queries","text":"<p><code>ExecContext</code> is used for queries where no rows are returned:</p> <pre><code>result, err := db.ExecContext(ctx,\n\t\"INSERT INTO users (name, age) VALUES ($1, $2)\",\n\t\"gopher\",\n\t27,\n)\n</code></pre> <p>Where result contains the last insert ID and number of rows affected. The availability of these values is dependent on the database driver.</p> <p><code>QueryContext</code> is used for retrieval:</p> <pre><code>rows, err := db.QueryContext(ctx, \"SELECT name FROM users WHERE age = $1\", age)\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer rows.Close()\nfor rows.Next() {\n\tvar name string\n\tif err := rows.Scan(&amp;name); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s is %d\\n\", name, age)\n}\nif err := rows.Err(); err != nil {\n\tlog.Fatal(err)\n}\n</code></pre> <p><code>QueryRowContext</code> is used where only a single row is expected:</p> <pre><code>var age int64\nerr := db.QueryRowContext(ctx, \"SELECT age FROM users WHERE name = $1\", name).Scan(&amp;age)\n</code></pre> <p>Prepared statements can be created with <code>PrepareContext</code>:</p> <pre><code>age := 27\nstmt, err := db.PrepareContext(ctx, \"SELECT name FROM users WHERE age = $1\")\nif err != nil {\n\tlog.Fatal(err)\n}\nrows, err := stmt.Query(age)\n// process rows\n</code></pre> <p><code>ExecContext</code>, <code>QueryContext</code> and <code>QueryRowContext</code> can be called on statements. After use, a statement should be closed with <code>Close</code>.</p>"},{"location":"SQLInterface/#transactions","title":"Transactions","text":"<p>Transactions are started with <code>BeginTx</code>:</p> <pre><code>tx, err := db.BeginTx(ctx, nil)\nif err != nil {\n\tlog.Fatal(err)\n}\n</code></pre> <p>The <code>ExecContext</code>, <code>QueryContext</code>, <code>QueryRowContext</code> and <code>PrepareContext</code> methods already covered can be used in a transaction.</p> <p>A transaction must end with a call to <code>Commit</code> or <code>Rollback</code>.</p>"},{"location":"SQLInterface/#dealing-with-null","title":"Dealing with NULL","text":"<p>If a database column is nullable, one of the types supporting null values should be passed to Scan.</p> <p>For example, if the name column in the names table is nullable:</p> <pre><code>var name sql.NullString\nerr := db.QueryRowContext(ctx, \"SELECT name FROM names WHERE id = $1\", id).Scan(&amp;name)\n...\nif name.Valid {\n\t// use name.String\n} else {\n\t// value is NULL\n}\n</code></pre> <p>Only <code>NullByte</code>, <code>NullBool</code>, <code>NullFloat64</code>, <code>NullInt64</code>, <code>NullInt32</code> <code>NullInt16</code>, <code>NullString</code> and <code>NullTime</code> are implemented in <code>database/sql</code>. Implementations of database-specific null types are left to the database driver. User types supporting <code>NULL</code> can be created by implementing interfaces <code>database/sql/driver.Valuer</code> and <code>database/sql.Scanner</code>.</p> <p>You can also pass pointer types. Be careful for performance issues as it requires extra memory allocations.</p> <pre><code>var name *string\nerr := db.QueryRowContext(ctx, \"SELECT name FROM names WHERE id = $1\", id).Scan(&amp;name)\n</code></pre>"},{"location":"SQLInterface/#getting-a-table","title":"Getting a table","text":"<p>If you want an struct array from your SQL query.</p> <pre><code>func getTable[T any](rows *sql.Rows) (out []T) {\n\tvar table []T\n\tfor rows.Next() {\n\t\tvar data T\n\t\ts := reflect.ValueOf(&amp;data).Elem()\n\t\tnumCols := s.NumField()\n\t\tcolumns := make([]interface{}, numCols)\n\n\t\tfor i := 0; i &lt; numCols; i++ {\n\t\t\tfield := s.Field(i)\n\t\t\tcolumns[i] = field.Addr().Interface()\n\t\t}\n\n\t\tif err := rows.Scan(columns...); err != nil {\n\t\t\tfmt.Println(\"Case Read Error \", err)\n\t\t}\n\n\t\ttable = append(table, data)\n\t}\n\treturn table\n}\n</code></pre> <p>Make sure to deal with nulls from the database.</p> <pre><code>type User struct {\n  UUID  sql.NullString\n  Name  sql.NullString\n}\n\nrows, err := db.Query(\"SELECT * FROM Users\")\ncases := getTable[User](rows)\n</code></pre>"},{"location":"Screencasts/","title":"Screencasts","text":""},{"location":"Screencasts/#writing-building-installing-and-testing-go-code","title":"Writing, building, installing, and testing Go code","text":"<p>A first stop for newcomers to the Go Programming Language.</p> <p>This screencast describes setting up a workspace (GOPATH), writing commands and packages, using the go tool to build and install, and using the testing package to write unit tests.</p> <p>[video]</p> <ul> <li>Go for Web Development [Video]<ul> <li>Author: Larry Price</li> <li>Publication Date: December 29, 2015</li> <li>ISBN:978-1784397982</li> </ul> </li> </ul> <p>[video]</p> <ul> <li>Go: Building Web Applications<ul> <li>Authors: Nathan Kozyra, Mat Ryer</li> <li>Publication Date: August 2016</li> <li>ISBN:978-1787123496</li> </ul> </li> </ul> <p>[Course]</p> <ul> <li>The Go Programming Language Guide - Code Like a Pro [Video]<ul> <li>Author: Eduonix</li> <li>Publication Date: September 23, 2016</li> <li>ISBN:978-1787128385</li> </ul> </li> </ul> <p>[video]</p> <ul> <li>Go Projects [Video]<ul> <li>Authors: Ben Tranter &amp; Rostislav Dzinko</li> <li>Publication Date: November 14, 2016</li> <li>ISBN:978-1786460103</li> </ul> </li> </ul> <p>[video]</p> <ul> <li>Build webapps in Go without using a framework [Video]<ul> <li>Authors: Suraj Patil</li> <li>Publication Date: December 2016</li> </ul> </li> </ul> <p>[Course]</p> <ul> <li>Mastering Go [Video]<ul> <li>Authors: Mina Andrawos</li> <li>Publication Date: January 31, 2017</li> <li>ISBN:978-1786468239</li> </ul> </li> </ul> <p>[video]</p> <ul> <li>Getting started with Cloud Native Go [Video]<ul> <li>Author: Mario-Leander Reimer</li> <li>Publication Date: February 24, 2017</li> <li>ISBN:978-1787125476</li> </ul> </li> </ul> <p>[video]</p> <ul> <li>Introduction to Go Classical Patterns [Video]<ul> <li>Author: Mario Castro Contreras</li> <li>Publication Date: April 27, 2017</li> <li>ISBN:978-1788398039</li> </ul> </li> </ul> <p>[video]</p> <ul> <li>Go Essentials for Full Stack Web Development [Video]<ul> <li>Author: Kamesh Balasubramanian</li> <li>Publication Date: April 30, 2017</li> <li>ISBN:978-1787280946</li> </ul> </li> </ul> <p>[video]</p> <ul> <li>Go Behavioral Patterns [Video]<ul> <li>Author: Mario Castro Contreras</li> <li>Publication Date: May 27, 2017</li> <li>ISBN:978-1788397377</li> </ul> </li> </ul> <p>[video]</p> <ul> <li>Go Concurrency [Video]<ul> <li>Author: Mario Castro Contreras</li> <li>Publication Date: May 30, 2017</li> <li>ISBN:978-1788394161</li> </ul> </li> </ul> <p>[video]</p> <ul> <li>Advanced Cloud Native Go [Video]<ul> <li>Author: Mario-Leander Reimer</li> <li>Publication Date: May 31, 2017</li> <li>ISBN:978-1787286238</li> </ul> </li> </ul> <p>[video]</p> <ul> <li>Go: Building 7 Real-World Projects [Video]<ul> <li>Author:  Ben Tranter, Rostislav Dzinko and Mat Ryer</li> <li>Publication Date: May 31, 2017</li> <li>ISBN:978-1788290494</li> </ul> </li> </ul> <p>[course]</p> <ul> <li>Modern Golang Programming [Video]<ul> <li>Author:  Mina Andrawos</li> <li>Publication Date: June 23, 2017</li> <li>ISBN:978-1787125254</li> </ul> </li> </ul> <p>[video]</p> <ul> <li>Back-End Web Development using Go [Video]<ul> <li>Author:  Kamesh Balasubramanian</li> <li>Publication Date: June 30, 2017</li> <li>ISBN:978-1788392761</li> </ul> </li> </ul> <p>[video]</p> <ul> <li>Getting started with Go Programming Language<ul> <li>Author:  Matthew Spaulding</li> <li>Publication Date: August 2017</li> <li>ISBN: 978-1788471855</li> </ul> </li> </ul> <p>[course]</p> <ul> <li>Beginner Solutions in Go \u2013 The Basics, Clients, and Servers [Video]<ul> <li>Author:  Aaron Torres</li> <li>Publication Date: August 2017</li> <li>ISBN: 978-1788629089</li> </ul> </li> </ul> <p>[video]</p> <ul> <li>Front-End Web Development using Go (Video)<ul> <li>Author: Kamesh Balasubramanian</li> <li>Publication Date: September 2017</li> <li>ISBN: 978-1788398916</li> </ul> </li> </ul> <p>[video]</p> <ul> <li>Advanced Solutions in Go \u2013 Testing and Distributed Systems<ul> <li>Author: Aaron Torres</li> <li>Publication Date: September 2017</li> <li>ISBN: 978-1788627887</li> </ul> </li> </ul> <p>[video]</p> <ul> <li>Go Standard Library Solutions (Video)<ul> <li>Author: Johnny Boursiquot</li> <li>Publication Date: November 2017</li> <li>ISBN: 978-1788474160</li> </ul> </li> </ul> <p>[video]</p> <ul> <li>Machine Learning with Go [Video]</li> <li>Author: Daniel Whitenack</li> <li>Publication Date: February 2018</li> <li>ISBN: 9781789134735</li> </ul> <p>[video]</p> <ul> <li>Go Production Deployments [Video]<ul> <li>Author: Kamesh Balasubramanian</li> <li>Publication Date: March 2018</li> <li>ISBN: 9781788399340</li> </ul> </li> </ul> <p>[video]</p> <ul> <li>Network Programming with Go [Video]<ul> <li>Author: Vladimir Vivien</li> <li>Publication Date: April 2018</li> <li>ISBN: 9781788476560</li> </ul> </li> </ul> <p>[video]</p> <ul> <li>Learning Go Data Structures and Algorithms [Video]<ul> <li>Author: Gustavo Cha\u00edn</li> <li>Publication Date: May 2018</li> <li>ISBN: 9781788392563</li> </ul> </li> </ul> <p>[video]</p> <ul> <li>Hands-on with Go [Video]<ul> <li>Author: Tarik Guney</li> <li>Publication Date: May 2018</li> <li>ISBN: 9781789132519</li> </ul> </li> </ul> <p>[video]</p> <ul> <li>Learn Go in 3 Hours [Video]<ul> <li>Author: Jonathan Bodner</li> <li>Publication Date: June 2018</li> <li>ISBN: 9781788992053</li> </ul> </li> </ul> <p>[video]</p> <ul> <li>Hands-on Serverless Computing with Go [Video]<ul> <li>Author: Matthew Stoodley</li> <li>Publication Date: June 2018</li> <li>ISBN: 9781789132830</li> </ul> </li> </ul> <p>[video]</p> <ul> <li>Hands-on Concurrency with Go [Video]<ul> <li>Author: Leo Tindall</li> <li>Publication Date: July 2018</li> <li>ISBN: 9781788993746</li> </ul> </li> </ul> <p>[video]</p> <ul> <li>Troubleshooting Go Application Development [Video]<ul> <li>Author: Shawn Milochik</li> <li>Publication Date: July 2018</li> <li>ISBN: 9781788997072</li> </ul> </li> </ul> <p>[video]</p> <ul> <li>Functional Programming in Go [Video]<ul> <li>Author: Erkid Hoxholli</li> <li>Publication Date: September 2018</li> <li>ISBN: 9781787283480</li> </ul> </li> </ul> <p>[video]</p> <ul> <li>Go Application Development \u2013 Tips, Tricks, and Techniques (Video)<ul> <li>Author: Martin Helmich</li> <li>Publication Date: February 2019</li> <li>ISBN: 9781789134797</li> </ul> </li> </ul> <p>[Video]</p> <ul> <li>Hands-On Microservices with Go [Video]<ul> <li>Author: Emiliano Martinez Luque</li> <li>Publication Date: May 2019</li> <li>ISBN: 9781788993999</li> </ul> </li> </ul> <p>[video]</p>"},{"location":"SettingGOPATH/","title":"Setting GOPATH","text":"<p>The <code>GOPATH</code> environment variable specifies the location of your workspace. If no <code>GOPATH</code> is set, it is assumed to be <code>$HOME/go</code> on Unix systems and <code>%USERPROFILE%\\go</code> on Windows. If you want to use a custom location as your workspace, you can set the <code>GOPATH</code> environment variable. This page explains how to set this variable on various platforms.</p> <ul> <li>Unix systems</li> <li>Go 1.13</li> <li>Bash</li> <li>Zsh</li> <li>fish</li> <li>Windows</li> <li>Go 1.13</li> <li>Windows 10 (GUI)</li> <li>Windows 10 (command line)</li> </ul>"},{"location":"SettingGOPATH/#unix-systems","title":"Unix systems","text":"<p><code>GOPATH</code> can be any directory on your system. In Unix examples, we will set it to <code>$HOME/go</code> (the default since Go 1.8). Note that <code>GOPATH</code> must not be the same path as your Go installation. Another common setup is to set <code>GOPATH=$HOME</code>.</p>"},{"location":"SettingGOPATH/#go-113","title":"Go 1.13+","text":"<pre><code>go env -w GOPATH=$HOME/go\n</code></pre>"},{"location":"SettingGOPATH/#bash","title":"Bash","text":"<p>Edit your <code>~/.bash_profile</code> to add the following line: <pre><code>export GOPATH=$HOME/go\n</code></pre></p> <p>Save and exit your editor. Then, source your <code>~/.bash_profile</code>. <pre><code>source ~/.bash_profile\n</code></pre></p>"},{"location":"SettingGOPATH/#zsh","title":"Zsh","text":"<p>Edit your <code>~/.zshrc</code> file to add the following line:</p> <p><pre><code>export GOPATH=$HOME/go\n</code></pre> Save and exit your editor. Then, source your <code>~/.zshrc</code>. <pre><code>source ~/.zshrc\n</code></pre></p>"},{"location":"SettingGOPATH/#fish","title":"fish","text":"<pre><code>set -x -U GOPATH $HOME/go\n</code></pre> <p>The <code>-x</code> is used to specify that this variable should be exported and the <code>-U</code> makes this a universal variable, available to all sessions and persistent.</p>"},{"location":"SettingGOPATH/#windows","title":"Windows","text":"<p>Your workspace can be located wherever you like, but we'll use <code>C:\\go-work</code> in this example.</p> <p>NOTE: <code>GOPATH</code> must not be the same path as your Go installation.</p> <ul> <li>Create a folder at <code>C:\\go-work</code>.</li> <li>Right-click on \"Start\" and click on \"Control Panel\". Select \"System and Security\", then click on \"System\".</li> <li>From the menu on the left, select the \"Advanced system settings\".</li> <li>Click the \"Environment Variables\" button at the bottom.</li> <li>Click \"New\" from the \"User variables\" section.</li> <li>Type <code>GOPATH</code> into the \"Variable name\" field.</li> <li>Type <code>C:\\go-work</code> into the \"Variable value\" field.</li> <li>Click OK.</li> </ul>"},{"location":"SettingGOPATH/#go-113-command-line","title":"Go 1.13+ (command line)","text":"<ul> <li>Open a command prompt (<code>Win</code> + <code>r</code> then type <code>cmd</code>) or a powershell window (<code>Win</code> + <code>i</code>).</li> <li>Type <code>go env -w GOPATH=c:\\go-work</code>.</li> </ul>"},{"location":"SettingGOPATH/#windows-10-gui","title":"Windows 10 (GUI)","text":"<p>There is a faster way to edit <code>Environment Variables</code> via search: * Left click on \"Search\" and type <code>env</code> or <code>environment</code>. * Select \"Edit environment variables for your account\". * \u2026 and follow steps above.</p>"},{"location":"SettingGOPATH/#windows-10-command-line","title":"Windows 10 (command line)","text":"<ul> <li>Open a command prompt (<code>Win</code> + <code>r</code> then type <code>cmd</code>) or a powershell window (<code>Win</code> + <code>i</code>).</li> <li>Type <code>setx GOPATH %USERPROFILE%\\go</code>. (This will set the <code>GOPATH</code> to your <code>[home folder]\\go</code>, such as <code>C:\\Users\\yourusername\\go</code>.)</li> <li>Close the command or PowerShell window. (The environment variable is only available for new command or PowerShell windows, not for the current window.)</li> </ul>"},{"location":"SignalHandling/","title":"SignalHandling","text":""},{"location":"SignalHandling/#introduction","title":"Introduction","text":"<p>Sometimes an application needs to save internal state or perform some cleanup activity before it exits, or needs to be able to reload a configuration file or write a memory/cpu profile on demand.  In UNIX-like operating systems, signals can accomplish these tasks.</p>"},{"location":"SignalHandling/#example","title":"Example","text":"<p>The following code demonstrates a program that waits for an interrupt signal and removes a temporary file when it occurs.</p> <pre><code>package main\n\nimport (\n\t\"io/ioutil\"\n\t\"os\"\n\t\"os/signal\"\n)\n\nfunc main() {\n\tf, err := ioutil.TempFile(\"\", \"test\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer os.Remove(f.Name())\n\tdefer f.Close()\n\tsig := make(chan os.Signal, 1)\n\tsignal.Notify(sig, os.Interrupt)\n\t&lt;-sig\n}\n</code></pre>"},{"location":"SimultaneousAssignment/","title":"Simultaneous Assignment","text":"<p>Simultaneous assignment is useful in many cases to make related assignments in a single statement.  Sometimes they are required, either because only a single statement is available (e.g. in an if statement) or because the values will change after the statement (e.g. in the case of swap).  All values on the right-hand side of the assignment operator are evaluated before the assignment is performed.</p> <p>Simultaneous assignment in an if statement can improve readability, especially in test functions: <pre><code>if got, want := someFunction(...), currTest.Expected; got != want {\n    t.Errorf(\"%d. someFunction(...) = %v, want %v\", currIdx, got, want)\n}\n</code></pre></p> <p>Swapping two values is also made simple using simultaneous assignment:</p> <pre><code>i, j = j, i\n</code></pre> <p>https://go.dev/ref/spec#Assignments</p>"},{"location":"SliceTricks/","title":"SliceTricks","text":"<p>Since the introduction of the <code>append</code> built-in, most of the functionality of the <code>container/vector</code> package, which was removed in Go 1, can be replicated using <code>append</code> and <code>copy</code>.</p> <p>Since the introduction of generics, generic implementations of several of these functions are available in the <code>golang.org/x/exp/slices</code> package.</p> <p>Here are the vector methods and their slice-manipulation analogues:</p>"},{"location":"SliceTricks/#appendvector","title":"AppendVector","text":"<pre><code>a = append(a, b...)\n</code></pre>"},{"location":"SliceTricks/#copy","title":"Copy","text":"<pre><code>b := make([]T, len(a))\ncopy(b, a)\n\n// These two are often a little slower than the above one,\n// but they would be more efficient if there are more\n// elements to be appended to b after copying.\nb = append([]T(nil), a...)\nb = append(a[:0:0], a...)\n\n// This one-line implementation is equivalent to the above\n// two-line make+copy implementation logically. But it is\n// actually a bit slower (as of Go toolchain v1.16).\nb = append(make([]T, 0, len(a)), a...)\n</code></pre>"},{"location":"SliceTricks/#cut","title":"Cut","text":"<pre><code>a = append(a[:i], a[j:]...)\n</code></pre>"},{"location":"SliceTricks/#delete","title":"Delete","text":"<pre><code>a = append(a[:i], a[i+1:]...)\n// or\na = a[:i+copy(a[i:], a[i+1:])]\n</code></pre>"},{"location":"SliceTricks/#delete-without-preserving-order","title":"Delete without preserving order","text":"<p><pre><code>a[i] = a[len(a)-1] \na = a[:len(a)-1]\n</code></pre> NOTE If the type of the element is a pointer or a struct with pointer fields, which need to be garbage collected, the above implementations of <code>Cut</code> and <code>Delete</code> have a potential memory leak problem: some elements with values are still referenced by slice <code>a</code>'s underlying array, just not \"visible\" in the slice. Because the \"deleted\" value is referenced in the underlying array, the deleted value is still \"reachable\" during GC, even though the value cannot be referenced by your code. If the underlying array is long-lived, this represents a leak. The following code can fix this problem:</p> <p>Cut <pre><code>copy(a[i:], a[j:])\nfor k, n := len(a)-j+i, len(a); k &lt; n; k++ {\n\ta[k] = nil // or the zero value of T\n}\na = a[:len(a)-j+i]\n</code></pre></p> <p>Delete <pre><code>copy(a[i:], a[i+1:])\na[len(a)-1] = nil // or the zero value of T\na = a[:len(a)-1]\n</code></pre></p> <p>Delete without preserving order <pre><code>a[i] = a[len(a)-1]\na[len(a)-1] = nil\na = a[:len(a)-1]\n</code></pre></p>"},{"location":"SliceTricks/#expand","title":"Expand","text":"<p>Insert <code>n</code> elements at position <code>i</code>: <pre><code>a = append(a[:i], append(make([]T, n), a[i:]...)...)\n</code></pre></p>"},{"location":"SliceTricks/#extend","title":"Extend","text":"<p>Append <code>n</code> elements: <pre><code>a = append(a, make([]T, n)...)\n</code></pre></p>"},{"location":"SliceTricks/#extend-capacity","title":"Extend Capacity","text":"<p>Make sure there is space to append <code>n</code> elements without re-allocating: <pre><code>if cap(a)-len(a) &lt; n {\n\ta = append(make([]T, 0, len(a)+n), a...)\n}\n</code></pre></p>"},{"location":"SliceTricks/#filter-in-place","title":"Filter (in place)","text":"<pre><code>n := 0\nfor _, x := range a {\n\tif keep(x) {\n\t\ta[n] = x\n\t\tn++\n\t}\n}\na = a[:n]\n</code></pre>"},{"location":"SliceTricks/#insert","title":"Insert","text":"<p><pre><code>a = append(a[:i], append([]T{x}, a[i:]...)...)\n</code></pre> NOTE: The second <code>append</code> creates a new slice with its own underlying storage and  copies elements in <code>a[i:]</code> to that slice, and these elements are then copied back to slice <code>a</code> (by the first <code>append</code>). The creation of the new slice (and thus memory garbage) and the second copy can be avoided by using an alternative way:</p> <p>Insert <pre><code>s = append(s, 0 /* use the zero value of the element type */)\ncopy(s[i+1:], s[i:])\ns[i] = x\n</code></pre></p>"},{"location":"SliceTricks/#insertvector","title":"InsertVector","text":"<pre><code>a = append(a[:i], append(b, a[i:]...)...)\n\n// The above one-line way copies a[i:] twice and\n// allocates at least once.\n// The following verbose way only copies elements\n// in a[i:] once and allocates at most once.\n// But, as of Go toolchain 1.16, due to lacking of\n// optimizations to avoid elements clearing in the\n// \"make\" call, the verbose way is not always faster.\n//\n// Future compiler optimizations might implement\n// both in the most efficient ways.\n//\n// Assume element type is int.\nfunc Insert(s []int, k int, vs ...int) []int {\n\tif n := len(s) + len(vs); n &lt;= cap(s) {\n\t\ts2 := s[:n]\n\t\tcopy(s2[k+len(vs):], s[k:])\n\t\tcopy(s2[k:], vs)\n\t\treturn s2\n\t}\n\ts2 := make([]int, len(s) + len(vs))\n\tcopy(s2, s[:k])\n\tcopy(s2[k:], vs)\n\tcopy(s2[k+len(vs):], s[k:])\n\treturn s2\n}\n\na = Insert(a, i, b...)\n</code></pre>"},{"location":"SliceTricks/#push","title":"Push","text":"<pre><code>a = append(a, x)\n</code></pre>"},{"location":"SliceTricks/#pop","title":"Pop","text":"<pre><code>x, a = a[len(a)-1], a[:len(a)-1]\n</code></pre>"},{"location":"SliceTricks/#push-frontunshift","title":"Push Front/Unshift","text":"<pre><code>a = append([]T{x}, a...)\n</code></pre>"},{"location":"SliceTricks/#pop-frontshift","title":"Pop Front/Shift","text":"<pre><code>x, a = a[0], a[1:]\n</code></pre>"},{"location":"SliceTricks/#additional-tricks","title":"Additional Tricks","text":""},{"location":"SliceTricks/#filtering-without-allocating","title":"Filtering without allocating","text":"<p>This trick uses the fact that a slice shares the same backing array and capacity as the original, so the storage is reused for the filtered slice. Of course, the original contents are modified.</p> <pre><code>b := a[:0]\nfor _, x := range a {\n\tif f(x) {\n\t\tb = append(b, x)\n\t}\n}\n</code></pre> <p>For elements which must be garbage collected, the following code can be included afterwards:</p> <pre><code>clear(a[len(b):])\n</code></pre>"},{"location":"SliceTricks/#reversing","title":"Reversing","text":"<p>To replace the contents of a slice with the same elements but in reverse order: <pre><code>for i := len(a)/2-1; i &gt;= 0; i-- {\n\topp := len(a)-1-i\n\ta[i], a[opp] = a[opp], a[i]\n}\n</code></pre> The same thing, except with two indices: <pre><code>for left, right := 0, len(a)-1; left &lt; right; left, right = left+1, right-1 {\n\ta[left], a[right] = a[right], a[left]\n}\n</code></pre></p>"},{"location":"SliceTricks/#shuffling","title":"Shuffling","text":"<p>Fisher\u2013Yates algorithm:</p> <p>Since go1.10, this is available at math/rand.Shuffle</p> <pre><code>for i := len(a) - 1; i &gt; 0; i-- {\n    j := rand.Intn(i + 1)\n    a[i], a[j] = a[j], a[i]\n}\n</code></pre>"},{"location":"SliceTricks/#batching-with-minimal-allocation","title":"Batching with minimal allocation","text":"<p>Useful if you want to do batch processing on large slices.</p> <pre><code>actions := []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\nbatchSize := 3\nbatches := make([][]int, 0, (len(actions) + batchSize - 1) / batchSize)\n\nfor batchSize &lt; len(actions) {\n    actions, batches = actions[batchSize:], append(batches, actions[0:batchSize:batchSize])\n}\nbatches = append(batches, actions)\n</code></pre> <p>Yields the following: <pre><code>[[0 1 2] [3 4 5] [6 7 8] [9]]\n</code></pre></p>"},{"location":"SliceTricks/#in-place-deduplicate-comparable","title":"In-place deduplicate (comparable)","text":"<pre><code>import \"sort\"\n\nin := []int{3,2,1,4,3,2,1,4,1} // any item can be sorted\nsort.Ints(in)\nj := 0\nfor i := 1; i &lt; len(in); i++ {\n\tif in[j] == in[i] {\n\t\tcontinue\n\t}\n\tj++\n\t// preserve the original data\n\t// in[i], in[j] = in[j], in[i]\n\t// only set what is required\n\tin[j] = in[i]\n}\nresult := in[:j+1]\nfmt.Println(result) // [1 2 3 4]\n</code></pre>"},{"location":"SliceTricks/#move-to-front-or-prepend-if-not-present-in-place-if-possible","title":"Move to front, or prepend if not present, in place if possible.","text":"<pre><code>// moveToFront moves needle to the front of haystack, in place if possible.\nfunc moveToFront(needle string, haystack []string) []string {\n\tif len(haystack) != 0 &amp;&amp; haystack[0] == needle {\n\t\treturn haystack\n\t}\n\tprev := needle\n\tfor i, elem := range haystack {\n\t\tswitch {\n\t\tcase i == 0:\n\t\t\thaystack[0] = needle\n\t\t\tprev = elem\n\t\tcase elem == needle:\n\t\t\thaystack[i] = prev\n\t\t\treturn haystack\n\t\tdefault:\n\t\t\thaystack[i] = prev\n\t\t\tprev = elem\n\t\t}\n\t}\n\treturn append(haystack, prev)\n}\n\nhaystack := []string{\"a\", \"b\", \"c\", \"d\", \"e\"} // [a b c d e]\nhaystack = moveToFront(\"c\", haystack)         // [c a b d e]\nhaystack = moveToFront(\"f\", haystack)         // [f c a b d e]\n</code></pre>"},{"location":"SliceTricks/#sliding-window","title":"Sliding Window","text":"<pre><code>func slidingWindow(size int, input []int) [][]int {\n\t// returns the input slice as the first element\n\tif len(input) &lt;= size {\n\t\treturn [][]int{input}\n\t}\n\n\t// allocate slice at the precise size we need\n\tr := make([][]int, 0, len(input)-size+1)\n\n\tfor i, j := 0, size; j &lt;= len(input); i, j = i+1, j+1 {\n\t\tr = append(r, input[i:j])\n\t}\n\n\treturn r\n}\n</code></pre>"},{"location":"SlowBots/","title":"SlowBots","text":"<p>The Go build system supports \"SlowBots\", which are a way to configure the TryBots (pre-submit builders) to add additional builders into the set of build configurations that TryBots normally run.</p> <p>Normally TryBots only run things that are fast and elastically provisioned. That is, TryBots run tests for ports that are available on Google Cloud where we have tons of capacity and can spin up many VMs at will, sharding out test execution widely so the TryBots complete in 5-10 minutes.</p> <p>But sometimes that's not enough. SlowBots let you say that you're cool waiting a long time until some specific set of builders becomes available. (There is often only one physical machine for some configurations, and often backlogged with work, and that builder might be slow too.)</p>"},{"location":"SlowBots/#using-slowbots","title":"Using SlowBots","text":"<p>Click \"Choose Tryjobs\" under the commit message and a dialog will appear.</p> <p></p> <p>The dialog will ask you to click checkboxes for the builds you would like to run against your CL. A typical CL to the main Go repo usually wants builders starting with <code>gotip-</code>. See below for more details about the options.</p> <p></p> <p>Once you select the builds you would like to run, there are two ways to trigger the test runs:</p> <ul> <li>Blocking: This is the recommended approach. Add the <code>Cq-Include-Trybots</code> git footer displayed in the dialog to the last paragraph of the commit message. For CL sent via github, it is OK to appear anywhere in the description of github PR. Once a patch set with the updated commit message is uploaded, vote <code>Commit-Queue+1</code> as usual. The additional builds are treated just like the default TryBots: failures will block submission and send email notifications, and the builds will automatically run on subsequent patch set (as long as the <code>Cq-Include-Trybots</code> line remains). Note that the <code>Cq-Include-Trybots</code> git footer will not be used if it's not in the last paragraph of the commit message. That is, it must be right next to the <code>Change-Id</code> line without empty lines (see screenshot below).</li> <li>Advisory only: Clicking the \"Add\" button will immediately start running the tests (even without a <code>Commit-Queue+1</code> vote). These are completely one-off advisory builds only. Status and results will appear in the \"Checks\" section (seen screenshot below), but failing results will not block submission or send an email notification. These builds will not automatically run again when a new patch set is uploaded.</li> </ul> <p></p>"},{"location":"SlowBots/#reviewer-workflow","title":"Reviewer workflow","text":"<p>As a reviewer, you cannot edit commit messages. If a CL you are reviewing should run SlowBots, we recommend the following workflow:</p> <ol> <li>Select the desired builds in the \"Choose Tryjobs\" dialog.</li> <li>Click \"Add\" to immediately start the builds.</li> <li>Add an unresolved comment to the commit message asking the owner to add the exact <code>Cq-Include-Trybots</code> line from the dialog to the commit message.</li> </ol> <p>(2) will provide immediate feedback from the results of the tests without waiting for the owner to upload a new patch set, while (3) will ensure that the tests continue running on future patch sets and block submission.</p> <p>Note: https://crbug.com/40287467 tracks improvements to this process in LUCI to reduce toil.</p>"},{"location":"SlowBots/#slowbot-names","title":"SlowBot names","text":"<p>Each build's name roughly indicates what it will do, but below is some more detail: * Builds may start with <code>x_$REPO</code> where <code>$REPO</code> is some module like <code>golang.org/x/$REPO</code> (such as <code>x_review-gotip-linux-amd64</code>). This build will run tests in that repository. If the CL is for the main Go repository, it will test the current <code>HEAD</code> of <code>$REPO</code> against that version of Go. * If builds do not start with <code>x_$REPO</code> (like <code>gotip-linux-amd64</code>), they are testing the main Go repository (including the standard library and toolchain). * Builds will then always list a Go version to build against, like <code>gotip</code> or <code>go1.21</code>. The former builds against the <code>master</code> branch of the main Go repository, while the latter builds against the <code>HEAD</code> of the corresponding release branch. If the CL is for <code>$REPO</code>, then <code>$REPO</code>'s tests will be run against <code>HEAD</code> of the corresponding main Go repository branch. * Builds then list the OS and CPU architecture (specifically, the <code>GOOS</code> and <code>GOARCH</code>) to test against. * Lastly, builds list some modifications, such as <code>gotip-linux-amd64-longtest-race</code>. Below is a list of some of the modifications and what they mean:     * <code>longtest</code> runs the full suite of tests for the corresponding platform and repository.     * <code>race</code> runs tests under the race detector.     * <code>misccompile</code> will cross-compile all packages (including test packages) for all supported platforms as a smoke test. The platform for these builds is just the \"host\" platform for the cross-compilation.</p> <p>There are currently a lot more possible builds listed than what's actually supported or valid.</p> <p>Here are some general guidelines for which SlowBots will work as expected: * If you're running SlowBots for a CL for one of the <code>golang.org/x/$REPO</code> repositories, then all the <code>x_$REPO-.*</code> builders will work as expected. Other builds will fail. * If you're running SlowBots for a CL for the main Go repository, then every build that matches the branch the CL is for will work. For example, if you have a CL for the <code>master</code> branch, then every build with a name containing <code>gotip</code> will work as expected (<code>x_tools-gotip-linux-amd64</code>, <code>gotip-windows-amd64</code>, etc.). If you have a CL for the <code>release-branch.go1.21</code> branch, then every build with a name containing <code>go1.21</code> will work as expected (<code>x_tools-go1.21-linux-amd64</code>, <code>go1.21-windows-amd64</code>, etc.).</p> <p>TODO: Apply these guidelines as filters automatically.</p>"},{"location":"SlowBots/#pre-luci-slowbots","title":"Pre-LUCI SlowBots","text":"<p>We're currently in the middle of a migration to a new open-source CI system created by the Chromium project called LUCI. The above instructions describe how to run SlowBots on LUCI, but not all ports have been migrated to LUCI yet. In the interim, these ports are still available on the old infrastructure. Below are instructions on how to use SlowBots on the old infrastructure.</p> <ul> <li>Use the Gerrit web UI to reply and select <code>Run-TryBot</code> = <code>+1</code> instead of <code>Commit-Queue</code> = <code>+1</code>.</li> <li>Before clicking \"Send\" write a magic comment in the comment section (where it says Say something nice\u2026):</li> </ul> <pre><code>TRY=ppc64le, freebsd, netbsd-386, ios, linux-arm64-packet\n</code></pre> <p>\u2026 where the terms after <code>TRY=</code> are either:</p> <ul> <li><code>GOOS</code> (picks best one)</li> <li><code>GOARCH</code> (picks best one)</li> <li><code>GOOS-GOARCH</code> (picks best one)</li> <li><code>specific-builder-name</code> (you specify it explicitly by its exact name; see the full list at https://farmer.golang.org/builders)</li> </ul> <p>For the main Go repository, the terms after <code>TRY=</code> can also be:</p> <ul> <li><code>x/repo</code>, where <code>repo</code> is one of the golang.org/x repositories whose tests should be executed. This runs a default builder for the given repo (<code>linux-amd64</code> as of writing).</li> <li><code>x/repo@builder</code>, where <code>repo</code> is as above, and <code>builder</code> is a builder name from the builder list. This runs the specified builder for the given repo. For example, <code>x/sys@linux-arm64-aws</code>.</li> </ul> <p>When running TryBots again later, the most recent <code>TRY=</code> comment on the current patchset is used. To turn it off set <code>TRY=</code> with an empty string after the equals sign. If the current patchset doesn't have a <code>TRY=</code> comment, the most recent <code>TRY=</code> comment is used.</p>"},{"location":"SlowBots/#pitfalls-with-pre-luci-slowbots","title":"Pitfalls with Pre-LUCI SlowBots","text":"<ul> <li><code>TRY=</code> comments are ignored if they're not on the same comment that started the TryBots</li> <li>TryBots (and SlowBots) don't run if there's already a TryBot-Result</li> <li>The <code>git-codereview mail</code> tool's <code>-trybot</code> flag doesn't support this yet, so use the web UI.</li> <li>If TryBots are already running, deleting the <code>Run-TryBot+1</code> vote and re-doing it won't re-start the TryBot set, so it won't look at your TRY= line, until the next run when it's done. (But you'll need to delete the TryBot-Result somehow: manually, rebasing, uploading new version)</li> <li>If you select a builder that's offline, it'll currently just wait forever for it to show up. There's no timeout yet.</li> <li>If you specify an unknown <code>TRY=</code> token, it'll just ignore it and won't report an error.</li> <li>There's no <code>all</code> alias. That's kinda intentional, to prevent overuse that might cause the SlowBots to get even slower for everybody. But we might add it later anyway. See golang.org/issue/34501#issuecomment-544585711.</li> </ul>"},{"location":"Solaris/","title":"Go on Solaris","text":"Kernel version Architectures Initial support version Final support version SunOS 5.11 amd64 Go 1.3 * <p>* Go 1.5 or above is recommended.</p>"},{"location":"Spectre/","title":"Spectre","text":""},{"location":"Spectre/#overview","title":"Overview","text":"<p>Go 1.15 adds support for enabling code generation adjustments to mitigate the effect of two variants of the Spectre family of CPU vulnerabilities. The compiler and assembler both have a new flag <code>-spectre</code> that is given a list of Spectre mitigations to enable, as in <code>-spectre=index</code> or <code>-spectre=index,ret</code>. The special case <code>-spectre=all</code> enables all available mitigations.</p> <p>The <code>index</code> mitigation can be enabled in the compiler and changes code generation to emit protections against Spectre variant 1 (\u201cbounds check bypass\u201d). The mitigation ensures that the CPU does not access arbitrary memory, by masking the index to zero when speculating incorrectly. This change typically slows down execution by around 5-10%; the exact slowdown depends on the workload.</p> <p>The <code>ret</code> mitigation can be enabled in both the compiler and the assembler and changes code generation to emit protections against Spectre variant 2 (\u201cbranch target injection\u201d). This mitigation replaces every indirect call instructions with use of a retpoline gadget. This change typically slows down execution by around 10-15%; again, the exact slowdown depends on the workload.</p>"},{"location":"Spectre/#applicability","title":"Applicability","text":"<p>At time of writing, we do not use either of these mitigations for Go programs running at Google, nor do we anticipate doing so. They are included in the Go toolchain as a kind of \u201cdefense in depth\u201d for users with very special use cases (or significant paranoia).</p> <p>These mitigations would only be necessary when there is a potential Spectre attack against a Go program, which would require all of the following to be true. First, an attacker must be able to run arbitrary code on the same CPUs as a victim Go program containing a secret. Second, the attacker must be able to make some kind of HTTP or RPC requests to the victim Go program. Third, those requests have to trigger a potentially vulnerable code fragment to speculate into attacker-selected behavior. Most commonly this would mean using an arbitrary attacker-provided integer to index a slice or array. These three conditions are only very rarely all true at the same time.</p>"},{"location":"Spectre/#example","title":"Example","text":"<p>To build a program with both mitigations (and any future mitigations) enabled in all packages, use:</p> <pre><code>go build -gcflags=all=-spectre=all -asmflags=all=-spectre=all program\n</code></pre>"},{"location":"Spectre/#acknowledgements","title":"Acknowledgements","text":"<p>Thanks to Andrea Mambretti et al. for sharing their paper (linked below) ahead of publication. And thanks to them, Chandler Carruth, and Paul Turner for helpful discussions.</p>"},{"location":"Spectre/#references","title":"References","text":"<p>\u201cSpectre Attacks: Exploiting Speculative Execution\u201d by Paul Kocher et al. (The definitive paper.)</p> <p>\u201cSpeculative Buffer Overflows: Attacks and Defenses\u201d by Vladimir Kiriansky and Carl Waldspurger.</p> <p>\u201cRetpoline: a software construct for preventing branch-target-injection\u201d by Paul Turner.</p> <p>\u201cA Systematic Evaluation of Transient Execution Attacks and Defenses\u201d by Claudio Canella et al. (Good summary of variants.)</p> <p>\u201cSpectre is here to stay: An analysis of side-channels and speculative execution\u201d by Ross McIlroy et al. (These are not going away.)</p> <p>\u201cSpectre Returns! Speculation Attacks using the Return Stack Buffer\u201d by Esmaeil Mohammadian Koruyeh et al. (Even return prediction isn't safe.)</p> <p>\u201cSpeculative Load Hardening\u201d by Chandler Carruth. (What LLVM does to prevent speculative out-of-bounds access.)</p> <p>\u201cBypassing memory safety mechanisms through speculative control flow hijacks\u201d by Andrea Mambretti et al. (Examination of effects on memory-safe languages.)</p>"},{"location":"Spelling/","title":"Spelling","text":"<p>This page documents the spelling choices that the Go project has made for English words.</p> <p>This page is a statement of policy. Do not edit it without approval/discussion.</p> <p>Policy:</p> <ul> <li>American spellings over British spellings</li> <li>iff means \"if and only if\" (https://en.wiktionary.org/wiki/iff), but don't use it in public-facing docs (don't use in comments on exported identifiers that would show up in godoc)</li> <li>avoid Latin abbreviations in godoc</li> <li>use cancellation (two ells), not cancelation. See https://go.dev/cl/170060</li> <li>use canceled (one ell), not cancelled.</li> <li>use canceling (one ell), not cancelling.</li> <li>use marshaling, marshaled etc (single ell). See https://go.dev/cl/33017</li> <li>use white space, not whitespace.</li> </ul>"},{"location":"Style/","title":"Style","text":"<p>See CodeReviewComments, TestComments,CSSStyleGuide or Google's Go Style Guide.</p>"},{"location":"SuccessStories/","title":"Go success stories from around the web","text":"<ul> <li>A 10x Faster TypeScript</li> <li>The Way of the Gopher - Making the Switch from Node.js to Golang</li> <li>Moving a team from Scala to Go</li> <li>400 Days of Go</li> <li>From Python to Go: Migrating our entire API</li> <li>Our Experience with Golang</li> <li>The Reliability of Go</li> <li>Go at TiDB</li> <li>A Go Redirection Service</li> <li>pool.ntp.org DNS server in Go</li> <li>Juju at Canonical</li> <li>Go at bitly</li> <li>NSQ: realtime distributed message processing at scale</li> <li>CloudFlare blows hole in laws of Web physics with Go and Railgun</li> <li>Why I Like Go</li> <li>Why I Program in Go</li> <li>dl.google.com now served by Go</li> <li>Google's Go Programming Language Grows Up: Now What?</li> <li>Moving to Go</li> <li>Rob Pike: Why Learn Go?</li> <li>Why I went from Python to Go (and not node.js)</li> <li>Another go at the Next Big Language</li> <li>@tobi: \"I have now completed two projects in Go. I predict that it's going to be the dominant language for server work.\"</li> <li>@derekcollison: \"Prediction: Go will become the dominant language for systems work in IaaS, Orchestration, and PaaS in 24 months.\"</li> <li>Will Go be the new go-to programming language?</li> <li>Dr. Dobb's: Why Not Go?</li> <li>Google I/O 2012: Go in production</li> <li>Go at Cockroach Labs, cockroachdb/cockroach</li> <li>Go at Novartis</li> <li>Go at the BBC</li> <li>Go at SoundCloud</li> <li>Go at Moovweb</li> <li>Building StatHat with Go</li> <li>Go at CloudFlare</li> <li>Why you PHP guys should learn Golang</li> <li>I/O BootCamp 2011: Real World Go</li> <li>Go at Heroku</li> <li>Go at Basecamp</li> <li>Go at Streetspotr</li> <li>Confession From A Go Programer</li> <li>Why we chose Go over C for updating embedded Linux devices</li> <li>List of Tech Migrations</li> <li>Making the move from Scala to Go, and why we\u2019re not going back</li> <li>Go + Services = One Goliath Project - Khan Academy's Python Monolith to Go Microservices</li> <li>Why we switched from Python to Go at Stream</li> <li>A journey from Node to GoLang</li> <li>Ready - Steady - Go: A complete IoT platform in Go</li> </ul> <p>See also GoUsers.</p>"},{"location":"Switch/","title":"Switch","text":"<p>Spec: https://go.dev/ref/spec#Switch_statements</p> <p>Go's <code>switch</code> statements are pretty neat. For one thing, you don't need to break at the end of each case.</p> <pre><code>switch c {\ncase '&amp;':\n\tesc = \"&amp;amp;\"\ncase '\\'':\n\tesc = \"&amp;apos;\"\ncase '&lt;':\n\tesc = \"&amp;lt;\"\ncase '&gt;':\n\tesc = \"&amp;gt;\"\ncase '\"':\n\tesc = \"&amp;quot;\"\ndefault:\n\tpanic(\"unrecognized escape character\")\n}\n</code></pre> <p>src/pkg/html/escape.go</p>"},{"location":"Switch/#not-just-integers","title":"Not just integers","text":"<p>Switches work on values of any type.</p> <pre><code>switch syscall.OS {\ncase \"windows\":\n\tsd = &amp;sysDir{\n\t\tGetenv(\"SystemRoot\") + `\\system32\\drivers\\etc`,\n\t\t[]string{\n\t\t\t\"hosts\",\n\t\t\t\"networks\",\n\t\t\t\"protocol\",\n\t\t\t\"services\",\n\t\t},\n\t}\ncase \"plan9\":\n\tsd = &amp;sysDir{\n\t\t\"/lib/ndb\",\n\t\t[]string{\n\t\t\t\"common\",\n\t\t\t\"local\",\n\t\t},\n\t}\ndefault:\n\tsd = &amp;sysDir{\n\t\t\"/etc\",\n\t\t[]string{\n\t\t\t\"group\",\n\t\t\t\"hosts\",\n\t\t\t\"passwd\",\n\t\t},\n\t}\n}\n</code></pre>"},{"location":"Switch/#missing-expression","title":"Missing expression","text":"<p>In fact, you don't need to switch on anything at all. A switch with no value means \"switch true\", making it a cleaner version of an if-else chain, as in this example from Effective Go:</p> <pre><code>func unhex(c byte) byte {\n\tswitch {\n\tcase '0' &lt;= c &amp;&amp; c &lt;= '9':\n\t\treturn c - '0'\n\tcase 'a' &lt;= c &amp;&amp; c &lt;= 'f':\n\t\treturn c - 'a' + 10\n\tcase 'A' &lt;= c &amp;&amp; c &lt;= 'F':\n\t\treturn c - 'A' + 10\n\t}\n\treturn 0\n}\n</code></pre>"},{"location":"Switch/#break","title":"Break","text":"<p>Go's <code>switch</code> statements <code>break</code> implicitly, but <code>break</code> is still useful:</p> <pre><code>command := ReadCommand()\nargv := strings.Fields(command)\nswitch argv[0] {\ncase \"echo\":\n\tfmt.Print(argv[1:]...)\ncase \"cat\":\n\tif len(argv) &lt;= 1 {\n\t\tfmt.Println(\"Usage: cat &lt;filename&gt;\")\n\t\tbreak\n\t}\n\tPrintFile(argv[1])\ndefault:\n\tfmt.Println(\"Unknown command; try 'echo' or 'cat'\")\n}\n</code></pre>"},{"location":"Switch/#fall-through","title":"Fall through","text":"<p>To fall through to a subsequent case, use the <code>fallthrough</code> keyword:</p> <pre><code>v := 42\nswitch v {\ncase 100:\n\tfmt.Println(100)\n\tfallthrough\ncase 42:\n\tfmt.Println(42)\n\tfallthrough\ncase 1:\n\tfmt.Println(1)\n\tfallthrough\ndefault:\n\tfmt.Println(\"default\")\n}\n// Output:\n// 42\n// 1\n// default\n</code></pre> <p>Another example:</p> <p><pre><code>// Unpack 4 bytes into uint32 to repack into base 85 5-byte.\nvar v uint32\nswitch len(src) {\ndefault:\n\tv |= uint32(src[3])\n\tfallthrough\ncase 3:\n\tv |= uint32(src[2]) &lt;&lt; 8\n\tfallthrough\ncase 2:\n\tv |= uint32(src[1]) &lt;&lt; 16\n\tfallthrough\ncase 1:\n\tv |= uint32(src[0]) &lt;&lt; 24\n}\n</code></pre> src/pkg/encoding/ascii85/ascii85.go</p> <p>The 'fallthrough' must be the last thing in the case; you can't write something like</p> <p><pre><code>switch {\ncase f():\n\tif g() {\n\t\tfallthrough // Does not work!\n\t}\n\th()\ndefault:\n\terror()\n}\n</code></pre> However, you can work around this by using a 'labeled' <code>fallthrough</code>:</p> <p><pre><code>switch {\ncase f():\n\tif g() {\n\t\tgoto nextCase // Works now!\n\t}\n\th()\n    break\nnextCase:\n    fallthrough\ndefault:\n\terror()\n}\n</code></pre> Note: <code>fallthrough</code> does not work in type switch.</p>"},{"location":"Switch/#multiple-cases","title":"Multiple cases","text":"<p>If you want to use multiple values in the same case, use a comma-separated list.</p> <pre><code>func letterOp(code int) bool {\n\tswitch chars[code].category {\n\tcase \"Lu\", \"Ll\", \"Lt\", \"Lm\", \"Lo\":\n\t\treturn true\n\t}\n\treturn false\n}\n</code></pre>"},{"location":"Switch/#type-switch","title":"Type switch","text":"<p>With a type switch you can switch on the type of an interface value (only):</p> <pre><code>func typeName(v interface{}) string {\n\tswitch v.(type) {\n\tcase int:\n\t\treturn \"int\"\n\tcase string:\n\t\treturn \"string\"\n\tdefault:\n\t\treturn \"unknown\"\n\t}\n}\n</code></pre> <p>You can also declare a variable and it will have the type of each <code>case</code>:</p> <pre><code>func do(v interface{}) string {\n\tswitch u := v.(type) {\n\tcase int:\n\t\treturn strconv.Itoa(u*2) // u has type int\n\tcase string:\n\t\tmid := len(u) / 2 // split - u has type string\n\t\treturn u[mid:] + u[:mid] // join\n\t}\n\treturn \"unknown\"\n}\n\ndo(21) == \"42\"\ndo(\"bitrab\") == \"rabbit\"\ndo(3.142) == \"unknown\"\n</code></pre>"},{"location":"Switch/#noop-case","title":"Noop case","text":"<p>Sometimes it useful to have cases that require no action. This can look confusing, because it can appear that both the noop case and the subsequent case have the same action, but isn't so.</p> <pre><code>func pluralEnding(n int) string {\n\tending := \"\"\n\n\tswitch n {\n\tcase 1:\n\tdefault:\n\t\tending = \"s\"\n\t}\n\n\treturn ending\n}\n\nfmt.Sprintf(\"foo%s\\n\", pluralEnding(1))  == \"foo\"\nfmt.Sprintf(\"bar%s\\n\", pluralEnding(2))  == \"bars\"\n</code></pre>"},{"location":"TableDrivenTests/","title":"TableDrivenTests","text":""},{"location":"TableDrivenTests/#introduction","title":"Introduction","text":"<p>Writing good tests is not trivial, but in many situations a lot of ground can be covered with table-driven tests: Each table entry is a complete test case with inputs and expected results, and sometimes with additional information such as a test name to make the test output easily readable.  If you ever find yourself using copy and paste when writing a test, think about whether refactoring into a table-driven test or pulling the copied code out into a helper function might be a better option.</p> <p>Given a table of test cases, the actual test simply iterates through all table entries and for each entry performs the necessary tests. The test code is written once and amortized over all table entries, so it makes sense to write a careful test with good error messages.</p> <p>Table driven testing is not a tool, package or anything else, it's just a way and perspective to write cleaner tests. </p>"},{"location":"TableDrivenTests/#example-of-a-table-driven-test","title":"Example of a table driven test","text":"<p>Here is a good example from the testing code for the <code>fmt</code> package ( https://pkg.go.dev/fmt/ ):</p> <pre><code>var flagtests = []struct {\n\tin  string\n\tout string\n}{\n\t{\"%a\", \"[%a]\"},\n\t{\"%-a\", \"[%-a]\"},\n\t{\"%+a\", \"[%+a]\"},\n\t{\"%#a\", \"[%#a]\"},\n\t{\"% a\", \"[% a]\"},\n\t{\"%0a\", \"[%0a]\"},\n\t{\"%1.2a\", \"[%1.2a]\"},\n\t{\"%-1.2a\", \"[%-1.2a]\"},\n\t{\"%+1.2a\", \"[%+1.2a]\"},\n\t{\"%-+1.2a\", \"[%+-1.2a]\"},\n\t{\"%-+1.2abc\", \"[%+-1.2a]bc\"},\n\t{\"%-1.2abc\", \"[%-1.2a]bc\"},\n}\nfunc TestFlagParser(t *testing.T) {\n\tvar flagprinter flagPrinter\n\tfor _, tt := range flagtests {\n\t\tt.Run(tt.in, func(t *testing.T) {\n\t\t\ts := Sprintf(tt.in, &amp;flagprinter)\n\t\t\tif s != tt.out {\n\t\t\t\tt.Errorf(\"got %q, want %q\", s, tt.out)\n\t\t\t}\n\t\t})\n\t}\n}\n</code></pre> <p>Note the detailed error message provided with <code>t.Errorf</code>: its result and expected result are provided; the input is the subtest name. When the test fails it is immediately obvious which test failed and why, even without having to read the test code.</p> <p>A <code>t.Errorf</code> call is not an assertion. The test continues even after an error is logged. For example, when testing something with integer input, it is worth knowing that the function fails for all inputs, or only for odd inputs, or for powers of two.</p>"},{"location":"TableDrivenTests/#using-a-map-to-store-test-cases","title":"Using a Map to Store Test Cases","text":"<p>In the previous example, tests cases were stored in a slice of structs.  They can be stored in a map as well and there are several advantages to doing it this way.</p> <pre><code>tests := map[string]struct {\n  input string\n  result string\n} {\n  \"empty string\":  {\n    input: \"\",\n    result: \"\",\n  },\n  \"one character\": {\n    input: \"x\",\n    result: \"x\",\n  },\n  \"one multi byte glyph\": {\n    input: \"\ud83c\udf89\",\n    result: \"\ud83c\udf89\",\n  },\n  \"string with multiple multi-byte glyphs\": {\n    input: \"\ud83e\udd73\ud83c\udf89\ud83d\udc36\",\n    result: \"\ud83d\udc36\ud83c\udf89\ud83e\udd73\",\n  },\n}\n\nfor name, test := range tests {\n  // test := test // NOTE: uncomment for Go &lt; 1.22, see /doc/faq#closures_and_goroutines\n  t.Run(name, func(t *testing.T) {\n    t.Parallel()\n    if got, expected := reverse(test.input), test.result; got != expected {\n      t.Fatalf(\"reverse(%q) returned %q; expected %q\", test.input, got, expected)\n    }\n  })\n}\n</code></pre> <p>One advantage of using maps is that the \"name\" of each test can simply be the map index.</p> <p>More importantly, map iteration order isn't specified nor is it even guaranteed to be the same from one iteration to the next.  This ensures that each test is independent of the others and that testing order doesn't impact results.</p>"},{"location":"TableDrivenTests/#parallel-testing","title":"Parallel Testing","text":"<p>Parallelizing table tests is simple, but requires precision to avoid bugs. Please note closely the three changes below, especially the re-declaration of <code>test</code></p> <pre><code>package main\n\nimport (\n\t\"testing\"\n)\n\nfunc TestTLog(t *testing.T) {\n\tt.Parallel() // marks TLog as capable of running in parallel with other tests\n\ttests := []struct {\n\t\tname string\n\t}{\n\t\t{\"test 1\"},\n\t\t{\"test 2\"},\n\t\t{\"test 3\"},\n\t\t{\"test 4\"},\n\t}\n\tfor _, test := range tests {\n    // test := test // NOTE: uncomment for Go &lt; 1.22, see /doc/faq#closures_and_goroutines\n\t\tt.Run(test.name, func(t *testing.T) {\n\t\t\tt.Parallel() // marks each test case as capable of running in parallel with each other \n\t\t\tt.Log(test.name)\n\t\t})\n\t}\n}\n</code></pre>"},{"location":"TableDrivenTests/#references","title":"References","text":"<ul> <li>https://go.dev/doc/code#Testing</li> <li>https://go.dev/doc/faq#assertions</li> <li>https://go.dev/doc/faq#testing_framework</li> <li>https://pkg.go.dev/testing/</li> </ul>"},{"location":"TargetSpecific/","title":"Target-Specific Code","text":"<p>Sometimes, for performance or compatibility reasons, custom code needs to be written for specific GOARCH and GOOS targets. This page presents some best practices to adopt in that case. It is a required policy for crypto packages as of April 2019.</p> <ol> <li> <p>Minimize code in tagged files. As much code as possible should build for every target. In particular, the generic Go implementation must build also for targets that have an optimized implementation. This is critical for testing the optimized code against the generic Go, and makes it quicker to notice some build failures. The linker will drop unused code from final binaries.</p> </li> <li> <p>Name files after their tags, like <code>poly1305_amd64.go</code>. Remember that if a file ends in <code>_$GOARCH.go</code>, that counts as a build tag. <code>_noasm.go</code> is also a good suffix.</p> </li> <li> <p>No exported functions in tagged files. Exported functions define the public API and its documentation, which must be the same across all targets. Having exported functions repeated in each target-specific file makes it likely for them to get out of sync. The mid-stack inliner will probably take care of some of the performance cost.</p> </li> <li> <p>Test all available implementations. Running <code>go test</code> on a target that has an optimized implementation should test both the generic and the optimized code. You can use sub-tests for this. Ideally, benchmarks too.</p> </li> <li> <p>Write comparative test. There should be a test which runs the two implementations for random or edge inputs, and compares the results. As #19109 progresses, these should be fuzz tests.</p> </li> </ol> <p>Tip: you can test that your code and tests compile for a target easily by running e.g. <code>GOARCH=arm64 go test -c</code>.</p>"},{"location":"TargetSpecific/#example","title":"Example","text":"<p>poly1305.go</p> <pre><code>package poly1305\n\n// Sum generates an authenticator for m using a one-time key and puts the\n// 16-byte result into out. Authenticating two different messages with the same\n// key allows an attacker to forge messages at will.\nfunc Sum(out *[16]byte, m []byte, key *[32]byte) {\n\tsum(out, m, key)\n}\n\nfunc sumGeneric(out *[16]byte, m []byte, key *[32]byte) {\n\t// ...\n}\n</code></pre> <p>poly1305_amd64.go</p> <pre><code>//go:build !purego\n\npackage poly1305\n\n//go:noescape\nfunc sum(out *[16]byte, m []byte, key *[32]byte)\n</code></pre> <p>poly1305_amd64.s</p> <pre><code>//go:build !purego\n\n// func sum(out *[16]byte, m []byte, key *[32]byte)\nTEXT \u00b7sum(SB), $0-128\n\t// ...\n</code></pre> <p>poly1305_noasm.go</p> <pre><code>//go:build !amd64 || purego\n\npackage poly1305\n\nfunc sum(out *[16]byte, m []byte, key *[32]byte) {\n\tsumGeneric(out, m, key)\n}\n</code></pre> <p>poly1305_test.go</p> <pre><code>package poly1305\n\nimport \"testing\"\n\nfunc testSum(t *testing.T, sum func(tag *[16]byte, msg []byte, key *[32]byte)) {\n\t// ...\n}\n\nfunc TestSum(t *testing.T) {\n\tt.Run(\"Generic\", func(t *testing.T) { testSum(t, sumGeneric) })\n\tt.Run(\"Native\", func(t *testing.T) { testSum(t, sum) })\n}\n\n// TestSumCompare checks the output of sum against sumGeneric.\nfunc TestSumCompare(t *testing.T) {\n\t// ...\n}\n</code></pre> <p>For more complete examples see the x/crypto/poly1305 and x/crypto/salsa20/salsa packages.</p>"},{"location":"TestComments/","title":"Go Test Comments","text":"<p>This page is a supplement to Go Code Review Comments, but is targeted specifically to test code.</p> <p>Please discuss changes before editing this page, even minor ones. Many people have opinions and this is not the place for edit wars.</p> <ul> <li>Assert Libraries</li> <li>Choose Human-Readable Subtest Names</li> <li>Compare Stable Results</li> <li>Compare Full Structures</li> <li>Equality Comparison and Diffs</li> <li>Got before Want</li> <li>Identify the Function</li> <li>Identify the Input</li> <li>Keep Going</li> <li>Mark Test Helpers</li> <li>Print Diffs</li> <li>Table-Driven Tests vs Multiple Test Functions</li> <li>Test Error Semantics</li> </ul>"},{"location":"TestComments/#assert-libraries","title":"Assert Libraries","text":"<p>Avoid the use of 'assert' libraries to help your tests. Go developers arriving from xUnit frameworks often want to write code like:</p> <pre><code>assert.IsNotNil(t, \"obj\", obj)\nassert.StringEq(t, \"obj.Type\", obj.Type, \"blogPost\")\nassert.IntEq(t, \"obj.Comments\", obj.Comments, 2)\nassert.StringNotEq(t, \"obj.Body\", obj.Body, \"\")\n</code></pre> <p>but this either stops the test early (if assert calls <code>t.Fatalf</code> or <code>panic</code>) or omits interesting information about what the test got right. It also forces the assert package to create a whole new sub-language instead of reusing the existing programming language (Go itself). Go has good support for printing structures, so a better way to write this code is:</p> <pre><code>if obj == nil || obj.Type != \"blogPost\" || obj.Comments != 2 || obj.Body == \"\" {\n    t.Errorf(\"AddPost() = %+v\", obj)\n}\n</code></pre> <p>Assert libraries make it too easy to write imprecise tests and inevitably end up duplicating features already in the language, like expression evaluation, comparisons, sometimes even more. Strive to write tests that are precise both about what went wrong and what went right, and make use of Go itself instead of creating a mini-language inside Go.</p>"},{"location":"TestComments/#choose-human-readable-subtest-names","title":"Choose Human-Readable Subtest Names","text":"<p>When you use <code>t.Run</code> to create a subtest, the first argument is used as a descriptive name for the test. To ensure that test results are legible to humans reading the logs, choose subtest names that will remain useful and readable after escaping. (The test runner replaces spaces with underscores, and it escapes non-printing characters).</p> <p>To identify the inputs, use <code>t.Log</code> in the body of the subtest or include them in the test's failure messages, where they won't be escaped by the test runner.</p>"},{"location":"TestComments/#compare-full-structures","title":"Compare Full Structures","text":"<p>If your function returns a struct, don't write test code that performs an individual comparison for each field of the struct. Instead, construct the struct that you're expecting your function to return, and compare in one shot using diffs or deep comparisons. The same rule applies to arrays and maps.</p> <p>If your struct needs to be compared for approximate equality or some other kind of semantic equality, or it contains fields that cannot be compared for equality (e.g. if one of the fields is an <code>io.Reader</code>), tweaking a <code>cmp.Diff</code> or <code>cmp.Equal</code> comparison with cmpopts options such as <code>cmpopts.IgnoreInterfaces</code> may meet your needs (example); otherwise, this technique just won't work, so do whatever works.</p> <p>If your function returns multiple return values, you don't need to wrap those in a struct before comparing them. Just compare the return values individually and print them.</p>"},{"location":"TestComments/#compare-stable-results","title":"Compare Stable Results","text":"<p>Avoid comparing results that may inherently depend on output stability of some external package that you do not control. Instead, the test should compare on semantically relevant information that is stable and resistant to changes in your dependencies. For functionality that returns a formatted string or serialized bytes, it is generally not safe to assume that the output is stable.</p> <p>For example, <code>json.Marshal</code> makes no guarantee about the exact bytes that it may emit. It has the freedom to change (and has changed in the past) the output. Tests that perform string equality on the exact JSON string may break if the <code>json</code> package changes how it serializes the bytes. Instead, a more robust test would parse the contents of the JSON string and ensure that it is semantically equivalent to some expected data structure.</p>"},{"location":"TestComments/#equality-comparison-and-diffs","title":"Equality Comparison and Diffs","text":"<p>The <code>==</code> operator evaluates equality using the language-defined comparisons. Values it can compare include numeric, string, and pointer values and structs with fields of those values. In particular, it determines two pointers to be equal only if they point to the same variable.</p> <p>Use the cmp package. Use <code>cmp.Equal</code> for equality comparison and <code>cmp.Diff</code> to obtain a human-readable diff between objects.</p> <p>Although the <code>cmp</code> package is not part of the Go standard library, it is maintained by the Go team and should produce stable results across Go version updates. It is user-configurable and should serve most comparison needs.</p> <p>You will find older code using the standard <code>reflect.DeepEqual</code> function to compare complex structures. Prefer <code>cmp</code> for new code, and consider updating older code to use <code>cmp</code> where practical. <code>reflect.DeepEqual</code> is sensitive to changes in unexported fields and other implementation details.</p> <p>NOTE: The <code>cmp</code> package can also be used with protocol buffer messages, by including the <code>cmp.Comparer(proto.Equal)</code> option when comparing protocol buffer messages.</p>"},{"location":"TestComments/#got-before-want","title":"Got before Want","text":"<p>Test outputs should output the actual value that the function returned before printing the value that was expected. A usual format for printing test outputs is \"<code>YourFunc(%v) = %v, want %v</code>\".</p> <p>For diffs, directionality is less apparent, and thus it is important to include a key to aid in interpreting the failure. See Print Diffs.</p> <p>Whichever order you use in your failure messages, you should explicitly indicate the ordering as a part of the failure message, because existing code is inconsistent about the ordering.</p>"},{"location":"TestComments/#identify-the-function","title":"Identify the Function","text":"<p>In most tests, failure messages should include the name of the function that failed, even though it seems obvious from the name of the test function.</p> <p>Prefer:</p> <pre><code>t.Errorf(\"YourFunc(%v) = %v, want %v\", in, got, want)\n</code></pre> <p>and not:</p> <pre><code>t.Errorf(\"got %v, want %v\", got, want)\n</code></pre>"},{"location":"TestComments/#identify-the-input","title":"Identify the Input","text":"<p>In most tests, your test failure messages should include the function inputs if they are short. If the relevant properties of the inputs are not obvious (for example, because the inputs are large or opaque), you should name your test cases with a description of what's being tested, and print the description as part of your error message.</p> <p>Do not use the index of the test in the test table as a substitute for naming your tests or printing the inputs. Nobody wants to go through your test table and count the entries in order to figure out which test case is failing.</p>"},{"location":"TestComments/#keep-going","title":"Keep Going","text":"<p>Even after your test cases encounter a failure, they should keep going for as long as possible in order to print out all of the failed checks in a single run. This way, someone who's fixing the failing test doesn't have to play whac-a-mole, fixing one bug and then re-running the test to find the next bug.</p> <p>On a practical level, prefer calling <code>t.Error</code> over <code>t.Fatal</code>. When comparing several different properties of a function's output, use <code>t.Error</code> for each of those comparisons.</p> <p><code>t.Fatal</code> is usually only appropriate when some piece of test setup fails, without which you cannot run the test at all. In a table-driven test, <code>t.Fatal</code> is appropriate for failures that set up the whole test function before the test loop. Failures that affect a single entry in the test table, which make it impossible to continue with that entry, should be reported as follows:</p> <ul> <li>If you're not using <code>t.Run</code> subtests, you should use <code>t.Error</code> followed by a     <code>continue</code> statement to move on to the next table entry.</li> <li>If you're using subtests (and you're inside a call to <code>t.Run</code>), then     <code>t.Fatal</code> ends the current subtest and allows your test case to progress to     the next subtest, so use <code>t.Fatal</code>.</li> </ul>"},{"location":"TestComments/#mark-test-helpers","title":"Mark Test Helpers","text":"<p>A test helper is a function that performs a setup or teardown task, such as constructing an input message, that does not depend on the code under test.</p> <p>If you pass a <code>*testing.T</code>, call <code>t.Helper</code> to attribute failures in the test helper to the line where the helper is called.</p> <pre><code>func TestSomeFunction(t *testing.T) {\n  golden := readFile(t, \"testdata/golden.txt\")\n  // ...\n}\n\nfunc readFile(t *testing.T, filename string) string {\n  t.Helper()\n\n  contents, err := ioutil.ReadFile(filename)\n  if err != nil {\n    t.Fatal(err)\n  }\n\n  return string(contents)\n}\n</code></pre> <p>Do not use this pattern when it obscures the connection between a test failure and the conditions that led to it. Specifically, <code>t.Helper</code> should not be used to implement assert libraries.</p>"},{"location":"TestComments/#print-diffs","title":"Print Diffs","text":"<p>If your function returns large output then it can be hard for someone reading the failure message to find the differences when your test fails. Instead of printing both the returned value and the wanted value, make a diff.</p> <p>Add some text to your failure message explaining the direction of the diff.</p> <p>Something like \"<code>diff -want +got</code>\" is good when you're using the <code>cmp</code> package (if you pass <code>(want, got)</code> to the function), because the <code>-</code> and <code>+</code> that you add to your format string will match the <code>+</code> and <code>-</code> that actually appear at the beginning of the diff lines.</p> <p>The diff will span multiple lines, so you should print a newline before you print the diff.</p>"},{"location":"TestComments/#table-driven-tests-vs-multiple-test-functions","title":"Table-Driven Tests vs Multiple Test Functions","text":"<p>Table-driven tests should be used whenever many different test cases can be tested using similar testing logic, for example when testing whether the actual output of a function is equal to the expected output example, or when testing whether the outputs of a function always conform to the same set of invariants.</p> <p>When some test cases need to be checked using different logic from other test cases, it is more appropriate to write multiple test functions. The logic of your test code can get difficult to understand when every entry in a table has to be subjected to multiple kinds of conditional logic to do the right kind of output check for the right kind of input. If they have different logic but identical setup, a sequence of subtests within a single test function might also make sense.</p> <p>You can combine table-driven tests with multiple test functions. For example, if you're testing that a function's non-error output exactly matches the expected output, and you're also testing that the function returns some non-nil error when it gets invalid input, then the clearest unit tests can be achieved by writing two separate table-driven test functions \u2014 one for normal non-error outputs, and one for error outputs.</p>"},{"location":"TestComments/#test-error-semantics","title":"Test Error Semantics","text":"<p>When a unit test performs string comparisons or uses <code>reflect.DeepEqual</code> to check that particular kinds of errors are returned for particular inputs, you may find that your tests are fragile if you have to reword any of those error messages in the future. Since this has the potential to turn your unit test into a change detector, don't use string comparison to check what type of error your function returns.</p> <p>It's OK to use string comparisons to check that error messages coming from the package under test satisfy some property, for example, that it includes the parameter name.</p> <p>If you care about testing the exact type of error that your functions return, you should separate the error string intended for human eyes from the structure that is exposed for programmatic use. In this case, you should avoid using <code>fmt.Errorf</code>, which tends to destroy semantic error information.</p> <p>Many people who write APIs don't care exactly what kinds of errors their API returns for different inputs. If your API is like this, then it is sufficient to create error messages using <code>fmt.Errorf</code>, and then in the unit test, test only whether the error was non-nil when you expected an error.</p>"},{"location":"TestFailures/","title":"Test Failures","text":"<p>If you notice a failure in a test in the Go project, what should you do?</p>"},{"location":"TestFailures/#goals-of-testing","title":"Goals of testing","text":"<p>The goal of writing (and running) tests for a Go package is to learn about the behavior of that package and its dependencies.</p> <p>A test failure for a Go package may give us information about: * implementation defects in the package or its dependencies, * mistaken assumptions about the package API, * bugs in the test itself (such as invalid assumptions about timing), * unexpectedly high resource requirements (such as RAM or CPU time), or * bugs in the underlying platform or defects in the test infrastructure (which   may need to be escalated or worked around).</p> <p>In some cases, the cause of a test failure might not be clear: it might be caused by more than one of the above conditions. Much like repeating a scientific experiment, allowing a test to fail multiple times can sometimes provide more information from the specific pattern of failures.</p> <p>However, if a test fails without telling us anything new, then the test is not fulfilling its purpose.</p>"},{"location":"TestFailures/#finding-test-failures","title":"Finding test failures","text":"<p>A test failure is typically noticed from: * the Go build dashboard, especially during builder   triage; * TryBot or SlowBot failures on a pending   change; * running <code>go test</code> on a specific package or packages, either working within a   Go project repository or as part of (say) <code>go test all</code> in a user's own   module; * or running <code>all.bash</code> or <code>all.bat</code> when installing from   source or testing a contributed   change.</p>"},{"location":"TestFailures/#triaging-a-test-failure","title":"Triaging a test failure","text":"<p>Once we have noticed a failure, we need to triage it. The goal of triage is to identify:</p> <ol> <li>Is the information from the failure new?</li> <li>Who is best equipped to analyze the new information from the failure?</li> </ol>"},{"location":"TestFailures/#identifying-new-information","title":"Identifying new information","text":"<p>Start by searching the open issues for key details from the failure, such as the name of the failing test and/or other distinctive fragments of the error text (such as error codes).</p> <p>If you find an existing issue, first check the issue discussion to see whether the failure has already been fixed, and whether the information from your failure contributes relevant new information. If so, comment on it with details: * describe what Go version you were testing (<code>go version</code>) * how and where you were running the test, such as:    * <code>go env</code> output    * your machine and OS configuration    * your network configuration and status * whether or how often you are able to reproduce the failure.</p> <p>Ideally, attach or link to the full test logs (possibly in a <code>&lt;details&gt;</code> block).</p> <p>If you don't find an existing issue, file a new one.</p>"},{"location":"TestFailures/#filing-an-issue","title":"Filing an issue","text":"<p>Paste in enough of the test log for future reporters to be able to search for the issue, including the name of the test and any distinctive parts of its log output. (If the test log is long \u2014 such as if it contains a large goroutine dump \u2014 consider posting a shorter excerpt and/or enclosing the complete failure message in a <code>&lt;details&gt;</code> block.)</p> <p>You can use the <code>fetchlogs</code> and <code>greplogs</code> tools to search for similar failures in the build dashboard:</p> <p><pre><code># download recent logs\nfetchlogs -n 1024 -repo all\n</code></pre> <pre><code># search logs for some regexp describing the failure message\ngreplogs -l -e $FAILURE_REGEXP\n</code></pre></p> <p>If the failure appears to be specific to a package, consult https://dev.golang.org/owners to find the maintainers of that package and mention them on the issue. (If no owners are listed for the package, check the recent history of the package at https://cs.opensource.google/go and/or escalate to someone who can help to identify a relevant owner \u2014 and consider updating the owners table with what you learn!)</p> <p>If the failure appears to be specific to a <code>GOOS</code> or <code>GOARCH</code> label the issue with the corresponding GOOS and/or GOARCH labels, and mention the relevant subteam(s) of @golang/port-maintainers on the issue.</p> <p>If the failure appears to affect at least one first class port, add the issue to the current release milestone and label it <code>release-blocker</code>. Otherwise, add the issue to the <code>Backlog</code> milestone.</p> <p>If the failure appears to be specific to a builder (such as a network connectivity issue, or a platform bug requiring a system update), consult <code>x/build/dashboard/builders.go</code> to find the maintainer for that builder and mention them on the issue. (For builders without an explicit maintainer listed, instead mention the @golang/release team.)</p>"},{"location":"TestFailures/#addressing-a-test-failure","title":"Addressing a test failure","text":"<p>Once an issue has been filed for a test failure, the relevant package, port, and/or builder maintainers should examine the information gleaned from the test failure and decide how to address it, by doing one or more of:</p> <ul> <li>revert a change to the code or the test infrastructure believed to have   introduced the problem,</li> <li>fix (or apply a workaround for) the root cause of the failure,</li> <li>collect more information, by subscribing to issue updates and/or running   more tests,</li> <li>report an underlying defect in a dependency, platform, or test   infrastructure, and/or</li> <li>deprioritize the failure, by skipping the failure on affected platforms (or   marking those platforms as broken) and then moving the issue to a future or   <code>Backlog</code> milestone and/or removing the <code>release-blocker</code> label.</li> </ul> <p>When a maintainer decides to deprioritize a test failure, they determine that additional failures of the test will not provide useful new information. At that point, the test no longer fulfills its purpose, and the maintainer should suppress the failure \u2014 typically by adding a call to <code>testenv.SkipFlaky</code> or <code>t.Skipf</code>.</p>"},{"location":"TestFailures/#skipping-a-test-failure","title":"Skipping a test failure","text":"<p>When we add a call to <code>testenv.SkipFlaky</code>, our goal is to eliminate failure modes that do not provide new information while still preserving as much of the value of the test as is feasible.</p> <ul> <li> <p>If the observed failure is only one of several possible failure modes for   the test, skip the test only for that failure mode.</p> </li> <li> <p>For example, if the error is always something specific like      <code>syscall.ECONNRESET</code>, use <code>errors.Is</code> to check for that specific error.</p> </li> <li> <p>If the failure is believed to affect all versions of a particular <code>GOOS</code>   and/or <code>GOARCH</code>, or the affected versions cannot be identified, check against   <code>runtime.GOOS</code> and/or <code>runtime.GOARCH</code> and skip only the affected platform.</p> </li> <li> <p>If the failure is due to a bug on a specific version of a platform, skip the   test based on <code>testenv.Builder</code> or the <code>GO_BUILDER_NAME</code> environment variable.   (If the test fails for external Go users, they have the option to upgrade to   an unaffected version of the platform \u2014 and they probably ought to see the   test failure to find out that the bug exists!)</p> </li> <li> <p>Also consider adding another environment variable that users and contributors      can set to acknowledge the bug and suppress the failure.</p> </li> </ul>"},{"location":"TestFailures/#marking-a-builder-or-port-as-broken","title":"Marking a builder or port as broken","text":"<p>A platform bug or bug in a core package (such as <code>os</code>, <code>net</code>, or <code>runtime</code>) may impact so many tests that the failures are not feasible to skip, or may manifest as a failure at compile or link time. If such a bug occurs, the options are more limited: if we cannot revert a change or fix or work around the root cause, and don't need to collect more information, we can only deprioritize the failure by marking the entire builder or platform as broken.</p> <p>To mark a builder as broken, edit its configuration in <code>x/build/dashboard/builders.go</code> to add an issue in the <code>KnownIssue</code> field; note that builders with known issues will generally be skipped during dashboard triage.</p> <p>A broken builder for a first class port should have its known issue(s) labeled <code>release-blocker</code>, pending a decision to either fix the builder or drop support for the affected version of the platform.</p> <p>If all of the builders for a secondary port are broken, the port itself may be considered broken. Discussion #53060 aims to resolve the question of how broken secondary ports should be handled.</p>"},{"location":"Timeouts/","title":"Timeouts and Deadlines","text":"<p>To abandon synchronous calls that run too long, use the select statement with time.After: <pre><code>import \"time\"\n\nc := make(chan error, 1)\ngo func() { c &lt;- client.Call(\"Service.Method\", args, &amp;reply) } ()\nselect {\n  case err := &lt;-c:\n    // use err and reply\n  case &lt;-time.After(timeoutNanoseconds):\n    // call timed out\n}\n</code></pre></p> <p>Note that the channel <code>c</code> has a buffer size of 1.  If it were an unbuffered channel and the client.Call method took more than <code>timeoutNanoseconds</code>, the channel send would block forever and the goroutine would never be destroyed.</p>"},{"location":"Timeouts/#references","title":"References","text":"<p>time.After: https://pkg.go.dev/time/#After</p> <p>select: https://go.dev/ref/spec#Select_statements</p> <p>blog post: https://go.dev/blog/2010/09/go-concurrency-patterns-timing-out-and.html</p>"},{"location":"Training/","title":"Training","text":"<p>Commercial providers of Go training</p>"},{"location":"Training/#on-line","title":"On-line","text":"<ul> <li>Go Mastery - Interactive browser-based coding course focused on teaching Go's quirks and syntax</li> <li>Golang Online Courses - A collection of Go online courses from several providers</li> <li>Mastering Go Programming - A comprehensive Go video training course</li> <li>Golang Tutorials - Sathish VJ - A free online class.</li> <li>Learn Go - Codementor.io - Beginner level online class.</li> <li>Learning to Program in Go - Chris Hawkes - Free video tutorial for beginner Go programming.</li> <li>Go - Progate.com - Go fundamentals for absolute beginners.</li> <li>Go Language Programming Practical Basics Tutorial - Sentdex - Free video tutorial for Go beginners by Sentdex.</li> <li>O'Reilly Go Fundamentals - Video training series.</li> <li>Pluralsight.com - Offers around 20 classes from beginner to advanced levels.</li> <li>Master Go - A paid online video course on Go for developers</li> <li>Learn to Create Web Applications using Go - A paid online video course and book about Web programming with Go</li> <li>Golang tutorial - Learn Go from the best online golang tutorials submitted &amp; voted by the golang programming community.</li> <li>Ultimate Go Live Lessons - This is Ardan Labs classroom Go training on video.</li> <li>Go: The Complete Bootcamp Course - Learn to build real-world and idiomatic Go programs with animated video lectures and hands-on exercises</li> <li>Learn Go with Tests -  Free Test driven development (TDD) based learning of Golang. Start writing robust, well-tested systems in Go</li> </ul>"},{"location":"Training/#classroom-and-in-person","title":"Classroom and In-Person","text":"<ul> <li>Ardan Labs - Offering customized on-site live training classes.</li> <li>Bitfield Consulting - John Arundel offers remote training and mentoring in Go for individuals or teams.</li> <li>Boss Sauce Creative - Personalized or track-based Go training for teams.</li> <li>Brian Ketelsen - In-person, remote, and online training classes for individuals and companies.</li> <li>DevelopIntelligence: Golang Intro + Advanced - Custom in-person and virtual training for corporate clients.</li> <li>Golang At Speed - Generic or personalized Go training. On-site or hosted off-site. Grasp the long-tail of Golang learning.... the gotchas and the quirky idioms.. faster. </li> <li>Gopher Guides - Customized In-person, remote, and online training classes.  Training for Developers by Developers.  Lead Instructors: Mark Bates, Cory LaNou</li> <li>Shiju Varghese - On-site class room training on Go, and consulting on building distributed systems and Microservices with Go, in India.</li> <li>Magesh Kuppan - Classroom &amp; Online training on Go Programming &amp; Building Microservices in Go</li> <li>kkoehler - In-Person class trainings for Go in Germany, Austria and Swiss</li> </ul>"},{"location":"Ubuntu/","title":"Ubuntu","text":"<p>The Go project's official download page is at https://go.dev/dl.</p> <p>After downloading a binary release suitable for your system, you can install go by following the official installation instructions at https://go.dev/doc/install.</p> <p>There are some other options for Debian based systems like Ubuntu. These packages were not created by the Go project, and we don't support them, but they may be useful for you.</p>"},{"location":"Ubuntu/#using-ppa","title":"Using PPA","text":"<p>If you're using Ubuntu 18.04, 20.04, 22.04 or 24.04 (amd64, arm64 or armhf), then you can use the longsleep/golang-backports PPA and update to Go 1.25.</p> <pre><code>sudo add-apt-repository ppa:longsleep/golang-backports\nsudo apt update\nsudo apt install golang-go\n</code></pre> <p>Note that <code>golang-go</code> installs latest Go as default Go. If you do not want that, install <code>golang-1.25</code> instead and use the binaries from <code>/usr/lib/go-1.25/bin</code>.</p>"},{"location":"Ubuntu/#using-snap","title":"Using snap","text":"<p>Using snaps also works quite well.</p> <pre><code>sudo snap install --classic go\n</code></pre> <p>A restart may or may not be required for the command to be recognized depending on your system.</p>"},{"location":"Watchflakes/","title":"Watchflakes","text":"<p>Watchflakes is a program that triages apparent test flakes on the build.golang.org dashboards.</p> <p>An apparent test flake is a failure that:</p> <ul> <li>is not on a completely failing builder.</li> <li>is not on an excluded builder.</li> <li>is not running a commit that failed on 4 or more builders.</li> <li>is not part of a run of 4 or more failing commits on its builder.</li> </ul> <p>Watchflakes posts every apparent test flake to an issue in the Test Flakes project.</p> <p>Every issue description in the Test Flakes project starts with a pattern for the failures relevant to that issue: For example, the markdown for #55260's description starts with:</p> <pre><code>```\n#!watchflakes\npost &lt;- pkg == \"cmd/go\" &amp;&amp; test == \"\" &amp;&amp; `unexpected files left in tmpdir`\n```\n</code></pre> <p>Watchflakes matches every apparent test flake against the patterns in the issues:</p> <ul> <li>If a flake matches a pattern in an issue, it is posted to that issue.</li> <li>If a flake matches a pattern in multiple issues, it is posted to the lowest-numbered issue.</li> <li>If a flake does not match a pattern in any issue, watchflakes creates a new issue with a pattern matching the package and test case that failed.</li> </ul> <p>The newly created issue's pattern is often too broad and should be edited to make it more specific to the actual failure. Sending a failure to the lowest-numbered matching issue ensures that creating a broad default pattern for a new failure does not \u201csteal\u201d failures from earlier issues, nor does it spam the new issue with unrelated failures in the same test that are already separately tracked.</p> <p>Watchflakes places newly created issues in the Test Flakes project and adds the NeedsInvestigation label. These issues start out with no status (not Active, not Done). Issues with no status need to be inspected by a person, who should usually refine the pattern to capture the salient information about the failure. Issues that have been checked can then be moved to Active. GitHub automatically moves issues from Active to Done when they are closed.</p> <p>Watchflakes considers issues of any status when matching a new failure. If it finds a new failure for a closed issue, it will post the failure and reopen the issue. So it is okay to close an issue when a fix lands, instead of having to wait a few weeks to see if the failure is really gone: if a new failure arrives, the issue will be reopened automatically.</p> <p>Watchflakes maintains no state of its own: all the state is in the GitHub issues. Every time it runs, it considers the past 60 days of build dashboard failures and makes sure that every apparent flake is accounted for in the Test Flakes project. If a failure matching an issue has already been posted to that issue, watchflakes doesn't post it again, of course. And if an issue is edited to update its pattern to exclude certain failures, watchflakes doesn't remove its old posts, but it does look for a different matching issue for those failures, including possibly creating a new one.</p>"},{"location":"Watchflakes/#syntax","title":"Syntax","text":"<p>The watchflakes stanza in each issue must appear at the top of the issue description. It must be a code block (either fenced with <code>```</code> or indented), and the first line must be <code>#!watchflakes</code>, to keep watchflakes from misinterpreted unrelated code blocks.</p> <p>The rest of the block is a small watchflakes script. Comments to the end of the line are introduced with <code>#</code>. The script is a sequence of rules, each of which has the form <code>action &lt;- pattern</code> (send matches for pattern to the action).</p>"},{"location":"Watchflakes/#actions","title":"Actions","text":"<p>The actions are:</p> <ul> <li><code>post</code> posts the failure to the issue in which the script appears.</li> <li><code>skip</code> ignores the failure, throwing it on the floor. This action should be used only rarely (for example, to set policy like in #55166).</li> <li><code>default</code> is a lower-priority version of post. If an issue has a <code>post</code> or <code>skip</code> matching the failure, watchflakes does that instead.     But if there are no other matches, watchflakes considers the <code>default</code> pattern matches.     (And then if there aren't any <code>default</code> matches, watchflakes creates a new issue.)</li> </ul>"},{"location":"Watchflakes/#records","title":"Records","text":"<p>The input to the pattern is a record with named fields, each of which has a string value:</p> <ul> <li> <p><code>pkg</code> is the full import path of the package that failed to build or that failed its test.</p> </li> <li> <p><code>test</code> is the name of the test function in the package that failed.</p> </li> <li> <p><code>mode</code> is <code>build</code> or <code>test</code> depending on whether this is a build failure or a test failure.</p> </li> <li> <p><code>output</code> is the output from the failing test. This output stops just before the final <code>FAIL</code> line printed when the test binary exits.    It does not include output from other test cases that also failed in the same run,    nor any context that was printed by all.bash or the buildlet before the test started.</p> </li> <li> <p><code>log</code> is the entire failed build log.</p> </li> <li> <p><code>snippet</code> is the shortened form of <code>output</code> that will be posted to the issue itself.    Matches should almost always use <code>output</code> instead.</p> </li> <li> <p><code>builder</code> is the name of the builder that ran the test (like <code>dragonfly-amd64-622</code>).</p> </li> <li> <p><code>repo</code> is the name of the repo being tested (<code>go</code>, <code>net</code>, <code>tools</code>, \u2026).</p> </li> <li> <p><code>goos</code> is the GOOS value (<code>linux</code>, <code>windows</code>, \u2026).</p> </li> <li> <p><code>goarch</code> is the GOARCH value (<code>amd64</code>, <code>mips64le</code>, \u2026).</p> </li> <li> <p><code>date</code> is the date of the commit being tested, in the form <code>2006-01-02T15:04:05</code>.    There is no date comparison logic; use string comparisons instead.    Comparing dates should be used rarely.</p> </li> <li> <p><code>section</code> is the section of the build log in which the failure occurred.    In all.bash output, the section is introduced by <code>#####</code>,    and each of the <code>Building</code> lines during bootstrap is considered its own section as well.    In subrepos, the <code>:: Running</code> lines each introduce a section named for the go command being run    (for example <code>go test golang.org/x/tools/...</code>).</p> </li> </ul> <p>Most patterns don't need to use <code>section</code>. It is most helpful for tests in the main repo    that rerun tests with an alternate execution environment.</p>"},{"location":"Watchflakes/#patterns","title":"Patterns","text":"<p>The pattern is a boolean expression in a Go-like syntax allowing ||, &amp;&amp;, !, (, and ) for building complex expressions; ==, !=, &lt;, &lt;=, &gt;, and &gt;= for comparing fields against against string literals; and ~ and !~ for matching against regular expressions.</p> <p>All string comparisons must have a field name on the left and a double-quoted string literal on the right, as in <code>builder == \"linux-amd64-alpine\"</code> or `goos == \"</p> <p>All regular expression matches must have a field name on the left and a back-quoted string literal on the right, as in <code>builder ~ `corellium`</code>.</p> <p>A back-quoted string literal by itself is taken to be a comparison against the <code>output</code> field, which is appropriate for the vast majority of regular expressions in patterns.</p>"},{"location":"Watchflakes/#examples","title":"Examples","text":"<p>Putting this all together, here are some example scripts.</p> <pre><code>#!watchflakes\npost &lt;- pkg == \"net/http\" &amp;&amp; test == \"TestHandlerAbortRacesBodyRead\"\n</code></pre> <p>This script in #55277 was created automatically by watchflakes in response to a build run that failed in http.TestHandlerAbortRacesBodyRead. The specific failure that prompted the issue creation was a timeout. If more failures with different root cause were found in that test, it might become appropriate to add <code>&amp;&amp; `panic: test timed out`</code> or otherwise refine the pattern.</p> <pre><code>#!watchflakes\npost &lt;- goos == \"openbsd\" &amp;&amp; `unlinkat .*: operation not permitted`\n</code></pre> <p>This script in #49751 collects failures on openbsd caused by unexpected EPERM errors from os.Remove calling unlinkat. These failures cause problems in a variety of tests, so there is no condition on <code>pkg</code> or <code>test</code>.</p> <pre><code>#!watchflakes\npost &lt;- pkg ~ `^cmd/go` &amp;&amp; `appspot.com.*: 503`\n</code></pre> <p>This script in #54608 tracks network problems with 503 responses from appspot.com in any tests in the cmd/go/\u2026 package hierarchy, not just cmd/go itself.</p> <pre><code>#!watchflakes\npost &lt;- goos == \"windows\" &amp;&amp;\n        (`dnsquery: DNS server failure` || `getaddrinfow: This is usually a temporary error`)\n</code></pre> <p>This script in #55165 matches specific DNS failures in any test on builders running Windows.</p> <pre><code>#!watchflakes\npost &lt;- builder == \"darwin-arm64-12\" &amp;&amp; pkg == \"\" &amp;&amp; test == \"\"\n</code></pre> <p>This script in #55312 was created automatically by watchflakes to track failures on the darwin-arm64-12 builder that happen before a specific package test can run.</p> <pre><code>#!watchflakes\n# note: sometimes the URL is printed with one /\ndefault &lt;- `(Get|read) \"https://?(goproxy.io|proxy.golang.com.cn|goproxy.cn)`\n</code></pre> <p>This script in #55163 matches errors using certain non-standard Go proxies. It uses <code>default</code> to allow other issues to take ownership of more specific failures caused by these proxies. Failures not matching other issues go to #55163 instead of creating new issues.</p> <pre><code>#!watchflakes\ndefault &lt;- `: internal compiler error:`\n</code></pre> <p>This script in #55257 matches compiler failures in any build, no matter what package or repo is being tested. It uses <code>default</code> for the same reasons as the previous example: so that issues matching specific compiler errors can still be filed, but failures not matching other issues are grouped into #55257 instead of creating new issues assigned to the specific test that happened to trigger the problem.</p>"},{"location":"WebAccessibilityResourcesAndTips/","title":"WebAccessibilityResourcesAndTips","text":"<p>Accessibility or \"a11y\" is an increasingly important topic in web development. It is important to Go because many Go tools and resources use web technology, like godoc. Ensuring that these tools are accessible ensures that more people can use them and that more people can use Go.</p> <p>Accessibility is a large topic that ranges from the merely esoteric to the excruciatingly abstruse.</p> <p>There are, however, a number of simple rules of thumb to follow that greatly reduce the chances of creating an inaccessible page by accident: - Prefer semantic markup. The native html elements have a great deal of accessibility baked in with no need to turn anything on or turn anything off. If you have a list of things use <code>ul</code> or <code>ol</code> even if you do not want it to be displayed as a list. The extra CSS is worth it. - When using headers (<code>h1</code>-<code>h6</code>) never skip a level and make sure they nest logically so that, for example, an <code>h4</code> is a logical subsection of the previous <code>h3</code>. Screen readers use these as navigational landmarks, similar to a table of contents. - Avoid layouts that work against the source order of the document. It's very easy to rearrange element with flexbox and grid but when you do the focus order remains unchanged. Someone navigating the site by keyboard will jump from place to place seemingly at random, making it very hard to follow what's going on. - Ensure sufficient color contrast. Not everyone has perfect eyes or high quality displays. Either can make it difficult to tell where low-contrast content starts and stops. https://leaverou.github.io/contrast-ratio/ - Ensure the page is usable without color. There are many kinds of color deficiency. Some like red-green color blindness are common. Others can be quite rate. The best way to make sure everyone gets the same information is to encode information in both shape and color. For example, if you're making a dashboard for a test runner do not just have a green circle for passed and a red circle for failed: have a green check mark for passed and a red X for failed. - Have clear hover and focus styles to let the user know that an element is \"clickable\". As with the above, this should be clear even without color. - Make sure nothing breaks as you zoom in the page to 200%. Browsers are really good about handling this but are not always perfect. Users with poor vision will appreciate the effort. - Make sure the page is usable entirely by keyboard. Certain medical conditions make it hard to use a mouse or trackpad and a lot of special assistive software and hardware work by creating synthetic key events. Be very careful about elements hidden off page as they will remain in the focus order without special effort. - Ensure all non-textual elements have appropriate alternative text. (If a non-textual item is purely decorative the appropriate alternative text is the empty string.) - Avoid writing in ALL CAPS. Screen readers will always read this as an acronym and spell out each letter (<code>text-transform: uppercase</code> is fine, however, and will just add emphasis to the voice). - There are a lot of tools to help find accessibility problems (some listed below) but keep in mind that these are just linters and there are limits to static analysis. They sometimes have false positives and often have false negatives. Also keep in mind that what they are checking is the page as it appears when you run the tool.</p>"},{"location":"WebAccessibilityResourcesAndTips/#useful-browser-extensions","title":"Useful Browser Extensions","text":""},{"location":"WebAccessibilityResourcesAndTips/#firefox","title":"Firefox","text":"<ul> <li>Fangs is a screen reader emulator. It dumps all the info a screen reader would announce at once as annotated text, allowing a very quick review.</li> </ul>"},{"location":"WebAccessibilityResourcesAndTips/#chrome","title":"Chrome","text":"<p>Chrome has some quite useful built in a11y tools, but you need to enable them by going to settings &gt; experiments in the dev tools and checking \"Accessibility Inspection\". </p> <ul> <li>Google's Accessibility Developer Tools Largely integrated into the Chrome dev tools but still has some features not yet included like access to the full Accessibility Tree.</li> <li>aXe Decent static analyzer. It's the basis for the accessibility audit in Chrome Dev tools but this extension includes much more information and runs more tests. (Also available for Firefox, but has much better integration in Chrome).</li> <li>ChromeVox A full in-browser screen reader. (You will need to configure keyboard shortcuts to be able to turn it off when not in use, and you may also need to disable the extension completely when not in use as it can do some annoying thing even when not active).</li> <li>High Contrast This extension is used by people with special contrast needs. It's a good idea to run a page through each filter (and test any hover/focus states) to make sure that everything is still visible.</li> <li>Siteimprove Accessibility Checker This is the best static auditor. The extension will ask you to register for a newsletter on first use, but you do not have to\u2014just skip it.</li> <li>Spectrum Simulates various kinds of color blindness to make sure nothing on the page becomes invisible or hard to distinguish when read by a user with that specific medical condition. (For some reason this does not seem to work immediately after installation but it will after a few retries).</li> <li>Funkify An easy to use disability simulator.</li> </ul>"},{"location":"WebAccessibilityResourcesAndTips/#further-reading","title":"Further Reading","text":"<ul> <li>http://a11yproject.com/</li> <li>https://inclusive-components.design/</li> <li>https://accessibility.blog.gov.uk/</li> <li>https://www.youtube.com/playlist?list=PLNYkxOF6rcICWx0C9LVWWVqvHlYJyqw7g</li> </ul>"},{"location":"WebAssembly/","title":"WebAssembly","text":""},{"location":"WebAssembly/#introduction","title":"Introduction","text":"<p>Go 1.11 added an experimental port to WebAssembly.  Go 1.12 has improved some parts of it, with further improvements expected in Go 1.13. Go 1.21 added a new port targeting the WASI syscall API.</p> <p>WebAssembly is described on its home page as:</p> <p>WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable target for compilation of high-level languages like C/C++/Rust, enabling deployment on the web for client and server applications.</p> <p>If you're new to WebAssembly read the Getting Started section, watch some of the Go WebAssembly talks, then take a look at the Further examples below.</p>"},{"location":"WebAssembly/#javascript-goosjs-port","title":"JavaScript (GOOS=js) port","text":""},{"location":"WebAssembly/#getting-started","title":"Getting Started","text":"<p>This page assumes a functional Go 1.11 or newer installation. For troubleshooting, see the Install Troubleshooting page.</p> <p>If you are on Windows, we suggest to follow this tutorial using a BASH emulation system such as Git Bash. </p> <p>For Go 1.23 and earlier, the wasm support files needed in this article are located in <code>misc/wasm</code>, and the path should be replaced when performing operations with files such as <code>lib/wasm/wasm_exec.js</code>.</p> <p>To compile a basic Go package for the web:</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"Hello, WebAssembly!\")\n}\n</code></pre> <p>Set <code>GOOS=js</code> and <code>GOARCH=wasm</code> environment variables to compile for WebAssembly:</p> <pre><code>$ GOOS=js GOARCH=wasm go build -o main.wasm\n</code></pre> <p>That will build the package and produce an executable WebAssembly module file named main.wasm. The .wasm file extension will make it easier to serve it over HTTP with the correct Content-Type header later on.</p> <p>Note that you can only compile main packages. Otherwise, you will get an object file that cannot be run in WebAssembly. If you have a package that you want to be able to use with WebAssembly, convert it to a main package and build a binary.</p> <p>To execute main.wasm in a browser, we'll also need a JavaScript support file, and a HTML page to connect everything together.</p> <p>Copy the JavaScript support file:</p> <pre><code>cp \"$(go env GOROOT)/lib/wasm/wasm_exec.js\" .\n</code></pre> <p>Create an <code>index.html</code> file:</p> <pre><code>&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset=\"utf-8\"/&gt;\n\t\t&lt;script src=\"wasm_exec.js\"&gt;&lt;/script&gt;\n\t\t&lt;script&gt;\n\t\t\tconst go = new Go();\n\t\t\tWebAssembly.instantiateStreaming(fetch(\"main.wasm\"), go.importObject).then((result) =&gt; {\n\t\t\t\tgo.run(result.instance);\n\t\t\t});\n\t\t&lt;/script&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>If your browser doesn't yet support <code>WebAssembly.instantiateStreaming</code>, you can use a polyfill.</p> <p>Then serve the three files (<code>index.html</code>, <code>wasm_exec.js</code>, and <code>main.wasm</code>) from a web server. For example, with <code>goexec</code>:</p> <pre><code># install goexec: go install github.com/shurcooL/goexec@latest\ngoexec 'http.ListenAndServe(`:8080`, http.FileServer(http.Dir(`.`)))'\n</code></pre> <p>Or use your own basic HTTP server command.</p> <p>Note: The same major Go version of the compiler and <code>wasm_exec.js</code> support file must be used together. That is, if <code>main.wasm</code> file is compiled using Go version 1.N, the corresponding <code>wasm_exec.js</code> file must also be copied from Go version 1.N. Other combinations are not supported.</p> <p>Note: for the <code>goexec</code> command to work on Unix-like systems, you must add the path environment variable for Go to your shell's <code>profile</code>. Go's getting started guide explains this:</p> <p>Add /usr/local/go/bin to the PATH environment variable. You can do this by adding this line to your /etc/profile (for a system-wide installation) or $HOME/.profile:</p> <p><code>export PATH=$PATH:/usr/local/go/bin</code></p> <p>Note: changes made to a profile file may not apply until the next time you log into your computer</p> <p>Finally, navigate to http://localhost:8080/index.html, open the JavaScript debug console, and you should see the output. You can modify the program, rebuild <code>main.wasm</code>, and refresh to see new output.</p>"},{"location":"WebAssembly/#executing-webassembly-with-nodejs","title":"Executing WebAssembly with Node.js","text":"<p>It's possible to execute compiled WebAssembly modules using Node.js rather than a browser, which can be useful for testing and automation.</p> <p>First, make sure Node is installed and in your <code>PATH</code>.</p> <p>Then, add <code>$(go env GOROOT)/lib/wasm</code> to your <code>PATH</code>. This will allow <code>go run</code> and <code>go test</code> find <code>go_js_wasm_exec</code> in a <code>PATH</code> search and use it to just work for <code>js/wasm</code>:</p> <pre><code>$ export PATH=\"$PATH:$(go env GOROOT)/lib/wasm\"\n$ GOOS=js GOARCH=wasm go run .\nHello, WebAssembly!\n$ GOOS=js GOARCH=wasm go test\nPASS\nok  \texample.org/my/pkg\t0.800s\n</code></pre> <p>If you're running working on Go itself, this will also allow you to run <code>run.bash</code> seamlessly.</p> <p><code>go_js_wasm_exec</code> is a wrapper that allows running Go Wasm binaries in Node. By default, it may be found in the <code>lib/wasm</code> directory of your Go installation.</p> <p>If you'd rather not add anything to your <code>PATH</code>, you may also set the <code>-exec</code> flag to the location of <code>go_js_wasm_exec</code> when you execute <code>go run</code> or <code>go test</code> manually.</p> <pre><code>$ GOOS=js GOARCH=wasm go run -exec=\"$(go env GOROOT)/lib/wasm/go_js_wasm_exec\" .\nHello, WebAssembly!\n$ GOOS=js GOARCH=wasm go test -exec=\"$(go env GOROOT)/lib/wasm/go_js_wasm_exec\"\nPASS\nok  \texample.org/my/pkg\t0.800s\n</code></pre> <p>Finally, the wrapper may also be used to directly execute a Go Wasm binary:</p> <pre><code>$ GOOS=js GOARCH=wasm go build -o mybin .\n$ $(go env GOROOT)/lib/wasm/go_js_wasm_exec ./mybin\nHello, WebAssembly!\n$ GOOS=js GOARCH=wasm go test -c\n$ $(go env GOROOT)/lib/wasm/go_js_wasm_exec ./pkg.test\nPASS\nok  \texample.org/my/pkg\t0.800s\n</code></pre>"},{"location":"WebAssembly/#running-tests-in-the-browser","title":"Running tests in the browser","text":"<p>You can also use wasmbrowsertest to run tests inside your browser. It automates the job of spinning up a webserver and uses headless Chrome to run the tests inside it and relays the logs to your console.</p> <p>Same as before, just <code>go get github.com/agnivade/wasmbrowsertest</code> to get a binary. Rename that to <code>go_js_wasm_exec</code> and place it to your <code>PATH</code></p> <pre><code>$ mv $GOPATH/bin/wasmbrowsertest $GOPATH/bin/go_js_wasm_exec\n$ export PATH=\"$PATH:$GOPATH/bin\"\n$ GOOS=js GOARCH=wasm go test\nPASS\nok  \texample.org/my/pkg\t0.800s\n</code></pre> <p>Alternatively, use the <code>exec</code> test flag. <pre><code>GOOS=js GOARCH=wasm go test -exec=\"$GOPATH/bin/wasmbrowsertest\"\n</code></pre></p>"},{"location":"WebAssembly/#interacting-with-the-dom","title":"Interacting with the DOM","text":"<p>See https://pkg.go.dev/syscall/js.</p> <p>Also:</p> <ul> <li> <p><code>app</code>: A PWA-compatible, React-based framework with custom tooling.</p> </li> <li> <p><code>dom</code>: A library for streamlining DOM manipulation is in development.</p> </li> <li> <p><code>dom</code>: Go bindings for the JavaScript DOM APIs.</p> </li> <li> <p><code>domui</code>: A pure Go framework for creating complete GUI application.</p> </li> <li> <p><code>gas</code>: Components based framework for WebAssembly applications.</p> </li> <li> <p>GoWebian: A library to build pages with pure Go and add WebAssembly bindings.</p> </li> <li> <p><code>hogusuru</code>: An advanced webassembly framework that implements most of the features (including indexeddb, serviceworker, websocket and much more) of browsers directly accessible in GO.</p> </li> <li> <p>VECTY: Build responsive and dynamic web frontends in Go using WebAssembly, competing with modern web frameworks like React &amp; VueJS.</p> </li> <li> <p><code>vert</code>: WebAssembly interop between Go and JS values.</p> </li> <li> <p><code>vue</code>: The progressive framework for WebAssembly applications.</p> </li> <li> <p>Vugu: A wasm web UI library featuring HTML layout with Go for app logic, single-file components, rapid dev and prototyping workflow.</p> </li> <li> <p><code>webapi</code>: A binding generator and generated bindings for DOM, HTML, WebGL, and more.</p> </li> <li> <p><code>webgen</code>: Define components in HTML and generate Go types and constructor functions for them using <code>webapi</code>.</p> </li> </ul>"},{"location":"WebAssembly/#canvas","title":"Canvas","text":"<ul> <li>A new canvas drawing library - seems pretty efficient.<ul> <li>Simple demo</li> </ul> </li> </ul>"},{"location":"WebAssembly/#configuring-fetch-options-while-using-nethttp","title":"Configuring fetch options while using net/http","text":"<p>You can use the net/http library to make HTTP requests from Go, and they will be converted to fetch calls. However, there isn't a direct mapping between the fetch options and the http client options. To achieve this, we have some special header values that are recognized as fetch options. They are -</p> <ul> <li> <p><code>js.fetch:mode</code>: An option to the Fetch API mode setting. Valid values are: \"cors\", \"no-cors\", \"same-origin\", navigate\". The default is \"same-origin\".</p> </li> <li> <p><code>js.fetch:credentials</code>: An option to the Fetch API credentials setting. Valid values are: \"omit\", \"same-origin\", \"include\". The default is \"same-origin\".</p> </li> <li> <p><code>js.fetch:redirect</code>: An option to the Fetch API redirect setting. Valid values are: \"follow\", \"error\", \"manual\". The default is \"follow\".</p> </li> </ul> <p>So as an example, if we want to set the mode as \"cors\" while making a request, it will be something like:</p> <pre><code>req, err := http.NewRequest(\"GET\", \"http://localhost:8080\", nil)\nreq.Header.Add(\"js.fetch:mode\", \"cors\")\nif err != nil {\n  fmt.Println(err)\n  return\n}\nresp, err := http.DefaultClient.Do(req)\nif err != nil {\n  fmt.Println(err)\n  return\n}\ndefer resp.Body.Close()\n// handle the response\n</code></pre> <p>Please feel free to subscribe to #26769 for more context and possibly newer information.</p>"},{"location":"WebAssembly/#webassembly-in-chrome","title":"WebAssembly in Chrome","text":"<p>If you run a newer version of Chrome there is a flag (<code>chrome://flags/#enable-webassembly-baseline</code>) to enable Liftoff, their new compiler, which should significantly improve load times.  Further info here.</p>"},{"location":"WebAssembly/#further-examples","title":"Further examples","text":""},{"location":"WebAssembly/#general","title":"General","text":"<ul> <li>Shimmer - Image transformation in wasm using Go. Live DEMO.</li> <li>Video filtering - Filters for video from webcam (source code)</li> <li>HandyTools - Provide tools like base64 encoding/decoding, convert Unix time, etc (live DEMO)</li> </ul>"},{"location":"WebAssembly/#canvas-2d","title":"Canvas (2D)","text":"<ul> <li>GoWasm Experiments - Demonstrates   working code for several common call types<ul> <li>bouncy</li> <li>rainbow-mouse</li> <li>repulsion</li> <li>bumpy - Uses the 2d canvas, and a 2d physics engine.  Click around on the screen to create objects then watch as gravity takes hold!</li> <li>arty</li> <li>hexy (new)</li> </ul> </li> <li>Gomeboycolor-wasm<ul> <li>WASM port of an experimental Gameboy Color emulator.  The matching blog post   contains some interesting technical insights.</li> </ul> </li> <li>TinyGo canvas<ul> <li>This is compiled with TinyGo instead of standard go, resulting in a 19.37kB (compressed) wasm file.</li> </ul> </li> <li>Car and Mouse<ul> <li>A game where you gain points by leading a small canvas drawn car with your cursor</li> </ul> </li> </ul>"},{"location":"WebAssembly/#database","title":"Database","text":"<ul> <li>TiDB-Wasm - Running TiDB, a golang database in the browser on Wasm.</li> </ul>"},{"location":"WebAssembly/#webgl-canvas-3d","title":"WebGL canvas (3D)","text":"<ul> <li>Basic triangle (source code) - Creates a basic triangle in WebGL<ul> <li>Same thing, ported to TinyGo (source code) - ~14kB compressed (3% of the size of mainline Go version)</li> </ul> </li> <li>Rotating cube (source code) - Creates a rotating cube in WebGL<ul> <li>Same thing, ported to TinyGo (source code) - ~23kB compressed (4% of the size of mainline Go version)</li> </ul> </li> <li>Splashy (source code) - Click around on the screen to generate paint\u2026</li> </ul>"},{"location":"WebAssembly/#wasi-gooswasip1-port","title":"WASI (GOOS=wasip1) port","text":""},{"location":"WebAssembly/#getting-started-wasi","title":"Getting Started (WASI)","text":"<p>Go 1.21 introduced WASI as a supported platform. To build for WASI, use the <code>wasip1</code> port:</p> <pre><code>$ GOOS=wasip1 GOARCH=wasm go build -o main.wasm\n</code></pre> <p>The official blog has a helpful introduction to using the WASI port: https://go.dev/blog/wasi.</p>"},{"location":"WebAssembly/#go-webassembly-talks","title":"Go WebAssembly talks","text":"<ul> <li>Building a Calculator with Go and WebAssembly (Source code)</li> <li>Get Going with WebAssembly</li> <li>Go&amp;WebAssembly\u7b80\u4ecb - by chai2010 (Chinese)</li> <li>Go for frontend</li> </ul>"},{"location":"WebAssembly/#editor-configuration","title":"Editor configuration","text":"<ul> <li>Configuring GoLand and Intellij Ultimate for WebAssembly - Shows the exact steps needed for getting Wasm working in GoLand and Intellij Ultimate</li> </ul>"},{"location":"WebAssembly/#debugging","title":"Debugging","text":"<p>WebAssembly doesn't yet have any support for debuggers, so you'll need to use the good 'ol <code>println()</code> approach for now to display output on the JavaScript console.</p> <p>An official WebAssembly Debugging Subgroup has been created to address this, with some initial investigation and proposals under way:</p> <ul> <li>WebAssembly Debugging Capabilities Living Standard   (source code for the doc)</li> <li>DWARF for WebAssembly Target   (source code for the doc)</li> </ul> <p>Please get involved and help drive this if you're interested in the Debugger side of things. </p>"},{"location":"WebAssembly/#analysing-the-structure-of-a-webassembly-file","title":"Analysing the structure of a WebAssembly file","text":"<p>WebAssembly Code Explorer is useful for visualising the structure of a WebAssembly file.</p> <ul> <li>Clicking on a hex value to the left will highlight the section it is part of, and the corresponding text representation on the right</li> <li>Clicking a line on the right will highlight the hex byte representations for it on the left</li> </ul>"},{"location":"WebAssembly/#reducing-the-size-of-wasm-files","title":"Reducing the size of Wasm files","text":"<p>At present, Go generates large Wasm files, with the smallest possible size being around ~2MB.  If your Go code imports libraries, this file size can increase dramatically.  10MB+ is common.</p> <p>There are two main ways (for now) to reduce this file size:</p> <ol> <li> <p>Manually compress the .wasm file.</p> <ul> <li>Using <code>gz</code> compression reduces the ~2MB (minimum file size) example WASM file down to around 500kB.  It may be better to use Zopfli to do the gzip compression, as it gives better results than <code>gzip --best</code>, however it does take much longer to run.</li> <li>Using Brotli for compression, the file sizes are markedly better than both Zopfli and <code>gzip --best</code>, and compression time is somewhere in between the two, too.  This (new) Brotli compressor looks reasonable.</li> </ul> <p>Examples from @johanbrandhorst</p> <p>Example 1</p> Size Command Compression time 16M (uncompressed size) N/A 2.4M <code>brotli -o test.wasm.br test.wasm</code> 53.6s 3.3M <code>go-zopfli test.wasm</code> 3m 2.6s 3.4M <code>gzip --best test.wasm</code> 2.5s 3.4M <code>gzip test.wasm</code> 0.8s <p>Example 2</p> Size Command Compression time 2.3M (uncompressed size) N/A 496K <code>brotli -o main.wasm.br main.wasm</code> 5.7s 640K <code>go-zopfli main.wasm</code> 16.2s 660K <code>gzip --best main.wasm</code> 0.2s 668K <code>gzip main.wasm</code> 0.2s <p>Use something like lpar/gzipped to automatically serve compressed files with correct headers, when available.</p> </li> <li> <p>Use TinyGo to generate the Wasm file instead.</p> <p>TinyGo supports a subset of the Go language targeted for embedded devices, and has a WebAssembly output target.</p> <p>While it does have limitations (not yet a full Go implementation), it is still fairly capable and the generated Wasm files are\u2026 tiny.  ~10kB isn't unusual.  The \"Hello world\" example is 575 bytes.  If you <code>gz -6</code> that, it drops down to 408 bytes. </p> <p>This project is also very actively developed, so its capabilities are expanding out quickly. See https://tinygo.org/docs/guides/webassembly/ for more information on using WebAssembly with TinyGo.</p> </li> </ol>"},{"location":"WebAssembly/#other-webassembly-resources","title":"Other WebAssembly resources","text":"<ul> <li>Awesome-Wasm - An extensive list of further Wasm resources.  Not Go specific.</li> </ul>"},{"location":"Well-known-struct-tags/","title":"Well-known struct tags","text":""},{"location":"Well-known-struct-tags/#background","title":"Background","text":"<p>Go offers struct tags which are discoverable via reflection. These enjoy a wide range of use in the standard library in the JSON/XML and other encoding packages.</p> <p>The community welcomed them and has built ORMs, further encodings, flag parsers and much more around them since, especially for these tasks, single-sourcing is beneficial for data structures.</p>"},{"location":"Well-known-struct-tags/#problem-description","title":"Problem description","text":"<p>Due to increased usage of Go and thus Go struct tags, clashes become inevitable.</p>"},{"location":"Well-known-struct-tags/#solution","title":"Solution","text":"<p>The list below is a best effort to document well-known struct tags used by packages which are available to the public.</p>"},{"location":"Well-known-struct-tags/#format-of-the-list","title":"Format of the list","text":"<ul> <li>Struct tag as extracted by calling https://pkg.go.dev/reflect#StructTag.Get with this tag as the <code>key</code> argument.</li> <li>Documentation link of this package using https://pkg.go.dev</li> </ul>"},{"location":"Well-known-struct-tags/#example-entry","title":"Example entry","text":"Tag Documentation xml https://pkg.go.dev/encoding/xml"},{"location":"Well-known-struct-tags/#change-management","title":"Change Management","text":"<p>List entries can be added by anyone who creates a public package where a new tag is used. List entries can be removed when the links to the package documentation stops working or the author(s) of that package requests it.</p>"},{"location":"Well-known-struct-tags/#list-of-well-known-struct-tags","title":"List of well-known struct tags","text":"Tag Documentation asn1 https://pkg.go.dev/encoding/asn1 bigquery https://pkg.go.dev/cloud.google.com/go/bigquery bson https://pkg.go.dev/go.mongodb.org/mongo-driver/bson cue https://pkg.go.dev/cuelang.org/go/cuego datastore https://pkg.go.dev/cloud.google.com/go/datastore db jmoiron/sqlx dynamodbav https://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/dynamodbattribute/#Marshal egg andrewwphillips/eggql feature nikolaydubina/go-featureprocessing gorm https://pkg.go.dev/github.com/jinzhu/gorm graphql samsarahq/thunder json https://pkg.go.dev/encoding/json mapstructure https://pkg.go.dev/github.com/mitchellh/mapstructure parser https://pkg.go.dev/github.com/alecthomas/participle properties https://pkg.go.dev/github.com/magiconair/properties#Properties.Decode protobuf golang/protobuf reform https://pkg.go.dev/gopkg.in/reform.v1 spanner https://pkg.go.dev/cloud.google.com/go/spanner toml https://pkg.go.dev/github.com/pelletier/go-toml url google/go-querystring validate go-playground/validator xml https://pkg.go.dev/encoding/xml yaml https://pkg.go.dev/gopkg.in/yaml.v2"},{"location":"WhyGo/","title":"Why Go","text":"<p>Here's why: a list of people/organizations explaining why they use Go. This is partly redundant with GoUsers. We also have a specific page dedicated to Go success stories.</p> <ul> <li>Why Devops Engineers Should Know Go 2020-05-27</li> <li>Why We Chose Go 2020-03-02</li> <li>Why Go? \u2013 Key advantages you may have overlooked 2019-06-01</li> <li>From Java to Go 2017-01-15</li> <li>Why should you learn Go 2017-01-08</li> <li>Moving a team from Scala to Go 2015-12-19</li> <li>For Better or For Worse 2015-11-12</li> <li>Six reasons why I love Go 2015-10-28</li> <li>CERN: Python vs Go for Data Access Service (PDF) 2015-10-18</li> <li>Sorry Ruby, I think I've fallen for Go 2015-09-26</li> <li>Moving to Three Languages 2015-09-15</li> <li>Warming up to Go 2015-08-28</li> <li>400 Days of Go</li> <li>Iron.io: How We Went from 30 Servers to 2 with Go</li> <li>Juju at Canonical</li> <li>Go at bitly</li> <li>NSQ: realtime distributed message processing at scale</li> <li>CloudFlare blows hole in laws of Web physics with Go and Railgun</li> <li>Why I Like Go</li> <li>dl.google.com now served by Go</li> <li>Rob Pike: Why Learn Go?</li> <li>Why I went from Python to Go (and not node.js)</li> <li>@derekcollison: \"Prediction: Go will become the dominant language for systems work in IaaS, Orchestration, and PaaS in 24 months.\"</li> <li>Will Go be the new go-to programming language?</li> <li>Dr. Dobb's: Why Not Go?</li> <li>Google I/O 2012: Go in production</li> <li>Go at Novartis</li> <li>Go at the BBC</li> <li>Go at SoundCloud</li> <li>Go at Moovweb</li> <li>Building StatHat with Go</li> <li>Go at CloudFlare</li> <li>Why you PHP guys should learn Golang</li> <li>I/O BootCamp 2011: Real World Go</li> <li>Go at Heroku</li> <li>The Business Benefits of Building Your Next Project With Go by Tom Maiaroto</li> <li>TweetQureet: a full Golang technology stack by Qureet</li> <li>Where and why we use Go by Jeremey Bingham, Raintank.io</li> <li>Half a decade with Go by golang.org blog</li> <li>Why Learn Go by Rob Pike (YouTube)</li> <li>Go at Google by Rob Pike (YouTube)</li> <li>Go at Google by Rob Pike (Article)</li> <li>5 things I love by Andrew Gerrand (dotGo 2014)</li> <li>dl.google.com powered by Go by Brad Fitzpatrick</li> <li>Is Google using Go internally? by golang.org</li> <li>The State of the Gopher by Brad Fitzpatrick (dotGo 2014)</li> <li>Software I'm excited about by Brad Fitzpatrick (dotScale 2013)</li> <li>I came for the easy concurrency I stayed for the easy composition by John Graham-Cumming (dotGo 2014)</li> <li>Go 1.4+ Garbage Collection (GC) Plan and Roadmap by Richard L. Hudson</li> <li>Five things that make Go fast by Dave Cheney</li> <li>Another go at the Next Big Language by Dave Cheney</li> <li>Rewriting a large production system in Go by Matt Welsh</li> <li>Go is Boring by Steve Bate</li> <li>Gopher Academy Blog</li> <li>Kubernetes + Go = Crazy Delicious by Joe Beda</li> <li>Why InfluxDB is written in Go by Paul Dix</li> <li>How Continuum ended up being written in Go by Derek Collison</li> <li>Building Street Address Autocomplete with Go by Matt Holt</li> <li>Why I went from Python to Go (and not node.js) by Jordan Orelli</li> <li>Farewell Node.js by TJ Holowaychuk</li> <li>Can Go really be that much faster than Python? on StackOverflow</li> <li>Python to Go by Weng Wei</li> <li>Why I Program in Go by Tahir Hashmi</li> <li>DNS Server in Go by Ask Bj\u00f8rn Hansen</li> <li>Go and Swift by Scott Rosenberg</li> <li>Features I Like about Go by Abhi Yerra</li> <li>From Python to Go translation of a large codebase - Go translation of Reposurgeon</li> </ul>"},{"location":"WhyGo/#who-uses-go","title":"Who uses Go","text":"<p>Moved to the GoUsers page</p>"},{"location":"WhyGo/#benchmarks","title":"Benchmarks","text":"<ul> <li>Express vs Flask vs Go vs Sparkjava by Bijan</li> <li>Comparing the Performance of Various Web Frameworks by Abel Avram</li> <li>TechEmpower Web Framework Benchmarks</li> </ul>"},{"location":"Windows/","title":"Go for Microsoft Windows","text":"<p>The Go project's official download page is at https://go.dev/dl.</p> <p>After downloading a binary release suitable for your system, you can install go by following  the official installation instructions at https://go.dev/doc/install.</p> <p>The Windows port is stable and officially supported.</p> <ul> <li>See the open Windows issues on the issue tracker.</li> </ul> Distributions Architectures Initial support version Final support version Windows 10, Windows Server 2016 or above amd64, 386 Go 1 * Windows 10, Windows Server 2016 or above arm64 Go 1.17 Windows 8, Windows Server 2012 amd64, 386 Go 1 * Go 1.20 Windows 7, Windows Server 2008R2 amd64, 386 Go 1 * Go 1.20 Windows Vista, Windows Server 2008 amd64, 386 Go 1 * Go 1.10.8 Windows XP, Windows Server 2003 amd64, 386 Go 1 * Go 1.10.8 <p>* Go 1.5 or above is recommended.</p>"},{"location":"WindowsBuild/","title":"WindowsBuild","text":""},{"location":"WindowsBuild/#the-automatic-but-unsupported-way-winstrap","title":"The Automatic (but unsupported) Way: winstrap","text":"<p>The winstrap tool is used by the Go project to turn a fresh Windows VM image into a Windows builder. It installs all necessary dependencies. It's sometimes out of date, though, as it's only updated when we need to update the Windows base image for the Go continuous build.</p> <p>To use winstrap, download the latest version of winstrap.exe from the winstrap page and run it.</p> <p>It will download some installers to your desktop, which you should run. Just click through; all the defaults are fine.</p> <p>Then it will check out Go and place it in c:Users\\%USER%goroot and build it.</p> <p>That's it.</p> <p>Note however that winstrap is not supported. It's considered an internal tool used for occasional setup of new Windows builder images and is not actively maintained until we need it ourselves.</p>"},{"location":"WindowsBuild/#the-manual-way","title":"The Manual Way","text":""},{"location":"WindowsBuild/#install-mingwmsys","title":"Install MinGW/MSYS","text":"<p>Download and save the latest version of the automated MinGW installer executable (<code>exe</code>) file from SourceForge.</p> <p>http://sourceforge.net/projects/mingw/files/OldFiles/mingw-get-inst/</p> <p>Open and run the saved automated MinGW installer executable file, which is named <code>mingw-get-inst-yyyymmdd.exe</code>, where <code>yyyymmdd</code> is the version date stamp. For example, <code>mingw-get-inst-20110530.exe</code>.</p> <p>The MinGW Setup Wizard window will open with the title \"Setup - MinGW-Get\". Except for the following, accept the setup defaults, unless it's necessary to change them.</p> <p>For Repository Catalogues, check the Download latest repository catalogues button.</p> <p>For Select Components, the MinGW Compiler Suite, the C Compiler box is automatically checked. Scroll down to the bottom of the list and check the MinGW Developer Toolkit box, which includes the MSYS Basic System.</p> <p>For Ready to Install, review and verify the installation settings, which should look similar this: <pre><code>    Installing:\n        mingw-get\n        pkginfo\n        C Compiler\n        MSYS Basic System\n        MinGW Developer Toolkit \n    Downloading latest repository catalogues \n    Destination location:\n        C:\\MinGW \n</code></pre> When the installation settings are correct, Install.</p> <p>The installation loads the package installation catalogues and downloads and installs the files. The installation may take some time, largely depending on the download speed.</p> <p>The MSYS terminal window may be opened by opening and running the <code>C:\\MinGW\\msys\\1.0\\msys.bat</code> batch file.</p>"},{"location":"WindowsBuild/#build","title":"Build","text":"<pre><code>git clone https://go.googlesource.com/go\ncd go\\src\nall.bat\n</code></pre>"},{"location":"WindowsBuild/#64-bit-notes","title":"64-bit Notes","text":"<ol> <li>Ensure you are able to compile a working 32-bit Go first.</li> <li>Grab the latest zip from http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Automated%20Builds/ and extract it over the MinGW directory, so that for example the .exe files end up in the same location as the 32-bit ones.</li> <li>Replace <code>gcc.exe</code> and <code>ar.exe</code> with their 64-bit counterparts.</li> <li>Set <code>GOARCH=amd64</code> and away you go!</li> </ol>"},{"location":"WindowsCrossCompiling/","title":"Building Windows Go programs on Linux","text":"<p>See here for available <code>GOOS</code> and <code>GOARCH</code> values.</p>"},{"location":"WindowsCrossCompiling/#go-version--15","title":"Go version &gt;= 1.5","text":"<p>Since Go version 1.5 cross-compiling of pure Go executables has become very easy. Try it out with the code below. More can be found at this blog post by Dave Cheney.</p> <pre><code>$ cat hello.go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n        fmt.Printf(\"Hello\\n\")\n}\n$ GOOS=windows GOARCH=386 go build -o hello.exe hello.go\n</code></pre> <p>In cmd.exe instead of PowerShell:</p> <pre><code>$ set GOOS=windows\n$ set GOARCH=386\n$ go build -o hello.exe hello.go\n</code></pre> <p>You can now run <code>hello.exe</code> on a Windows machine near you. </p> <p>Note that the first time you run the command above it will silently rebuild most of standard library, and for this reason will be quite slow. Subsequent builds will be faster due to Go command build caching.</p> <p>Note also that <code>cgo</code> is disabled when cross-compiling, so any file that mentions <code>import \"C\"</code> will be silently ignored (See golang/go#24068).  In order to use cgo, or any of the build modes <code>c-archive</code>, <code>c-shared</code>, <code>shared</code>, <code>plugin</code>, you need to have a C cross-compiler.</p>"},{"location":"WindowsCrossCompiling/#older-go-version-15","title":"Older Go version (&lt;1.5)","text":"<p>I use linux/386, but, I suspect, this procedure will apply to other host platforms as well.</p> <p>Preparation (if needed): <pre><code>sudo apt-get install gcc\nexport go env GOROOT\n</code></pre></p> <p>First step is to build host version of go:</p> <pre><code>cd $GOROOT/src\nsudo -E GOOS=windows GOARCH=386 PATH=$PATH ./make.bash\n</code></pre> <p>Next you need to build the rest of go compilers and linkers. I have small program to do that:</p> <pre><code>$ cat ~/bin/buildcmd\n#!/bin/sh\nset -e\nfor arch in 8 6; do\n\tfor cmd in a c g l; do\n\t\tgo tool dist install -v cmd/$arch$cmd\n\tdone\ndone\nexit 0\n</code></pre> <p>Last step is to build Windows versions of standard commands and libraries. I have a small script for that too:</p> <pre><code>$ cat ~/bin/buildpkg\n#!/bin/sh\nif [ -z \"$1\" ]; then\n\techo 'GOOS is not specified' 1&gt;&amp;2\n\texit 2\nelse\n\texport GOOS=$1\n\tif [ \"$GOOS\" = \"windows\" ]; then\n\t\texport CGO_ENABLED=0\n\tfi\nfi\nshift\nif [ -n \"$1\" ]; then\n\texport GOARCH=$1\nfi\ncd $GOROOT/src\ngo tool dist install -v pkg/runtime\ngo install -v -a std\n</code></pre> <p>I run it like that:</p> <pre><code>$ ~/bin/buildpkg windows 386\n</code></pre> <p>to build Windows/386 version of Go commands and packages. You can probably see from my script that I exclude building of any cgo related parts \u2014 these will not work for me, since I do not have correspondent gcc cross-compiling tools installed. So I just skip those.</p> <p>Now we're ready to build our Windows executable:</p> <pre><code>$ cat hello.go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n        fmt.Printf(\"Hello\\n\")\n}\n$ GOOS=windows GOARCH=386 go build -o hello.exe hello.go\n</code></pre> <p>We just need to find a Windows computer to run our <code>hello.exe</code>.</p>"},{"location":"WindowsDLLs/","title":"Calling a Windows DLL","text":"<p>Go allows you to call native Windows function in several different ways.</p> <ol> <li>Dynamically load a DLL, then call a function in it. You can call the function via <code>SyscallX</code> (where X is the number of parameters. If the function has fewer parameters than that, for example passing 7 arguments to a function that accepts 9, <code>Syscall9</code> will still work, you just need to specify 7 as your second argument to <code>Syscall9</code>).</li> </ol> <p>A sample Go program that calls a Windows DLL function using this method:</p> <pre><code>package main\n\nimport (\n\t\"fmt\"\n\t\"syscall\"\n\t\"unsafe\"\n)\n\nfunc abort(funcname string, err error) {\n\tpanic(fmt.Sprintf(\"%s failed: %v\", funcname, err))\n}\n\nvar (\n\tkernel32, _        = syscall.LoadLibrary(\"kernel32.dll\")\n\tgetModuleHandle, _ = syscall.GetProcAddress(kernel32, \"GetModuleHandleW\")\n\n\tuser32, _     = syscall.LoadLibrary(\"user32.dll\")\n\tmessageBox, _ = syscall.GetProcAddress(user32, \"MessageBoxW\")\n)\n\nconst (\n\tMB_OK                = 0x00000000\n\tMB_OKCANCEL          = 0x00000001\n\tMB_ABORTRETRYIGNORE  = 0x00000002\n\tMB_YESNOCANCEL       = 0x00000003\n\tMB_YESNO             = 0x00000004\n\tMB_RETRYCANCEL       = 0x00000005\n\tMB_CANCELTRYCONTINUE = 0x00000006\n\tMB_ICONHAND          = 0x00000010\n\tMB_ICONQUESTION      = 0x00000020\n\tMB_ICONEXCLAMATION   = 0x00000030\n\tMB_ICONASTERISK      = 0x00000040\n\tMB_USERICON          = 0x00000080\n\tMB_ICONWARNING       = MB_ICONEXCLAMATION\n\tMB_ICONERROR         = MB_ICONHAND\n\tMB_ICONINFORMATION   = MB_ICONASTERISK\n\tMB_ICONSTOP          = MB_ICONHAND\n\n\tMB_DEFBUTTON1 = 0x00000000\n\tMB_DEFBUTTON2 = 0x00000100\n\tMB_DEFBUTTON3 = 0x00000200\n\tMB_DEFBUTTON4 = 0x00000300\n)\n\nfunc MessageBox(caption, text string, style uintptr) (result int) {\n\tvar nargs uintptr = 4\n\tret, _, callErr := syscall.Syscall9(uintptr(messageBox),\n\t\tnargs,\n\t\t0,\n\t\tuintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(text))),\n\t\tuintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(caption))),\n\t\tstyle,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0)\n\tif callErr != 0 {\n\t\tabort(\"Call MessageBox\", callErr)\n\t}\n\tresult = int(ret)\n\treturn\n}\n\nfunc GetModuleHandle() (handle uintptr) {\n\tvar nargs uintptr = 0\n\tif ret, _, callErr := syscall.Syscall(uintptr(getModuleHandle), nargs, 0, 0, 0); callErr != 0 {\n\t\tabort(\"Call GetModuleHandle\", callErr)\n\t} else {\n\t\thandle = ret\n\t}\n\treturn\n}\n\nfunc main() {\n\tdefer syscall.FreeLibrary(kernel32)\n\tdefer syscall.FreeLibrary(user32)\n\n\tfmt.Printf(\"Return: %d\\n\", MessageBox(\"Done Title\", \"This test is Done.\", MB_YESNOCANCEL))\n}\n\nfunc init() {\n\tfmt.Print(\"Starting Up\\n\")\n}\n</code></pre> <ol> <li>Using syscall.NewProc instead of syscall.GetProcAddress. These are basically some helper methods over the syscall ones, you saw above, and are available in Windows only: http://golang.org/src/pkg/syscall/dll_windows.go</li> </ol> <pre><code>package main\n\nimport (\n\t\"fmt\"\n\t\"syscall\"\n\t\"unsafe\"\n)\n\nfunc main() {\n\tvar mod = syscall.NewLazyDLL(\"user32.dll\")\n\tvar proc = mod.NewProc(\"MessageBoxW\")\n\tvar MB_YESNOCANCEL = 0x00000003\n\n\tret, _, _ := proc.Call(0,\n\t\tuintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(\"This test is Done.\"))),\n\t\tuintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(\"Done Title\"))),\n\t\tuintptr(MB_YESNOCANCEL))\n\tfmt.Printf(\"Return: %d\\n\", ret)\n\n}\n</code></pre> <ol> <li>By \"linking\" against the library, using the \"cgo\" method (this way works in Linux and Windows). Example:</li> </ol> <pre><code>import (\"C\")\n...\nC.MessageBoxW(...)\n</code></pre> <p>See cgo for further details.</p>"},{"location":"X-Repositories/","title":"X-Repositories","text":"<p>The <code>golang.org/x/...</code> repositories are part of the Go Project but outside the main Go tree.</p> <p>They are developed under looser compatibility requirements than the Go core.  In general, they will support the previous two releases and tip.</p> <p>These repositories should have no third-party dependencies apart from other golang.org/x/\u2026 repositories. The only exceptions are golang.org/x/tools/gopls, golang.org/x/vscode-go, and golang.org/x/pkgsite. If you would like to add a new dependency to an x repository, please file an issue and cc @rsc and @andybons.</p> <p>Install them with \"go get\".</p> <ul> <li>[docs] [source] <code>golang.org/x/tools</code> \u2014 godoc, vet, cover, and other tools.</li> <li> <p>[docs] [source] <code>golang.org/x/mobile</code> \u2014 libraries and build tools for Go on Android.</p> </li> <li> <p>[docs] [source] <code>golang.org/x/crypto</code> \u2014 additional cryptography packages.</p> </li> <li>[docs] [source] <code>golang.org/x/image</code> \u2014 additional imaging packages.</li> <li>[docs] [source] <code>golang.org/x/net</code> \u2014 additional networking packages.</li> <li>[docs] [source] <code>golang.org/x/sys</code> \u2014 for low-level interactions with the operating system.</li> <li> <p>[docs] [source] <code>golang.org/x/text</code> \u2014 packages for working with text.</p> </li> <li> <p>[docs] [source] <code>golang.org/x/blog</code> \u2014 the content and server program for blog.golang.org.</p> </li> <li> <p>[docs] [source] <code>golang.org/x/review</code> \u2014 tools for code review.</p> </li> <li> <p>[docs] [source] <code>golang.org/x/benchmarks</code></p> </li> <li> <p>[docs] [source] <code>golang.org/x/exp</code> \u2014 experimental code (handle with care).</p> </li> </ul> <p>List of all packages in sub-repositories</p>"},{"location":"cgo/","title":"cgo","text":""},{"location":"cgo/#introduction","title":"Introduction","text":"<p>First, https://pkg.go.dev/cmd/cgo is the primary cgo documentation.</p> <p>There is also a good introduction article at https://go.dev/blog/cgo</p>"},{"location":"cgo/#the-basics","title":"The basics","text":"<p>If a Go source file imports <code>\"C\"</code>, it is using cgo. The Go file will have access to anything appearing in the comment immediately preceding the line <code>import \"C\"</code>, and will be linked against all other cgo comments in other Go files, and all C files included in the build process.</p> <p>Note that there must be no blank lines in between the cgo comment and the import statement.</p> <p>To access a symbol originating from the C side, use the package name <code>C</code>. That is, if you want to call the C function <code>printf()</code> from Go code, you write <code>C.printf()</code>.  Since variable argument methods like printf aren't supported yet (issue 975), we will wrap it in the C method \"myprint\":</p> <pre><code>package cgoexample\n\n/*\n##include &lt;stdio.h&gt;\n##include &lt;stdlib.h&gt;\n\nvoid myprint(char* s) {\n\tprintf(\"%s\\n\", s);\n}\n*/\nimport \"C\"\n\nimport \"unsafe\"\n\nfunc Example() {\n\tcs := C.CString(\"Hello from stdio\\n\")\n\tC.myprint(cs)\n\tC.free(unsafe.Pointer(cs))\n}\n</code></pre>"},{"location":"cgo/#calling-go-functions-from-c","title":"Calling Go functions from C","text":"<p>It is possible to call both top-level Go functions and function variables from C code invoked from Go code using cgo.</p>"},{"location":"cgo/#global-functions","title":"Global functions","text":"<p>Go makes its functions available to C code through use of a special <code>//export</code> comment. Note: you can't define any C functions in preamble if you're using exports.</p> <p>For example, there are two files, foo.c and foo.go: foo.go contains:</p> <pre><code>package gocallback\n\nimport \"fmt\"\n\n/*\n##include &lt;stdio.h&gt;\nextern void ACFunction();\n*/\nimport \"C\"\n\n//export AGoFunction\nfunc AGoFunction() {\n\tfmt.Println(\"AGoFunction()\")\n}\n\nfunc Example() {\n\tC.ACFunction()\n}\n</code></pre> <p>foo.c contains:</p> <pre><code>##include \"_cgo_export.h\"\nvoid ACFunction() {\n\tprintf(\"ACFunction()\\n\");\n\tAGoFunction();\n}\n</code></pre>"},{"location":"cgo/#function-variables","title":"Function variables","text":"<p>The following code shows an example of invoking a Go callback from C code. Because of the pointer passing rules Go code can not pass a function value directly to C.  Instead it is necessary to use an indirection. This example uses a registry with a mutex, but there are many other ways to map from a value that can be passed to C to a Go function.</p> <pre><code>package gocallback\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\n\n/*\nextern void go_callback_int(int foo, int p1);\n\n// normally you will have to define function or variables\n// in another separate C file to avoid the multiple definition\n// errors, however, using \"static inline\" is a nice workaround\n// for simple functions like this one.\nstatic inline void CallMyFunction(int foo) {\n\tgo_callback_int(foo, 5);\n}\n*/\nimport \"C\"\n\n//export go_callback_int\nfunc go_callback_int(foo C.int, p1 C.int) {\n\tfn := lookup(int(foo))\n\tfn(p1)\n}\n\nfunc MyCallback(x C.int) {\n\tfmt.Println(\"callback with\", x)\n}\n\nfunc Example() {\n\ti := register(MyCallback)\n\tC.CallMyFunction(C.int(i))\n\tunregister(i)\n}\n\nvar mu sync.Mutex\nvar index int\nvar fns = make(map[int]func(C.int))\n\nfunc register(fn func(C.int)) int {\n\tmu.Lock()\n\tdefer mu.Unlock()\n\tindex++\n\tfor fns[index] != nil {\n\t\tindex++\n\t}\n\tfns[index] = fn\n\treturn index\n}\n\nfunc lookup(i int) func(C.int) {\n\tmu.Lock()\n\tdefer mu.Unlock()\n\treturn fns[i]\n}\n\nfunc unregister(i int) {\n\tmu.Lock()\n\tdefer mu.Unlock()\n\tdelete(fns, i)\n}\n</code></pre> <p>As of Go 1.17, the <code>runtime/cgo</code> package provides runtime/cgo.Handle mechanism and simplifies the above examples to:</p> <pre><code>package main\n\nimport (\n\t\"fmt\"\n\t\"runtime/cgo\"\n)\n\n/*\n##include &lt;stdint.h&gt;\n\nextern void go_callback_int(uintptr_t h, int p1);\nstatic inline void CallMyFunction(uintptr_t h) {\n\tgo_callback_int(h, 5);\n}\n*/\nimport \"C\"\n\n//export go_callback_int\nfunc go_callback_int(h C.uintptr_t, p1 C.int) {\n\tfn := cgo.Handle(h).Value().(func(C.int))\n\tfn(p1)\n}\n\nfunc MyCallback(x C.int) {\n\tfmt.Println(\"callback with\", x)\n}\n\nfunc main() {\n\th := cgo.NewHandle(MyCallback)\n\tC.CallMyFunction(C.uintptr_t(h))\n\th.Delete()\n}\n</code></pre>"},{"location":"cgo/#function-pointer-callbacks","title":"Function pointer callbacks","text":"<p>C code can call exported Go functions with their explicit name. But if a C-program wants a function pointer, a gateway function has to be written. This is because we can't take the address of a Go function and give that to C-code since the cgo tool will generate a stub in C that should be called. The following example shows how to integrate with C code wanting a function pointer of a give type.</p> <p>Place these source files under $GOPATH/src/ccallbacks/. Compile and run with:</p> <pre><code>$ gcc -c clibrary.c\n$ ar cru libclibrary.a clibrary.o\n$ go build\n$ ./ccallbacks\nGo.main(): calling C function with callback to us\nC.some_c_func(): calling callback with arg = 2\nC.callOnMeGo_cgo(): called with arg = 2\nGo.callOnMeGo(): called with arg = 2\nC.some_c_func(): callback responded with 3\n</code></pre> <p>goprog.go</p> <pre><code>package main\n\n/*\n##cgo CFLAGS: -I .\n##cgo LDFLAGS: -L . -lclibrary\n\n##include \"clibrary.h\"\n\nint callOnMeGo_cgo(int in); // Forward declaration.\n*/\nimport \"C\"\n\nimport (\n\t\"fmt\"\n\t\"unsafe\"\n)\n\n//export callOnMeGo\nfunc callOnMeGo(in int) int {\n\tfmt.Printf(\"Go.callOnMeGo(): called with arg = %d\\n\", in)\n\treturn in + 1\n}\n\nfunc main() {\n\tfmt.Printf(\"Go.main(): calling C function with callback to us\\n\")\n\tC.some_c_func((C.callback_fcn)(unsafe.Pointer(C.callOnMeGo_cgo)))\n}\n</code></pre> <p>cfuncs.go</p> <pre><code>package main\n\n/*\n\n##include &lt;stdio.h&gt;\n\n// The gateway function\nint callOnMeGo_cgo(int in)\n{\n\tprintf(\"C.callOnMeGo_cgo(): called with arg = %d\\n\", in);\n\tint callOnMeGo(int);\n\treturn callOnMeGo(in);\n}\n*/\nimport \"C\"\n</code></pre> <p>clibrary.h</p> <pre><code>##ifndef CLIBRARY_H\n##define CLIBRARY_H\ntypedef int (*callback_fcn)(int);\nvoid some_c_func(callback_fcn);\n##endif\n</code></pre> <p>clibrary.c</p> <pre><code>##include &lt;stdio.h&gt;\n\n##include \"clibrary.h\"\n\nvoid some_c_func(callback_fcn callback)\n{\n\tint arg = 2;\n\tprintf(\"C.some_c_func(): calling callback with arg = %d\\n\", arg);\n\tint response = callback(2);\n\tprintf(\"C.some_c_func(): callback responded with %d\\n\", response);\n}\n</code></pre>"},{"location":"cgo/#go-strings-and-c-strings","title":"Go strings and C strings","text":"<p>Go strings and C strings are different. Go strings are the combination of a length and a pointer to the first character in the string. C strings are just the pointer to the first character, and are terminated by the first instance of the null character, <code>'\\0'</code>.</p> <p>Go provides means to go from one to another in the form of the following three functions:   * <code>func C.CString(goString string) *C.char</code>   * <code>func C.GoString(cString *C.char) string</code>   * <code>func C.GoStringN(cString *C.char, length C.int) string</code></p> <p>One important thing to remember is that <code>C.CString()</code> will allocate a new string of the appropriate length, and return it. That means the C string is not going to be garbage collected and it is up to you to free it. A standard way to do this follows.</p> <pre><code>// #include &lt;stdlib.h&gt;\nimport \"C\"\nimport \"unsafe\"\n...\n\tvar cmsg *C.char = C.CString(\"hi\")\n\tdefer C.free(unsafe.Pointer(cmsg))\n\t// do something with the C string\n</code></pre> <p>Of course, you aren't required to use <code>defer</code> to call <code>C.free()</code>. You can free the C string whenever you like, but it is your responsibility to make sure it happens.</p>"},{"location":"cgo/#turning-c-arrays-into-go-slices","title":"Turning C arrays into Go slices","text":"<p>C arrays are typically either null-terminated or have a length kept elsewhere.</p> <p>Go provides the following function to make a new Go byte slice from a C array:   * <code>func C.GoBytes(cArray unsafe.Pointer, length C.int) []byte</code></p> <p>To create a Go slice backed by a C array (without copying the original data), one needs to acquire this length at runtime and use a type conversion to a pointer to a very big array and then slice it to the length that you want (also remember to set the cap if you're using Go 1.2 or later), for example (see https://go.dev/play/p/XuC0xqtAIC for a runnable example):</p> <pre><code>import \"C\"\nimport \"unsafe\"\n...\n        var theCArray *C.YourType = C.getTheArray()\n        length := C.getTheArrayLength()\n        slice := (*[1 &lt;&lt; 28]C.YourType)(unsafe.Pointer(theCArray))[:length:length]\n</code></pre> <p>With Go 1.17 or later, programs can use <code>unsafe.Slice</code> instead, which similarly results in a Go slice backed by a C array:</p> <pre><code>import \"C\"\nimport \"unsafe\"\n...\n        var theCArray *C.YourType = C.getTheArray()\n        length := C.getTheArrayLength()\n        slice := unsafe.Slice(theCArray, length) // Go 1.17\n</code></pre> <p>It is important to keep in mind that the Go garbage collector will not interact with the underlying C array, and that if it is freed from the C side of things, the behavior of any Go code using the slice is nondeterministic.</p>"},{"location":"cgo/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"cgo/#struct-alignment-issues","title":"Struct Alignment Issues","text":"<p>As Go doesn't support packed struct (e.g., structs where maximum alignment is 1 byte), you can't use packed C struct in Go. Even if your program passes compilation, it won't do what you want. To use it, you have to read/write the struct as byte array/slice.</p> <p>Another problem is that some types has lower alignment requirement than their counterpart in Go, and if that type happens to be aligned in C but not in Go rules, that struct simply can't be represented in Go. An example is this (issue 7560):</p> <p><pre><code>struct T {\n    uint32_t pad;\n    complex float x;\n};\n</code></pre> Go's complex64 has an alignment of 8-byte, where as C has only 4-byte (because C treats the complex float internally as a <code>struct { float real; float imag; }</code>, not a basic type), this T struct simply doesn't have a Go representation. For this case, if you control the layout of the struct, move the complex float so that it is also aligned to 8-byte is better, and if you're not willing to move it, use this form will force it to align to 8-byte (and waste 4-byte):</p> <pre><code>struct T {\n   uint32_t pad;\n   __attribute__((align(8))) complex float x;\n};\n</code></pre> <p>However, if you don't control the struct layout, you will have to define accessor C functions for that struct because cgo won't be able to translate that struct into equivalent Go struct.</p>"},{"location":"cgo/#export-and-definition-in-preamble","title":"<code>//export</code> and definition in preamble","text":"<p>If a Go source file uses any <code>//export</code> directives, then the C code in the comment may only include declarations (<code>extern int f();</code>), not definitions (<code>int f() { return 1; }</code> or <code>int n;</code>). Note: you can use <code>static inline</code> trick to work around this restriction for tiny functions defined in the preamble (see above for a complete example).</p>"},{"location":"cgo/#windows","title":"Windows","text":"<p>In order to use cgo on Windows, you'll also need to first install a gcc compiler (for instance, mingw-w64) and have gcc.exe (etc.) in your PATH environment variable before compiling with cgo will work.</p>"},{"location":"cgo/#environmental-variables","title":"environmental variables","text":"<p>Go os.Getenv() doesn't see variables set by C.setenv()</p>"},{"location":"cgo/#tests","title":"tests","text":"<p>_test.go files can't use cgo.</p>"},{"location":"golang-tools/","title":"golang-tools","text":""},{"location":"golang-tools/#mission-statement","title":"Mission statement","text":"<p>The golang-tools community is a group of people whose main focus and interest is the development of tools for the Go language. It is open to everyone. Tooling topics include (but are not limited to) code analysis, compilers, editor and IDE plugins, language servers, and standard libraries.</p> <p>The golang-tools working group is useful for:</p> <ul> <li>getting feedback on ideas</li> <li>experimenting with a group of \"trusted testers\"</li> <li>external proof-reading of proposals, blog posts etc</li> </ul> <p>A key goal of the golang-tools group is that all forums of communication, but especially the regular calls, are friendly and welcoming. We want to create an environment in which everyone feels both supported and able to share their opinions and experience, frankly, freely, and openly. The wider Go Code of Conduct, which we observe just like all other Go forums, summarises this well.</p>"},{"location":"golang-tools/#community-spaces","title":"Community spaces","text":"<p>Discussion within the community takes place in three main spaces. There are also dedicated golang-tools sessions held at GopherCon each year.</p>"},{"location":"golang-tools/#slack","title":"Slack","text":"<p>Most day-to-day discussion take place in the <code>#tools</code> channel on the Gophers Slack (sign-up here).</p>"},{"location":"golang-tools/#mailing-list","title":"Mailing list","text":"<p>The golang-tools mailing list contains community updates as well as other forms of announcements.</p>"},{"location":"golang-tools/#calls","title":"Calls","text":"<p>The community operates a monthly \u201ccatch-up\u201d call covering updates about large-impact changes, new tool initiatives, ongoing community projects and much more. The agenda is community-driven and anyone can suggest items that they would like to cover.</p> <p>Like the other discussion spaces these calls are open to anyone and people new to the community are encouraged to join in and share in the conversation. The details (date, link, phone number, \u2026) for each call are shared via the mailing list as well as the Slack channel.</p>"},{"location":"golang-tools/#shared-calendar","title":"Shared Calendar","text":"<p>All calls/events are added to the shared calendar.</p>"},{"location":"golang-tools/#upcoming-calls","title":"Upcoming calls","text":"<p>Note that calls always happen on the same Google Meet link. Anyone can join the calls - no Google account is required.</p> <ul> <li>2025-03-12 - Agenda</li> </ul>"},{"location":"golang-tools/#call-archive","title":"Call archive","text":"<ul> <li>2025-01-15 - Meeting notes - video</li> <li>2024-11-04 - Meeting notes - video</li> <li>2024-09-04 - Meeting notes - video</li> <li>2024-06-12 - Meeting notes - video</li> <li>2024-04-10 - Meeting notes - video</li> <li>2024-01-17 - Meeting notes - video</li> <li>2023-11-29 - Meeting notes - video</li> <li>2023-09-13 - Meeting notes - video</li> <li>2023-07-12 - Meeting notes - video</li> <li>2023-04-19 - Meeting notes - video</li> <li>2023-02-22 - Meeting notes - video</li> <li>2023-01-11 - Meeting notes - video</li> <li>2022-11-16 - Meeting notes - video</li> <li>2022-09-21 - Meeting notes - video</li> <li>2022-08-03 - Meeting notes - video</li> <li>2022-06-22 - Meeting notes - video</li> <li>2022-05-18 - Meeting notes - video</li> <li>2022-04-13 - Meeting notes - video</li> <li>2022-02-16 - Meeting notes - video</li> <li>2022-01-12 - Meeting notes - video</li> <li>2021-10-06 - Meeting notes - video</li> <li>2021-09-15 special edition: supporting type parameters Agenda</li> <li>2021-08-18 - Meeting notes - video</li> <li>2021-06-16 - Meeting notes - video</li> <li>2021-05-12 - Meeting notes - video</li> <li>2021-04-14 - Meeting notes - video</li> <li>2021-03-10 - Meeting notes - video</li> <li>2021-02-10 - Meeting notes - video</li> <li>2021-01-13 - Meeting notes - video</li> <li>2020-11-18 - Meeting notes - video</li> <li>2020-10-21 - Meeting notes - video</li> <li>2020-09-16 - Meeting notes - video</li> <li>2020-08-19 - Meeting notes - video</li> <li>2020-07-22 - Meeting notes - video</li> <li>2020-06-24 - Meeting notes - video</li> <li>2020-05-13 - Meeting notes - video</li> <li>2020-04-08 - Meeting notes - video</li> <li>2020-03-11 - Meeting notes - video</li> <li>2020-01-28 - Meeting notes - video</li> <li>2019-12-03 - Meeting notes - video</li> <li>2019-10-29 - Meeting notes - video</li> <li>2019-09-24 - Meeting notes - video</li> <li>2019-08-27 - Meeting notes - video</li> <li>2019-07-26 - Meeting notes - second session at GopherCon San Diego</li> <li>2019-07-25 - Meeting notes - first session at GopherCon San Diego</li> <li>2019-05-28 - Meeting notes - video</li> <li>2019-04-30 - Meeting notes - video</li> <li>2019-03-26 - Meeting notes - video</li> <li>2019-02-26 - Meeting notes - video</li> <li>2019-01-29 - Meeting notes - video</li> <li>2018-12-11 - Meeting notes - video</li> <li>2018-11-27 - Meeting notes - video</li> <li>2018-11-06 - Meeting Notes</li> <li>2018-10-23 - Meeting Notes - video</li> <li>2018-10-09 - Meeting notes - video</li> <li>2018-09-18 - Meeting notes - video</li> <li>2018-08-28 - Notes from GopherCon \"kick off\" session</li> </ul>"},{"location":"golang-tools/#organizing-a-call","title":"Organizing a call","text":"<p>We try to share the load of organizing and running the calls between Gophers inside and outside of Google (generally alternating between Googlers and non-Googlers). Here are the steps required as organizer:</p> <ol> <li>Using a non-google.com account, ask Daniel Mart\u00ed for editing access to the shared drive, and put a copy of the previous call's agenda in it. The copy will only be visible by anyone with the link, so change that to allow edits (this last step is not possible with docs owned by @google.com accounts).</li> <li>Rename and clear out the agenda for the next call.</li> <li>Update this wiki, archiving the previous call and linking the new upcoming call.</li> <li>Update the shared calendar with the new event. By convention calls run from 16:00-17:00 London.</li> <li>Send reminders 1-2 weeks before the call date to the mailing list and #tools slack channel.</li> <li>On the day of the call, remember to ask a Googler to start recording, and then run through the agenda.</li> <li>Ask the same Googler to move the recording to the recordings folder and upload it to YouTube, updating the wiki content above.</li> </ol>"},{"location":"gopherbot/","title":"gopherbot","text":"<p>This page outlines all interactive gopherbot functionality. Most of the tasks gopherbot performs do not require human intervention, however it is starting to learn new tricks.</p>"},{"location":"gopherbot/#addingremoving-labels","title":"Adding/Removing Labels","text":"<p>You may add or remove labels by telling gopherbot what you'd like to do.</p> <p><code>@gopherbot, please add labels NeedsFix,help wanted and remove label needsinvestigation</code></p> <p>The comma after @gopherbot and the <code>please</code>, <code>and</code>, <code>add</code>, and <code>label[s]</code> keywords are optional. Adding a label is the default, so you can have the command be much more terse if you wish.</p> <p><code>@gopherbot needsfix, help wanted remove needsinvestigation</code></p> <p>The above command will achieve the same results as the first command.</p> <p>If you don't wish to remove anything, you can omit the <code>remove</code> keyword.</p> <p><code>@gopherbot needsfix, help wanted</code></p> <p>The above command will add the <code>NeedsFix</code> and <code>help wanted</code> labels. Notice how labels must be separated by a comma (or semicolon). This is to account for those with spaces in them like <code>help wanted</code>. You cannot quote the labels.</p> <p><code>@gopherbot needsfix \"help wanted\"</code> \u2190 Does not work</p> <p>Casing also doesn't matter. <code>needsfix</code> is equivalent to <code>NeedsFix</code>. gopherbot will figure out the right label for you.</p> <p>There are some labels that are not allowed to be added or removed. Those can be seen in the <code>labelChangeDisallowed</code> function in the source.</p> <p>For more in-depth examples, take a look at the tests.</p> <p>As always, patches are welcome!</p>"},{"location":"gopherbot/#backporting-issues","title":"Backporting issues","text":"<p>gopherbot is capable of opening backport issues according to MinorReleases in response to comments like the following on the main issue.</p> <p>@gopherbot please consider this for backport to 1.10, it's a regression.</p> <p>@gopherbot please open the backport tracking issues. This is a severe compiler bug.</p> <p>The keywords are <code>@gopherbot</code>, <code>backport</code>, <code>please</code> and optionally the release. They can be anywhere in the comment. If no release is mentioned issues are opened for the two past releases. The entire message is quoted in the new issue, so please include a rationale.</p> <p>(Note that currently only the first backport command on an issue is executed. https://go.dev/issues/25574)</p>"},{"location":"gopls-integrator-FAQ/","title":"gopls-integrator-FAQ","text":"<p>This page has been subsumed into the committed markdown of x/tools repository</p> <p>Please do not edit this page!</p>"},{"location":"gopls/","title":"gopls","text":"<p>This page was moved to the x/tools repository.</p> <p>Please do not edit this page!</p>"},{"location":"heapdump13/","title":"heapdump13","text":"<p>Heap dump format for other versions:</p> <ul> <li>Go 1.4: heapdump14</li> <li>Go 1.5 and later: heapdump15-through-heapdump17</li> </ul>"},{"location":"heapdump13/#introduction","title":"Introduction","text":"<p>Go 1.3 added a runtime/debug.WriteHeapDump function that writes all objects in the heap plus additional info (roots, goroutines, finalizers, etc.) to a file.  The format of this file is specified here.</p>"},{"location":"heapdump13/#details","title":"Details","text":"<p>The file starts with the bytes of the string \"go1.3 heap dumpn\".</p> <p>The rest of the file is a sequence of records.  Records can be of several different kinds.  Records will contain the following primitives:   * uvarint - a 64-bit unsigned integer encoded as in encoding/binary.{Put,Read}Uvarint   * string - a uvarint-encoded length followed by that many bytes of data   * bool - a uvarint-encoded 0 for false or 1 for true   * fieldlist - a description of the pointer-bearing portions of a memory region.  It consists of repeated pairs of uvarints encoding a field kind and a field offset, followed by and end-of-list marker.  The possible kinds are 1=Ptr, 2=String, 3=Slice, 4=Iface, and 5=Eface.  0=Eol is the end of list marker.  The end of list marker does not have a corresponding offset.</p> <p>Each record starts with a uvarint-encoded integer describing the type of the record:   * 0 = EOF   * 1 = object   * 2 = otherroot   * 3 = type   * 4 = goroutine   * 5 = stack frame   * 6 = dump params   * 7 = registered finalizer   * 8 = itab   * 9 = OS thread   * 10 = mem stats   * 11 = queued finalizer   * 12 = data segment   * 13 = bss segment   * 14 = defer record   * 15 = panic record   * 16 = alloc/free profile record   * 17 = alloc stack trace sample</p> <p>The remaining fields of each record are type-dependent and are described below.</p>"},{"location":"heapdump13/#eof","title":"EOF","text":"<p>An EOF record has no fields and must appear last.</p>"},{"location":"heapdump13/#object","title":"object","text":"<ul> <li>uvarint: address of object</li> <li>uvarint: address of type descriptor (or 0 if unknown)</li> <li>uvarint: kind of object (0=regular 1=array 2=channel 127=conservatively scanned)</li> <li>string: contents of object</li> </ul> <p>For array or channel kinds, the type must be nonzero.</p> <p>The size of the contents string is the size of the containing sizeclass, not the size of the type itself.  As such, contents size may be somewhat bigger than the type size.  It may be a lot bigger for array and channel types.  For instance, an array with n elements will have a content size bigger than or equal to n times the type size.</p>"},{"location":"heapdump13/#otherroot","title":"otherroot","text":"<ul> <li>string: textual description of where this root came from</li> <li>uvarint: root pointer</li> </ul>"},{"location":"heapdump13/#type","title":"type","text":"<ul> <li>uvarint: address of type descriptor</li> <li>uvarint: size of an object of this type</li> <li>string: name of type</li> <li>bool: whether the data field of an interface containing a value of this type is a pointer</li> <li>fieldlist: a list of the kinds and locations of pointer-containing fields in objects of this type</li> </ul>"},{"location":"heapdump13/#goroutine-g","title":"goroutine (G)","text":"<ul> <li>uvarint: address of descriptor</li> <li>uvarint: pointer to the top of stack (the currently running frame, a.k.a. depth 0)</li> <li>uvarint: go routine ID</li> <li>uvarint: the location of the go statement that created this goroutine</li> <li>uvarint: status</li> <li>bool: is a Go routine started by the system</li> <li>bool: is a background Go routine</li> <li>uvarint: approximate time the go routine last started waiting (nanoseconds since the Epoch)</li> <li>string: textual reason why it is waiting</li> <li>uvarint: context pointer of currently running frame</li> <li>uvarint: address of os thread descriptor (M)</li> <li>uvarint: top defer record</li> <li>uvarint: top panic record</li> </ul> <p>Possible statuses:   * 0 = idle   * 1 = runnable   * 3 = syscall   * 4 = waiting</p> <p>The wait fields must be present in all cases, but they only mean something if the status is \"waiting\".</p>"},{"location":"heapdump13/#stack-frame","title":"stack frame","text":"<ul> <li>uvarint: stack pointer (lowest address in frame)</li> <li>uvarint: depth in stack (0 = top of stack)</li> <li>uvarint: stack pointer of child frame (or 0 if none)</li> <li>string: contents of stack frame</li> <li>uvarint: entry pc for function</li> <li>uvarint: current pc for function</li> <li>uvarint: continuation pc for function (where function may resume, if anywhere)</li> <li>string: function name</li> <li>fieldlist: list of kind and offset of pointer-containing fields in this frame</li> </ul>"},{"location":"heapdump13/#dump-params","title":"dump params","text":"<ul> <li>bool: big endian</li> <li>uvarint: pointer size in bytes</li> <li>uvarint: channel header size in bytes</li> <li>uvarint: starting address of heap</li> <li>uvarint: ending address of heap</li> <li>uvarint: thechar = architecture specifier</li> <li>string: GOEXPERIMENT environment variable value</li> <li>uvarint: runtime.ncpu</li> </ul>"},{"location":"heapdump13/#finalizer","title":"finalizer","text":"<ul> <li>uvarint: address of object that has a finalizer</li> <li>uvarint: pointer to FuncVal describing the finalizer</li> <li>uvarint: PC of finalizer entry point</li> <li>uvarint: type of finalizer argument</li> <li>uvarint: type of object</li> </ul> <p>This finalizer has been registered with the runtime system, but the object to which it refers was either reachable as of the most recent GC or allocated since the most recent GC.</p>"},{"location":"heapdump13/#itab","title":"itab","text":"<ul> <li>uvarint: Itab address</li> <li>bool: whether the data field of an Iface with this itab is a pointer</li> </ul>"},{"location":"heapdump13/#osthread-m","title":"osthread (M)","text":"<ul> <li>uvarint: address of this os thread descriptor</li> <li>uvarint: Go internal id of thread</li> <li>uvarint: os's id for thread</li> </ul>"},{"location":"heapdump13/#memstats","title":"memstats","text":"<p>Dumps the first 26 fields of MemStats.  All fields are dumped with a uvarint except the 25<sup>th</sup> which is dumped with 256 uvarints.</p>"},{"location":"heapdump13/#queuedfinalizer","title":"queuedfinalizer","text":"<ul> <li>uvarint: address of object that has a finalizer</li> <li>uvarint: pointer to FuncVal describing the finalizer</li> <li>uvarint: PC of finalizer entry point</li> <li>uvarint: type of finalizer argument</li> <li>uvarint: type of object</li> </ul> <p>This finalizer is ready to run - the object to which it refers is unreachable.  The runtime system just hasn't gotten around to running it yet.</p>"},{"location":"heapdump13/#data","title":"data","text":"<ul> <li>uvarint: address of the start of the data segment</li> <li>string: contents of the data segment</li> <li>fieldlist: kind and offset of pointer-containing fields in the data segment.</li> </ul>"},{"location":"heapdump13/#bss","title":"bss","text":"<p>Same format as data, but for the bss segment.</p>"},{"location":"heapdump13/#defer","title":"defer","text":"<ul> <li>uvarint: defer record address</li> <li>uvarint: containing goroutine</li> <li>uvarint: argp</li> <li>uvarint: pc</li> <li>uvarint: FuncVal of defer</li> <li>uvarint: PC of defer entry point</li> <li>uvarint: link to next defer record</li> </ul>"},{"location":"heapdump13/#panic","title":"panic","text":"<ul> <li>uvarint: panic record address</li> <li>uvarint: containing goroutine</li> <li>uvarint: type ptr of panic arg eface</li> <li>uvarint: data field of panic arg eface</li> <li>uvarint: ptr to defer record that's currently running</li> <li>uvarint: link to next panic record</li> </ul>"},{"location":"heapdump13/#allocfree-profile-record","title":"alloc/free profile record","text":"<ul> <li>uvarint: record identifier</li> <li>uvarint: size of allocated object</li> <li>uvarint: number of stack frames.  For each frame:</li> <li> <ul> <li>string: function name</li> </ul> </li> <li> <ul> <li>string: file name</li> </ul> </li> <li> <ul> <li>uvarint: line number</li> </ul> </li> <li>uvarint: number of allocations</li> <li>uvarint: number of frees</li> </ul>"},{"location":"heapdump13/#alloc-sample-record","title":"alloc sample record","text":"<ul> <li>uvarint: address of object</li> <li>uvarint: alloc/free profile record identifier</li> </ul>"},{"location":"heapdump14/","title":"heapdump14","text":"<p>Heap dump format for other versions:</p> <ul> <li>Go 1.3: heapdump13</li> <li>Go 1.5 and later: heapdump15-through-heapdump17</li> </ul>"},{"location":"heapdump14/#introduction","title":"Introduction","text":"<p>Go 1.4 has a runtime/debug.WriteHeapDump function that writes all objects in the heap plus additional info (roots, goroutines, finalizers, etc.) to a file.  The format of this file is specified here.</p>"},{"location":"heapdump14/#details","title":"Details","text":"<p>The file starts with the bytes of the string \"go1.4 heap dumpn\".</p> <p>The rest of the file is a sequence of records.  Records can be of several different kinds.  Records will contain the following primitives:   * uvarint - a 64-bit unsigned integer encoded as in encoding/binary.{Put,Read}Uvarint   * string - a uvarint-encoded length followed by that many bytes of data   * bool - a uvarint-encoded 0 for false or 1 for true   * fieldlist - a description of the pointer-bearing portions of a memory region.  It consists of repeated pairs of uvarints encoding a field kind and a field offset, followed by and end-of-list marker.  The possible kinds are 1=Ptr, 2=Iface, and 3=Eface.  0=Eol is the end of list marker.  The end of list marker does not have a corresponding offset.</p> <p>Each record starts with a uvarint-encoded integer describing the type of the record:   * 0 = EOF   * 1 = object   * 2 = otherroot   * 3 = type   * 4 = goroutine   * 5 = stack frame   * 6 = dump params   * 7 = registered finalizer   * 8 = itab   * 9 = OS thread   * 10 = mem stats   * 11 = queued finalizer   * 12 = data segment   * 13 = bss segment   * 14 = defer record   * 15 = panic record   * 16 = alloc/free profile record   * 17 = alloc stack trace sample</p> <p>The remaining fields of each record are type-dependent and are described below.</p>"},{"location":"heapdump14/#eof","title":"EOF","text":"<p>An EOF record has no fields and must appear last.</p>"},{"location":"heapdump14/#object","title":"object","text":"<ul> <li>uvarint: address of object</li> <li>string: contents of object</li> <li>fieldlist: describes pointer-containing fields of the object</li> </ul> <p>The size of the contents string is the size of the containing sizeclass, not the size of the object itself.  As such, contents size may be somewhat bigger than the contained object's type.</p>"},{"location":"heapdump14/#otherroot","title":"otherroot","text":"<ul> <li>string: textual description of where this root came from</li> <li>uvarint: root pointer</li> </ul>"},{"location":"heapdump14/#type","title":"type","text":"<ul> <li>uvarint: address of type descriptor</li> <li>uvarint: size of an object of this type</li> <li>string: name of type</li> <li>bool: whether the data field of an interface containing a value of this type is a pointer</li> </ul>"},{"location":"heapdump14/#goroutine-g","title":"goroutine (G)","text":"<ul> <li>uvarint: address of descriptor</li> <li>uvarint: pointer to the top of stack (the currently running frame, a.k.a. depth 0)</li> <li>uvarint: go routine ID</li> <li>uvarint: the location of the go statement that created this goroutine</li> <li>uvarint: status</li> <li>bool: is a Go routine started by the system</li> <li>bool: is a background Go routine</li> <li>uvarint: approximate time the go routine last started waiting (nanoseconds since the Epoch)</li> <li>string: textual reason why it is waiting</li> <li>uvarint: context pointer of currently running frame</li> <li>uvarint: address of os thread descriptor (M)</li> <li>uvarint: top defer record</li> <li>uvarint: top panic record</li> </ul> <p>Possible statuses:   * 0 = idle   * 1 = runnable   * 3 = syscall   * 4 = waiting</p> <p>The wait fields must be present in all cases, but they only mean something if the status is \"waiting\".</p>"},{"location":"heapdump14/#stack-frame","title":"stack frame","text":"<ul> <li>uvarint: stack pointer (lowest address in frame)</li> <li>uvarint: depth in stack (0 = top of stack)</li> <li>uvarint: stack pointer of child frame (or 0 if none)</li> <li>string: contents of stack frame</li> <li>uvarint: entry pc for function</li> <li>uvarint: current pc for function</li> <li>uvarint: continuation pc for function (where function may resume, if anywhere)</li> <li>string: function name</li> <li>fieldlist: list of kind and offset of pointer-containing fields in this frame</li> </ul>"},{"location":"heapdump14/#dump-params","title":"dump params","text":"<ul> <li>bool: big endian</li> <li>uvarint: pointer size in bytes</li> <li>uvarint: starting address of heap</li> <li>uvarint: ending address of heap</li> <li>uvarint: thechar = architecture specifier</li> <li>string: GOEXPERIMENT environment variable value</li> <li>uvarint: runtime.ncpu</li> </ul>"},{"location":"heapdump14/#finalizer","title":"finalizer","text":"<ul> <li>uvarint: address of object that has a finalizer</li> <li>uvarint: pointer to FuncVal describing the finalizer</li> <li>uvarint: PC of finalizer entry point</li> <li>uvarint: type of finalizer argument</li> <li>uvarint: type of object</li> </ul> <p>This finalizer has been registered with the runtime system, but the object to which it refers was either reachable as of the most recent GC or allocated since the most recent GC.</p>"},{"location":"heapdump14/#itab","title":"itab","text":"<ul> <li>uvarint: Itab address</li> <li>uvarint: address of type descriptor for contained type</li> </ul>"},{"location":"heapdump14/#osthread-m","title":"osthread (M)","text":"<ul> <li>uvarint: address of this os thread descriptor</li> <li>uvarint: Go internal id of thread</li> <li>uvarint: os's id for thread</li> </ul>"},{"location":"heapdump14/#memstats","title":"memstats","text":"<p>Dumps the first 26 fields of MemStats.  All fields are dumped with a uvarint except the 25<sup>th</sup> which is dumped with 256 uvarints.</p>"},{"location":"heapdump14/#queuedfinalizer","title":"queuedfinalizer","text":"<ul> <li>uvarint: address of object that has a finalizer</li> <li>uvarint: pointer to FuncVal describing the finalizer</li> <li>uvarint: PC of finalizer entry point</li> <li>uvarint: type of finalizer argument</li> <li>uvarint: type of object</li> </ul> <p>This finalizer is ready to run - the object to which it refers is unreachable.  The runtime system just hasn't gotten around to running it yet.</p>"},{"location":"heapdump14/#data","title":"data","text":"<ul> <li>uvarint: address of the start of the data segment</li> <li>string: contents of the data segment</li> <li>fieldlist: kind and offset of pointer-containing fields in the data segment.</li> </ul>"},{"location":"heapdump14/#bss","title":"bss","text":"<p>Same format as data, but for the bss segment.</p>"},{"location":"heapdump14/#defer","title":"defer","text":"<ul> <li>uvarint: defer record address</li> <li>uvarint: containing goroutine</li> <li>uvarint: argp</li> <li>uvarint: pc</li> <li>uvarint: FuncVal of defer</li> <li>uvarint: PC of defer entry point</li> <li>uvarint: link to next defer record</li> </ul>"},{"location":"heapdump14/#panic","title":"panic","text":"<ul> <li>uvarint: panic record address</li> <li>uvarint: containing goroutine</li> <li>uvarint: type ptr of panic arg eface</li> <li>uvarint: data field of panic arg eface</li> <li>uvarint: ptr to defer record that's currently running</li> <li>uvarint: link to next panic record</li> </ul>"},{"location":"heapdump14/#allocfree-profile-record","title":"alloc/free profile record","text":"<ul> <li>uvarint: record identifier</li> <li>uvarint: size of allocated object</li> <li>uvarint: number of stack frames.  For each frame:</li> <li> <ul> <li>string: function name</li> </ul> </li> <li> <ul> <li>string: file name</li> </ul> </li> <li> <ul> <li>uvarint: line number</li> </ul> </li> <li>uvarint: number of allocations</li> <li>uvarint: number of frees</li> </ul>"},{"location":"heapdump14/#alloc-sample-record","title":"alloc sample record","text":"<ul> <li>uvarint: address of object</li> <li>uvarint: alloc/free profile record identifier</li> </ul>"},{"location":"heapdump15-through-heapdump17/","title":"heapdump15-through-heapdump17","text":"<p>Heap dump format for other versions:</p> <ul> <li>Go 1.3: heapdump13</li> <li>Go 1.4: heapdump14</li> </ul>"},{"location":"heapdump15-through-heapdump17/#introduction","title":"Introduction","text":"<p>Go 1.5 has a runtime/debug.WriteHeapDump function that writes all objects in the heap plus additional info (roots, goroutines, finalizers, etc.) to a file.  The format of this file is specified here.</p>"},{"location":"heapdump15-through-heapdump17/#details","title":"Details","text":"<p>The file starts with the bytes of the string \"go1.5 heap dumpn\". This description also applies to files starting with \"go1.6 heap dumpn\" and \"go1.7 heap dumpn\".  The go1.6 format is identical to 1.5, and the go1.7 format has one small change described below.</p> <p>The rest of the file is a sequence of records.  Records can be of several different kinds.  Records will contain the following primitives:   * uvarint - a 64-bit unsigned integer encoded as in encoding/binary.{Put,Read}Uvarint   * string - a uvarint-encoded length followed by that many bytes of data   * bool - a uvarint-encoded 0 for false or 1 for true   * fieldlist - a description of the pointer-bearing portions of a memory region.  It consists of repeated pairs of uvarints encoding a field kind and a field offset, followed by an end-of-list marker.  The only possible kind is 1=Ptr. Earlier versions of the heap dump could contain 2=Iface and 3=Eface, but the runtime no longer tracks that information, so it is not present in the dump. Interface values appear as a pair of pointers. 0=Eol is the end of list marker. The end of list marker does not have a corresponding offset.</p> <p>Each record starts with a uvarint-encoded integer describing the type of the record:   * 0 = EOF   * 1 = object   * 2 = otherroot   * 3 = type   * 4 = goroutine   * 5 = stack frame   * 6 = dump params   * 7 = registered finalizer   * 8 = itab   * 9 = OS thread   * 10 = mem stats   * 11 = queued finalizer   * 12 = data segment   * 13 = bss segment   * 14 = defer record   * 15 = panic record   * 16 = alloc/free profile record   * 17 = alloc stack trace sample</p> <p>The remaining fields of each record are type-dependent and are described below.</p>"},{"location":"heapdump15-through-heapdump17/#eof","title":"EOF","text":"<p>An EOF record has no fields and must appear last.</p>"},{"location":"heapdump15-through-heapdump17/#object","title":"object","text":"<ul> <li>uvarint: address of object</li> <li>string: contents of object</li> <li>fieldlist: describes pointer-containing fields of the object</li> </ul> <p>The size of the contents string is the size of the containing sizeclass, not the size of the object itself.  As such, contents size may be somewhat bigger than the contained object's type.</p>"},{"location":"heapdump15-through-heapdump17/#otherroot","title":"otherroot","text":"<ul> <li>string: textual description of where this root came from</li> <li>uvarint: root pointer</li> </ul>"},{"location":"heapdump15-through-heapdump17/#type","title":"type","text":"<ul> <li>uvarint: address of type descriptor</li> <li>uvarint: size of an object of this type</li> <li>string: name of type</li> <li>bool: whether the data field of an interface containing a value of this type has type T (false) or *T (true)</li> </ul>"},{"location":"heapdump15-through-heapdump17/#goroutine-g","title":"goroutine (G)","text":"<ul> <li>uvarint: address of descriptor</li> <li>uvarint: pointer to the top of stack (the currently running frame, a.k.a. depth 0)</li> <li>uvarint: go routine ID</li> <li>uvarint: the location of the go statement that created this goroutine</li> <li>uvarint: status</li> <li>bool: is a Go routine started by the system</li> <li>bool: is a background Go routine</li> <li>uvarint: approximate time the go routine last started waiting (nanoseconds since the Epoch)</li> <li>string: textual reason why it is waiting</li> <li>uvarint: context pointer of currently running frame</li> <li>uvarint: address of os thread descriptor (M)</li> <li>uvarint: top defer record</li> <li>uvarint: top panic record</li> </ul> <p>Possible statuses:   * 0 = idle   * 1 = runnable   * 3 = syscall   * 4 = waiting</p> <p>The wait fields must be present in all cases, but they only mean something if the status is \"waiting\".</p>"},{"location":"heapdump15-through-heapdump17/#stack-frame","title":"stack frame","text":"<ul> <li>uvarint: stack pointer (lowest address in frame)</li> <li>uvarint: depth in stack (0 = top of stack)</li> <li>uvarint: stack pointer of child frame (or 0 if none)</li> <li>string: contents of stack frame</li> <li>uvarint: entry pc for function</li> <li>uvarint: current pc for function</li> <li>uvarint: continuation pc for function (where function may resume, if anywhere)</li> <li>string: function name</li> <li>fieldlist: list of kind and offset of pointer-containing fields in this frame</li> </ul>"},{"location":"heapdump15-through-heapdump17/#dump-params","title":"dump params","text":"<ul> <li>bool: big endian</li> <li>uvarint: pointer size in bytes</li> <li>uvarint: starting address of heap</li> <li>uvarint: ending address of heap</li> <li>string: architecture name</li> <li>string: GOEXPERIMENT environment variable value</li> <li>uvarint: runtime.ncpu</li> </ul>"},{"location":"heapdump15-through-heapdump17/#finalizer","title":"finalizer","text":"<ul> <li>uvarint: address of object that has a finalizer</li> <li>uvarint: pointer to FuncVal describing the finalizer</li> <li>uvarint: PC of finalizer entry point</li> <li>uvarint: type of finalizer argument</li> <li>uvarint: type of object</li> </ul> <p>This finalizer has been registered with the runtime system, but the object to which it refers was either reachable as of the most recent GC or allocated since the most recent GC.</p>"},{"location":"heapdump15-through-heapdump17/#itab","title":"itab","text":"<ul> <li>uvarint: Itab address</li> <li>uvarint: address of type descriptor for contained type<ul> <li>Up to go1.6, the type is always a pointer type, and represents the type of the itab.data field.</li> <li>From go1.7 and beyond, the type is the type stored in the interface.  To decide whether the itab.data field is T or *T requires looking at the last boolean in the referenced type's descriptor.</li> </ul> </li> </ul>"},{"location":"heapdump15-through-heapdump17/#osthread-m","title":"osthread (M)","text":"<ul> <li>uvarint: address of this os thread descriptor</li> <li>uvarint: Go internal id of thread</li> <li>uvarint: os's id for thread</li> </ul>"},{"location":"heapdump15-through-heapdump17/#memstats","title":"memstats","text":"<p>Records the following fields of runtime.MemStats:   * uvarint: Alloc   * uvarint: TotalAlloc   * uvarint: Sys   * uvarint: Lookups   * uvarint: Mallocs   * uvarint: Frees   * uvarint: HeapAlloc   * uvarint: HeapSys   * uvarint: HeapIdle   * uvarint: HeapInuse   * uvarint: HeapReleased   * uvarint: HeapObjects   * uvarint: StackInuse   * uvarint: StackSys   * uvarint: MSpanInuse   * uvarint: MSpanSys   * uvarint: MCacheInuse   * uvarint: MCacheSys   * uvarint: BuckHashSys   * uvarint: GCSys   * uvarint: OtherSys   * uvarint: NextGC   * uvarint: LastGC   * uvarint: PauseTotalNs   * 256 uvarints: PauseNs   * uvarint: NumGC</p>"},{"location":"heapdump15-through-heapdump17/#queuedfinalizer","title":"queuedfinalizer","text":"<ul> <li>uvarint: address of object that has a finalizer</li> <li>uvarint: pointer to FuncVal describing the finalizer</li> <li>uvarint: PC of finalizer entry point</li> <li>uvarint: type of finalizer argument</li> <li>uvarint: type of object</li> </ul> <p>This finalizer is ready to run - the object to which it refers is unreachable.  The runtime system just hasn't gotten around to running it yet.</p>"},{"location":"heapdump15-through-heapdump17/#data","title":"data","text":"<ul> <li>uvarint: address of the start of the data segment</li> <li>string: contents of the data segment</li> <li>fieldlist: kind and offset of pointer-containing fields in the data segment.</li> </ul>"},{"location":"heapdump15-through-heapdump17/#bss","title":"bss","text":"<p>Same format as data, but for the bss segment.</p>"},{"location":"heapdump15-through-heapdump17/#defer","title":"defer","text":"<ul> <li>uvarint: defer record address</li> <li>uvarint: containing goroutine</li> <li>uvarint: argp</li> <li>uvarint: pc</li> <li>uvarint: FuncVal of defer</li> <li>uvarint: PC of defer entry point</li> <li>uvarint: link to next defer record</li> </ul>"},{"location":"heapdump15-through-heapdump17/#panic","title":"panic","text":"<ul> <li>uvarint: panic record address</li> <li>uvarint: containing goroutine</li> <li>uvarint: type ptr of panic arg eface</li> <li>uvarint: data field of panic arg eface</li> <li>uvarint: ptr to defer record that's currently running</li> <li>uvarint: link to next panic record</li> </ul>"},{"location":"heapdump15-through-heapdump17/#allocfree-profile-record","title":"alloc/free profile record","text":"<ul> <li>uvarint: record identifier</li> <li>uvarint: size of allocated object</li> <li>uvarint: number of stack frames.  For each frame:<ul> <li>string: function name</li> <li>string: file name</li> <li>uvarint: line number</li> </ul> </li> <li>uvarint: number of allocations</li> <li>uvarint: number of frees</li> </ul>"},{"location":"heapdump15-through-heapdump17/#alloc-sample-record","title":"alloc sample record","text":"<ul> <li>uvarint: address of object</li> <li>uvarint: alloc/free profile record identifier</li> </ul>"}]}